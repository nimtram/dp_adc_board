
dp_adc_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014180  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08014430  08014430  00024430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080145f0  080145f0  000245f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080145f8  080145f8  000245f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080145fc  080145fc  000245fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08014600  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008c24  2400007c  0801467c  0003007c  2**2
                  ALLOC
  8 .sdram_section 00000c00  c0000000  c0000000  00040000  2**2
                  ALLOC
  9 ._user_heap_stack 00000c00  24008ca0  24008ca0  00038ca0  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026b3e  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000042a6  00000000  00000000  00056be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001cf8  00000000  00000000  0005ae90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001b40  00000000  00000000  0005cb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036080  00000000  00000000  0005e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028570  00000000  00000000  00094748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00150966  00000000  00000000  000bccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0020d61e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007eb4  00000000  00000000  0020d670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08014418 	.word	0x08014418

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	08014418 	.word	0x08014418

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <SDRAM_Startup_Sequence>:
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];
uint32_t uwIndex = 0;
__IO uint32_t uwWriteReadStatus = 0;

void SDRAM_Startup_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
  /* Program the SDRAM external device */
  SDRAM_Initialization_Sequence(hsdram, Command);
 80006ae:	6839      	ldr	r1, [r7, #0]
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f875 	bl	80007a0 <SDRAM_Initialization_Sequence>

  /*##-2- SDRAM memory read/write access #####################################*/
  //*(__IO uint32_t*) (TEST_WRITE) = 0x1;

  /* Fill the buffer to write */
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0xA244250F);
 80006b6:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SDRAM_Startup_Sequence+0xe4>)
 80006b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006bc:	4833      	ldr	r0, [pc, #204]	; (800078c <SDRAM_Startup_Sequence+0xe8>)
 80006be:	f000 f8cc 	bl	800085a <Fill_Buffer>

    /* Fill the Read buffer */
  Fill_Buffer(aRxBuffer, BUFFER_SIZE, 0xBBBBBBBB);
 80006c2:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4831      	ldr	r0, [pc, #196]	; (8000790 <SDRAM_Startup_Sequence+0xec>)
 80006cc:	f000 f8c5 	bl	800085a <Fill_Buffer>

  /* Write data to the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	e010      	b.n	80006fa <SDRAM_Startup_Sequence+0x56>
  {
    *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex) = aTxBuffer[uwIndex];
 80006d8:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 80006de:	6819      	ldr	r1, [r3, #0]
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SDRAM_Startup_Sequence+0xf4>)
 80006e2:	440b      	add	r3, r1
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4619      	mov	r1, r3
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SDRAM_Startup_Sequence+0xe8>)
 80006ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ee:	600b      	str	r3, [r1, #0]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 80006f8:	6013      	str	r3, [r2, #0]
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000702:	d3e9      	bcc.n	80006d8 <SDRAM_Startup_Sequence+0x34>
  }

  /* Read back data from the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	e010      	b.n	800072e <SDRAM_Startup_Sequence+0x8a>
  {
    aRxBuffer[uwIndex] = *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex);
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SDRAM_Startup_Sequence+0xf4>)
 8000712:	4413      	add	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	461a      	mov	r2, r3
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	491c      	ldr	r1, [pc, #112]	; (8000790 <SDRAM_Startup_Sequence+0xec>)
 8000720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 800072c:	6013      	str	r3, [r2, #0]
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000736:	d3e9      	bcc.n	800070c <SDRAM_Startup_Sequence+0x68>
  }

  /*##-3- Checking data integrity ############################################*/

  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	e015      	b.n	800076c <SDRAM_Startup_Sequence+0xc8>
  {
    if (aRxBuffer[uwIndex] != aTxBuffer[uwIndex])
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <SDRAM_Startup_Sequence+0xec>)
 8000746:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	490f      	ldr	r1, [pc, #60]	; (800078c <SDRAM_Startup_Sequence+0xe8>)
 8000750:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000754:	429a      	cmp	r2, r3
 8000756:	d004      	beq.n	8000762 <SDRAM_Startup_Sequence+0xbe>
    {
      uwWriteReadStatus++;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <SDRAM_Startup_Sequence+0xf8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <SDRAM_Startup_Sequence+0xf8>)
 8000760:	6013      	str	r3, [r2, #0]
  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <SDRAM_Startup_Sequence+0xf0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000774:	d203      	bcs.n	800077e <SDRAM_Startup_Sequence+0xda>
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <SDRAM_Startup_Sequence+0xf8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0e0      	beq.n	8000740 <SDRAM_Startup_Sequence+0x9c>
    }
  }
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	a244250f 	.word	0xa244250f
 800078c:	24000098 	.word	0x24000098
 8000790:	24004098 	.word	0x24004098
 8000794:	24008098 	.word	0x24008098
 8000798:	30000200 	.word	0x30000200
 800079c:	2400809c 	.word	0x2400809c

080007a0 <SDRAM_Initialization_Sequence>:



void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2201      	movs	r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2210      	movs	r2, #16
 80007b8:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2201      	movs	r2, #1
 80007be:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80007c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ca:	6839      	ldr	r1, [r7, #0]
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f00a fc77 	bl	800b0c0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f002 fd10 	bl	80031f8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2202      	movs	r2, #2
 80007dc:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2210      	movs	r2, #16
 80007e2:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2201      	movs	r2, #1
 80007e8:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80007f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f4:	6839      	ldr	r1, [r7, #0]
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f00a fc62 	bl	800b0c0 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2203      	movs	r2, #3
 8000800:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	2210      	movs	r2, #16
 8000806:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	2208      	movs	r2, #8
 800080c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000818:	6839      	ldr	r1, [r7, #0]
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f00a fc50 	bl	800b0c0 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000820:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000824:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	2204      	movs	r2, #4
 800082a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2210      	movs	r2, #16
 8000830:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2201      	movs	r2, #1
 8000836:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800083e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000842:	6839      	ldr	r1, [r7, #0]
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f00a fc3b 	bl	800b0c0 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, 230);
 800084a:	21e6      	movs	r1, #230	; 0xe6
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f00a fc6c 	bl	800b12a <HAL_SDRAM_ProgramRefreshRate>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <Fill_Buffer>:

void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 800085a:	b480      	push	{r7}
 800085c:	b087      	sub	sp, #28
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	e00a      	b.n	8000886 <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	4413      	add	r3, r2
 8000878:	6979      	ldr	r1, [r7, #20]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	440a      	add	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	3301      	adds	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	429a      	cmp	r2, r3
 800088c:	d3f0      	bcc.n	8000870 <Fill_Buffer+0x16>
  }
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	371c      	adds	r7, #28
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f002 fc18 	bl	80030d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 fa16 	bl	8000cd4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008a8:	f000 fa90 	bl	8000dcc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
//TODO: need to move DMA init everytime up after GPIO init!!
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ac:	f000 fe2c 	bl	8001508 <MX_GPIO_Init>
  MX_DMA_Init();
 80008b0:	f000 fd78 	bl	80013a4 <MX_DMA_Init>
  MX_SPI1_Init();
 80008b4:	f000 fada 	bl	8000e6c <MX_SPI1_Init>
  MX_TIM1_Init();
 80008b8:	f000 fbe0 	bl	800107c <MX_TIM1_Init>
  MX_UART4_Init();
 80008bc:	f000 fd24 	bl	8001308 <MX_UART4_Init>
  MX_FMC_Init();
 80008c0:	f000 fdd0 	bl	8001464 <MX_FMC_Init>
  MX_SPI2_Init();
 80008c4:	f000 fb2a 	bl	8000f1c <MX_SPI2_Init>
  MX_SPI4_Init();
 80008c8:	f000 fb80 	bl	8000fcc <MX_SPI4_Init>
  MX_TIM2_Init();
 80008cc:	f000 fc82 	bl	80011d4 <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 80008d0:	f000 faae 	bl	8000e30 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008d4:	f010 fd10 	bl	80112f8 <MX_FATFS_Init>
  MX_TIM16_Init();
 80008d8:	f000 fcee 	bl	80012b8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // setting up timer for time measuring
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80008dc:	4bc8      	ldr	r3, [pc, #800]	; (8000c00 <main+0x364>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	4ac7      	ldr	r2, [pc, #796]	; (8000c00 <main+0x364>)
 80008e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008e6:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80008e8:	4bc6      	ldr	r3, [pc, #792]	; (8000c04 <main+0x368>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80008ee:	4bc5      	ldr	r3, [pc, #788]	; (8000c04 <main+0x368>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4ac4      	ldr	r2, [pc, #784]	; (8000c04 <main+0x368>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 80008fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fe:	f002 fc7b 	bl	80031f8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SDRAM_Startup_Sequence(&hsdram1, &fmc_command);
 8000902:	49c1      	ldr	r1, [pc, #772]	; (8000c08 <main+0x36c>)
 8000904:	48c1      	ldr	r0, [pc, #772]	; (8000c0c <main+0x370>)
 8000906:	f7ff fecd 	bl	80006a4 <SDRAM_Startup_Sequence>
  sdCardInitError = sd_card_init();
 800090a:	f001 f897 	bl	8001a3c <sd_card_init>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4bbf      	ldr	r3, [pc, #764]	; (8000c10 <main+0x374>)
 8000914:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 8000916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091a:	f002 fc6d 	bl	80031f8 <HAL_Delay>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 4);
 800091e:	2204      	movs	r2, #4
 8000920:	2104      	movs	r1, #4
 8000922:	2017      	movs	r0, #23
 8000924:	f002 fd8b 	bl	800343e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 8000928:	2201      	movs	r2, #1
 800092a:	2101      	movs	r1, #1
 800092c:	2028      	movs	r0, #40	; 0x28
 800092e:	f002 fd86 	bl	800343e <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000932:	2017      	movs	r0, #23
 8000934:	f002 fdab 	bl	800348e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000938:	2028      	movs	r0, #40	; 0x28
 800093a:	f002 fda8 	bl	800348e <HAL_NVIC_DisableIRQ>

  spi1_soft_reset();
 800093e:	f001 fbb3 	bl	80020a8 <spi1_soft_reset>
  spi2_soft_reset();
 8000942:	f001 fbd7 	bl	80020f4 <spi2_soft_reset>
  spi4_soft_reset();
 8000946:	f001 fbfb 	bl	8002140 <spi4_soft_reset>
  spi1_adc_init(SPS_VALUE_5);
 800094a:	4bb2      	ldr	r3, [pc, #712]	; (8000c14 <main+0x378>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f001 f912 	bl	8001b78 <spi1_adc_init>
  spi2_adc_init(SPS_VALUE_5);
 8000954:	4baf      	ldr	r3, [pc, #700]	; (8000c14 <main+0x378>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f001 f9e5 	bl	8001d28 <spi2_adc_init>
  spi4_adc_init(SPS_VALUE_5);
 800095e:	4bad      	ldr	r3, [pc, #692]	; (8000c14 <main+0x378>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fab8 	bl	8001ed8 <spi4_adc_init>
//  readRegister();
//  t1 = DWT->CYCCNT;
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8000968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096c:	2220      	movs	r2, #32
 800096e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8000972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000976:	2240      	movs	r2, #64	; 0x40
 8000978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 800097c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000980:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000988:	2017      	movs	r0, #23
 800098a:	f002 fd72 	bl	8003472 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098e:	2028      	movs	r0, #40	; 0x28
 8000990:	f002 fd6f 	bl	8003472 <HAL_NVIC_EnableIRQ>

  // uart IT enable
  HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	49a0      	ldr	r1, [pc, #640]	; (8000c18 <main+0x37c>)
 8000998:	48a0      	ldr	r0, [pc, #640]	; (8000c1c <main+0x380>)
 800099a:	f00d fa5b 	bl	800de54 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT (&huart5, rxUart4Buffer, 1);

  // LED timer enable
  HAL_TIM_Base_Start_IT(&htim16);
 800099e:	48a0      	ldr	r0, [pc, #640]	; (8000c20 <main+0x384>)
 80009a0:	f00b fc98 	bl	800c2d4 <HAL_TIM_Base_Start_IT>

  // FIXME main
  //sd_card_test_script();

  //initial setup:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2120      	movs	r1, #32
 80009a8:	489e      	ldr	r0, [pc, #632]	; (8000c24 <main+0x388>)
 80009aa:	f005 fe27 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2110      	movs	r1, #16
 80009b2:	489d      	ldr	r0, [pc, #628]	; (8000c28 <main+0x38c>)
 80009b4:	f005 fe22 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	489b      	ldr	r0, [pc, #620]	; (8000c2c <main+0x390>)
 80009be:	f005 fe1d 	bl	80065fc <HAL_GPIO_WritePin>

  if (sdCardInitError == true){
 80009c2:	4b93      	ldr	r3, [pc, #588]	; (8000c10 <main+0x374>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <main+0x136>
    setColorLED(red);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 ffe4 	bl	8001998 <setColorLED>
 80009d0:	e002      	b.n	80009d8 <main+0x13c>
  }else{
    setColorLED(blue);
 80009d2:	2002      	movs	r0, #2
 80009d4:	f000 ffe0 	bl	8001998 <setColorLED>
  }

  //run all before main loop
  run_all_adc();
 80009d8:	f001 fb4a 	bl	8002070 <run_all_adc>

    while (1){
      if(spiCommonBufferCounter < findMin(spi1ValuesBufferCounter,spi2ValuesBufferCounter,spi4ValuesBufferCounter)){
 80009dc:	4b94      	ldr	r3, [pc, #592]	; (8000c30 <main+0x394>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a94      	ldr	r2, [pc, #592]	; (8000c34 <main+0x398>)
 80009e2:	6811      	ldr	r1, [r2, #0]
 80009e4:	4a94      	ldr	r2, [pc, #592]	; (8000c38 <main+0x39c>)
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 ffb9 	bl	8001960 <findMin>
 80009ee:	4602      	mov	r2, r0
 80009f0:	4b92      	ldr	r3, [pc, #584]	; (8000c3c <main+0x3a0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d93a      	bls.n	8000a6e <main+0x1d2>
        spi_send_all_three_values(spi1ValuesStorage[spiCommonBufferCounter],spi2ValuesStorage[spiCommonBufferCounter],spi4ValuesStorage[spiCommonBufferCounter]);
 80009f8:	4b90      	ldr	r3, [pc, #576]	; (8000c3c <main+0x3a0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a90      	ldr	r2, [pc, #576]	; (8000c40 <main+0x3a4>)
 80009fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a02:	4b8e      	ldr	r3, [pc, #568]	; (8000c3c <main+0x3a0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a8f      	ldr	r2, [pc, #572]	; (8000c44 <main+0x3a8>)
 8000a08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000a0c:	4b8b      	ldr	r3, [pc, #556]	; (8000c3c <main+0x3a0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a8d      	ldr	r2, [pc, #564]	; (8000c48 <main+0x3ac>)
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	461a      	mov	r2, r3
 8000a18:	f001 fbb6 	bl	8002188 <spi_send_all_three_values>


        if((sdCardWriteEnable == true) && (sdCardInitError == false) && (sdCardOpenFileError == false) ){
 8000a1c:	4b8b      	ldr	r3, [pc, #556]	; (8000c4c <main+0x3b0>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d01f      	beq.n	8000a64 <main+0x1c8>
 8000a24:	4b7a      	ldr	r3, [pc, #488]	; (8000c10 <main+0x374>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	f083 0301 	eor.w	r3, r3, #1
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d018      	beq.n	8000a64 <main+0x1c8>
 8000a32:	4b87      	ldr	r3, [pc, #540]	; (8000c50 <main+0x3b4>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	f083 0301 	eor.w	r3, r3, #1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d011      	beq.n	8000a64 <main+0x1c8>
          sdCardWriteError = sd_card_write_to_opened_file("sdfasf");
 8000a40:	4884      	ldr	r0, [pc, #528]	; (8000c54 <main+0x3b8>)
 8000a42:	f001 f867 	bl	8001b14 <sd_card_write_to_opened_file>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b83      	ldr	r3, [pc, #524]	; (8000c58 <main+0x3bc>)
 8000a4c:	701a      	strb	r2, [r3, #0]
          if (sdCardWriteError == true){
 8000a4e:	4b82      	ldr	r3, [pc, #520]	; (8000c58 <main+0x3bc>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <main+0x1c2>
            setColorLED(red);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 ff9e 	bl	8001998 <setColorLED>
 8000a5c:	e002      	b.n	8000a64 <main+0x1c8>
          }else{
            setColorLED(green);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f000 ff9a 	bl	8001998 <setColorLED>
          }
        }


      spiCommonBufferCounter++;
 8000a64:	4b75      	ldr	r3, [pc, #468]	; (8000c3c <main+0x3a0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4a74      	ldr	r2, [pc, #464]	; (8000c3c <main+0x3a0>)
 8000a6c:	6013      	str	r3, [r2, #0]
      }




      if (uartNewCommand == true){
 8000a6e:	4b7b      	ldr	r3, [pc, #492]	; (8000c5c <main+0x3c0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0b1      	beq.n	80009dc <main+0x140>
        switch (uartCommand) {
 8000a78:	4b79      	ldr	r3, [pc, #484]	; (8000c60 <main+0x3c4>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	3b30      	subs	r3, #48	; 0x30
 8000a80:	2b41      	cmp	r3, #65	; 0x41
 8000a82:	f200 8113 	bhi.w	8000cac <main+0x410>
 8000a86:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <main+0x1f0>)
 8000a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8c:	08000c71 	.word	0x08000c71
 8000a90:	08000c7d 	.word	0x08000c7d
 8000a94:	08000c89 	.word	0x08000c89
 8000a98:	08000c95 	.word	0x08000c95
 8000a9c:	08000ca1 	.word	0x08000ca1
 8000aa0:	08000cad 	.word	0x08000cad
 8000aa4:	08000cad 	.word	0x08000cad
 8000aa8:	08000cad 	.word	0x08000cad
 8000aac:	08000cad 	.word	0x08000cad
 8000ab0:	08000cad 	.word	0x08000cad
 8000ab4:	08000cad 	.word	0x08000cad
 8000ab8:	08000cad 	.word	0x08000cad
 8000abc:	08000cad 	.word	0x08000cad
 8000ac0:	08000cad 	.word	0x08000cad
 8000ac4:	08000cad 	.word	0x08000cad
 8000ac8:	08000cad 	.word	0x08000cad
 8000acc:	08000cad 	.word	0x08000cad
 8000ad0:	08000cad 	.word	0x08000cad
 8000ad4:	08000cad 	.word	0x08000cad
 8000ad8:	08000cad 	.word	0x08000cad
 8000adc:	08000cad 	.word	0x08000cad
 8000ae0:	08000cad 	.word	0x08000cad
 8000ae4:	08000cad 	.word	0x08000cad
 8000ae8:	08000cad 	.word	0x08000cad
 8000aec:	08000cad 	.word	0x08000cad
 8000af0:	08000cad 	.word	0x08000cad
 8000af4:	08000cad 	.word	0x08000cad
 8000af8:	08000cad 	.word	0x08000cad
 8000afc:	08000cad 	.word	0x08000cad
 8000b00:	08000cad 	.word	0x08000cad
 8000b04:	08000cad 	.word	0x08000cad
 8000b08:	08000cad 	.word	0x08000cad
 8000b0c:	08000cad 	.word	0x08000cad
 8000b10:	08000cad 	.word	0x08000cad
 8000b14:	08000cad 	.word	0x08000cad
 8000b18:	08000cad 	.word	0x08000cad
 8000b1c:	08000cad 	.word	0x08000cad
 8000b20:	08000cad 	.word	0x08000cad
 8000b24:	08000cad 	.word	0x08000cad
 8000b28:	08000cad 	.word	0x08000cad
 8000b2c:	08000cad 	.word	0x08000cad
 8000b30:	08000cad 	.word	0x08000cad
 8000b34:	08000cad 	.word	0x08000cad
 8000b38:	08000cad 	.word	0x08000cad
 8000b3c:	08000cad 	.word	0x08000cad
 8000b40:	08000cad 	.word	0x08000cad
 8000b44:	08000cad 	.word	0x08000cad
 8000b48:	08000cad 	.word	0x08000cad
 8000b4c:	08000cad 	.word	0x08000cad
 8000b50:	08000b95 	.word	0x08000b95
 8000b54:	08000ba1 	.word	0x08000ba1
 8000b58:	08000bad 	.word	0x08000bad
 8000b5c:	08000bb9 	.word	0x08000bb9
 8000b60:	08000bc5 	.word	0x08000bc5
 8000b64:	08000bd1 	.word	0x08000bd1
 8000b68:	08000cad 	.word	0x08000cad
 8000b6c:	08000cad 	.word	0x08000cad
 8000b70:	08000cad 	.word	0x08000cad
 8000b74:	08000cad 	.word	0x08000cad
 8000b78:	08000cad 	.word	0x08000cad
 8000b7c:	08000cad 	.word	0x08000cad
 8000b80:	08000cad 	.word	0x08000cad
 8000b84:	08000cad 	.word	0x08000cad
 8000b88:	08000cad 	.word	0x08000cad
 8000b8c:	08000bdd 	.word	0x08000bdd
 8000b90:	08000c65 	.word	0x08000c65
          case 'a': // multiplexer X -> 0
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2120      	movs	r1, #32
 8000b98:	4822      	ldr	r0, [pc, #136]	; (8000c24 <main+0x388>)
 8000b9a:	f005 fd2f 	bl	80065fc <HAL_GPIO_WritePin>
            break;
 8000b9e:	e086      	b.n	8000cae <main+0x412>
          case 'b': // multiplexer X -> 1
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	481f      	ldr	r0, [pc, #124]	; (8000c24 <main+0x388>)
 8000ba6:	f005 fd29 	bl	80065fc <HAL_GPIO_WritePin>
            break;
 8000baa:	e080      	b.n	8000cae <main+0x412>

          case 'c': // multiplexer Y -> 0
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2110      	movs	r1, #16
 8000bb0:	481d      	ldr	r0, [pc, #116]	; (8000c28 <main+0x38c>)
 8000bb2:	f005 fd23 	bl	80065fc <HAL_GPIO_WritePin>
            break;
 8000bb6:	e07a      	b.n	8000cae <main+0x412>

          case 'd': // multiplexer Y -> 1
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	481a      	ldr	r0, [pc, #104]	; (8000c28 <main+0x38c>)
 8000bbe:	f005 fd1d 	bl	80065fc <HAL_GPIO_WritePin>
            break;
 8000bc2:	e074      	b.n	8000cae <main+0x412>

          case 'e': // multiplexer Z -> 0
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4818      	ldr	r0, [pc, #96]	; (8000c2c <main+0x390>)
 8000bca:	f005 fd17 	bl	80065fc <HAL_GPIO_WritePin>
            break;
 8000bce:	e06e      	b.n	8000cae <main+0x412>

          case 'f': // multiplexer Z -> 1
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4815      	ldr	r0, [pc, #84]	; (8000c2c <main+0x390>)
 8000bd6:	f005 fd11 	bl	80065fc <HAL_GPIO_WritePin>
            break;
 8000bda:	e068      	b.n	8000cae <main+0x412>

          case 'p':
            sdCardOpenFileError = sd_card_open_file();
 8000bdc:	f000 ff4e 	bl	8001a7c <sd_card_open_file>
 8000be0:	4603      	mov	r3, r0
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <main+0x3b4>)
 8000be6:	701a      	strb	r2, [r3, #0]
            if (sdCardOpenFileError == true){
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <main+0x3b4>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <main+0x35c>
              setColorLED(red);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f000 fed1 	bl	8001998 <setColorLED>
            }else{
              sdCardWriteEnable = true;
            }
            break;
 8000bf6:	e05a      	b.n	8000cae <main+0x412>
              sdCardWriteEnable = true;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <main+0x3b0>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
            break;
 8000bfe:	e056      	b.n	8000cae <main+0x412>
 8000c00:	e000edf0 	.word	0xe000edf0
 8000c04:	e0001000 	.word	0xe0001000
 8000c08:	240087a4 	.word	0x240087a4
 8000c0c:	24008770 	.word	0x24008770
 8000c10:	240087b5 	.word	0x240087b5
 8000c14:	24000000 	.word	0x24000000
 8000c18:	240087d8 	.word	0x240087d8
 8000c1c:	24008668 	.word	0x24008668
 8000c20:	2400861c 	.word	0x2400861c
 8000c24:	58020000 	.word	0x58020000
 8000c28:	58020800 	.word	0x58020800
 8000c2c:	58020400 	.word	0x58020400
 8000c30:	240087bc 	.word	0x240087bc
 8000c34:	240087c0 	.word	0x240087c0
 8000c38:	240087c4 	.word	0x240087c4
 8000c3c:	240087c8 	.word	0x240087c8
 8000c40:	c0000000 	.word	0xc0000000
 8000c44:	c0000400 	.word	0xc0000400
 8000c48:	c0000800 	.word	0xc0000800
 8000c4c:	240087b4 	.word	0x240087b4
 8000c50:	240087b7 	.word	0x240087b7
 8000c54:	08014430 	.word	0x08014430
 8000c58:	240087b6 	.word	0x240087b6
 8000c5c:	240087da 	.word	0x240087da
 8000c60:	240087d9 	.word	0x240087d9

          case 'q':
            sdCardWriteEnable = false;
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <main+0x41c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
            sd_card_close_file();
 8000c6a:	f000 ff7b 	bl	8001b64 <sd_card_close_file>
            break;
 8000c6e:	e01e      	b.n	8000cae <main+0x412>

         // Numbers reserved for SPS values
          case '0':
            //set SPS to 5
            setNewSPStoAllADCs(SPS_VALUE_5);
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <main+0x420>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 facd 	bl	8002214 <setNewSPStoAllADCs>
            break;
 8000c7a:	e018      	b.n	8000cae <main+0x412>
          case '1':
            //set SPS to 20
            setNewSPStoAllADCs(SPS_VALUE_20);
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <main+0x424>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fac7 	bl	8002214 <setNewSPStoAllADCs>
            break;
 8000c86:	e012      	b.n	8000cae <main+0x412>
          case '2':
            //set SPS to 100
            setNewSPStoAllADCs(SPS_VALUE_100);
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <main+0x428>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 fac1 	bl	8002214 <setNewSPStoAllADCs>
            break;
 8000c92:	e00c      	b.n	8000cae <main+0x412>
          case '3':
            //set SPS to 500
            setNewSPStoAllADCs(SPS_VALUE_500);
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <main+0x42c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fabb 	bl	8002214 <setNewSPStoAllADCs>
            break;
 8000c9e:	e006      	b.n	8000cae <main+0x412>
          case '4':
            //set SPS to 1000
            setNewSPStoAllADCs(SPS_VALUE_1000);
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <main+0x430>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fab5 	bl	8002214 <setNewSPStoAllADCs>
            break;
 8000caa:	e000      	b.n	8000cae <main+0x412>
          default:
            break;
 8000cac:	bf00      	nop
        }
        uartNewCommand = false;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <main+0x434>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
      if(spiCommonBufferCounter < findMin(spi1ValuesBufferCounter,spi2ValuesBufferCounter,spi4ValuesBufferCounter)){
 8000cb4:	e692      	b.n	80009dc <main+0x140>
 8000cb6:	bf00      	nop
 8000cb8:	240087b4 	.word	0x240087b4
 8000cbc:	24000000 	.word	0x24000000
 8000cc0:	24000001 	.word	0x24000001
 8000cc4:	24000002 	.word	0x24000002
 8000cc8:	24000003 	.word	0x24000003
 8000ccc:	24000004 	.word	0x24000004
 8000cd0:	240087da 	.word	0x240087da

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b09c      	sub	sp, #112	; 0x70
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	224c      	movs	r2, #76	; 0x4c
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f012 ff22 	bl	8013b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2220      	movs	r2, #32
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f012 ff1c 	bl	8013b2c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000cf4:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <SystemClock_Config+0xf0>)
 8000cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f005 fcca 	bl	8006698 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <SystemClock_Config+0xf4>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a2e      	ldr	r2, [pc, #184]	; (8000dc8 <SystemClock_Config+0xf4>)
 8000d0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <SystemClock_Config+0xf4>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d20:	bf00      	nop
 8000d22:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <SystemClock_Config+0xf4>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d2e:	d1f8      	bne.n	8000d22 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <SystemClock_Config+0xf0>)
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <SystemClock_Config+0xf0>)
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d44:	2340      	movs	r3, #64	; 0x40
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d50:	2304      	movs	r3, #4
 8000d52:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000d54:	2323      	movs	r3, #35	; 0x23
 8000d56:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d64:	230c      	movs	r3, #12
 8000d66:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4618      	mov	r0, r3
 8000d76:	f005 fcc9 	bl	800670c <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d80:	f000 fe56 	bl	8001a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d84:	233f      	movs	r3, #63	; 0x3f
 8000d86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d98:	2340      	movs	r3, #64	; 0x40
 8000d9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000da2:	2340      	movs	r3, #64	; 0x40
 8000da4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2107      	movs	r1, #7
 8000daa:	4618      	mov	r0, r3
 8000dac:	f006 f8b4 	bl	8006f18 <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000db6:	f000 fe3b 	bl	8001a30 <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3770      	adds	r7, #112	; 0x70
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	58024800 	.word	0x58024800

08000dcc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b0ae      	sub	sp, #184	; 0xb8
 8000dd0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	22b8      	movs	r2, #184	; 0xb8
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f012 fea7 	bl	8013b2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <PeriphCommonClock_Config+0x60>)
 8000de0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000de2:	2304      	movs	r3, #4
 8000de4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000de6:	2308      	movs	r3, #8
 8000de8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000df6:	23c0      	movs	r3, #192	; 0xc0
 8000df8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 fc0c 	bl	8007630 <HAL_RCCEx_PeriphCLKConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000e1e:	f000 fe07 	bl	8001a30 <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	37b8      	adds	r7, #184	; 0xb8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	81010000 	.word	0x81010000

08000e30 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_SDMMC1_SD_Init+0x34>)
 8000e36:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <MX_SDMMC1_SD_Init+0x38>)
 8000e38:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_SDMMC1_SD_Init+0x34>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_SDMMC1_SD_Init+0x34>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_SDMMC1_SD_Init+0x34>)
 8000e48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e4c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <MX_SDMMC1_SD_Init+0x34>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 64;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <MX_SDMMC1_SD_Init+0x34>)
 8000e56:	2240      	movs	r2, #64	; 0x40
 8000e58:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	240080a0 	.word	0x240080a0
 8000e68:	52007000 	.word	0x52007000

08000e6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000e72:	4a29      	ldr	r2, [pc, #164]	; (8000f18 <MX_SPI1_Init+0xac>)
 8000e74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000e78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000e86:	2207      	movs	r2, #7
 8000e88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000e9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ea0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000ea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_SPI1_Init+0xa8>)
 8000f00:	f00a f93c 	bl	800b17c <HAL_SPI_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000f0a:	f000 fd91 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2400811c 	.word	0x2400811c
 8000f18:	40013000 	.word	0x40013000

08000f1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f20:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f22:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <MX_SPI2_Init+0xac>)
 8000f24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f26:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f36:	2207      	movs	r2, #7
 8000f38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f40:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f58:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_SPI2_Init+0xa8>)
 8000fb0:	f00a f8e4 	bl	800b17c <HAL_SPI_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000fba:	f000 fd39 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	240081a4 	.word	0x240081a4
 8000fc8:	40003800 	.word	0x40003800

08000fcc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <MX_SPI4_Init+0xa8>)
 8000fd2:	4a29      	ldr	r2, [pc, #164]	; (8001078 <MX_SPI4_Init+0xac>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000fd6:	4b27      	ldr	r3, [pc, #156]	; (8001074 <MX_SPI4_Init+0xa8>)
 8000fd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fdc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <MX_SPI4_Init+0xa8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <MX_SPI4_Init+0xa8>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <MX_SPI4_Init+0xa8>)
 8000fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ff0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <MX_SPI4_Init+0xa8>)
 8000ff4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ff8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_SPI4_Init+0xa8>)
 8000ffc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001000:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <MX_SPI4_Init+0xa8>)
 8001004:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001008:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_SPI4_Init+0xa8>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <MX_SPI4_Init+0xa8>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_SPI4_Init+0xa8>)
 8001018:	2200      	movs	r2, #0
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <MX_SPI4_Init+0xa8>)
 800101e:	2200      	movs	r2, #0
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_SPI4_Init+0xa8>)
 8001024:	2200      	movs	r2, #0
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_SPI4_Init+0xa8>)
 800102a:	2200      	movs	r2, #0
 800102c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_SPI4_Init+0xa8>)
 8001030:	2200      	movs	r2, #0
 8001032:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_SPI4_Init+0xa8>)
 8001036:	2200      	movs	r2, #0
 8001038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_SPI4_Init+0xa8>)
 800103c:	2200      	movs	r2, #0
 800103e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_SPI4_Init+0xa8>)
 8001042:	2200      	movs	r2, #0
 8001044:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_SPI4_Init+0xa8>)
 8001048:	2200      	movs	r2, #0
 800104a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_SPI4_Init+0xa8>)
 800104e:	2200      	movs	r2, #0
 8001050:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_SPI4_Init+0xa8>)
 8001054:	2200      	movs	r2, #0
 8001056:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_SPI4_Init+0xa8>)
 800105a:	2200      	movs	r2, #0
 800105c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_SPI4_Init+0xa8>)
 8001060:	f00a f88c 	bl	800b17c <HAL_SPI_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800106a:	f000 fce1 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2400822c 	.word	0x2400822c
 8001078:	40013400 	.word	0x40013400

0800107c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b09c      	sub	sp, #112	; 0x70
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	615a      	str	r2, [r3, #20]
 80010ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2234      	movs	r2, #52	; 0x34
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f012 fd38 	bl	8013b2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010bc:	4b43      	ldr	r3, [pc, #268]	; (80011cc <MX_TIM1_Init+0x150>)
 80010be:	4a44      	ldr	r2, [pc, #272]	; (80011d0 <MX_TIM1_Init+0x154>)
 80010c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010c2:	4b42      	ldr	r3, [pc, #264]	; (80011cc <MX_TIM1_Init+0x150>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b40      	ldr	r3, [pc, #256]	; (80011cc <MX_TIM1_Init+0x150>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <MX_TIM1_Init+0x150>)
 80010d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <MX_TIM1_Init+0x150>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010dc:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <MX_TIM1_Init+0x150>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <MX_TIM1_Init+0x150>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010e8:	4838      	ldr	r0, [pc, #224]	; (80011cc <MX_TIM1_Init+0x150>)
 80010ea:	f00b f89c 	bl	800c226 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010f4:	f000 fc9c 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001102:	4619      	mov	r1, r3
 8001104:	4831      	ldr	r0, [pc, #196]	; (80011cc <MX_TIM1_Init+0x150>)
 8001106:	f00b fcef 	bl	800cae8 <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001110:	f000 fc8e 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001114:	482d      	ldr	r0, [pc, #180]	; (80011cc <MX_TIM1_Init+0x150>)
 8001116:	f00b f955 	bl	800c3c4 <HAL_TIM_PWM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001120:	f000 fc86 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001130:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001134:	4619      	mov	r1, r3
 8001136:	4825      	ldr	r0, [pc, #148]	; (80011cc <MX_TIM1_Init+0x150>)
 8001138:	f00c fc5a 	bl	800d9f0 <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001142:	f000 fc75 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001146:	2360      	movs	r3, #96	; 0x60
 8001148:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114e:	2300      	movs	r3, #0
 8001150:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001152:	2300      	movs	r3, #0
 8001154:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001162:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001166:	2200      	movs	r2, #0
 8001168:	4619      	mov	r1, r3
 800116a:	4818      	ldr	r0, [pc, #96]	; (80011cc <MX_TIM1_Init+0x150>)
 800116c:	f00b fba8 	bl	800c8c0 <HAL_TIM_PWM_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001176:	f000 fc5b 	bl	8001a30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001192:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800119c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM1_Init+0x150>)
 80011b0:	f00c fcac 	bl	800db0c <HAL_TIMEx_ConfigBreakDeadTime>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80011ba:	f000 fc39 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM1_Init+0x150>)
 80011c0:	f001 fc84 	bl	8002acc <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3770      	adds	r7, #112	; 0x70
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	24008584 	.word	0x24008584
 80011d0:	40010000 	.word	0x40010000

080011d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011f6:	463b      	mov	r3, r7
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <MX_TIM2_Init+0xe0>)
 8001204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001208:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <MX_TIM2_Init+0xe0>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <MX_TIM2_Init+0xe0>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <MX_TIM2_Init+0xe0>)
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MX_TIM2_Init+0xe0>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MX_TIM2_Init+0xe0>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800122a:	4822      	ldr	r0, [pc, #136]	; (80012b4 <MX_TIM2_Init+0xe0>)
 800122c:	f00a fffb 	bl	800c226 <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001236:	f000 fbfb 	bl	8001a30 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800123a:	481e      	ldr	r0, [pc, #120]	; (80012b4 <MX_TIM2_Init+0xe0>)
 800123c:	f00b f923 	bl	800c486 <HAL_TIM_IC_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001246:	f000 fbf3 	bl	8001a30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800124a:	2307      	movs	r3, #7
 800124c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	4816      	ldr	r0, [pc, #88]	; (80012b4 <MX_TIM2_Init+0xe0>)
 800125a:	f00b fd3d 	bl	800ccd8 <HAL_TIM_SlaveConfigSynchro>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001264:	f000 fbe4 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <MX_TIM2_Init+0xe0>)
 8001278:	f00c fbba 	bl	800d9f0 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001282:	f000 fbd5 	bl	8001a30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800128a:	2301      	movs	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_TIM2_Init+0xe0>)
 800129e:	f00b fa72 	bl	800c786 <HAL_TIM_IC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80012a8:	f000 fbc2 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3730      	adds	r7, #48	; 0x30
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	240085d0 	.word	0x240085d0

080012b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_TIM16_Init+0x48>)
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <MX_TIM16_Init+0x4c>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 28000-1;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_TIM16_Init+0x48>)
 80012c4:	f646 525f 	movw	r2, #27999	; 0x6d5f
 80012c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <MX_TIM16_Init+0x48>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_TIM16_Init+0x48>)
 80012d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80012d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_TIM16_Init+0x48>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_TIM16_Init+0x48>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_TIM16_Init+0x48>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM16_Init+0x48>)
 80012ec:	f00a ff9b 	bl	800c226 <HAL_TIM_Base_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80012f6:	f000 fb9b 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2400861c 	.word	0x2400861c
 8001304:	40014400 	.word	0x40014400

08001308 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_UART4_Init+0x90>)
 800130e:	4a23      	ldr	r2, [pc, #140]	; (800139c <MX_UART4_Init+0x94>)
 8001310:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 3000000;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_UART4_Init+0x90>)
 8001314:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <MX_UART4_Init+0x98>)
 8001316:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_UART4_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <MX_UART4_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_UART4_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_UART4_Init+0x90>)
 800132c:	220c      	movs	r2, #12
 800132e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_UART4_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_UART4_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_UART4_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_UART4_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_UART4_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800134e:	4812      	ldr	r0, [pc, #72]	; (8001398 <MX_UART4_Init+0x90>)
 8001350:	f00c fc9a 	bl	800dc88 <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800135a:	f000 fb69 	bl	8001a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_UART4_Init+0x90>)
 8001362:	f00f f832 	bl	80103ca <HAL_UARTEx_SetTxFifoThreshold>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 800136c:	f000 fb60 	bl	8001a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001370:	2100      	movs	r1, #0
 8001372:	4809      	ldr	r0, [pc, #36]	; (8001398 <MX_UART4_Init+0x90>)
 8001374:	f00f f867 	bl	8010446 <HAL_UARTEx_SetRxFifoThreshold>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 800137e:	f000 fb57 	bl	8001a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_UART4_Init+0x90>)
 8001384:	f00e ffe8 	bl	8010358 <HAL_UARTEx_DisableFifoMode>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 800138e:	f000 fb4f 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	24008668 	.word	0x24008668
 800139c:	40004c00 	.word	0x40004c00
 80013a0:	002dc6c0 	.word	0x002dc6c0

080013a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013aa:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <MX_DMA_Init+0xbc>)
 80013ac:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80013b0:	4a2b      	ldr	r2, [pc, #172]	; (8001460 <MX_DMA_Init+0xbc>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <MX_DMA_Init+0xbc>)
 80013bc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <MX_DMA_Init+0xbc>)
 80013ca:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80013ce:	4a24      	ldr	r2, [pc, #144]	; (8001460 <MX_DMA_Init+0xbc>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <MX_DMA_Init+0xbc>)
 80013da:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	200b      	movs	r0, #11
 80013ec:	f002 f827 	bl	800343e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013f0:	200b      	movs	r0, #11
 80013f2:	f002 f83e 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	200c      	movs	r0, #12
 80013fc:	f002 f81f 	bl	800343e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001400:	200c      	movs	r0, #12
 8001402:	f002 f836 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	200d      	movs	r0, #13
 800140c:	f002 f817 	bl	800343e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001410:	200d      	movs	r0, #13
 8001412:	f002 f82e 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	200e      	movs	r0, #14
 800141c:	f002 f80f 	bl	800343e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001420:	200e      	movs	r0, #14
 8001422:	f002 f826 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	200f      	movs	r0, #15
 800142c:	f002 f807 	bl	800343e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001430:	200f      	movs	r0, #15
 8001432:	f002 f81e 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	202f      	movs	r0, #47	; 0x2f
 800143c:	f001 ffff 	bl	800343e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001440:	202f      	movs	r0, #47	; 0x2f
 8001442:	f002 f816 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2038      	movs	r0, #56	; 0x38
 800144c:	f001 fff7 	bl	800343e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001450:	2038      	movs	r0, #56	; 0x38
 8001452:	f002 f80e 	bl	8003472 <HAL_NVIC_EnableIRQ>

}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	58024400 	.word	0x58024400

08001464 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_FMC_Init+0x9c>)
 800147e:	4a21      	ldr	r2, [pc, #132]	; (8001504 <MX_FMC_Init+0xa0>)
 8001480:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <MX_FMC_Init+0x9c>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_FMC_Init+0x9c>)
 800148a:	2201      	movs	r2, #1
 800148c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_FMC_Init+0x9c>)
 8001490:	2208      	movs	r2, #8
 8001492:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_FMC_Init+0x9c>)
 8001496:	2210      	movs	r2, #16
 8001498:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_FMC_Init+0x9c>)
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_FMC_Init+0x9c>)
 80014a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80014a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_FMC_Init+0x9c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_FMC_Init+0x9c>)
 80014b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_FMC_Init+0x9c>)
 80014b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_FMC_Init+0x9c>)
 80014c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80014ca:	2309      	movs	r3, #9
 80014cc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80014ce:	2306      	movs	r3, #6
 80014d0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80014d2:	2309      	movs	r3, #9
 80014d4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 80014d6:	2304      	movs	r3, #4
 80014d8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 80014da:	2303      	movs	r3, #3
 80014dc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 80014de:	2303      	movs	r3, #3
 80014e0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <MX_FMC_Init+0x9c>)
 80014e8:	f009 fdae 	bl	800b048 <HAL_SDRAM_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80014f2:	f000 fa9d 	bl	8001a30 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014f6:	bf00      	nop
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	24008770 	.word	0x24008770
 8001504:	52004140 	.word	0x52004140

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800151e:	4b7d      	ldr	r3, [pc, #500]	; (8001714 <MX_GPIO_Init+0x20c>)
 8001520:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001524:	4a7b      	ldr	r2, [pc, #492]	; (8001714 <MX_GPIO_Init+0x20c>)
 8001526:	f043 0310 	orr.w	r3, r3, #16
 800152a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800152e:	4b79      	ldr	r3, [pc, #484]	; (8001714 <MX_GPIO_Init+0x20c>)
 8001530:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	623b      	str	r3, [r7, #32]
 800153a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	4b75      	ldr	r3, [pc, #468]	; (8001714 <MX_GPIO_Init+0x20c>)
 800153e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001542:	4a74      	ldr	r2, [pc, #464]	; (8001714 <MX_GPIO_Init+0x20c>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800154c:	4b71      	ldr	r3, [pc, #452]	; (8001714 <MX_GPIO_Init+0x20c>)
 800154e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800155a:	4b6e      	ldr	r3, [pc, #440]	; (8001714 <MX_GPIO_Init+0x20c>)
 800155c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001560:	4a6c      	ldr	r2, [pc, #432]	; (8001714 <MX_GPIO_Init+0x20c>)
 8001562:	f043 0320 	orr.w	r3, r3, #32
 8001566:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800156a:	4b6a      	ldr	r3, [pc, #424]	; (8001714 <MX_GPIO_Init+0x20c>)
 800156c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001570:	f003 0320 	and.w	r3, r3, #32
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001578:	4b66      	ldr	r3, [pc, #408]	; (8001714 <MX_GPIO_Init+0x20c>)
 800157a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800157e:	4a65      	ldr	r2, [pc, #404]	; (8001714 <MX_GPIO_Init+0x20c>)
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001588:	4b62      	ldr	r3, [pc, #392]	; (8001714 <MX_GPIO_Init+0x20c>)
 800158a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <MX_GPIO_Init+0x20c>)
 8001598:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800159c:	4a5d      	ldr	r2, [pc, #372]	; (8001714 <MX_GPIO_Init+0x20c>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015a6:	4b5b      	ldr	r3, [pc, #364]	; (8001714 <MX_GPIO_Init+0x20c>)
 80015a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	4b57      	ldr	r3, [pc, #348]	; (8001714 <MX_GPIO_Init+0x20c>)
 80015b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ba:	4a56      	ldr	r2, [pc, #344]	; (8001714 <MX_GPIO_Init+0x20c>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <MX_GPIO_Init+0x20c>)
 80015c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d2:	4b50      	ldr	r3, [pc, #320]	; (8001714 <MX_GPIO_Init+0x20c>)
 80015d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015d8:	4a4e      	ldr	r2, [pc, #312]	; (8001714 <MX_GPIO_Init+0x20c>)
 80015da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015e2:	4b4c      	ldr	r3, [pc, #304]	; (8001714 <MX_GPIO_Init+0x20c>)
 80015e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f0:	4b48      	ldr	r3, [pc, #288]	; (8001714 <MX_GPIO_Init+0x20c>)
 80015f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015f6:	4a47      	ldr	r2, [pc, #284]	; (8001714 <MX_GPIO_Init+0x20c>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001600:	4b44      	ldr	r3, [pc, #272]	; (8001714 <MX_GPIO_Init+0x20c>)
 8001602:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2110      	movs	r1, #16
 8001612:	4841      	ldr	r0, [pc, #260]	; (8001718 <MX_GPIO_Init+0x210>)
 8001614:	f004 fff2 	bl	80065fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 800161e:	483f      	ldr	r0, [pc, #252]	; (800171c <MX_GPIO_Init+0x214>)
 8001620:	f004 ffec 	bl	80065fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MULT_IN_Y_GPIO_Port, MULT_IN_Y_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	2110      	movs	r1, #16
 8001628:	483d      	ldr	r0, [pc, #244]	; (8001720 <MX_GPIO_Init+0x218>)
 800162a:	f004 ffe7 	bl	80065fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MULT_IN_Z_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f241 0101 	movw	r1, #4097	; 0x1001
 8001634:	483b      	ldr	r0, [pc, #236]	; (8001724 <MX_GPIO_Init+0x21c>)
 8001636:	f004 ffe1 	bl	80065fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 8001640:	4839      	ldr	r0, [pc, #228]	; (8001728 <MX_GPIO_Init+0x220>)
 8001642:	f004 ffdb 	bl	80065fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001646:	2310      	movs	r3, #16
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	482e      	ldr	r0, [pc, #184]	; (8001718 <MX_GPIO_Init+0x210>)
 800165e:	f004 fe1d 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001662:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001668:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001676:	4619      	mov	r1, r3
 8001678:	482c      	ldr	r0, [pc, #176]	; (800172c <MX_GPIO_Init+0x224>)
 800167a:	f004 fe0f 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_X_Pin PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800167e:	f44f 53f1 	mov.w	r3, #7712	; 0x1e20
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4821      	ldr	r0, [pc, #132]	; (800171c <MX_GPIO_Init+0x214>)
 8001698:	f004 fe00 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pin : MULT_IN_Y_Pin */
  GPIO_InitStruct.Pin = MULT_IN_Y_Pin;
 800169c:	2310      	movs	r3, #16
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MULT_IN_Y_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	481b      	ldr	r0, [pc, #108]	; (8001720 <MX_GPIO_Init+0x218>)
 80016b4:	f004 fdf2 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_Z_Pin PB12 */
  GPIO_InitStruct.Pin = MULT_IN_Z_Pin|GPIO_PIN_12;
 80016b8:	f241 0301 	movw	r3, #4097	; 0x1001
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4814      	ldr	r0, [pc, #80]	; (8001724 <MX_GPIO_Init+0x21c>)
 80016d2:	f004 fde3 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	4811      	ldr	r0, [pc, #68]	; (8001730 <MX_GPIO_Init+0x228>)
 80016ea:	f004 fdd7 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 USB_C_Reset_Pin USB_C_Alert_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin;
 80016ee:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	4808      	ldr	r0, [pc, #32]	; (8001728 <MX_GPIO_Init+0x220>)
 8001708:	f004 fdc8 	bl	800629c <HAL_GPIO_Init>

}
 800170c:	bf00      	nop
 800170e:	3738      	adds	r7, #56	; 0x38
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	58024400 	.word	0x58024400
 8001718:	58021000 	.word	0x58021000
 800171c:	58020000 	.word	0x58020000
 8001720:	58020800 	.word	0x58020800
 8001724:	58020400 	.word	0x58020400
 8001728:	58021800 	.word	0x58021800
 800172c:	58021400 	.word	0x58021400
 8001730:	58020c00 	.word	0x58020c00

08001734 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// TODO:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]

  //SPI1 MISO
  if (GPIO_Pin == GPIO_PIN_6){
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	2b40      	cmp	r3, #64	; 0x40
 8001742:	d109      	bne.n	8001758 <HAL_GPIO_EXTI_Callback+0x24>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001744:	2017      	movs	r0, #23
 8001746:	f001 fea2 	bl	800348e <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi1, pTxData, spi1Buffer, 4);
 800174a:	2304      	movs	r3, #4
 800174c:	4a17      	ldr	r2, [pc, #92]	; (80017ac <HAL_GPIO_EXTI_Callback+0x78>)
 800174e:	4918      	ldr	r1, [pc, #96]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001750:	4818      	ldr	r0, [pc, #96]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x80>)
 8001752:	f00a f80b 	bl	800b76c <HAL_SPI_TransmitReceive_DMA>
  }
  else if (GPIO_Pin == GPIO_PIN_9){
    __NOP();
    //sendToSDcard = true;
  }
}
 8001756:	e024      	b.n	80017a2 <HAL_GPIO_EXTI_Callback+0x6e>
  else if (GPIO_Pin == GPIO_PIN_14){
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800175e:	d109      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x40>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001760:	2028      	movs	r0, #40	; 0x28
 8001762:	f001 fe94 	bl	800348e <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi2, pTxData, spi2Buffer, 4);
 8001766:	2304      	movs	r3, #4
 8001768:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x84>)
 800176a:	4911      	ldr	r1, [pc, #68]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x7c>)
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <HAL_GPIO_EXTI_Callback+0x88>)
 800176e:	f009 fffd 	bl	800b76c <HAL_SPI_TransmitReceive_DMA>
}
 8001772:	e016      	b.n	80017a2 <HAL_GPIO_EXTI_Callback+0x6e>
  else if (GPIO_Pin == GPIO_PIN_5){
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	2b20      	cmp	r3, #32
 8001778:	d109      	bne.n	800178e <HAL_GPIO_EXTI_Callback+0x5a>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800177a:	2017      	movs	r0, #23
 800177c:	f001 fe87 	bl	800348e <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi4, pTxData, spi4Buffer, 4);
 8001780:	2304      	movs	r3, #4
 8001782:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001784:	490a      	ldr	r1, [pc, #40]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001786:	480f      	ldr	r0, [pc, #60]	; (80017c4 <HAL_GPIO_EXTI_Callback+0x90>)
 8001788:	f009 fff0 	bl	800b76c <HAL_SPI_TransmitReceive_DMA>
}
 800178c:	e009      	b.n	80017a2 <HAL_GPIO_EXTI_Callback+0x6e>
  else if (GPIO_Pin == GPIO_PIN_7){
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	2b80      	cmp	r3, #128	; 0x80
 8001792:	d101      	bne.n	8001798 <HAL_GPIO_EXTI_Callback+0x64>
    __NOP();
 8001794:	bf00      	nop
}
 8001796:	e004      	b.n	80017a2 <HAL_GPIO_EXTI_Callback+0x6e>
  else if (GPIO_Pin == GPIO_PIN_9){
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800179e:	d100      	bne.n	80017a2 <HAL_GPIO_EXTI_Callback+0x6e>
    __NOP();
 80017a0:	bf00      	nop
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	240087cc 	.word	0x240087cc
 80017b0:	240087b8 	.word	0x240087b8
 80017b4:	2400811c 	.word	0x2400811c
 80017b8:	240087d0 	.word	0x240087d0
 80017bc:	240081a4 	.word	0x240081a4
 80017c0:	240087d4 	.word	0x240087d4
 80017c4:	2400822c 	.word	0x2400822c

080017c8 <HAL_SPI_TxRxCpltCallback>:

//FIXME: changed here from TxRx to Rx
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi1){
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a3b      	ldr	r2, [pc, #236]	; (80018c0 <HAL_SPI_TxRxCpltCallback+0xf8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d121      	bne.n	800181c <HAL_SPI_TxRxCpltCallback+0x54>
    spi1ValuesStorage[spi1ValuesBufferCounter] = (uint32_t)spi1Buffer[3] | ((uint32_t)spi1Buffer[2] << 8) | ((uint32_t)spi1Buffer[1] << 16) | ((uint32_t)spi1Buffer[0] << 24);;
 80017d8:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <HAL_SPI_TxRxCpltCallback+0xfc>)
 80017da:	78db      	ldrb	r3, [r3, #3]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_SPI_TxRxCpltCallback+0xfc>)
 80017e0:	789b      	ldrb	r3, [r3, #2]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	431a      	orrs	r2, r3
 80017e6:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <HAL_SPI_TxRxCpltCallback+0xfc>)
 80017e8:	785b      	ldrb	r3, [r3, #1]
 80017ea:	041b      	lsls	r3, r3, #16
 80017ec:	ea42 0103 	orr.w	r1, r2, r3
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <HAL_SPI_TxRxCpltCallback+0xfc>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	061a      	lsls	r2, r3, #24
 80017f6:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_SPI_TxRxCpltCallback+0x100>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	4933      	ldr	r1, [pc, #204]	; (80018cc <HAL_SPI_TxRxCpltCallback+0x104>)
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001806:	2240      	movs	r2, #64	; 0x40
 8001808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800180c:	2017      	movs	r0, #23
 800180e:	f001 fe30 	bl	8003472 <HAL_NVIC_EnableIRQ>
    spi1ValuesBufferCounter++;
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_SPI_TxRxCpltCallback+0x100>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <HAL_SPI_TxRxCpltCallback+0x100>)
 800181a:	6013      	str	r3, [r2, #0]
  }

  if (hspi == &hspi2){
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <HAL_SPI_TxRxCpltCallback+0x108>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d122      	bne.n	800186a <HAL_SPI_TxRxCpltCallback+0xa2>
    spi2ValuesStorage[spi2ValuesBufferCounter] = (uint32_t)spi2Buffer[3] | ((uint32_t)spi2Buffer[2] << 8) | ((uint32_t)spi2Buffer[1] << 16) | ((uint32_t)spi2Buffer[0] << 24);
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001826:	78db      	ldrb	r3, [r3, #3]
 8001828:	461a      	mov	r2, r3
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_SPI_TxRxCpltCallback+0x10c>)
 800182c:	789b      	ldrb	r3, [r3, #2]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	431a      	orrs	r2, r3
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	ea42 0103 	orr.w	r1, r2, r3
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_SPI_TxRxCpltCallback+0x10c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	061a      	lsls	r2, r3, #24
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_SPI_TxRxCpltCallback+0x110>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	4924      	ldr	r1, [pc, #144]	; (80018dc <HAL_SPI_TxRxCpltCallback+0x114>)
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800185a:	2028      	movs	r0, #40	; 0x28
 800185c:	f001 fe09 	bl	8003472 <HAL_NVIC_EnableIRQ>
    spi2ValuesBufferCounter++;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_SPI_TxRxCpltCallback+0x110>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <HAL_SPI_TxRxCpltCallback+0x110>)
 8001868:	6013      	str	r3, [r2, #0]
  }

  if (hspi == &hspi4){
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <HAL_SPI_TxRxCpltCallback+0x118>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d121      	bne.n	80018b6 <HAL_SPI_TxRxCpltCallback+0xee>
    spi4ValuesStorage[spi4ValuesBufferCounter] = (uint32_t)spi4Buffer[3] | ((uint32_t)spi4Buffer[2] << 8) | ((uint32_t)spi4Buffer[1] << 16) | ((uint32_t)spi4Buffer[0] << 24);
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001874:	78db      	ldrb	r3, [r3, #3]
 8001876:	461a      	mov	r2, r3
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_SPI_TxRxCpltCallback+0x11c>)
 800187a:	789b      	ldrb	r3, [r3, #2]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	431a      	orrs	r2, r3
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	ea42 0103 	orr.w	r1, r2, r3
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_SPI_TxRxCpltCallback+0x11c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	061a      	lsls	r2, r3, #24
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_SPI_TxRxCpltCallback+0x120>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	4915      	ldr	r1, [pc, #84]	; (80018ec <HAL_SPI_TxRxCpltCallback+0x124>)
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	2220      	movs	r2, #32
 80018a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018a6:	2017      	movs	r0, #23
 80018a8:	f001 fde3 	bl	8003472 <HAL_NVIC_EnableIRQ>
    spi4ValuesBufferCounter++;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_SPI_TxRxCpltCallback+0x120>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <HAL_SPI_TxRxCpltCallback+0x120>)
 80018b4:	6013      	str	r3, [r2, #0]
  }
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2400811c 	.word	0x2400811c
 80018c4:	240087cc 	.word	0x240087cc
 80018c8:	240087bc 	.word	0x240087bc
 80018cc:	c0000000 	.word	0xc0000000
 80018d0:	240081a4 	.word	0x240081a4
 80018d4:	240087d0 	.word	0x240087d0
 80018d8:	240087c0 	.word	0x240087c0
 80018dc:	c0000400 	.word	0xc0000400
 80018e0:	2400822c 	.word	0x2400822c
 80018e4:	240087d4 	.word	0x240087d4
 80018e8:	240087c4 	.word	0x240087c4
 80018ec:	c0000800 	.word	0xc0000800

080018f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if (huart == &huart4){
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_UART_RxCpltCallback+0x34>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d10c      	bne.n	800191a <HAL_UART_RxCpltCallback+0x2a>
    HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8001900:	2201      	movs	r2, #1
 8001902:	4909      	ldr	r1, [pc, #36]	; (8001928 <HAL_UART_RxCpltCallback+0x38>)
 8001904:	4807      	ldr	r0, [pc, #28]	; (8001924 <HAL_UART_RxCpltCallback+0x34>)
 8001906:	f00c faa5 	bl	800de54 <HAL_UART_Receive_IT>
    uartCommand = rxUart4Buffer[0];
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <HAL_UART_RxCpltCallback+0x38>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_UART_RxCpltCallback+0x3c>)
 8001912:	701a      	strb	r2, [r3, #0]
    uartNewCommand = true;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_UART_RxCpltCallback+0x40>)
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
//  }else if (huart == &huart5){
//    HAL_UART_Receive_IT (&huart5, rxUart5Buffer, 1);
//    uartCommand = rxUart5Buffer[0];
//    uartNewCommand = true;
  }
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	24008668 	.word	0x24008668
 8001928:	240087d8 	.word	0x240087d8
 800192c:	240087d9 	.word	0x240087d9
 8001930:	240087da 	.word	0x240087da

08001934 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(htim == &htim16){
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d104      	bne.n	800194e <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001948:	4804      	ldr	r0, [pc, #16]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800194a:	f004 fe70 	bl	800662e <HAL_GPIO_TogglePin>
  }
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2400861c 	.word	0x2400861c
 800195c:	58020000 	.word	0x58020000

08001960 <findMin>:

uint32_t findMin(uint32_t a, uint32_t b, uint32_t c) {
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
    uint32_t min = a;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	617b      	str	r3, [r7, #20]
    if (b < min) {
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	d201      	bcs.n	800197c <findMin+0x1c>
        min = b;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	617b      	str	r3, [r7, #20]
    }
    if (c < min) {
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	429a      	cmp	r2, r3
 8001982:	d201      	bcs.n	8001988 <findMin+0x28>
        min = c;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	617b      	str	r3, [r7, #20]
    }
    return min;
 8001988:	697b      	ldr	r3, [r7, #20]
}
 800198a:	4618      	mov	r0, r3
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <setColorLED>:

void setColorLED(colorLED color){
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  if(color == red){
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d112      	bne.n	80019ce <setColorLED+0x36>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ae:	481f      	ldr	r0, [pc, #124]	; (8001a2c <setColorLED+0x94>)
 80019b0:	f004 fe24 	bl	80065fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ba:	481c      	ldr	r0, [pc, #112]	; (8001a2c <setColorLED+0x94>)
 80019bc:	f004 fe1e 	bl	80065fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c6:	4819      	ldr	r0, [pc, #100]	; (8001a2c <setColorLED+0x94>)
 80019c8:	f004 fe18 	bl	80065fc <HAL_GPIO_WritePin>
  } else if (color == green){
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
  }
}
 80019cc:	e02a      	b.n	8001a24 <setColorLED+0x8c>
  }else if(color == blue){
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d112      	bne.n	80019fa <setColorLED+0x62>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <setColorLED+0x94>)
 80019dc:	f004 fe0e 	bl	80065fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e6:	4811      	ldr	r0, [pc, #68]	; (8001a2c <setColorLED+0x94>)
 80019e8:	f004 fe08 	bl	80065fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019f2:	480e      	ldr	r0, [pc, #56]	; (8001a2c <setColorLED+0x94>)
 80019f4:	f004 fe02 	bl	80065fc <HAL_GPIO_WritePin>
}
 80019f8:	e014      	b.n	8001a24 <setColorLED+0x8c>
  } else if (color == green){
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d111      	bne.n	8001a24 <setColorLED+0x8c>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a06:	4809      	ldr	r0, [pc, #36]	; (8001a2c <setColorLED+0x94>)
 8001a08:	f004 fdf8 	bl	80065fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <setColorLED+0x94>)
 8001a14:	f004 fdf2 	bl	80065fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a1e:	4803      	ldr	r0, [pc, #12]	; (8001a2c <setColorLED+0x94>)
 8001a20:	f004 fdec 	bl	80065fc <HAL_GPIO_WritePin>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	58020000 	.word	0x58020000

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <Error_Handler+0x8>
	...

08001a3c <sd_card_init>:
FILINFO fno;
uint8_t nameFileNumber = 1;
bool newMeasurement = false;

bool sd_card_init (void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
  bool initError = false;
 8001a42:	2300      	movs	r3, #0
 8001a44:	71fb      	strb	r3, [r7, #7]
  res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	4909      	ldr	r1, [pc, #36]	; (8001a70 <sd_card_init+0x34>)
 8001a4a:	480a      	ldr	r0, [pc, #40]	; (8001a74 <sd_card_init+0x38>)
 8001a4c:	f011 fbc6 	bl	80131dc <f_mount>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <sd_card_init+0x3c>)
 8001a56:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK){
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <sd_card_init+0x3c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <sd_card_init+0x28>
    initError = true;
 8001a60:	2301      	movs	r3, #1
 8001a62:	71fb      	strb	r3, [r7, #7]
  }
  return initError;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	240087f0 	.word	0x240087f0
 8001a74:	240087f4 	.word	0x240087f4
 8001a78:	240087db 	.word	0x240087db

08001a7c <sd_card_open_file>:
   f_close(&SDFile);

}


bool sd_card_open_file(void){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
  FRESULT localRes;
  uint8_t fileNumber = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75bb      	strb	r3, [r7, #22]
  char filename0[] = {'a', 'd', 'c', '.', 't', 'x', 't', '\0'};
 8001a86:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <sd_card_open_file+0x88>)
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a90:	e883 0003 	stmia.w	r3, {r0, r1}
  char filename1[] = {'a', 'd', 'c', '1', '.', 't', 'x', 't', '\0'};
 8001a94:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <sd_card_open_file+0x8c>)
 8001a96:	463b      	mov	r3, r7
 8001a98:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a9a:	c303      	stmia	r3!, {r0, r1}
 8001a9c:	701a      	strb	r2, [r3, #0]
  bool openFileError = false;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	757b      	strb	r3, [r7, #21]
  do {
      if (fileNumber == 0) {
 8001aa2:	7dbb      	ldrb	r3, [r7, #22]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d109      	bne.n	8001abc <sd_card_open_file+0x40>
        localRes = f_open(&SDFile, filename0, FA_WRITE | FA_CREATE_NEW); // Create the file if it doesn't exist
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2206      	movs	r2, #6
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4816      	ldr	r0, [pc, #88]	; (8001b0c <sd_card_open_file+0x90>)
 8001ab2:	f011 fbd9 	bl	8013268 <f_open>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	75fb      	strb	r3, [r7, #23]
 8001aba:	e00c      	b.n	8001ad6 <sd_card_open_file+0x5a>
      } else{
        filename1[3] = nameFileNumber + '0';
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <sd_card_open_file+0x94>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	3330      	adds	r3, #48	; 0x30
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	70fb      	strb	r3, [r7, #3]
        localRes = f_open(&SDFile, filename1, FA_WRITE | FA_CREATE_NEW); // Create the file if it doesn't exist
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2206      	movs	r2, #6
 8001aca:	4619      	mov	r1, r3
 8001acc:	480f      	ldr	r0, [pc, #60]	; (8001b0c <sd_card_open_file+0x90>)
 8001ace:	f011 fbcb 	bl	8013268 <f_open>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	75fb      	strb	r3, [r7, #23]
      }

      if (localRes == FR_EXIST) {
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d105      	bne.n	8001ae8 <sd_card_open_file+0x6c>
          f_close(&SDFile); // Close the file if it already exists
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <sd_card_open_file+0x90>)
 8001ade:	f011 ff74 	bl	80139ca <f_close>
          fileNumber++;   // Increment the file number to create a new name
 8001ae2:	7dbb      	ldrb	r3, [r7, #22]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	75bb      	strb	r3, [r7, #22]
      }
  } while (localRes == FR_EXIST);
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d0d9      	beq.n	8001aa2 <sd_card_open_file+0x26>

  if (localRes != FR_OK){
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <sd_card_open_file+0x7c>
    openFileError = true;
 8001af4:	2301      	movs	r3, #1
 8001af6:	757b      	strb	r3, [r7, #21]
  }

  return openFileError;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	08014438 	.word	0x08014438
 8001b08:	08014440 	.word	0x08014440
 8001b0c:	24008a24 	.word	0x24008a24
 8001b10:	24000005 	.word	0x24000005

08001b14 <sd_card_write_to_opened_file>:



bool sd_card_write_to_opened_file(char * buffer){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  bool writeToFileError = false;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
  res = f_write(&SDFile, buffer, strlen((char *)buffer), (void *)&byteswritten);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7fe fbe5 	bl	80002f0 <strlen>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <sd_card_write_to_opened_file+0x44>)
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	480b      	ldr	r0, [pc, #44]	; (8001b5c <sd_card_write_to_opened_file+0x48>)
 8001b2e:	f011 fd59 	bl	80135e4 <f_write>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <sd_card_write_to_opened_file+0x4c>)
 8001b38:	701a      	strb	r2, [r3, #0]

   if((byteswritten == 0) || (res != FR_OK))
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <sd_card_write_to_opened_file+0x44>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <sd_card_write_to_opened_file+0x36>
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <sd_card_write_to_opened_file+0x4c>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <sd_card_write_to_opened_file+0x3a>
   {
     writeToFileError = true;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
   }
   return writeToFileError;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	240087dc 	.word	0x240087dc
 8001b5c:	24008a24 	.word	0x24008a24
 8001b60:	240087db 	.word	0x240087db

08001b64 <sd_card_close_file>:

void sd_card_close_file(void){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

  f_close(&SDFile);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <sd_card_close_file+0x10>)
 8001b6a:	f011 ff2e 	bl	80139ca <f_close>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	24008a24 	.word	0x24008a24

08001b78 <spi1_adc_init>:


uint32_t readIndex=0;
uint8_t adc_values[80];

void spi1_adc_init(uint8_t spsValue){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08e      	sub	sp, #56	; 0x38
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  //GPIOG->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001b82:	2320      	movs	r3, #32
 8001b84:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 8001b88:	2310      	movs	r3, #16
 8001b8a:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001b92:	2300      	movs	r3, #0
 8001b94:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 8001b96:	2310      	movs	r3, #16
 8001b98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001b9c:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001ba0:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 8001ba6:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001baa:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001bac:	2328      	movs	r3, #40	; 0x28
 8001bae:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001bb0:	2305      	movs	r3, #5
 8001bb2:	743b      	strb	r3, [r7, #16]
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 8001bb8:	2306      	movs	r3, #6
 8001bba:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	813b      	strh	r3, [r7, #8]

  /*Start init ADC1*/
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc6:	4856      	ldr	r0, [pc, #344]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001bc8:	f004 fd18 	bl	80065fc <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi1, adcChannelRegister, 1, 100);
 8001bcc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001bd0:	2364      	movs	r3, #100	; 0x64
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4853      	ldr	r0, [pc, #332]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001bd6:	f009 fbd7 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcChannel, 2, 100);
 8001bda:	f107 0120 	add.w	r1, r7, #32
 8001bde:	2364      	movs	r3, #100	; 0x64
 8001be0:	2202      	movs	r2, #2
 8001be2:	4850      	ldr	r0, [pc, #320]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001be4:	f009 fbd0 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bee:	484c      	ldr	r0, [pc, #304]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001bf0:	f004 fd04 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f001 faff 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c00:	4847      	ldr	r0, [pc, #284]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001c02:	f004 fcfb 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi1, setupConfigurationRegister, 1, 100);
 8001c06:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c0a:	2364      	movs	r3, #100	; 0x64
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4845      	ldr	r0, [pc, #276]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001c10:	f009 fbba 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, setupConfiguration, 2, 100);
 8001c14:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001c18:	2364      	movs	r3, #100	; 0x64
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4841      	ldr	r0, [pc, #260]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001c1e:	f009 fbb3 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001c22:	2201      	movs	r2, #1
 8001c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c28:	483d      	ldr	r0, [pc, #244]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001c2a:	f004 fce7 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f001 fae2 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c3a:	4839      	ldr	r0, [pc, #228]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001c3c:	f004 fcde 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi1, adcModeRegister, 1, 100);
 8001c40:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001c44:	2364      	movs	r3, #100	; 0x64
 8001c46:	2201      	movs	r2, #1
 8001c48:	4836      	ldr	r0, [pc, #216]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001c4a:	f009 fb9d 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcMode, 2, 100);
 8001c4e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c52:	2364      	movs	r3, #100	; 0x64
 8001c54:	2202      	movs	r2, #2
 8001c56:	4833      	ldr	r0, [pc, #204]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001c58:	f009 fb96 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c62:	482f      	ldr	r0, [pc, #188]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001c64:	f004 fcca 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f001 fac5 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c74:	482a      	ldr	r0, [pc, #168]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001c76:	f004 fcc1 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi1, dataWriteSPS_REGISTER, 1, 100);
 8001c7a:	f107 0114 	add.w	r1, r7, #20
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4828      	ldr	r0, [pc, #160]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001c84:	f009 fb80 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSPS, 2, 100);
 8001c88:	f107 0110 	add.w	r1, r7, #16
 8001c8c:	2364      	movs	r3, #100	; 0x64
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4824      	ldr	r0, [pc, #144]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001c92:	f009 fb79 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001c96:	2201      	movs	r2, #1
 8001c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c9c:	4820      	ldr	r0, [pc, #128]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001c9e:	f004 fcad 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f001 faa8 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cae:	481c      	ldr	r0, [pc, #112]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001cb0:	f004 fca4 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError_REGISTER, 1, 100);
 8001cb4:	f107 010c 	add.w	r1, r7, #12
 8001cb8:	2364      	movs	r3, #100	; 0x64
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4819      	ldr	r0, [pc, #100]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001cbe:	f009 fb63 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError, 2, 100);
 8001cc2:	f107 0108 	add.w	r1, r7, #8
 8001cc6:	2364      	movs	r3, #100	; 0x64
 8001cc8:	2202      	movs	r2, #2
 8001cca:	4816      	ldr	r0, [pc, #88]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001ccc:	f009 fb5c 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cd6:	4812      	ldr	r0, [pc, #72]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001cd8:	f004 fc90 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f001 fa8b 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001cea:	f004 fc87 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi1, continuousConvEnableRegister, 1, 100);
 8001cee:	f107 011c 	add.w	r1, r7, #28
 8001cf2:	2364      	movs	r3, #100	; 0x64
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	480b      	ldr	r0, [pc, #44]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001cf8:	f009 fb46 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, continuousConvEnable, 2, 100);
 8001cfc:	f107 0118 	add.w	r1, r7, #24
 8001d00:	2364      	movs	r3, #100	; 0x64
 8001d02:	2202      	movs	r2, #2
 8001d04:	4807      	ldr	r0, [pc, #28]	; (8001d24 <spi1_adc_init+0x1ac>)
 8001d06:	f009 fb3f 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <spi1_adc_init+0x1a8>)
 8001d12:	f004 fc73 	bl	80065fc <HAL_GPIO_WritePin>
}
 8001d16:	bf00      	nop
 8001d18:	3738      	adds	r7, #56	; 0x38
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	58021800 	.word	0x58021800
 8001d24:	2400811c 	.word	0x2400811c

08001d28 <spi2_adc_init>:

void spi2_adc_init(uint8_t spsValue){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08e      	sub	sp, #56	; 0x38
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001d32:	2320      	movs	r3, #32
 8001d34:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 8001d38:	2310      	movs	r3, #16
 8001d3a:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001d42:	2300      	movs	r3, #0
 8001d44:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 8001d46:	2310      	movs	r3, #16
 8001d48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001d4c:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001d50:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001d52:	2302      	movs	r3, #2
 8001d54:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 8001d56:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001d5a:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001d5c:	2328      	movs	r3, #40	; 0x28
 8001d5e:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001d60:	2305      	movs	r3, #5
 8001d62:	743b      	strb	r3, [r7, #16]
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 8001d68:	2306      	movs	r3, #6
 8001d6a:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	813b      	strh	r3, [r7, #8]

  /*Start init ADC2*/
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d76:	4856      	ldr	r0, [pc, #344]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001d78:	f004 fc40 	bl	80065fc <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi2, adcChannelRegister, 1, 100);
 8001d7c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001d80:	2364      	movs	r3, #100	; 0x64
 8001d82:	2201      	movs	r2, #1
 8001d84:	4853      	ldr	r0, [pc, #332]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001d86:	f009 faff 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcChannel, 2, 100);
 8001d8a:	f107 0120 	add.w	r1, r7, #32
 8001d8e:	2364      	movs	r3, #100	; 0x64
 8001d90:	2202      	movs	r2, #2
 8001d92:	4850      	ldr	r0, [pc, #320]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001d94:	f009 faf8 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d9e:	484c      	ldr	r0, [pc, #304]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001da0:	f004 fc2c 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f001 fa27 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db0:	4847      	ldr	r0, [pc, #284]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001db2:	f004 fc23 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi2, setupConfigurationRegister, 1, 100);
 8001db6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001dba:	2364      	movs	r3, #100	; 0x64
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4845      	ldr	r0, [pc, #276]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001dc0:	f009 fae2 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, setupConfiguration, 2, 100);
 8001dc4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001dc8:	2364      	movs	r3, #100	; 0x64
 8001dca:	2202      	movs	r2, #2
 8001dcc:	4841      	ldr	r0, [pc, #260]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001dce:	f009 fadb 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd8:	483d      	ldr	r0, [pc, #244]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001dda:	f004 fc0f 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f001 fa0a 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dea:	4839      	ldr	r0, [pc, #228]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001dec:	f004 fc06 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi2, adcModeRegister, 1, 100);
 8001df0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001df4:	2364      	movs	r3, #100	; 0x64
 8001df6:	2201      	movs	r2, #1
 8001df8:	4836      	ldr	r0, [pc, #216]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001dfa:	f009 fac5 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcMode, 2, 100);
 8001dfe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e02:	2364      	movs	r3, #100	; 0x64
 8001e04:	2202      	movs	r2, #2
 8001e06:	4833      	ldr	r0, [pc, #204]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001e08:	f009 fabe 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e12:	482f      	ldr	r0, [pc, #188]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001e14:	f004 fbf2 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f001 f9ed 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e24:	482a      	ldr	r0, [pc, #168]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001e26:	f004 fbe9 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi2, dataWriteSPS_REGISTER, 1, 100);
 8001e2a:	f107 0114 	add.w	r1, r7, #20
 8001e2e:	2364      	movs	r3, #100	; 0x64
 8001e30:	2201      	movs	r2, #1
 8001e32:	4828      	ldr	r0, [pc, #160]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001e34:	f009 faa8 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSPS, 2, 100);
 8001e38:	f107 0110 	add.w	r1, r7, #16
 8001e3c:	2364      	movs	r3, #100	; 0x64
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4824      	ldr	r0, [pc, #144]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001e42:	f009 faa1 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4c:	4820      	ldr	r0, [pc, #128]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001e4e:	f004 fbd5 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f001 f9d0 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e5e:	481c      	ldr	r0, [pc, #112]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001e60:	f004 fbcc 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError_REGISTER, 1, 100);
 8001e64:	f107 010c 	add.w	r1, r7, #12
 8001e68:	2364      	movs	r3, #100	; 0x64
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4819      	ldr	r0, [pc, #100]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001e6e:	f009 fa8b 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError, 2, 100);
 8001e72:	f107 0108 	add.w	r1, r7, #8
 8001e76:	2364      	movs	r3, #100	; 0x64
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001e7c:	f009 fa84 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001e80:	2201      	movs	r2, #1
 8001e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e86:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001e88:	f004 fbb8 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f001 f9b3 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e98:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001e9a:	f004 fbaf 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi2, continuousConvEnableRegister, 1, 100);
 8001e9e:	f107 011c 	add.w	r1, r7, #28
 8001ea2:	2364      	movs	r3, #100	; 0x64
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001ea8:	f009 fa6e 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, continuousConvEnable, 2, 100);
 8001eac:	f107 0118 	add.w	r1, r7, #24
 8001eb0:	2364      	movs	r3, #100	; 0x64
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <spi2_adc_init+0x1ac>)
 8001eb6:	f009 fa67 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <spi2_adc_init+0x1a8>)
 8001ec2:	f004 fb9b 	bl	80065fc <HAL_GPIO_WritePin>
}
 8001ec6:	bf00      	nop
 8001ec8:	3738      	adds	r7, #56	; 0x38
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	58020400 	.word	0x58020400
 8001ed4:	240081a4 	.word	0x240081a4

08001ed8 <spi4_adc_init>:

void spi4_adc_init(uint8_t spsValue){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	; 0x38
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 8001ee8:	2310      	movs	r3, #16
 8001eea:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 8001ef6:	2310      	movs	r3, #16
 8001ef8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001efc:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001f00:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001f02:	2302      	movs	r3, #2
 8001f04:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 8001f06:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001f0a:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001f0c:	2328      	movs	r3, #40	; 0x28
 8001f0e:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001f10:	2305      	movs	r3, #5
 8001f12:	743b      	strb	r3, [r7, #16]
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 8001f18:	2306      	movs	r3, #6
 8001f1a:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	813b      	strh	r3, [r7, #8]

  /*Start init ADC4*/
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2110      	movs	r1, #16
 8001f24:	4850      	ldr	r0, [pc, #320]	; (8002068 <spi4_adc_init+0x190>)
 8001f26:	f004 fb69 	bl	80065fc <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi4, adcChannelRegister, 1, 100);
 8001f2a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001f2e:	2364      	movs	r3, #100	; 0x64
 8001f30:	2201      	movs	r2, #1
 8001f32:	484e      	ldr	r0, [pc, #312]	; (800206c <spi4_adc_init+0x194>)
 8001f34:	f009 fa28 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcChannel, 2, 100);
 8001f38:	f107 0120 	add.w	r1, r7, #32
 8001f3c:	2364      	movs	r3, #100	; 0x64
 8001f3e:	2202      	movs	r2, #2
 8001f40:	484a      	ldr	r0, [pc, #296]	; (800206c <spi4_adc_init+0x194>)
 8001f42:	f009 fa21 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001f46:	2201      	movs	r2, #1
 8001f48:	2110      	movs	r1, #16
 8001f4a:	4847      	ldr	r0, [pc, #284]	; (8002068 <spi4_adc_init+0x190>)
 8001f4c:	f004 fb56 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f001 f951 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2110      	movs	r1, #16
 8001f5a:	4843      	ldr	r0, [pc, #268]	; (8002068 <spi4_adc_init+0x190>)
 8001f5c:	f004 fb4e 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi4, setupConfigurationRegister, 1, 100);
 8001f60:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001f64:	2364      	movs	r3, #100	; 0x64
 8001f66:	2201      	movs	r2, #1
 8001f68:	4840      	ldr	r0, [pc, #256]	; (800206c <spi4_adc_init+0x194>)
 8001f6a:	f009 fa0d 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, setupConfiguration, 2, 100);
 8001f6e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001f72:	2364      	movs	r3, #100	; 0x64
 8001f74:	2202      	movs	r2, #2
 8001f76:	483d      	ldr	r0, [pc, #244]	; (800206c <spi4_adc_init+0x194>)
 8001f78:	f009 fa06 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2110      	movs	r1, #16
 8001f80:	4839      	ldr	r0, [pc, #228]	; (8002068 <spi4_adc_init+0x190>)
 8001f82:	f004 fb3b 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001f86:	2001      	movs	r0, #1
 8001f88:	f001 f936 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2110      	movs	r1, #16
 8001f90:	4835      	ldr	r0, [pc, #212]	; (8002068 <spi4_adc_init+0x190>)
 8001f92:	f004 fb33 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi4, adcModeRegister, 1, 100);
 8001f96:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001f9a:	2364      	movs	r3, #100	; 0x64
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4833      	ldr	r0, [pc, #204]	; (800206c <spi4_adc_init+0x194>)
 8001fa0:	f009 f9f2 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcMode, 2, 100);
 8001fa4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001fa8:	2364      	movs	r3, #100	; 0x64
 8001faa:	2202      	movs	r2, #2
 8001fac:	482f      	ldr	r0, [pc, #188]	; (800206c <spi4_adc_init+0x194>)
 8001fae:	f009 f9eb 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	482c      	ldr	r0, [pc, #176]	; (8002068 <spi4_adc_init+0x190>)
 8001fb8:	f004 fb20 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f001 f91b 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2110      	movs	r1, #16
 8001fc6:	4828      	ldr	r0, [pc, #160]	; (8002068 <spi4_adc_init+0x190>)
 8001fc8:	f004 fb18 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi4, dataWriteSPS_REGISTER, 1, 100);
 8001fcc:	f107 0114 	add.w	r1, r7, #20
 8001fd0:	2364      	movs	r3, #100	; 0x64
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4825      	ldr	r0, [pc, #148]	; (800206c <spi4_adc_init+0x194>)
 8001fd6:	f009 f9d7 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSPS, 2, 100);
 8001fda:	f107 0110 	add.w	r1, r7, #16
 8001fde:	2364      	movs	r3, #100	; 0x64
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	4822      	ldr	r0, [pc, #136]	; (800206c <spi4_adc_init+0x194>)
 8001fe4:	f009 f9d0 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	2110      	movs	r1, #16
 8001fec:	481e      	ldr	r0, [pc, #120]	; (8002068 <spi4_adc_init+0x190>)
 8001fee:	f004 fb05 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f001 f900 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	481a      	ldr	r0, [pc, #104]	; (8002068 <spi4_adc_init+0x190>)
 8001ffe:	f004 fafd 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError_REGISTER, 1, 100);
 8002002:	f107 010c 	add.w	r1, r7, #12
 8002006:	2364      	movs	r3, #100	; 0x64
 8002008:	2201      	movs	r2, #1
 800200a:	4818      	ldr	r0, [pc, #96]	; (800206c <spi4_adc_init+0x194>)
 800200c:	f009 f9bc 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError, 2, 100);
 8002010:	f107 0108 	add.w	r1, r7, #8
 8002014:	2364      	movs	r3, #100	; 0x64
 8002016:	2202      	movs	r2, #2
 8002018:	4814      	ldr	r0, [pc, #80]	; (800206c <spi4_adc_init+0x194>)
 800201a:	f009 f9b5 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 800201e:	2201      	movs	r2, #1
 8002020:	2110      	movs	r1, #16
 8002022:	4811      	ldr	r0, [pc, #68]	; (8002068 <spi4_adc_init+0x190>)
 8002024:	f004 faea 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002028:	2001      	movs	r0, #1
 800202a:	f001 f8e5 	bl	80031f8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2110      	movs	r1, #16
 8002032:	480d      	ldr	r0, [pc, #52]	; (8002068 <spi4_adc_init+0x190>)
 8002034:	f004 fae2 	bl	80065fc <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi4, continuousConvEnableRegister, 1, 100);
 8002038:	f107 011c 	add.w	r1, r7, #28
 800203c:	2364      	movs	r3, #100	; 0x64
 800203e:	2201      	movs	r2, #1
 8002040:	480a      	ldr	r0, [pc, #40]	; (800206c <spi4_adc_init+0x194>)
 8002042:	f009 f9a1 	bl	800b388 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, continuousConvEnable, 2, 100);
 8002046:	f107 0118 	add.w	r1, r7, #24
 800204a:	2364      	movs	r3, #100	; 0x64
 800204c:	2202      	movs	r2, #2
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <spi4_adc_init+0x194>)
 8002050:	f009 f99a 	bl	800b388 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002054:	2201      	movs	r2, #1
 8002056:	2110      	movs	r1, #16
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <spi4_adc_init+0x190>)
 800205a:	f004 facf 	bl	80065fc <HAL_GPIO_WritePin>
}
 800205e:	bf00      	nop
 8002060:	3738      	adds	r7, #56	; 0x38
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	58021000 	.word	0x58021000
 800206c:	2400822c 	.word	0x2400822c

08002070 <run_all_adc>:


void run_all_adc(void){
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800207a:	4808      	ldr	r0, [pc, #32]	; (800209c <run_all_adc+0x2c>)
 800207c:	f004 fabe 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002086:	4806      	ldr	r0, [pc, #24]	; (80020a0 <run_all_adc+0x30>)
 8002088:	f004 fab8 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2110      	movs	r1, #16
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <run_all_adc+0x34>)
 8002092:	f004 fab3 	bl	80065fc <HAL_GPIO_WritePin>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	58021800 	.word	0x58021800
 80020a0:	58020400 	.word	0x58020400
 80020a4:	58021000 	.word	0x58021000

080020a8 <spi1_soft_reset>:
      HAL_UART_Transmit(&huart5, (uint8_t*)", ", 2, 10);
      HAL_Delay(10);
  }
}

void spi1_soft_reset(void){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 80020ae:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <spi1_soft_reset+0x40>)
 80020b0:	463b      	mov	r3, r7
 80020b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020b6:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c0:	480a      	ldr	r0, [pc, #40]	; (80020ec <spi1_soft_reset+0x44>)
 80020c2:	f004 fa9b 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, softResetValue, 8, 100);
 80020c6:	4639      	mov	r1, r7
 80020c8:	2364      	movs	r3, #100	; 0x64
 80020ca:	2208      	movs	r2, #8
 80020cc:	4808      	ldr	r0, [pc, #32]	; (80020f0 <spi1_soft_reset+0x48>)
 80020ce:	f009 f95b 	bl	800b388 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80020d2:	2201      	movs	r2, #1
 80020d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <spi1_soft_reset+0x44>)
 80020da:	f004 fa8f 	bl	80065fc <HAL_GPIO_WritePin>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	08014460 	.word	0x08014460
 80020ec:	58021800 	.word	0x58021800
 80020f0:	2400811c 	.word	0x2400811c

080020f4 <spi2_soft_reset>:

void spi2_soft_reset(void){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <spi2_soft_reset+0x40>)
 80020fc:	463b      	mov	r3, r7
 80020fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002102:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210c:	480a      	ldr	r0, [pc, #40]	; (8002138 <spi2_soft_reset+0x44>)
 800210e:	f004 fa75 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, softResetValue, 8, 100);
 8002112:	4639      	mov	r1, r7
 8002114:	2364      	movs	r3, #100	; 0x64
 8002116:	2208      	movs	r2, #8
 8002118:	4808      	ldr	r0, [pc, #32]	; (800213c <spi2_soft_reset+0x48>)
 800211a:	f009 f935 	bl	800b388 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002124:	4804      	ldr	r0, [pc, #16]	; (8002138 <spi2_soft_reset+0x44>)
 8002126:	f004 fa69 	bl	80065fc <HAL_GPIO_WritePin>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	08014460 	.word	0x08014460
 8002138:	58020400 	.word	0x58020400
 800213c:	240081a4 	.word	0x240081a4

08002140 <spi4_soft_reset>:

void spi4_soft_reset(void){
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8002146:	4a0d      	ldr	r2, [pc, #52]	; (800217c <spi4_soft_reset+0x3c>)
 8002148:	463b      	mov	r3, r7
 800214a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800214e:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2110      	movs	r1, #16
 8002156:	480a      	ldr	r0, [pc, #40]	; (8002180 <spi4_soft_reset+0x40>)
 8002158:	f004 fa50 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, softResetValue, 8, 100);
 800215c:	4639      	mov	r1, r7
 800215e:	2364      	movs	r3, #100	; 0x64
 8002160:	2208      	movs	r2, #8
 8002162:	4808      	ldr	r0, [pc, #32]	; (8002184 <spi4_soft_reset+0x44>)
 8002164:	f009 f910 	bl	800b388 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002168:	2201      	movs	r2, #1
 800216a:	2110      	movs	r1, #16
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <spi4_soft_reset+0x40>)
 800216e:	f004 fa45 	bl	80065fc <HAL_GPIO_WritePin>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	08014460 	.word	0x08014460
 8002180:	58021000 	.word	0x58021000
 8002184:	2400822c 	.word	0x2400822c

08002188 <spi_send_all_three_values>:
  }
  HAL_UART_Transmit(&huart4, (uint8_t*)"\n\r", 2, 10);
}


void spi_send_all_three_values(uint32_t adcRawValue_x, uint32_t adcRawValue_y, uint32_t adcRawValue_z){
 8002188:	b580      	push	{r7, lr}
 800218a:	b0a4      	sub	sp, #144	; 0x90
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t value_x = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t value_y = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t value_z = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	67fb      	str	r3, [r7, #124]	; 0x7c
//  value_z = value_z<<8;
//  value_z = value_z | adcRawValue_z[2];
//  value_z = value_z<<8;
//  value_z = value_z | adcRawValue_z[3];

  int length_x = sprintf((char *)uartBuffer_x, "%10lu", adcRawValue_x);
 80021a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4917      	ldr	r1, [pc, #92]	; (8002208 <spi_send_all_three_values+0x80>)
 80021ac:	4618      	mov	r0, r3
 80021ae:	f011 fcc5 	bl	8013b3c <siprintf>
 80021b2:	67b8      	str	r0, [r7, #120]	; 0x78
  int length_y = sprintf((char *)uartBuffer_y, "%10lu", adcRawValue_y);
 80021b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	4913      	ldr	r1, [pc, #76]	; (8002208 <spi_send_all_three_values+0x80>)
 80021bc:	4618      	mov	r0, r3
 80021be:	f011 fcbd 	bl	8013b3c <siprintf>
 80021c2:	6778      	str	r0, [r7, #116]	; 0x74
  int length_z = sprintf((char *)uartBuffer_z, "%10lu", adcRawValue_z);
 80021c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	490f      	ldr	r1, [pc, #60]	; (8002208 <spi_send_all_three_values+0x80>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f011 fcb5 	bl	8013b3c <siprintf>
 80021d2:	6738      	str	r0, [r7, #112]	; 0x70

  int lengthConCat = sprintf((char *)concatenatedBuffer, "%s %s %s\n", (char*)uartBuffer_x, (char*)uartBuffer_y, (char*)uartBuffer_z);
 80021d4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80021d8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021dc:	f107 0014 	add.w	r0, r7, #20
 80021e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	460b      	mov	r3, r1
 80021e8:	4908      	ldr	r1, [pc, #32]	; (800220c <spi_send_all_three_values+0x84>)
 80021ea:	f011 fca7 	bl	8013b3c <siprintf>
 80021ee:	66f8      	str	r0, [r7, #108]	; 0x6c

  HAL_UART_Transmit(&huart4, concatenatedBuffer, 34,100);
 80021f0:	f107 0114 	add.w	r1, r7, #20
 80021f4:	2364      	movs	r3, #100	; 0x64
 80021f6:	2222      	movs	r2, #34	; 0x22
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <spi_send_all_three_values+0x88>)
 80021fa:	f00b fd95 	bl	800dd28 <HAL_UART_Transmit>
  __NOP();
 80021fe:	bf00      	nop
//  HAL_UART_Transmit(&huart4, uartBuffer_y, (uint16_t)length_y, 10);
//  HAL_UART_Transmit(&huart4, ", z: ", 5, 10);
//  HAL_UART_Transmit(&huart4, uartBuffer_z, (uint16_t)length_z, 10);
//  HAL_UART_Transmit(&huart4, "\n", 1, 10);

}
 8002200:	bf00      	nop
 8002202:	3788      	adds	r7, #136	; 0x88
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	08014488 	.word	0x08014488
 800220c:	08014490 	.word	0x08014490
 8002210:	24008668 	.word	0x24008668

08002214 <setNewSPStoAllADCs>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}



void setNewSPStoAllADCs(uint8_t spsValue){
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800221e:	2017      	movs	r0, #23
 8002220:	f001 f935 	bl	800348e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002224:	2028      	movs	r0, #40	; 0x28
 8002226:	f001 f932 	bl	800348e <HAL_NVIC_DisableIRQ>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800222a:	2201      	movs	r2, #1
 800222c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002230:	481f      	ldr	r0, [pc, #124]	; (80022b0 <setNewSPStoAllADCs+0x9c>)
 8002232:	f004 f9e3 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002236:	2201      	movs	r2, #1
 8002238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223c:	481d      	ldr	r0, [pc, #116]	; (80022b4 <setNewSPStoAllADCs+0xa0>)
 800223e:	f004 f9dd 	bl	80065fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002242:	2201      	movs	r2, #1
 8002244:	2110      	movs	r1, #16
 8002246:	481c      	ldr	r0, [pc, #112]	; (80022b8 <setNewSPStoAllADCs+0xa4>)
 8002248:	f004 f9d8 	bl	80065fc <HAL_GPIO_WritePin>
  spi1_soft_reset();
 800224c:	f7ff ff2c 	bl	80020a8 <spi1_soft_reset>
  spi2_soft_reset();
 8002250:	f7ff ff50 	bl	80020f4 <spi2_soft_reset>
  spi4_soft_reset();
 8002254:	f7ff ff74 	bl	8002140 <spi4_soft_reset>
  spi1_adc_init(spsValue);
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fc8c 	bl	8001b78 <spi1_adc_init>
  spi2_adc_init(spsValue);
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fd60 	bl	8001d28 <spi2_adc_init>
  spi4_adc_init(spsValue);
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fe34 	bl	8001ed8 <spi4_adc_init>
  run_all_adc();
 8002270:	f7ff fefe 	bl	8002070 <run_all_adc>
  HAL_Delay(1);
 8002274:	2001      	movs	r0, #1
 8002276:	f000 ffbf 	bl	80031f8 <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227e:	2220      	movs	r2, #32
 8002280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	2240      	movs	r2, #64	; 0x40
 800228a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800229a:	2017      	movs	r0, #23
 800229c:	f001 f8e9 	bl	8003472 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022a0:	2028      	movs	r0, #40	; 0x28
 80022a2:	f001 f8e6 	bl	8003472 <HAL_NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	58021800 	.word	0x58021800
 80022b4:	58020400 	.word	0x58020400
 80022b8:	58021000 	.word	0x58021000

080022bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_MspInit+0x30>)
 80022c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022c8:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_MspInit+0x30>)
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_MspInit+0x30>)
 80022d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	58024400 	.word	0x58024400

080022f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a3e      	ldr	r2, [pc, #248]	; (8002408 <HAL_SD_MspInit+0x118>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d175      	bne.n	80023fe <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <HAL_SD_MspInit+0x11c>)
 8002314:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002318:	4a3c      	ldr	r2, [pc, #240]	; (800240c <HAL_SD_MspInit+0x11c>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002322:	4b3a      	ldr	r3, [pc, #232]	; (800240c <HAL_SD_MspInit+0x11c>)
 8002324:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_SD_MspInit+0x11c>)
 8002332:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002336:	4a35      	ldr	r2, [pc, #212]	; (800240c <HAL_SD_MspInit+0x11c>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <HAL_SD_MspInit+0x11c>)
 8002342:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234e:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_SD_MspInit+0x11c>)
 8002350:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002354:	4a2d      	ldr	r2, [pc, #180]	; (800240c <HAL_SD_MspInit+0x11c>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800235e:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_SD_MspInit+0x11c>)
 8002360:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_SD_MspInit+0x11c>)
 800236e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002372:	4a26      	ldr	r2, [pc, #152]	; (800240c <HAL_SD_MspInit+0x11c>)
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_SD_MspInit+0x11c>)
 800237e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800238a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800238e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800239c:	230c      	movs	r3, #12
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4619      	mov	r1, r3
 80023a6:	481a      	ldr	r0, [pc, #104]	; (8002410 <HAL_SD_MspInit+0x120>)
 80023a8:	f003 ff78 	bl	800629c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80023ac:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023be:	230c      	movs	r3, #12
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c2:	f107 031c 	add.w	r3, r7, #28
 80023c6:	4619      	mov	r1, r3
 80023c8:	4812      	ldr	r0, [pc, #72]	; (8002414 <HAL_SD_MspInit+0x124>)
 80023ca:	f003 ff67 	bl	800629c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ce:	2304      	movs	r3, #4
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023de:	230c      	movs	r3, #12
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	480b      	ldr	r0, [pc, #44]	; (8002418 <HAL_SD_MspInit+0x128>)
 80023ea:	f003 ff57 	bl	800629c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	2031      	movs	r0, #49	; 0x31
 80023f4:	f001 f823 	bl	800343e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80023f8:	2031      	movs	r0, #49	; 0x31
 80023fa:	f001 f83a 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	3730      	adds	r7, #48	; 0x30
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	52007000 	.word	0x52007000
 800240c:	58024400 	.word	0x58024400
 8002410:	58020400 	.word	0x58020400
 8002414:	58020800 	.word	0x58020800
 8002418:	58020c00 	.word	0x58020c00

0800241c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0be      	sub	sp, #248	; 0xf8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002438:	22b8      	movs	r2, #184	; 0xb8
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f011 fb75 	bl	8013b2c <memset>
  if(hspi->Instance==SPI1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a72      	ldr	r2, [pc, #456]	; (8002610 <HAL_SPI_MspInit+0x1f4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	f040 80f3 	bne.w	8002634 <HAL_SPI_MspInit+0x218>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800244e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002454:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002460:	4618      	mov	r0, r3
 8002462:	f005 f8e5 	bl	8007630 <HAL_RCCEx_PeriphCLKConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800246c:	f7ff fae0 	bl	8001a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_SPI_MspInit+0x1f8>)
 8002472:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002476:	4a67      	ldr	r2, [pc, #412]	; (8002614 <HAL_SPI_MspInit+0x1f8>)
 8002478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800247c:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002480:	4b64      	ldr	r3, [pc, #400]	; (8002614 <HAL_SPI_MspInit+0x1f8>)
 8002482:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	4b61      	ldr	r3, [pc, #388]	; (8002614 <HAL_SPI_MspInit+0x1f8>)
 8002490:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002494:	4a5f      	ldr	r2, [pc, #380]	; (8002614 <HAL_SPI_MspInit+0x1f8>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800249e:	4b5d      	ldr	r3, [pc, #372]	; (8002614 <HAL_SPI_MspInit+0x1f8>)
 80024a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_SPI_MspInit+0x1f8>)
 80024ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80024b2:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_SPI_MspInit+0x1f8>)
 80024b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80024bc:	4b55      	ldr	r3, [pc, #340]	; (8002614 <HAL_SPI_MspInit+0x1f8>)
 80024be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	623b      	str	r3, [r7, #32]
 80024c8:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ca:	23c0      	movs	r3, #192	; 0xc0
 80024cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024e2:	2305      	movs	r3, #5
 80024e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024ec:	4619      	mov	r1, r3
 80024ee:	484a      	ldr	r0, [pc, #296]	; (8002618 <HAL_SPI_MspInit+0x1fc>)
 80024f0:	f003 fed4 	bl	800629c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800250e:	2305      	movs	r3, #5
 8002510:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002514:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002518:	4619      	mov	r1, r3
 800251a:	4840      	ldr	r0, [pc, #256]	; (800261c <HAL_SPI_MspInit+0x200>)
 800251c:	f003 febe 	bl	800629c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002520:	4b3f      	ldr	r3, [pc, #252]	; (8002620 <HAL_SPI_MspInit+0x204>)
 8002522:	4a40      	ldr	r2, [pc, #256]	; (8002624 <HAL_SPI_MspInit+0x208>)
 8002524:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002526:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <HAL_SPI_MspInit+0x204>)
 8002528:	2225      	movs	r2, #37	; 0x25
 800252a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800252c:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <HAL_SPI_MspInit+0x204>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_SPI_MspInit+0x204>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002538:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_SPI_MspInit+0x204>)
 800253a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <HAL_SPI_MspInit+0x204>)
 8002542:	2200      	movs	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_SPI_MspInit+0x204>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800254c:	4b34      	ldr	r3, [pc, #208]	; (8002620 <HAL_SPI_MspInit+0x204>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002552:	4b33      	ldr	r3, [pc, #204]	; (8002620 <HAL_SPI_MspInit+0x204>)
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002558:	4b31      	ldr	r3, [pc, #196]	; (8002620 <HAL_SPI_MspInit+0x204>)
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800255e:	4830      	ldr	r0, [pc, #192]	; (8002620 <HAL_SPI_MspInit+0x204>)
 8002560:	f000 ffb0 	bl	80034c4 <HAL_DMA_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 800256a:	f7ff fa61 	bl	8001a30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a2b      	ldr	r2, [pc, #172]	; (8002620 <HAL_SPI_MspInit+0x204>)
 8002572:	67da      	str	r2, [r3, #124]	; 0x7c
 8002574:	4a2a      	ldr	r2, [pc, #168]	; (8002620 <HAL_SPI_MspInit+0x204>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 800257a:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 800257c:	4a2b      	ldr	r2, [pc, #172]	; (800262c <HAL_SPI_MspInit+0x210>)
 800257e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 8002582:	2226      	movs	r2, #38	; 0x26
 8002584:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002586:	4b28      	ldr	r3, [pc, #160]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 8002588:	2240      	movs	r2, #64	; 0x40
 800258a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002592:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 8002594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002598:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80025b8:	481b      	ldr	r0, [pc, #108]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 80025ba:	f000 ff83 	bl	80034c4 <HAL_DMA_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 80025c4:	f7ff fa34 	bl	8001a30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 80025cc:	679a      	str	r2, [r3, #120]	; 0x78
 80025ce:	4a16      	ldr	r2, [pc, #88]	; (8002628 <HAL_SPI_MspInit+0x20c>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2100      	movs	r1, #0
 80025d8:	2023      	movs	r0, #35	; 0x23
 80025da:	f000 ff30 	bl	800343e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025de:	2023      	movs	r0, #35	; 0x23
 80025e0:	f000 ff47 	bl	8003472 <HAL_NVIC_EnableIRQ>
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
//    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

    // SPI1 MISO interrupt setting FIXME
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025e4:	2340      	movs	r3, #64	; 0x40
 80025e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING; //GPIO_MODE_AF_PP  | TRIGGER_RISING | TRIGGER_FALLING;
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_SPI_MspInit+0x214>)
 80025ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025fc:	2305      	movs	r3, #5
 80025fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002606:	4619      	mov	r1, r3
 8002608:	4803      	ldr	r0, [pc, #12]	; (8002618 <HAL_SPI_MspInit+0x1fc>)
 800260a:	f003 fe47 	bl	800629c <HAL_GPIO_Init>


  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800260e:	e1cb      	b.n	80029a8 <HAL_SPI_MspInit+0x58c>
 8002610:	40013000 	.word	0x40013000
 8002614:	58024400 	.word	0x58024400
 8002618:	58020000 	.word	0x58020000
 800261c:	58021800 	.word	0x58021800
 8002620:	240082b4 	.word	0x240082b4
 8002624:	40020010 	.word	0x40020010
 8002628:	2400832c 	.word	0x2400832c
 800262c:	40020028 	.word	0x40020028
 8002630:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a72      	ldr	r2, [pc, #456]	; (8002804 <HAL_SPI_MspInit+0x3e8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f040 80f4 	bne.w	8002828 <HAL_SPI_MspInit+0x40c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800264a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800264e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002652:	4618      	mov	r0, r3
 8002654:	f004 ffec 	bl	8007630 <HAL_RCCEx_PeriphCLKConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 800265e:	f7ff f9e7 	bl	8001a30 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002662:	4b69      	ldr	r3, [pc, #420]	; (8002808 <HAL_SPI_MspInit+0x3ec>)
 8002664:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002668:	4a67      	ldr	r2, [pc, #412]	; (8002808 <HAL_SPI_MspInit+0x3ec>)
 800266a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_SPI_MspInit+0x3ec>)
 8002674:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002680:	4b61      	ldr	r3, [pc, #388]	; (8002808 <HAL_SPI_MspInit+0x3ec>)
 8002682:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002686:	4a60      	ldr	r2, [pc, #384]	; (8002808 <HAL_SPI_MspInit+0x3ec>)
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002690:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_SPI_MspInit+0x3ec>)
 8002692:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	4b5a      	ldr	r3, [pc, #360]	; (8002808 <HAL_SPI_MspInit+0x3ec>)
 80026a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_SPI_MspInit+0x3ec>)
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80026ae:	4b56      	ldr	r3, [pc, #344]	; (8002808 <HAL_SPI_MspInit+0x3ec>)
 80026b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026bc:	2302      	movs	r3, #2
 80026be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026d4:	2305      	movs	r3, #5
 80026d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026de:	4619      	mov	r1, r3
 80026e0:	484a      	ldr	r0, [pc, #296]	; (800280c <HAL_SPI_MspInit+0x3f0>)
 80026e2:	f003 fddb 	bl	800629c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 80026e6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80026ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002700:	2305      	movs	r3, #5
 8002702:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800270a:	4619      	mov	r1, r3
 800270c:	4840      	ldr	r0, [pc, #256]	; (8002810 <HAL_SPI_MspInit+0x3f4>)
 800270e:	f003 fdc5 	bl	800629c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream7;
 8002712:	4b40      	ldr	r3, [pc, #256]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 8002714:	4a40      	ldr	r2, [pc, #256]	; (8002818 <HAL_SPI_MspInit+0x3fc>)
 8002716:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002718:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 800271a:	2227      	movs	r2, #39	; 0x27
 800271c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800272a:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 800272c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002730:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 8002734:	2200      	movs	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002738:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800273e:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 8002740:	2200      	movs	r2, #0
 8002742:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002744:	4b33      	ldr	r3, [pc, #204]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 8002746:	2200      	movs	r2, #0
 8002748:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800274a:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002750:	4830      	ldr	r0, [pc, #192]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 8002752:	f000 feb7 	bl	80034c4 <HAL_DMA_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_SPI_MspInit+0x344>
      Error_Handler();
 800275c:	f7ff f968 	bl	8001a30 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a2c      	ldr	r2, [pc, #176]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 8002764:	67da      	str	r2, [r3, #124]	; 0x7c
 8002766:	4a2b      	ldr	r2, [pc, #172]	; (8002814 <HAL_SPI_MspInit+0x3f8>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA2_Stream0;
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_SPI_MspInit+0x400>)
 800276e:	4a2c      	ldr	r2, [pc, #176]	; (8002820 <HAL_SPI_MspInit+0x404>)
 8002770:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_SPI_MspInit+0x400>)
 8002774:	2228      	movs	r2, #40	; 0x28
 8002776:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_SPI_MspInit+0x400>)
 800277a:	2240      	movs	r2, #64	; 0x40
 800277c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_SPI_MspInit+0x400>)
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_SPI_MspInit+0x400>)
 8002786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_SPI_MspInit+0x400>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_SPI_MspInit+0x400>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002798:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_SPI_MspInit+0x400>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <HAL_SPI_MspInit+0x400>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_SPI_MspInit+0x400>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80027aa:	481c      	ldr	r0, [pc, #112]	; (800281c <HAL_SPI_MspInit+0x400>)
 80027ac:	f000 fe8a 	bl	80034c4 <HAL_DMA_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_SPI_MspInit+0x39e>
      Error_Handler();
 80027b6:	f7ff f93b 	bl	8001a30 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a17      	ldr	r2, [pc, #92]	; (800281c <HAL_SPI_MspInit+0x400>)
 80027be:	679a      	str	r2, [r3, #120]	; 0x78
 80027c0:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_SPI_MspInit+0x400>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	2024      	movs	r0, #36	; 0x24
 80027cc:	f000 fe37 	bl	800343e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80027d0:	2024      	movs	r0, #36	; 0x24
 80027d2:	f000 fe4e 	bl	8003472 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80027d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_SPI_MspInit+0x408>)
 80027e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027f0:	2305      	movs	r3, #5
 80027f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027fa:	4619      	mov	r1, r3
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <HAL_SPI_MspInit+0x3f4>)
 80027fe:	f003 fd4d 	bl	800629c <HAL_GPIO_Init>
}
 8002802:	e0d1      	b.n	80029a8 <HAL_SPI_MspInit+0x58c>
 8002804:	40003800 	.word	0x40003800
 8002808:	58024400 	.word	0x58024400
 800280c:	58020800 	.word	0x58020800
 8002810:	58020400 	.word	0x58020400
 8002814:	240083a4 	.word	0x240083a4
 8002818:	400200b8 	.word	0x400200b8
 800281c:	2400841c 	.word	0x2400841c
 8002820:	40020410 	.word	0x40020410
 8002824:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI4)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a60      	ldr	r2, [pc, #384]	; (80029b0 <HAL_SPI_MspInit+0x594>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f040 80ba 	bne.w	80029a8 <HAL_SPI_MspInit+0x58c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002844:	4618      	mov	r0, r3
 8002846:	f004 fef3 	bl	8007630 <HAL_RCCEx_PeriphCLKConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_SPI_MspInit+0x438>
      Error_Handler();
 8002850:	f7ff f8ee 	bl	8001a30 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002854:	4b57      	ldr	r3, [pc, #348]	; (80029b4 <HAL_SPI_MspInit+0x598>)
 8002856:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800285a:	4a56      	ldr	r2, [pc, #344]	; (80029b4 <HAL_SPI_MspInit+0x598>)
 800285c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002860:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002864:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_SPI_MspInit+0x598>)
 8002866:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800286a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002872:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <HAL_SPI_MspInit+0x598>)
 8002874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002878:	4a4e      	ldr	r2, [pc, #312]	; (80029b4 <HAL_SPI_MspInit+0x598>)
 800287a:	f043 0310 	orr.w	r3, r3, #16
 800287e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002882:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_SPI_MspInit+0x598>)
 8002884:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002890:	2364      	movs	r3, #100	; 0x64
 8002892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80028a8:	2305      	movs	r3, #5
 80028aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4840      	ldr	r0, [pc, #256]	; (80029b8 <HAL_SPI_MspInit+0x59c>)
 80028b6:	f003 fcf1 	bl	800629c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream2;
 80028ba:	4b40      	ldr	r3, [pc, #256]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028bc:	4a40      	ldr	r2, [pc, #256]	; (80029c0 <HAL_SPI_MspInit+0x5a4>)
 80028be:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80028c0:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028c2:	2253      	movs	r2, #83	; 0x53
 80028c4:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028d2:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d8:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028da:	4b38      	ldr	r3, [pc, #224]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e0:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80028e6:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ec:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f2:	4b32      	ldr	r3, [pc, #200]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80028f8:	4830      	ldr	r0, [pc, #192]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 80028fa:	f000 fde3 	bl	80034c4 <HAL_DMA_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_SPI_MspInit+0x4ec>
      Error_Handler();
 8002904:	f7ff f894 	bl	8001a30 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a2c      	ldr	r2, [pc, #176]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 800290c:	67da      	str	r2, [r3, #124]	; 0x7c
 800290e:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <HAL_SPI_MspInit+0x5a0>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream3;
 8002914:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 8002916:	4a2c      	ldr	r2, [pc, #176]	; (80029c8 <HAL_SPI_MspInit+0x5ac>)
 8002918:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800291a:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 800291c:	2254      	movs	r2, #84	; 0x54
 800291e:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002920:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 8002928:	2200      	movs	r2, #0
 800292a:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 800292e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002932:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 8002936:	2200      	movs	r2, #0
 8002938:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 800294e:	2200      	movs	r2, #0
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002952:	481c      	ldr	r0, [pc, #112]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 8002954:	f000 fdb6 	bl	80034c4 <HAL_DMA_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_SPI_MspInit+0x546>
      Error_Handler();
 800295e:	f7ff f867 	bl	8001a30 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 8002966:	679a      	str	r2, [r3, #120]	; 0x78
 8002968:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <HAL_SPI_MspInit+0x5a8>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	2054      	movs	r0, #84	; 0x54
 8002974:	f000 fd63 	bl	800343e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002978:	2054      	movs	r0, #84	; 0x54
 800297a:	f000 fd7a 	bl	8003472 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800297e:	2320      	movs	r3, #32
 8002980:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_SPI_MspInit+0x5b0>)
 8002986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002996:	2305      	movs	r3, #5
 8002998:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800299c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_SPI_MspInit+0x59c>)
 80029a4:	f003 fc7a 	bl	800629c <HAL_GPIO_Init>
}
 80029a8:	bf00      	nop
 80029aa:	37f8      	adds	r7, #248	; 0xf8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40013400 	.word	0x40013400
 80029b4:	58024400 	.word	0x58024400
 80029b8:	58021000 	.word	0x58021000
 80029bc:	24008494 	.word	0x24008494
 80029c0:	40020040 	.word	0x40020040
 80029c4:	2400850c 	.word	0x2400850c
 80029c8:	40020058 	.word	0x40020058
 80029cc:	00210002 	.word	0x00210002

080029d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a33      	ldr	r2, [pc, #204]	; (8002abc <HAL_TIM_Base_MspInit+0xec>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10f      	bne.n	8002a12 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029f2:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 80029f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80029f8:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002a02:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8002a04:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002a10:	e050      	b.n	8002ab4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d12f      	bne.n	8002a7c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a1c:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8002a1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a22:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8002a2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8002a3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8002a4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 031c 	add.w	r3, r7, #28
 8002a72:	4619      	mov	r1, r3
 8002a74:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <HAL_TIM_Base_MspInit+0xf4>)
 8002a76:	f003 fc11 	bl	800629c <HAL_GPIO_Init>
}
 8002a7a:	e01b      	b.n	8002ab4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM16)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <HAL_TIM_Base_MspInit+0xf8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d116      	bne.n	8002ab4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8002a88:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002a8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8002a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a92:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8002a98:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	2075      	movs	r0, #117	; 0x75
 8002aaa:	f000 fcc8 	bl	800343e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002aae:	2075      	movs	r0, #117	; 0x75
 8002ab0:	f000 fcdf 	bl	8003472 <HAL_NVIC_EnableIRQ>
}
 8002ab4:	bf00      	nop
 8002ab6:	3730      	adds	r7, #48	; 0x30
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	58020000 	.word	0x58020000
 8002ac8:	40014400 	.word	0x40014400

08002acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <HAL_TIM_MspPostInit+0x6c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d11f      	bne.n	8002b2e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <HAL_TIM_MspPostInit+0x70>)
 8002af0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002af4:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_TIM_MspPostInit+0x70>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_TIM_MspPostInit+0x70>)
 8002b00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	4619      	mov	r1, r3
 8002b28:	4805      	ldr	r0, [pc, #20]	; (8002b40 <HAL_TIM_MspPostInit+0x74>)
 8002b2a:	f003 fbb7 	bl	800629c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b2e:	bf00      	nop
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	58020000 	.word	0x58020000

08002b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0b8      	sub	sp, #224	; 0xe0
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	22b8      	movs	r2, #184	; 0xb8
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f010 ffe1 	bl	8013b2c <memset>
  if(huart->Instance==UART4)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a3f      	ldr	r2, [pc, #252]	; (8002c6c <HAL_UART_MspInit+0x128>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d176      	bne.n	8002c62 <HAL_UART_MspInit+0x11e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b74:	2302      	movs	r3, #2
 8002b76:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 fd54 	bl	8007630 <HAL_RCCEx_PeriphCLKConfig>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b8e:	f7fe ff4f 	bl	8001a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b92:	4b37      	ldr	r3, [pc, #220]	; (8002c70 <HAL_UART_MspInit+0x12c>)
 8002b94:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002b98:	4a35      	ldr	r2, [pc, #212]	; (8002c70 <HAL_UART_MspInit+0x12c>)
 8002b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b9e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002ba2:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_UART_MspInit+0x12c>)
 8002ba4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_UART_MspInit+0x12c>)
 8002bb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002bb6:	4a2e      	ldr	r2, [pc, #184]	; (8002c70 <HAL_UART_MspInit+0x12c>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <HAL_UART_MspInit+0x12c>)
 8002bc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002be6:	2308      	movs	r3, #8
 8002be8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4820      	ldr	r0, [pc, #128]	; (8002c74 <HAL_UART_MspInit+0x130>)
 8002bf4:	f003 fb52 	bl	800629c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002bfa:	4a20      	ldr	r2, [pc, #128]	; (8002c7c <HAL_UART_MspInit+0x138>)
 8002bfc:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c04:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c16:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c18:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c1e:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002c36:	4810      	ldr	r0, [pc, #64]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c38:	f000 fc44 	bl	80034c4 <HAL_DMA_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8002c42:	f7fe fef5 	bl	8001a30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c4a:	679a      	str	r2, [r3, #120]	; 0x78
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_UART_MspInit+0x134>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	2034      	movs	r0, #52	; 0x34
 8002c58:	f000 fbf1 	bl	800343e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c5c:	2034      	movs	r0, #52	; 0x34
 8002c5e:	f000 fc08 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002c62:	bf00      	nop
 8002c64:	37e0      	adds	r7, #224	; 0xe0
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40004c00 	.word	0x40004c00
 8002c70:	58024400 	.word	0x58024400
 8002c74:	58020000 	.word	0x58020000
 8002c78:	240086f8 	.word	0x240086f8
 8002c7c:	40020070 	.word	0x40020070

08002c80 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_FMC_MspInit+0xe8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d161      	bne.n	8002d60 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 8002c9c:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_FMC_MspInit+0xe8>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ca2:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <HAL_FMC_MspInit+0xec>)
 8002ca4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002ca8:	4a30      	ldr	r2, [pc, #192]	; (8002d6c <HAL_FMC_MspInit+0xec>)
 8002caa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cae:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_FMC_MspInit+0xec>)
 8002cb4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002cc0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002cc4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cd2:	230c      	movs	r3, #12
 8002cd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4825      	ldr	r0, [pc, #148]	; (8002d70 <HAL_FMC_MspInit+0xf0>)
 8002cdc:	f003 fade 	bl	800629c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002ce0:	230d      	movs	r3, #13
 8002ce2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cec:	2303      	movs	r3, #3
 8002cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cf0:	230c      	movs	r3, #12
 8002cf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	481e      	ldr	r0, [pc, #120]	; (8002d74 <HAL_FMC_MspInit+0xf4>)
 8002cfa:	f003 facf 	bl	800629c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002cfe:	f248 1337 	movw	r3, #33079	; 0x8137
 8002d02:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d10:	230c      	movs	r3, #12
 8002d12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	4619      	mov	r1, r3
 8002d18:	4817      	ldr	r0, [pc, #92]	; (8002d78 <HAL_FMC_MspInit+0xf8>)
 8002d1a:	f003 fabf 	bl	800629c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002d1e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002d22:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d30:	230c      	movs	r3, #12
 8002d32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	4619      	mov	r1, r3
 8002d38:	4810      	ldr	r0, [pc, #64]	; (8002d7c <HAL_FMC_MspInit+0xfc>)
 8002d3a:	f003 faaf 	bl	800629c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002d3e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002d42:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d50:	230c      	movs	r3, #12
 8002d52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	4619      	mov	r1, r3
 8002d58:	4809      	ldr	r0, [pc, #36]	; (8002d80 <HAL_FMC_MspInit+0x100>)
 8002d5a:	f003 fa9f 	bl	800629c <HAL_GPIO_Init>
 8002d5e:	e000      	b.n	8002d62 <HAL_FMC_MspInit+0xe2>
    return;
 8002d60:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	240087e0 	.word	0x240087e0
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	58021400 	.word	0x58021400
 8002d74:	58020800 	.word	0x58020800
 8002d78:	58021800 	.word	0x58021800
 8002d7c:	58021000 	.word	0x58021000
 8002d80:	58020c00 	.word	0x58020c00

08002d84 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002d8c:	f7ff ff78 	bl	8002c80 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <NMI_Handler+0x4>

08002d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da2:	e7fe      	b.n	8002da2 <HardFault_Handler+0x4>

08002da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <MemManage_Handler+0x4>

08002daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dae:	e7fe      	b.n	8002dae <BusFault_Handler+0x4>

08002db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <UsageFault_Handler+0x4>

08002db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de4:	f000 f9e8 	bl	80031b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}

08002dec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <DMA1_Stream0_IRQHandler+0x10>)
 8002df2:	f001 fec5 	bl	8004b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	240082b4 	.word	0x240082b4

08002e00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <DMA1_Stream1_IRQHandler+0x10>)
 8002e06:	f001 febb 	bl	8004b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	2400832c 	.word	0x2400832c

08002e14 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <DMA1_Stream2_IRQHandler+0x10>)
 8002e1a:	f001 feb1 	bl	8004b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	24008494 	.word	0x24008494

08002e28 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <DMA1_Stream3_IRQHandler+0x10>)
 8002e2e:	f001 fea7 	bl	8004b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2400850c 	.word	0x2400850c

08002e3c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <DMA1_Stream4_IRQHandler+0x10>)
 8002e42:	f001 fe9d 	bl	8004b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	240086f8 	.word	0x240086f8

08002e50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <SPI1_IRQHandler+0x10>)
 8002e56:	f008 fe5f 	bl	800bb18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2400811c 	.word	0x2400811c

08002e64 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <SPI2_IRQHandler+0x10>)
 8002e6a:	f008 fe55 	bl	800bb18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	240081a4 	.word	0x240081a4

08002e78 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <DMA1_Stream7_IRQHandler+0x10>)
 8002e7e:	f001 fe7f 	bl	8004b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	240083a4 	.word	0x240083a4

08002e8c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <SDMMC1_IRQHandler+0x10>)
 8002e92:	f006 fee5 	bl	8009c60 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	240080a0 	.word	0x240080a0

08002ea0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <UART4_IRQHandler+0x10>)
 8002ea6:	f00b f82b 	bl	800df00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	24008668 	.word	0x24008668

08002eb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <DMA2_Stream0_IRQHandler+0x10>)
 8002eba:	f001 fe61 	bl	8004b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	2400841c 	.word	0x2400841c

08002ec8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <SPI4_IRQHandler+0x10>)
 8002ece:	f008 fe23 	bl	800bb18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	2400822c 	.word	0x2400822c

08002edc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <TIM16_IRQHandler+0x10>)
 8002ee2:	f009 fb31 	bl	800c548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2400861c 	.word	0x2400861c

08002ef0 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002ef4:	2020      	movs	r0, #32
 8002ef6:	f003 fbb4 	bl	8006662 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002efa:	2040      	movs	r0, #64	; 0x40
 8002efc:	f003 fbb1 	bl	8006662 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002f00:	2080      	movs	r0, #128	; 0x80
 8002f02:	f003 fbae 	bl	8006662 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002f06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f0a:	f003 fbaa 	bl	8006662 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002f16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f1a:	f003 fba2 	bl	8006662 <HAL_GPIO_EXTI_IRQHandler>

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f2c:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <_sbrk+0x5c>)
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <_sbrk+0x60>)
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <_sbrk+0x64>)
 8002f42:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <_sbrk+0x68>)
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <_sbrk+0x64>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d207      	bcs.n	8002f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f54:	f010 fdc0 	bl	8013ad8 <__errno>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	e009      	b.n	8002f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <_sbrk+0x64>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <_sbrk+0x64>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <_sbrk+0x64>)
 8002f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	24100000 	.word	0x24100000
 8002f84:	00000800 	.word	0x00000800
 8002f88:	240087e4 	.word	0x240087e4
 8002f8c:	24008ca0 	.word	0x24008ca0

08002f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <SystemInit+0xd0>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	4a31      	ldr	r2, [pc, #196]	; (8003060 <SystemInit+0xd0>)
 8002f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <SystemInit+0xd4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d807      	bhi.n	8002fc0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fb0:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <SystemInit+0xd4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 030f 	bic.w	r3, r3, #15
 8002fb8:	4a2a      	ldr	r2, [pc, #168]	; (8003064 <SystemInit+0xd4>)
 8002fba:	f043 0303 	orr.w	r3, r3, #3
 8002fbe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <SystemInit+0xd8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a28      	ldr	r2, [pc, #160]	; (8003068 <SystemInit+0xd8>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fcc:	4b26      	ldr	r3, [pc, #152]	; (8003068 <SystemInit+0xd8>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002fd2:	4b25      	ldr	r3, [pc, #148]	; (8003068 <SystemInit+0xd8>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4924      	ldr	r1, [pc, #144]	; (8003068 <SystemInit+0xd8>)
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <SystemInit+0xdc>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002fde:	4b21      	ldr	r3, [pc, #132]	; (8003064 <SystemInit+0xd4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <SystemInit+0xd4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 030f 	bic.w	r3, r3, #15
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <SystemInit+0xd4>)
 8002ff4:	f043 0303 	orr.w	r3, r3, #3
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <SystemInit+0xd8>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <SystemInit+0xd8>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <SystemInit+0xd8>)
 8003008:	2200      	movs	r2, #0
 800300a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <SystemInit+0xd8>)
 800300e:	4a18      	ldr	r2, [pc, #96]	; (8003070 <SystemInit+0xe0>)
 8003010:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <SystemInit+0xd8>)
 8003014:	4a17      	ldr	r2, [pc, #92]	; (8003074 <SystemInit+0xe4>)
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <SystemInit+0xd8>)
 800301a:	4a17      	ldr	r2, [pc, #92]	; (8003078 <SystemInit+0xe8>)
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <SystemInit+0xd8>)
 8003020:	2200      	movs	r2, #0
 8003022:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <SystemInit+0xd8>)
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <SystemInit+0xe8>)
 8003028:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <SystemInit+0xd8>)
 800302c:	2200      	movs	r2, #0
 800302e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <SystemInit+0xd8>)
 8003032:	4a11      	ldr	r2, [pc, #68]	; (8003078 <SystemInit+0xe8>)
 8003034:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <SystemInit+0xd8>)
 8003038:	2200      	movs	r2, #0
 800303a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <SystemInit+0xd8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a09      	ldr	r2, [pc, #36]	; (8003068 <SystemInit+0xd8>)
 8003042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003046:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003048:	4b07      	ldr	r3, [pc, #28]	; (8003068 <SystemInit+0xd8>)
 800304a:	2200      	movs	r2, #0
 800304c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <SystemInit+0xec>)
 8003050:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003054:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00
 8003064:	52002000 	.word	0x52002000
 8003068:	58024400 	.word	0x58024400
 800306c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003070:	02020200 	.word	0x02020200
 8003074:	01ff0000 	.word	0x01ff0000
 8003078:	01010280 	.word	0x01010280
 800307c:	52004000 	.word	0x52004000

08003080 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8003080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003084:	f7ff ff84 	bl	8002f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003088:	480c      	ldr	r0, [pc, #48]	; (80030bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800308a:	490d      	ldr	r1, [pc, #52]	; (80030c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800308c:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800308e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003090:	e002      	b.n	8003098 <LoopCopyDataInit>

08003092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003096:	3304      	adds	r3, #4

08003098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800309a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800309c:	d3f9      	bcc.n	8003092 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030a0:	4c0a      	ldr	r4, [pc, #40]	; (80030cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80030a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a4:	e001      	b.n	80030aa <LoopFillZerobss>

080030a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a8:	3204      	adds	r2, #4

080030aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ac:	d3fb      	bcc.n	80030a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030ae:	f010 fd19 	bl	8013ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030b2:	f7fd fbf3 	bl	800089c <main>
  bx  lr
 80030b6:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 80030b8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80030bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80030c0:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80030c4:	08014600 	.word	0x08014600
  ldr r2, =_sbss
 80030c8:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80030cc:	24008ca0 	.word	0x24008ca0

080030d0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030d0:	e7fe      	b.n	80030d0 <ADC_IRQHandler>
	...

080030d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030da:	2003      	movs	r0, #3
 80030dc:	f000 f9a4 	bl	8003428 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80030e0:	f004 f8d0 	bl	8007284 <HAL_RCC_GetSysClockFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_Init+0x68>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	4913      	ldr	r1, [pc, #76]	; (8003140 <HAL_Init+0x6c>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80030fe:	4b0f      	ldr	r3, [pc, #60]	; (800313c <HAL_Init+0x68>)
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <HAL_Init+0x6c>)
 8003108:	5cd3      	ldrb	r3, [r2, r3]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
 8003114:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <HAL_Init+0x70>)
 8003116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003118:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <HAL_Init+0x74>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800311e:	200e      	movs	r0, #14
 8003120:	f000 f814 	bl	800314c <HAL_InitTick>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e002      	b.n	8003134 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800312e:	f7ff f8c5 	bl	80022bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	58024400 	.word	0x58024400
 8003140:	080144e8 	.word	0x080144e8
 8003144:	2400000c 	.word	0x2400000c
 8003148:	24000008 	.word	0x24000008

0800314c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003154:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_InitTick+0x60>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e021      	b.n	80031a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_InitTick+0x64>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_InitTick+0x60>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f997 	bl	80034aa <HAL_SYSTICK_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e00e      	b.n	80031a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b0f      	cmp	r3, #15
 800318a:	d80a      	bhi.n	80031a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800318c:	2200      	movs	r2, #0
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	f000 f953 	bl	800343e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003198:	4a06      	ldr	r2, [pc, #24]	; (80031b4 <HAL_InitTick+0x68>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	24000014 	.word	0x24000014
 80031b0:	24000008 	.word	0x24000008
 80031b4:	24000010 	.word	0x24000010

080031b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_IncTick+0x20>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_IncTick+0x24>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <HAL_IncTick+0x24>)
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	24000014 	.word	0x24000014
 80031dc:	240087e8 	.word	0x240087e8

080031e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return uwTick;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <HAL_GetTick+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	240087e8 	.word	0x240087e8

080031f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003200:	f7ff ffee 	bl	80031e0 <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d005      	beq.n	800321e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_Delay+0x44>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800321e:	bf00      	nop
 8003220:	f7ff ffde 	bl	80031e0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	429a      	cmp	r2, r3
 800322e:	d8f7      	bhi.n	8003220 <HAL_Delay+0x28>
  {
  }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	24000014 	.word	0x24000014

08003240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <__NVIC_SetPriorityGrouping+0x40>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800325c:	4013      	ands	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <__NVIC_SetPriorityGrouping+0x44>)
 800326a:	4313      	orrs	r3, r2
 800326c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326e:	4a04      	ldr	r2, [pc, #16]	; (8003280 <__NVIC_SetPriorityGrouping+0x40>)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	60d3      	str	r3, [r2, #12]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00
 8003284:	05fa0000 	.word	0x05fa0000

08003288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <__NVIC_GetPriorityGrouping+0x18>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	0a1b      	lsrs	r3, r3, #8
 8003292:	f003 0307 	and.w	r3, r3, #7
}
 8003296:	4618      	mov	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	db0b      	blt.n	80032ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	f003 021f 	and.w	r2, r3, #31
 80032bc:	4907      	ldr	r1, [pc, #28]	; (80032dc <__NVIC_EnableIRQ+0x38>)
 80032be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2001      	movs	r0, #1
 80032c6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	e000e100 	.word	0xe000e100

080032e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	db12      	blt.n	8003318 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	f003 021f 	and.w	r2, r3, #31
 80032f8:	490a      	ldr	r1, [pc, #40]	; (8003324 <__NVIC_DisableIRQ+0x44>)
 80032fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2001      	movs	r0, #1
 8003302:	fa00 f202 	lsl.w	r2, r0, r2
 8003306:	3320      	adds	r3, #32
 8003308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800330c:	f3bf 8f4f 	dsb	sy
}
 8003310:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003312:	f3bf 8f6f 	isb	sy
}
 8003316:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000e100 	.word	0xe000e100

08003328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	6039      	str	r1, [r7, #0]
 8003332:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003338:	2b00      	cmp	r3, #0
 800333a:	db0a      	blt.n	8003352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	490c      	ldr	r1, [pc, #48]	; (8003374 <__NVIC_SetPriority+0x4c>)
 8003342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003346:	0112      	lsls	r2, r2, #4
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	440b      	add	r3, r1
 800334c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003350:	e00a      	b.n	8003368 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4908      	ldr	r1, [pc, #32]	; (8003378 <__NVIC_SetPriority+0x50>)
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	3b04      	subs	r3, #4
 8003360:	0112      	lsls	r2, r2, #4
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	440b      	add	r3, r1
 8003366:	761a      	strb	r2, [r3, #24]
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000e100 	.word	0xe000e100
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f1c3 0307 	rsb	r3, r3, #7
 8003396:	2b04      	cmp	r3, #4
 8003398:	bf28      	it	cs
 800339a:	2304      	movcs	r3, #4
 800339c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3304      	adds	r3, #4
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d902      	bls.n	80033ac <NVIC_EncodePriority+0x30>
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3b03      	subs	r3, #3
 80033aa:	e000      	b.n	80033ae <NVIC_EncodePriority+0x32>
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43da      	mvns	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	401a      	ands	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c4:	f04f 31ff 	mov.w	r1, #4294967295
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa01 f303 	lsl.w	r3, r1, r3
 80033ce:	43d9      	mvns	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	4313      	orrs	r3, r2
         );
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3724      	adds	r7, #36	; 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f4:	d301      	bcc.n	80033fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033f6:	2301      	movs	r3, #1
 80033f8:	e00f      	b.n	800341a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <SysTick_Config+0x40>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003402:	210f      	movs	r1, #15
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	f7ff ff8e 	bl	8003328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <SysTick_Config+0x40>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <SysTick_Config+0x40>)
 8003414:	2207      	movs	r2, #7
 8003416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	e000e010 	.word	0xe000e010

08003428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ff05 	bl	8003240 <__NVIC_SetPriorityGrouping>
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	4603      	mov	r3, r0
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800344c:	f7ff ff1c 	bl	8003288 <__NVIC_GetPriorityGrouping>
 8003450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	6978      	ldr	r0, [r7, #20]
 8003458:	f7ff ff90 	bl	800337c <NVIC_EncodePriority>
 800345c:	4602      	mov	r2, r0
 800345e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff5f 	bl	8003328 <__NVIC_SetPriority>
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800347c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ff0f 	bl	80032a4 <__NVIC_EnableIRQ>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff1f 	bl	80032e0 <__NVIC_DisableIRQ>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ff96 	bl	80033e4 <SysTick_Config>
 80034b8:	4603      	mov	r3, r0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80034cc:	f7ff fe88 	bl	80031e0 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e37f      	b.n	8003bdc <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a66      	ldr	r2, [pc, #408]	; (800367c <HAL_DMA_Init+0x1b8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d04a      	beq.n	800357c <HAL_DMA_Init+0xb8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a65      	ldr	r2, [pc, #404]	; (8003680 <HAL_DMA_Init+0x1bc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d045      	beq.n	800357c <HAL_DMA_Init+0xb8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a63      	ldr	r2, [pc, #396]	; (8003684 <HAL_DMA_Init+0x1c0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d040      	beq.n	800357c <HAL_DMA_Init+0xb8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a62      	ldr	r2, [pc, #392]	; (8003688 <HAL_DMA_Init+0x1c4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d03b      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a60      	ldr	r2, [pc, #384]	; (800368c <HAL_DMA_Init+0x1c8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d036      	beq.n	800357c <HAL_DMA_Init+0xb8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a5f      	ldr	r2, [pc, #380]	; (8003690 <HAL_DMA_Init+0x1cc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d031      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a5d      	ldr	r2, [pc, #372]	; (8003694 <HAL_DMA_Init+0x1d0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d02c      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a5c      	ldr	r2, [pc, #368]	; (8003698 <HAL_DMA_Init+0x1d4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d027      	beq.n	800357c <HAL_DMA_Init+0xb8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a5a      	ldr	r2, [pc, #360]	; (800369c <HAL_DMA_Init+0x1d8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d022      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a59      	ldr	r2, [pc, #356]	; (80036a0 <HAL_DMA_Init+0x1dc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d01d      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a57      	ldr	r2, [pc, #348]	; (80036a4 <HAL_DMA_Init+0x1e0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d018      	beq.n	800357c <HAL_DMA_Init+0xb8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a56      	ldr	r2, [pc, #344]	; (80036a8 <HAL_DMA_Init+0x1e4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d013      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a54      	ldr	r2, [pc, #336]	; (80036ac <HAL_DMA_Init+0x1e8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00e      	beq.n	800357c <HAL_DMA_Init+0xb8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a53      	ldr	r2, [pc, #332]	; (80036b0 <HAL_DMA_Init+0x1ec>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d009      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a51      	ldr	r2, [pc, #324]	; (80036b4 <HAL_DMA_Init+0x1f0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a50      	ldr	r2, [pc, #320]	; (80036b8 <HAL_DMA_Init+0x1f4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_DMA_Init+0xbc>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_DMA_Init+0xbe>
 8003580:	2300      	movs	r3, #0
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 813c 	beq.w	8003800 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a37      	ldr	r2, [pc, #220]	; (800367c <HAL_DMA_Init+0x1b8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d04a      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a36      	ldr	r2, [pc, #216]	; (8003680 <HAL_DMA_Init+0x1bc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d045      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a34      	ldr	r2, [pc, #208]	; (8003684 <HAL_DMA_Init+0x1c0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d040      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a33      	ldr	r2, [pc, #204]	; (8003688 <HAL_DMA_Init+0x1c4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d03b      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a31      	ldr	r2, [pc, #196]	; (800368c <HAL_DMA_Init+0x1c8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d036      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a30      	ldr	r2, [pc, #192]	; (8003690 <HAL_DMA_Init+0x1cc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d031      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2e      	ldr	r2, [pc, #184]	; (8003694 <HAL_DMA_Init+0x1d0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d02c      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_DMA_Init+0x1d4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d027      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2b      	ldr	r2, [pc, #172]	; (800369c <HAL_DMA_Init+0x1d8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d022      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2a      	ldr	r2, [pc, #168]	; (80036a0 <HAL_DMA_Init+0x1dc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d01d      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <HAL_DMA_Init+0x1e0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d018      	beq.n	8003638 <HAL_DMA_Init+0x174>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <HAL_DMA_Init+0x1e4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d013      	beq.n	8003638 <HAL_DMA_Init+0x174>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a25      	ldr	r2, [pc, #148]	; (80036ac <HAL_DMA_Init+0x1e8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00e      	beq.n	8003638 <HAL_DMA_Init+0x174>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a24      	ldr	r2, [pc, #144]	; (80036b0 <HAL_DMA_Init+0x1ec>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d009      	beq.n	8003638 <HAL_DMA_Init+0x174>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <HAL_DMA_Init+0x1f0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_DMA_Init+0x174>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <HAL_DMA_Init+0x1f4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d108      	bne.n	800364a <HAL_DMA_Init+0x186>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e007      	b.n	800365a <HAL_DMA_Init+0x196>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800365a:	e02f      	b.n	80036bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800365c:	f7ff fdc0 	bl	80031e0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b05      	cmp	r3, #5
 8003668:	d928      	bls.n	80036bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2203      	movs	r2, #3
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e2af      	b.n	8003bdc <HAL_DMA_Init+0x718>
 800367c:	40020010 	.word	0x40020010
 8003680:	40020028 	.word	0x40020028
 8003684:	40020040 	.word	0x40020040
 8003688:	40020058 	.word	0x40020058
 800368c:	40020070 	.word	0x40020070
 8003690:	40020088 	.word	0x40020088
 8003694:	400200a0 	.word	0x400200a0
 8003698:	400200b8 	.word	0x400200b8
 800369c:	40020410 	.word	0x40020410
 80036a0:	40020428 	.word	0x40020428
 80036a4:	40020440 	.word	0x40020440
 80036a8:	40020458 	.word	0x40020458
 80036ac:	40020470 	.word	0x40020470
 80036b0:	40020488 	.word	0x40020488
 80036b4:	400204a0 	.word	0x400204a0
 80036b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1c8      	bne.n	800365c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4b73      	ldr	r3, [pc, #460]	; (80038a4 <HAL_DMA_Init+0x3e0>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80036e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	2b04      	cmp	r3, #4
 800370e:	d107      	bne.n	8003720 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4313      	orrs	r3, r2
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b28      	cmp	r3, #40	; 0x28
 8003726:	d903      	bls.n	8003730 <HAL_DMA_Init+0x26c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b2e      	cmp	r3, #46	; 0x2e
 800372e:	d91f      	bls.n	8003770 <HAL_DMA_Init+0x2ac>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b3e      	cmp	r3, #62	; 0x3e
 8003736:	d903      	bls.n	8003740 <HAL_DMA_Init+0x27c>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b42      	cmp	r3, #66	; 0x42
 800373e:	d917      	bls.n	8003770 <HAL_DMA_Init+0x2ac>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b46      	cmp	r3, #70	; 0x46
 8003746:	d903      	bls.n	8003750 <HAL_DMA_Init+0x28c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b48      	cmp	r3, #72	; 0x48
 800374e:	d90f      	bls.n	8003770 <HAL_DMA_Init+0x2ac>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b4e      	cmp	r3, #78	; 0x4e
 8003756:	d903      	bls.n	8003760 <HAL_DMA_Init+0x29c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b52      	cmp	r3, #82	; 0x52
 800375e:	d907      	bls.n	8003770 <HAL_DMA_Init+0x2ac>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b73      	cmp	r3, #115	; 0x73
 8003766:	d905      	bls.n	8003774 <HAL_DMA_Init+0x2b0>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b77      	cmp	r3, #119	; 0x77
 800376e:	d801      	bhi.n	8003774 <HAL_DMA_Init+0x2b0>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_DMA_Init+0x2b2>
 8003774:	2300      	movs	r3, #0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003780:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f023 0307 	bic.w	r3, r3, #7
 8003798:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d117      	bne.n	80037dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00e      	beq.n	80037dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f002 fbe2 	bl	8005f88 <DMA_CheckFifoParam>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2240      	movs	r2, #64	; 0x40
 80037ce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e1ff      	b.n	8003bdc <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f002 fb1d 	bl	8005e24 <DMA_CalcBaseAndBitshift>
 80037ea:	4603      	mov	r3, r0
 80037ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	223f      	movs	r2, #63	; 0x3f
 80037f8:	409a      	lsls	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	e0fe      	b.n	80039fe <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a28      	ldr	r2, [pc, #160]	; (80038a8 <HAL_DMA_Init+0x3e4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04a      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a27      	ldr	r2, [pc, #156]	; (80038ac <HAL_DMA_Init+0x3e8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d045      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a25      	ldr	r2, [pc, #148]	; (80038b0 <HAL_DMA_Init+0x3ec>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d040      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <HAL_DMA_Init+0x3f0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d03b      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <HAL_DMA_Init+0x3f4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d036      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a21      	ldr	r2, [pc, #132]	; (80038bc <HAL_DMA_Init+0x3f8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d031      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <HAL_DMA_Init+0x3fc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02c      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_DMA_Init+0x400>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d027      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <HAL_DMA_Init+0x404>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <HAL_DMA_Init+0x408>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01d      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <HAL_DMA_Init+0x40c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_DMA_Init+0x410>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <HAL_DMA_Init+0x414>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a15      	ldr	r2, [pc, #84]	; (80038dc <HAL_DMA_Init+0x418>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <HAL_DMA_Init+0x41c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <HAL_DMA_Init+0x420>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d123      	bne.n	80038e8 <HAL_DMA_Init+0x424>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e022      	b.n	80038ea <HAL_DMA_Init+0x426>
 80038a4:	fe10803f 	.word	0xfe10803f
 80038a8:	48022c08 	.word	0x48022c08
 80038ac:	48022c1c 	.word	0x48022c1c
 80038b0:	48022c30 	.word	0x48022c30
 80038b4:	48022c44 	.word	0x48022c44
 80038b8:	48022c58 	.word	0x48022c58
 80038bc:	48022c6c 	.word	0x48022c6c
 80038c0:	48022c80 	.word	0x48022c80
 80038c4:	48022c94 	.word	0x48022c94
 80038c8:	58025408 	.word	0x58025408
 80038cc:	5802541c 	.word	0x5802541c
 80038d0:	58025430 	.word	0x58025430
 80038d4:	58025444 	.word	0x58025444
 80038d8:	58025458 	.word	0x58025458
 80038dc:	5802546c 	.word	0x5802546c
 80038e0:	58025480 	.word	0x58025480
 80038e4:	58025494 	.word	0x58025494
 80038e8:	2300      	movs	r3, #0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d07e      	beq.n	80039ec <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a80      	ldr	r2, [pc, #512]	; (8003af4 <HAL_DMA_Init+0x630>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d021      	beq.n	800393c <HAL_DMA_Init+0x478>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7e      	ldr	r2, [pc, #504]	; (8003af8 <HAL_DMA_Init+0x634>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01c      	beq.n	800393c <HAL_DMA_Init+0x478>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7d      	ldr	r2, [pc, #500]	; (8003afc <HAL_DMA_Init+0x638>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d017      	beq.n	800393c <HAL_DMA_Init+0x478>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a7b      	ldr	r2, [pc, #492]	; (8003b00 <HAL_DMA_Init+0x63c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d012      	beq.n	800393c <HAL_DMA_Init+0x478>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a7a      	ldr	r2, [pc, #488]	; (8003b04 <HAL_DMA_Init+0x640>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00d      	beq.n	800393c <HAL_DMA_Init+0x478>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a78      	ldr	r2, [pc, #480]	; (8003b08 <HAL_DMA_Init+0x644>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d008      	beq.n	800393c <HAL_DMA_Init+0x478>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a77      	ldr	r2, [pc, #476]	; (8003b0c <HAL_DMA_Init+0x648>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <HAL_DMA_Init+0x478>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a75      	ldr	r2, [pc, #468]	; (8003b10 <HAL_DMA_Init+0x64c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4b6e      	ldr	r3, [pc, #440]	; (8003b14 <HAL_DMA_Init+0x650>)
 800395a:	4013      	ands	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d008      	beq.n	8003978 <HAL_DMA_Init+0x4b4>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d102      	bne.n	8003974 <HAL_DMA_Init+0x4b0>
 800396e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003972:	e002      	b.n	800397a <HAL_DMA_Init+0x4b6>
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_DMA_Init+0x4b6>
 8003978:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68d2      	ldr	r2, [r2, #12]
 800397e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b56      	ldr	r3, [pc, #344]	; (8003b18 <HAL_DMA_Init+0x654>)
 80039c0:	4413      	add	r3, r2
 80039c2:	4a56      	ldr	r2, [pc, #344]	; (8003b1c <HAL_DMA_Init+0x658>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	009a      	lsls	r2, r3, #2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f002 fa27 	bl	8005e24 <DMA_CalcBaseAndBitshift>
 80039d6:	4603      	mov	r3, r0
 80039d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2201      	movs	r2, #1
 80039e4:	409a      	lsls	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	e008      	b.n	80039fe <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2240      	movs	r2, #64	; 0x40
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2203      	movs	r2, #3
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0ee      	b.n	8003bdc <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a47      	ldr	r2, [pc, #284]	; (8003b20 <HAL_DMA_Init+0x65c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d072      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a45      	ldr	r2, [pc, #276]	; (8003b24 <HAL_DMA_Init+0x660>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d06d      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a44      	ldr	r2, [pc, #272]	; (8003b28 <HAL_DMA_Init+0x664>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d068      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a42      	ldr	r2, [pc, #264]	; (8003b2c <HAL_DMA_Init+0x668>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d063      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a41      	ldr	r2, [pc, #260]	; (8003b30 <HAL_DMA_Init+0x66c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d05e      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3f      	ldr	r2, [pc, #252]	; (8003b34 <HAL_DMA_Init+0x670>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d059      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a3e      	ldr	r2, [pc, #248]	; (8003b38 <HAL_DMA_Init+0x674>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d054      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a3c      	ldr	r2, [pc, #240]	; (8003b3c <HAL_DMA_Init+0x678>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d04f      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <HAL_DMA_Init+0x67c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d04a      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a39      	ldr	r2, [pc, #228]	; (8003b44 <HAL_DMA_Init+0x680>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d045      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <HAL_DMA_Init+0x684>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d040      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a36      	ldr	r2, [pc, #216]	; (8003b4c <HAL_DMA_Init+0x688>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d03b      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <HAL_DMA_Init+0x68c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d036      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a33      	ldr	r2, [pc, #204]	; (8003b54 <HAL_DMA_Init+0x690>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d031      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a32      	ldr	r2, [pc, #200]	; (8003b58 <HAL_DMA_Init+0x694>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d02c      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a30      	ldr	r2, [pc, #192]	; (8003b5c <HAL_DMA_Init+0x698>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d027      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <HAL_DMA_Init+0x630>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d022      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <HAL_DMA_Init+0x634>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01d      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a11      	ldr	r2, [pc, #68]	; (8003afc <HAL_DMA_Init+0x638>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d018      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0f      	ldr	r2, [pc, #60]	; (8003b00 <HAL_DMA_Init+0x63c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d013      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a0e      	ldr	r2, [pc, #56]	; (8003b04 <HAL_DMA_Init+0x640>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <HAL_DMA_Init+0x644>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <HAL_DMA_Init+0x648>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_DMA_Init+0x62a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <HAL_DMA_Init+0x64c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d138      	bne.n	8003b60 <HAL_DMA_Init+0x69c>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e037      	b.n	8003b62 <HAL_DMA_Init+0x69e>
 8003af2:	bf00      	nop
 8003af4:	58025408 	.word	0x58025408
 8003af8:	5802541c 	.word	0x5802541c
 8003afc:	58025430 	.word	0x58025430
 8003b00:	58025444 	.word	0x58025444
 8003b04:	58025458 	.word	0x58025458
 8003b08:	5802546c 	.word	0x5802546c
 8003b0c:	58025480 	.word	0x58025480
 8003b10:	58025494 	.word	0x58025494
 8003b14:	fffe000f 	.word	0xfffe000f
 8003b18:	a7fdabf8 	.word	0xa7fdabf8
 8003b1c:	cccccccd 	.word	0xcccccccd
 8003b20:	40020010 	.word	0x40020010
 8003b24:	40020028 	.word	0x40020028
 8003b28:	40020040 	.word	0x40020040
 8003b2c:	40020058 	.word	0x40020058
 8003b30:	40020070 	.word	0x40020070
 8003b34:	40020088 	.word	0x40020088
 8003b38:	400200a0 	.word	0x400200a0
 8003b3c:	400200b8 	.word	0x400200b8
 8003b40:	40020410 	.word	0x40020410
 8003b44:	40020428 	.word	0x40020428
 8003b48:	40020440 	.word	0x40020440
 8003b4c:	40020458 	.word	0x40020458
 8003b50:	40020470 	.word	0x40020470
 8003b54:	40020488 	.word	0x40020488
 8003b58:	400204a0 	.word	0x400204a0
 8003b5c:	400204b8 	.word	0x400204b8
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d032      	beq.n	8003bcc <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f002 fa8a 	bl	8006080 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d102      	bne.n	8003b7a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b8e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <HAL_DMA_Init+0x6f6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d80c      	bhi.n	8003bba <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f002 fb07 	bl	80061b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	e008      	b.n	8003bcc <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e226      	b.n	800404e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_DMA_Start_IT+0x2a>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e21f      	b.n	800404e <HAL_DMA_Start_IT+0x46a>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	f040 820a 	bne.w	8004038 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a68      	ldr	r2, [pc, #416]	; (8003dd8 <HAL_DMA_Start_IT+0x1f4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d04a      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a66      	ldr	r2, [pc, #408]	; (8003ddc <HAL_DMA_Start_IT+0x1f8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d045      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a65      	ldr	r2, [pc, #404]	; (8003de0 <HAL_DMA_Start_IT+0x1fc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d040      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a63      	ldr	r2, [pc, #396]	; (8003de4 <HAL_DMA_Start_IT+0x200>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d03b      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a62      	ldr	r2, [pc, #392]	; (8003de8 <HAL_DMA_Start_IT+0x204>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d036      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a60      	ldr	r2, [pc, #384]	; (8003dec <HAL_DMA_Start_IT+0x208>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d031      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a5f      	ldr	r2, [pc, #380]	; (8003df0 <HAL_DMA_Start_IT+0x20c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d02c      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a5d      	ldr	r2, [pc, #372]	; (8003df4 <HAL_DMA_Start_IT+0x210>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d027      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a5c      	ldr	r2, [pc, #368]	; (8003df8 <HAL_DMA_Start_IT+0x214>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d022      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a5a      	ldr	r2, [pc, #360]	; (8003dfc <HAL_DMA_Start_IT+0x218>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01d      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a59      	ldr	r2, [pc, #356]	; (8003e00 <HAL_DMA_Start_IT+0x21c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d018      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a57      	ldr	r2, [pc, #348]	; (8003e04 <HAL_DMA_Start_IT+0x220>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a56      	ldr	r2, [pc, #344]	; (8003e08 <HAL_DMA_Start_IT+0x224>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a54      	ldr	r2, [pc, #336]	; (8003e0c <HAL_DMA_Start_IT+0x228>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a53      	ldr	r2, [pc, #332]	; (8003e10 <HAL_DMA_Start_IT+0x22c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xee>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a51      	ldr	r2, [pc, #324]	; (8003e14 <HAL_DMA_Start_IT+0x230>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d108      	bne.n	8003ce4 <HAL_DMA_Start_IT+0x100>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e007      	b.n	8003cf4 <HAL_DMA_Start_IT+0x110>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f001 feae 	bl	8005a5c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a34      	ldr	r2, [pc, #208]	; (8003dd8 <HAL_DMA_Start_IT+0x1f4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d04a      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a33      	ldr	r2, [pc, #204]	; (8003ddc <HAL_DMA_Start_IT+0x1f8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d045      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a31      	ldr	r2, [pc, #196]	; (8003de0 <HAL_DMA_Start_IT+0x1fc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d040      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a30      	ldr	r2, [pc, #192]	; (8003de4 <HAL_DMA_Start_IT+0x200>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d03b      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2e      	ldr	r2, [pc, #184]	; (8003de8 <HAL_DMA_Start_IT+0x204>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d036      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2d      	ldr	r2, [pc, #180]	; (8003dec <HAL_DMA_Start_IT+0x208>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d031      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2b      	ldr	r2, [pc, #172]	; (8003df0 <HAL_DMA_Start_IT+0x20c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02c      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2a      	ldr	r2, [pc, #168]	; (8003df4 <HAL_DMA_Start_IT+0x210>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d027      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <HAL_DMA_Start_IT+0x214>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d022      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <HAL_DMA_Start_IT+0x218>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d01d      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_DMA_Start_IT+0x21c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d018      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <HAL_DMA_Start_IT+0x220>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_DMA_Start_IT+0x224>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00e      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_DMA_Start_IT+0x228>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_DMA_Start_IT+0x22c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_DMA_Start_IT+0x1bc>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_DMA_Start_IT+0x230>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_DMA_Start_IT+0x1c0>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_DMA_Start_IT+0x1c2>
 8003da4:	2300      	movs	r3, #0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d036      	beq.n	8003e18 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f023 021e 	bic.w	r2, r3, #30
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0216 	orr.w	r2, r2, #22
 8003dbc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d03e      	beq.n	8003e44 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0208 	orr.w	r2, r2, #8
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e035      	b.n	8003e44 <HAL_DMA_Start_IT+0x260>
 8003dd8:	40020010 	.word	0x40020010
 8003ddc:	40020028 	.word	0x40020028
 8003de0:	40020040 	.word	0x40020040
 8003de4:	40020058 	.word	0x40020058
 8003de8:	40020070 	.word	0x40020070
 8003dec:	40020088 	.word	0x40020088
 8003df0:	400200a0 	.word	0x400200a0
 8003df4:	400200b8 	.word	0x400200b8
 8003df8:	40020410 	.word	0x40020410
 8003dfc:	40020428 	.word	0x40020428
 8003e00:	40020440 	.word	0x40020440
 8003e04:	40020458 	.word	0x40020458
 8003e08:	40020470 	.word	0x40020470
 8003e0c:	40020488 	.word	0x40020488
 8003e10:	400204a0 	.word	0x400204a0
 8003e14:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 020e 	bic.w	r2, r3, #14
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 020a 	orr.w	r2, r2, #10
 8003e2a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0204 	orr.w	r2, r2, #4
 8003e42:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a83      	ldr	r2, [pc, #524]	; (8004058 <HAL_DMA_Start_IT+0x474>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d072      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a82      	ldr	r2, [pc, #520]	; (800405c <HAL_DMA_Start_IT+0x478>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d06d      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a80      	ldr	r2, [pc, #512]	; (8004060 <HAL_DMA_Start_IT+0x47c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d068      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a7f      	ldr	r2, [pc, #508]	; (8004064 <HAL_DMA_Start_IT+0x480>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d063      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7d      	ldr	r2, [pc, #500]	; (8004068 <HAL_DMA_Start_IT+0x484>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d05e      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a7c      	ldr	r2, [pc, #496]	; (800406c <HAL_DMA_Start_IT+0x488>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d059      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a7a      	ldr	r2, [pc, #488]	; (8004070 <HAL_DMA_Start_IT+0x48c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d054      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a79      	ldr	r2, [pc, #484]	; (8004074 <HAL_DMA_Start_IT+0x490>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d04f      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a77      	ldr	r2, [pc, #476]	; (8004078 <HAL_DMA_Start_IT+0x494>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d04a      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a76      	ldr	r2, [pc, #472]	; (800407c <HAL_DMA_Start_IT+0x498>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d045      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a74      	ldr	r2, [pc, #464]	; (8004080 <HAL_DMA_Start_IT+0x49c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d040      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a73      	ldr	r2, [pc, #460]	; (8004084 <HAL_DMA_Start_IT+0x4a0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d03b      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a71      	ldr	r2, [pc, #452]	; (8004088 <HAL_DMA_Start_IT+0x4a4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d036      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a70      	ldr	r2, [pc, #448]	; (800408c <HAL_DMA_Start_IT+0x4a8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d031      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6e      	ldr	r2, [pc, #440]	; (8004090 <HAL_DMA_Start_IT+0x4ac>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d02c      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6d      	ldr	r2, [pc, #436]	; (8004094 <HAL_DMA_Start_IT+0x4b0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d027      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6b      	ldr	r2, [pc, #428]	; (8004098 <HAL_DMA_Start_IT+0x4b4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d022      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a6a      	ldr	r2, [pc, #424]	; (800409c <HAL_DMA_Start_IT+0x4b8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d01d      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a68      	ldr	r2, [pc, #416]	; (80040a0 <HAL_DMA_Start_IT+0x4bc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d018      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a67      	ldr	r2, [pc, #412]	; (80040a4 <HAL_DMA_Start_IT+0x4c0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a65      	ldr	r2, [pc, #404]	; (80040a8 <HAL_DMA_Start_IT+0x4c4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00e      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a64      	ldr	r2, [pc, #400]	; (80040ac <HAL_DMA_Start_IT+0x4c8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d009      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a62      	ldr	r2, [pc, #392]	; (80040b0 <HAL_DMA_Start_IT+0x4cc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <HAL_DMA_Start_IT+0x350>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a61      	ldr	r2, [pc, #388]	; (80040b4 <HAL_DMA_Start_IT+0x4d0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d101      	bne.n	8003f38 <HAL_DMA_Start_IT+0x354>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <HAL_DMA_Start_IT+0x356>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01a      	beq.n	8003f74 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f72:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a37      	ldr	r2, [pc, #220]	; (8004058 <HAL_DMA_Start_IT+0x474>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d04a      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a36      	ldr	r2, [pc, #216]	; (800405c <HAL_DMA_Start_IT+0x478>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d045      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a34      	ldr	r2, [pc, #208]	; (8004060 <HAL_DMA_Start_IT+0x47c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d040      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a33      	ldr	r2, [pc, #204]	; (8004064 <HAL_DMA_Start_IT+0x480>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d03b      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a31      	ldr	r2, [pc, #196]	; (8004068 <HAL_DMA_Start_IT+0x484>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d036      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a30      	ldr	r2, [pc, #192]	; (800406c <HAL_DMA_Start_IT+0x488>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d031      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2e      	ldr	r2, [pc, #184]	; (8004070 <HAL_DMA_Start_IT+0x48c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d02c      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2d      	ldr	r2, [pc, #180]	; (8004074 <HAL_DMA_Start_IT+0x490>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d027      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2b      	ldr	r2, [pc, #172]	; (8004078 <HAL_DMA_Start_IT+0x494>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d022      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2a      	ldr	r2, [pc, #168]	; (800407c <HAL_DMA_Start_IT+0x498>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d01d      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a28      	ldr	r2, [pc, #160]	; (8004080 <HAL_DMA_Start_IT+0x49c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a27      	ldr	r2, [pc, #156]	; (8004084 <HAL_DMA_Start_IT+0x4a0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a25      	ldr	r2, [pc, #148]	; (8004088 <HAL_DMA_Start_IT+0x4a4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a24      	ldr	r2, [pc, #144]	; (800408c <HAL_DMA_Start_IT+0x4a8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <HAL_DMA_Start_IT+0x4ac>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_DMA_Start_IT+0x430>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a21      	ldr	r2, [pc, #132]	; (8004094 <HAL_DMA_Start_IT+0x4b0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d108      	bne.n	8004026 <HAL_DMA_Start_IT+0x442>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	e012      	b.n	800404c <HAL_DMA_Start_IT+0x468>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0201 	orr.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e009      	b.n	800404c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800403e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800404c:	7dfb      	ldrb	r3, [r7, #23]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40020010 	.word	0x40020010
 800405c:	40020028 	.word	0x40020028
 8004060:	40020040 	.word	0x40020040
 8004064:	40020058 	.word	0x40020058
 8004068:	40020070 	.word	0x40020070
 800406c:	40020088 	.word	0x40020088
 8004070:	400200a0 	.word	0x400200a0
 8004074:	400200b8 	.word	0x400200b8
 8004078:	40020410 	.word	0x40020410
 800407c:	40020428 	.word	0x40020428
 8004080:	40020440 	.word	0x40020440
 8004084:	40020458 	.word	0x40020458
 8004088:	40020470 	.word	0x40020470
 800408c:	40020488 	.word	0x40020488
 8004090:	400204a0 	.word	0x400204a0
 8004094:	400204b8 	.word	0x400204b8
 8004098:	58025408 	.word	0x58025408
 800409c:	5802541c 	.word	0x5802541c
 80040a0:	58025430 	.word	0x58025430
 80040a4:	58025444 	.word	0x58025444
 80040a8:	58025458 	.word	0x58025458
 80040ac:	5802546c 	.word	0x5802546c
 80040b0:	58025480 	.word	0x58025480
 80040b4:	58025494 	.word	0x58025494

080040b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80040c0:	f7ff f88e 	bl	80031e0 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e2dc      	b.n	800468a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d008      	beq.n	80040ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2280      	movs	r2, #128	; 0x80
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e2cd      	b.n	800468a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a76      	ldr	r2, [pc, #472]	; (80042cc <HAL_DMA_Abort+0x214>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d04a      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a74      	ldr	r2, [pc, #464]	; (80042d0 <HAL_DMA_Abort+0x218>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d045      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a73      	ldr	r2, [pc, #460]	; (80042d4 <HAL_DMA_Abort+0x21c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d040      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a71      	ldr	r2, [pc, #452]	; (80042d8 <HAL_DMA_Abort+0x220>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d03b      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a70      	ldr	r2, [pc, #448]	; (80042dc <HAL_DMA_Abort+0x224>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d036      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6e      	ldr	r2, [pc, #440]	; (80042e0 <HAL_DMA_Abort+0x228>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d031      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a6d      	ldr	r2, [pc, #436]	; (80042e4 <HAL_DMA_Abort+0x22c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d02c      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a6b      	ldr	r2, [pc, #428]	; (80042e8 <HAL_DMA_Abort+0x230>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d027      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a6a      	ldr	r2, [pc, #424]	; (80042ec <HAL_DMA_Abort+0x234>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d022      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a68      	ldr	r2, [pc, #416]	; (80042f0 <HAL_DMA_Abort+0x238>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01d      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a67      	ldr	r2, [pc, #412]	; (80042f4 <HAL_DMA_Abort+0x23c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d018      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a65      	ldr	r2, [pc, #404]	; (80042f8 <HAL_DMA_Abort+0x240>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d013      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a64      	ldr	r2, [pc, #400]	; (80042fc <HAL_DMA_Abort+0x244>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00e      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a62      	ldr	r2, [pc, #392]	; (8004300 <HAL_DMA_Abort+0x248>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d009      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a61      	ldr	r2, [pc, #388]	; (8004304 <HAL_DMA_Abort+0x24c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_DMA_Abort+0xd6>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a5f      	ldr	r2, [pc, #380]	; (8004308 <HAL_DMA_Abort+0x250>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d101      	bne.n	8004192 <HAL_DMA_Abort+0xda>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <HAL_DMA_Abort+0xdc>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d013      	beq.n	80041c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 021e 	bic.w	r2, r2, #30
 80041a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e00a      	b.n	80041d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 020e 	bic.w	r2, r2, #14
 80041ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3c      	ldr	r2, [pc, #240]	; (80042cc <HAL_DMA_Abort+0x214>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d072      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a3a      	ldr	r2, [pc, #232]	; (80042d0 <HAL_DMA_Abort+0x218>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d06d      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a39      	ldr	r2, [pc, #228]	; (80042d4 <HAL_DMA_Abort+0x21c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d068      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a37      	ldr	r2, [pc, #220]	; (80042d8 <HAL_DMA_Abort+0x220>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d063      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a36      	ldr	r2, [pc, #216]	; (80042dc <HAL_DMA_Abort+0x224>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d05e      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a34      	ldr	r2, [pc, #208]	; (80042e0 <HAL_DMA_Abort+0x228>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d059      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a33      	ldr	r2, [pc, #204]	; (80042e4 <HAL_DMA_Abort+0x22c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d054      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <HAL_DMA_Abort+0x230>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d04f      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a30      	ldr	r2, [pc, #192]	; (80042ec <HAL_DMA_Abort+0x234>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d04a      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2e      	ldr	r2, [pc, #184]	; (80042f0 <HAL_DMA_Abort+0x238>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d045      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2d      	ldr	r2, [pc, #180]	; (80042f4 <HAL_DMA_Abort+0x23c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d040      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2b      	ldr	r2, [pc, #172]	; (80042f8 <HAL_DMA_Abort+0x240>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d03b      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <HAL_DMA_Abort+0x244>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d036      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a28      	ldr	r2, [pc, #160]	; (8004300 <HAL_DMA_Abort+0x248>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d031      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a27      	ldr	r2, [pc, #156]	; (8004304 <HAL_DMA_Abort+0x24c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d02c      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a25      	ldr	r2, [pc, #148]	; (8004308 <HAL_DMA_Abort+0x250>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d027      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a24      	ldr	r2, [pc, #144]	; (800430c <HAL_DMA_Abort+0x254>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d022      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a22      	ldr	r2, [pc, #136]	; (8004310 <HAL_DMA_Abort+0x258>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01d      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a21      	ldr	r2, [pc, #132]	; (8004314 <HAL_DMA_Abort+0x25c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1f      	ldr	r2, [pc, #124]	; (8004318 <HAL_DMA_Abort+0x260>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1e      	ldr	r2, [pc, #120]	; (800431c <HAL_DMA_Abort+0x264>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <HAL_DMA_Abort+0x268>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <HAL_DMA_Abort+0x26c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_DMA_Abort+0x20e>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a19      	ldr	r2, [pc, #100]	; (8004328 <HAL_DMA_Abort+0x270>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d132      	bne.n	800432c <HAL_DMA_Abort+0x274>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e031      	b.n	800432e <HAL_DMA_Abort+0x276>
 80042ca:	bf00      	nop
 80042cc:	40020010 	.word	0x40020010
 80042d0:	40020028 	.word	0x40020028
 80042d4:	40020040 	.word	0x40020040
 80042d8:	40020058 	.word	0x40020058
 80042dc:	40020070 	.word	0x40020070
 80042e0:	40020088 	.word	0x40020088
 80042e4:	400200a0 	.word	0x400200a0
 80042e8:	400200b8 	.word	0x400200b8
 80042ec:	40020410 	.word	0x40020410
 80042f0:	40020428 	.word	0x40020428
 80042f4:	40020440 	.word	0x40020440
 80042f8:	40020458 	.word	0x40020458
 80042fc:	40020470 	.word	0x40020470
 8004300:	40020488 	.word	0x40020488
 8004304:	400204a0 	.word	0x400204a0
 8004308:	400204b8 	.word	0x400204b8
 800430c:	58025408 	.word	0x58025408
 8004310:	5802541c 	.word	0x5802541c
 8004314:	58025430 	.word	0x58025430
 8004318:	58025444 	.word	0x58025444
 800431c:	58025458 	.word	0x58025458
 8004320:	5802546c 	.word	0x5802546c
 8004324:	58025480 	.word	0x58025480
 8004328:	58025494 	.word	0x58025494
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004340:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6d      	ldr	r2, [pc, #436]	; (80044fc <HAL_DMA_Abort+0x444>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d04a      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6b      	ldr	r2, [pc, #428]	; (8004500 <HAL_DMA_Abort+0x448>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d045      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6a      	ldr	r2, [pc, #424]	; (8004504 <HAL_DMA_Abort+0x44c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d040      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a68      	ldr	r2, [pc, #416]	; (8004508 <HAL_DMA_Abort+0x450>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d03b      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a67      	ldr	r2, [pc, #412]	; (800450c <HAL_DMA_Abort+0x454>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d036      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a65      	ldr	r2, [pc, #404]	; (8004510 <HAL_DMA_Abort+0x458>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d031      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a64      	ldr	r2, [pc, #400]	; (8004514 <HAL_DMA_Abort+0x45c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d02c      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a62      	ldr	r2, [pc, #392]	; (8004518 <HAL_DMA_Abort+0x460>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d027      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a61      	ldr	r2, [pc, #388]	; (800451c <HAL_DMA_Abort+0x464>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d022      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a5f      	ldr	r2, [pc, #380]	; (8004520 <HAL_DMA_Abort+0x468>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01d      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a5e      	ldr	r2, [pc, #376]	; (8004524 <HAL_DMA_Abort+0x46c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a5c      	ldr	r2, [pc, #368]	; (8004528 <HAL_DMA_Abort+0x470>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a5b      	ldr	r2, [pc, #364]	; (800452c <HAL_DMA_Abort+0x474>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a59      	ldr	r2, [pc, #356]	; (8004530 <HAL_DMA_Abort+0x478>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a58      	ldr	r2, [pc, #352]	; (8004534 <HAL_DMA_Abort+0x47c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_DMA_Abort+0x32a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a56      	ldr	r2, [pc, #344]	; (8004538 <HAL_DMA_Abort+0x480>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d108      	bne.n	80043f4 <HAL_DMA_Abort+0x33c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e007      	b.n	8004404 <HAL_DMA_Abort+0x34c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004404:	e013      	b.n	800442e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004406:	f7fe feeb 	bl	80031e0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b05      	cmp	r3, #5
 8004412:	d90c      	bls.n	800442e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2203      	movs	r2, #3
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e12d      	b.n	800468a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2f      	ldr	r2, [pc, #188]	; (80044fc <HAL_DMA_Abort+0x444>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d04a      	beq.n	80044da <HAL_DMA_Abort+0x422>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2d      	ldr	r2, [pc, #180]	; (8004500 <HAL_DMA_Abort+0x448>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d045      	beq.n	80044da <HAL_DMA_Abort+0x422>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <HAL_DMA_Abort+0x44c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d040      	beq.n	80044da <HAL_DMA_Abort+0x422>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a2a      	ldr	r2, [pc, #168]	; (8004508 <HAL_DMA_Abort+0x450>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d03b      	beq.n	80044da <HAL_DMA_Abort+0x422>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a29      	ldr	r2, [pc, #164]	; (800450c <HAL_DMA_Abort+0x454>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d036      	beq.n	80044da <HAL_DMA_Abort+0x422>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a27      	ldr	r2, [pc, #156]	; (8004510 <HAL_DMA_Abort+0x458>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d031      	beq.n	80044da <HAL_DMA_Abort+0x422>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a26      	ldr	r2, [pc, #152]	; (8004514 <HAL_DMA_Abort+0x45c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d02c      	beq.n	80044da <HAL_DMA_Abort+0x422>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a24      	ldr	r2, [pc, #144]	; (8004518 <HAL_DMA_Abort+0x460>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d027      	beq.n	80044da <HAL_DMA_Abort+0x422>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a23      	ldr	r2, [pc, #140]	; (800451c <HAL_DMA_Abort+0x464>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d022      	beq.n	80044da <HAL_DMA_Abort+0x422>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a21      	ldr	r2, [pc, #132]	; (8004520 <HAL_DMA_Abort+0x468>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01d      	beq.n	80044da <HAL_DMA_Abort+0x422>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a20      	ldr	r2, [pc, #128]	; (8004524 <HAL_DMA_Abort+0x46c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d018      	beq.n	80044da <HAL_DMA_Abort+0x422>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <HAL_DMA_Abort+0x470>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <HAL_DMA_Abort+0x422>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1d      	ldr	r2, [pc, #116]	; (800452c <HAL_DMA_Abort+0x474>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00e      	beq.n	80044da <HAL_DMA_Abort+0x422>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <HAL_DMA_Abort+0x478>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d009      	beq.n	80044da <HAL_DMA_Abort+0x422>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <HAL_DMA_Abort+0x47c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_DMA_Abort+0x422>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a18      	ldr	r2, [pc, #96]	; (8004538 <HAL_DMA_Abort+0x480>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_DMA_Abort+0x426>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_DMA_Abort+0x428>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02b      	beq.n	800453c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	223f      	movs	r2, #63	; 0x3f
 80044f4:	409a      	lsls	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	609a      	str	r2, [r3, #8]
 80044fa:	e02a      	b.n	8004552 <HAL_DMA_Abort+0x49a>
 80044fc:	40020010 	.word	0x40020010
 8004500:	40020028 	.word	0x40020028
 8004504:	40020040 	.word	0x40020040
 8004508:	40020058 	.word	0x40020058
 800450c:	40020070 	.word	0x40020070
 8004510:	40020088 	.word	0x40020088
 8004514:	400200a0 	.word	0x400200a0
 8004518:	400200b8 	.word	0x400200b8
 800451c:	40020410 	.word	0x40020410
 8004520:	40020428 	.word	0x40020428
 8004524:	40020440 	.word	0x40020440
 8004528:	40020458 	.word	0x40020458
 800452c:	40020470 	.word	0x40020470
 8004530:	40020488 	.word	0x40020488
 8004534:	400204a0 	.word	0x400204a0
 8004538:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2201      	movs	r2, #1
 800454c:	409a      	lsls	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a4f      	ldr	r2, [pc, #316]	; (8004694 <HAL_DMA_Abort+0x5dc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d072      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a4d      	ldr	r2, [pc, #308]	; (8004698 <HAL_DMA_Abort+0x5e0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d06d      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a4c      	ldr	r2, [pc, #304]	; (800469c <HAL_DMA_Abort+0x5e4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d068      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a4a      	ldr	r2, [pc, #296]	; (80046a0 <HAL_DMA_Abort+0x5e8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d063      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a49      	ldr	r2, [pc, #292]	; (80046a4 <HAL_DMA_Abort+0x5ec>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d05e      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a47      	ldr	r2, [pc, #284]	; (80046a8 <HAL_DMA_Abort+0x5f0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d059      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a46      	ldr	r2, [pc, #280]	; (80046ac <HAL_DMA_Abort+0x5f4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d054      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a44      	ldr	r2, [pc, #272]	; (80046b0 <HAL_DMA_Abort+0x5f8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d04f      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a43      	ldr	r2, [pc, #268]	; (80046b4 <HAL_DMA_Abort+0x5fc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d04a      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a41      	ldr	r2, [pc, #260]	; (80046b8 <HAL_DMA_Abort+0x600>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d045      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a40      	ldr	r2, [pc, #256]	; (80046bc <HAL_DMA_Abort+0x604>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d040      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3e      	ldr	r2, [pc, #248]	; (80046c0 <HAL_DMA_Abort+0x608>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d03b      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3d      	ldr	r2, [pc, #244]	; (80046c4 <HAL_DMA_Abort+0x60c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d036      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3b      	ldr	r2, [pc, #236]	; (80046c8 <HAL_DMA_Abort+0x610>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d031      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3a      	ldr	r2, [pc, #232]	; (80046cc <HAL_DMA_Abort+0x614>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d02c      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <HAL_DMA_Abort+0x618>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d027      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a37      	ldr	r2, [pc, #220]	; (80046d4 <HAL_DMA_Abort+0x61c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d022      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a35      	ldr	r2, [pc, #212]	; (80046d8 <HAL_DMA_Abort+0x620>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01d      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a34      	ldr	r2, [pc, #208]	; (80046dc <HAL_DMA_Abort+0x624>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a32      	ldr	r2, [pc, #200]	; (80046e0 <HAL_DMA_Abort+0x628>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a31      	ldr	r2, [pc, #196]	; (80046e4 <HAL_DMA_Abort+0x62c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <HAL_DMA_Abort+0x630>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2e      	ldr	r2, [pc, #184]	; (80046ec <HAL_DMA_Abort+0x634>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_DMA_Abort+0x58a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2c      	ldr	r2, [pc, #176]	; (80046f0 <HAL_DMA_Abort+0x638>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d101      	bne.n	8004646 <HAL_DMA_Abort+0x58e>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_DMA_Abort+0x590>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d015      	beq.n	8004678 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004654:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800466c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004676:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40020010 	.word	0x40020010
 8004698:	40020028 	.word	0x40020028
 800469c:	40020040 	.word	0x40020040
 80046a0:	40020058 	.word	0x40020058
 80046a4:	40020070 	.word	0x40020070
 80046a8:	40020088 	.word	0x40020088
 80046ac:	400200a0 	.word	0x400200a0
 80046b0:	400200b8 	.word	0x400200b8
 80046b4:	40020410 	.word	0x40020410
 80046b8:	40020428 	.word	0x40020428
 80046bc:	40020440 	.word	0x40020440
 80046c0:	40020458 	.word	0x40020458
 80046c4:	40020470 	.word	0x40020470
 80046c8:	40020488 	.word	0x40020488
 80046cc:	400204a0 	.word	0x400204a0
 80046d0:	400204b8 	.word	0x400204b8
 80046d4:	58025408 	.word	0x58025408
 80046d8:	5802541c 	.word	0x5802541c
 80046dc:	58025430 	.word	0x58025430
 80046e0:	58025444 	.word	0x58025444
 80046e4:	58025458 	.word	0x58025458
 80046e8:	5802546c 	.word	0x5802546c
 80046ec:	58025480 	.word	0x58025480
 80046f0:	58025494 	.word	0x58025494

080046f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e237      	b.n	8004b76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d004      	beq.n	800471c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e22c      	b.n	8004b76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a5c      	ldr	r2, [pc, #368]	; (8004894 <HAL_DMA_Abort_IT+0x1a0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d04a      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a5b      	ldr	r2, [pc, #364]	; (8004898 <HAL_DMA_Abort_IT+0x1a4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d045      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a59      	ldr	r2, [pc, #356]	; (800489c <HAL_DMA_Abort_IT+0x1a8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d040      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a58      	ldr	r2, [pc, #352]	; (80048a0 <HAL_DMA_Abort_IT+0x1ac>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d03b      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a56      	ldr	r2, [pc, #344]	; (80048a4 <HAL_DMA_Abort_IT+0x1b0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d036      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a55      	ldr	r2, [pc, #340]	; (80048a8 <HAL_DMA_Abort_IT+0x1b4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d031      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a53      	ldr	r2, [pc, #332]	; (80048ac <HAL_DMA_Abort_IT+0x1b8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d02c      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a52      	ldr	r2, [pc, #328]	; (80048b0 <HAL_DMA_Abort_IT+0x1bc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d027      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a50      	ldr	r2, [pc, #320]	; (80048b4 <HAL_DMA_Abort_IT+0x1c0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a4f      	ldr	r2, [pc, #316]	; (80048b8 <HAL_DMA_Abort_IT+0x1c4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01d      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a4d      	ldr	r2, [pc, #308]	; (80048bc <HAL_DMA_Abort_IT+0x1c8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a4c      	ldr	r2, [pc, #304]	; (80048c0 <HAL_DMA_Abort_IT+0x1cc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a4a      	ldr	r2, [pc, #296]	; (80048c4 <HAL_DMA_Abort_IT+0x1d0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a49      	ldr	r2, [pc, #292]	; (80048c8 <HAL_DMA_Abort_IT+0x1d4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a47      	ldr	r2, [pc, #284]	; (80048cc <HAL_DMA_Abort_IT+0x1d8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_DMA_Abort_IT+0xc8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a46      	ldr	r2, [pc, #280]	; (80048d0 <HAL_DMA_Abort_IT+0x1dc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_DMA_Abort_IT+0xcc>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_DMA_Abort_IT+0xce>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 8086 	beq.w	80048d4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2204      	movs	r2, #4
 80047cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2f      	ldr	r2, [pc, #188]	; (8004894 <HAL_DMA_Abort_IT+0x1a0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d04a      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2e      	ldr	r2, [pc, #184]	; (8004898 <HAL_DMA_Abort_IT+0x1a4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d045      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2c      	ldr	r2, [pc, #176]	; (800489c <HAL_DMA_Abort_IT+0x1a8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d040      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2b      	ldr	r2, [pc, #172]	; (80048a0 <HAL_DMA_Abort_IT+0x1ac>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d03b      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <HAL_DMA_Abort_IT+0x1b0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d036      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a28      	ldr	r2, [pc, #160]	; (80048a8 <HAL_DMA_Abort_IT+0x1b4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d031      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a26      	ldr	r2, [pc, #152]	; (80048ac <HAL_DMA_Abort_IT+0x1b8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02c      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <HAL_DMA_Abort_IT+0x1bc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d027      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <HAL_DMA_Abort_IT+0x1c0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <HAL_DMA_Abort_IT+0x1c4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d01d      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a20      	ldr	r2, [pc, #128]	; (80048bc <HAL_DMA_Abort_IT+0x1c8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <HAL_DMA_Abort_IT+0x1cc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <HAL_DMA_Abort_IT+0x1d0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <HAL_DMA_Abort_IT+0x1d4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <HAL_DMA_Abort_IT+0x1d8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_DMA_Abort_IT+0x17c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <HAL_DMA_Abort_IT+0x1dc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d108      	bne.n	8004882 <HAL_DMA_Abort_IT+0x18e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	e178      	b.n	8004b74 <HAL_DMA_Abort_IT+0x480>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0201 	bic.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e16f      	b.n	8004b74 <HAL_DMA_Abort_IT+0x480>
 8004894:	40020010 	.word	0x40020010
 8004898:	40020028 	.word	0x40020028
 800489c:	40020040 	.word	0x40020040
 80048a0:	40020058 	.word	0x40020058
 80048a4:	40020070 	.word	0x40020070
 80048a8:	40020088 	.word	0x40020088
 80048ac:	400200a0 	.word	0x400200a0
 80048b0:	400200b8 	.word	0x400200b8
 80048b4:	40020410 	.word	0x40020410
 80048b8:	40020428 	.word	0x40020428
 80048bc:	40020440 	.word	0x40020440
 80048c0:	40020458 	.word	0x40020458
 80048c4:	40020470 	.word	0x40020470
 80048c8:	40020488 	.word	0x40020488
 80048cc:	400204a0 	.word	0x400204a0
 80048d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 020e 	bic.w	r2, r2, #14
 80048e2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a6c      	ldr	r2, [pc, #432]	; (8004a9c <HAL_DMA_Abort_IT+0x3a8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d04a      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a6b      	ldr	r2, [pc, #428]	; (8004aa0 <HAL_DMA_Abort_IT+0x3ac>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d045      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a69      	ldr	r2, [pc, #420]	; (8004aa4 <HAL_DMA_Abort_IT+0x3b0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d040      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a68      	ldr	r2, [pc, #416]	; (8004aa8 <HAL_DMA_Abort_IT+0x3b4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d03b      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a66      	ldr	r2, [pc, #408]	; (8004aac <HAL_DMA_Abort_IT+0x3b8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d036      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a65      	ldr	r2, [pc, #404]	; (8004ab0 <HAL_DMA_Abort_IT+0x3bc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d031      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a63      	ldr	r2, [pc, #396]	; (8004ab4 <HAL_DMA_Abort_IT+0x3c0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d02c      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a62      	ldr	r2, [pc, #392]	; (8004ab8 <HAL_DMA_Abort_IT+0x3c4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d027      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a60      	ldr	r2, [pc, #384]	; (8004abc <HAL_DMA_Abort_IT+0x3c8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d022      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a5f      	ldr	r2, [pc, #380]	; (8004ac0 <HAL_DMA_Abort_IT+0x3cc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d01d      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a5d      	ldr	r2, [pc, #372]	; (8004ac4 <HAL_DMA_Abort_IT+0x3d0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d018      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a5c      	ldr	r2, [pc, #368]	; (8004ac8 <HAL_DMA_Abort_IT+0x3d4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d013      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a5a      	ldr	r2, [pc, #360]	; (8004acc <HAL_DMA_Abort_IT+0x3d8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00e      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a59      	ldr	r2, [pc, #356]	; (8004ad0 <HAL_DMA_Abort_IT+0x3dc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d009      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a57      	ldr	r2, [pc, #348]	; (8004ad4 <HAL_DMA_Abort_IT+0x3e0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_DMA_Abort_IT+0x290>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a56      	ldr	r2, [pc, #344]	; (8004ad8 <HAL_DMA_Abort_IT+0x3e4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d108      	bne.n	8004996 <HAL_DMA_Abort_IT+0x2a2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e007      	b.n	80049a6 <HAL_DMA_Abort_IT+0x2b2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0201 	bic.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a3c      	ldr	r2, [pc, #240]	; (8004a9c <HAL_DMA_Abort_IT+0x3a8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d072      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a3a      	ldr	r2, [pc, #232]	; (8004aa0 <HAL_DMA_Abort_IT+0x3ac>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d06d      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a39      	ldr	r2, [pc, #228]	; (8004aa4 <HAL_DMA_Abort_IT+0x3b0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d068      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <HAL_DMA_Abort_IT+0x3b4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d063      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a36      	ldr	r2, [pc, #216]	; (8004aac <HAL_DMA_Abort_IT+0x3b8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d05e      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a34      	ldr	r2, [pc, #208]	; (8004ab0 <HAL_DMA_Abort_IT+0x3bc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d059      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a33      	ldr	r2, [pc, #204]	; (8004ab4 <HAL_DMA_Abort_IT+0x3c0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d054      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a31      	ldr	r2, [pc, #196]	; (8004ab8 <HAL_DMA_Abort_IT+0x3c4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d04f      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a30      	ldr	r2, [pc, #192]	; (8004abc <HAL_DMA_Abort_IT+0x3c8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d04a      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a2e      	ldr	r2, [pc, #184]	; (8004ac0 <HAL_DMA_Abort_IT+0x3cc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d045      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2d      	ldr	r2, [pc, #180]	; (8004ac4 <HAL_DMA_Abort_IT+0x3d0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d040      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2b      	ldr	r2, [pc, #172]	; (8004ac8 <HAL_DMA_Abort_IT+0x3d4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d03b      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2a      	ldr	r2, [pc, #168]	; (8004acc <HAL_DMA_Abort_IT+0x3d8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d036      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <HAL_DMA_Abort_IT+0x3dc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d031      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <HAL_DMA_Abort_IT+0x3e0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d02c      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a25      	ldr	r2, [pc, #148]	; (8004ad8 <HAL_DMA_Abort_IT+0x3e4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d027      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a24      	ldr	r2, [pc, #144]	; (8004adc <HAL_DMA_Abort_IT+0x3e8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d022      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <HAL_DMA_Abort_IT+0x3ec>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01d      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a21      	ldr	r2, [pc, #132]	; (8004ae4 <HAL_DMA_Abort_IT+0x3f0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d018      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <HAL_DMA_Abort_IT+0x3f4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1e      	ldr	r2, [pc, #120]	; (8004aec <HAL_DMA_Abort_IT+0x3f8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <HAL_DMA_Abort_IT+0x3fc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <HAL_DMA_Abort_IT+0x400>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x3a2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <HAL_DMA_Abort_IT+0x404>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d132      	bne.n	8004afc <HAL_DMA_Abort_IT+0x408>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e031      	b.n	8004afe <HAL_DMA_Abort_IT+0x40a>
 8004a9a:	bf00      	nop
 8004a9c:	40020010 	.word	0x40020010
 8004aa0:	40020028 	.word	0x40020028
 8004aa4:	40020040 	.word	0x40020040
 8004aa8:	40020058 	.word	0x40020058
 8004aac:	40020070 	.word	0x40020070
 8004ab0:	40020088 	.word	0x40020088
 8004ab4:	400200a0 	.word	0x400200a0
 8004ab8:	400200b8 	.word	0x400200b8
 8004abc:	40020410 	.word	0x40020410
 8004ac0:	40020428 	.word	0x40020428
 8004ac4:	40020440 	.word	0x40020440
 8004ac8:	40020458 	.word	0x40020458
 8004acc:	40020470 	.word	0x40020470
 8004ad0:	40020488 	.word	0x40020488
 8004ad4:	400204a0 	.word	0x400204a0
 8004ad8:	400204b8 	.word	0x400204b8
 8004adc:	58025408 	.word	0x58025408
 8004ae0:	5802541c 	.word	0x5802541c
 8004ae4:	58025430 	.word	0x58025430
 8004ae8:	58025444 	.word	0x58025444
 8004aec:	58025458 	.word	0x58025458
 8004af0:	5802546c 	.word	0x5802546c
 8004af4:	58025480 	.word	0x58025480
 8004af8:	58025494 	.word	0x58025494
 8004afc:	2300      	movs	r3, #0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d028      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	2201      	movs	r2, #1
 8004b22:	409a      	lsls	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop

08004b80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	; 0x28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b8c:	4b67      	ldr	r3, [pc, #412]	; (8004d2c <HAL_DMA_IRQHandler+0x1ac>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a67      	ldr	r2, [pc, #412]	; (8004d30 <HAL_DMA_IRQHandler+0x1b0>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	0a9b      	lsrs	r3, r3, #10
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a5f      	ldr	r2, [pc, #380]	; (8004d34 <HAL_DMA_IRQHandler+0x1b4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d04a      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a5d      	ldr	r2, [pc, #372]	; (8004d38 <HAL_DMA_IRQHandler+0x1b8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d045      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a5c      	ldr	r2, [pc, #368]	; (8004d3c <HAL_DMA_IRQHandler+0x1bc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d040      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a5a      	ldr	r2, [pc, #360]	; (8004d40 <HAL_DMA_IRQHandler+0x1c0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a59      	ldr	r2, [pc, #356]	; (8004d44 <HAL_DMA_IRQHandler+0x1c4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a57      	ldr	r2, [pc, #348]	; (8004d48 <HAL_DMA_IRQHandler+0x1c8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a56      	ldr	r2, [pc, #344]	; (8004d4c <HAL_DMA_IRQHandler+0x1cc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02c      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a54      	ldr	r2, [pc, #336]	; (8004d50 <HAL_DMA_IRQHandler+0x1d0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a53      	ldr	r2, [pc, #332]	; (8004d54 <HAL_DMA_IRQHandler+0x1d4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a51      	ldr	r2, [pc, #324]	; (8004d58 <HAL_DMA_IRQHandler+0x1d8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a50      	ldr	r2, [pc, #320]	; (8004d5c <HAL_DMA_IRQHandler+0x1dc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a4e      	ldr	r2, [pc, #312]	; (8004d60 <HAL_DMA_IRQHandler+0x1e0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a4d      	ldr	r2, [pc, #308]	; (8004d64 <HAL_DMA_IRQHandler+0x1e4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a4b      	ldr	r2, [pc, #300]	; (8004d68 <HAL_DMA_IRQHandler+0x1e8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a4a      	ldr	r2, [pc, #296]	; (8004d6c <HAL_DMA_IRQHandler+0x1ec>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xd2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a48      	ldr	r2, [pc, #288]	; (8004d70 <HAL_DMA_IRQHandler+0x1f0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d101      	bne.n	8004c56 <HAL_DMA_IRQHandler+0xd6>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <HAL_DMA_IRQHandler+0xd8>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 842b 	beq.w	80054b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	2208      	movs	r2, #8
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80a2 	beq.w	8004db8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a2e      	ldr	r2, [pc, #184]	; (8004d34 <HAL_DMA_IRQHandler+0x1b4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d04a      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a2d      	ldr	r2, [pc, #180]	; (8004d38 <HAL_DMA_IRQHandler+0x1b8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d045      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2b      	ldr	r2, [pc, #172]	; (8004d3c <HAL_DMA_IRQHandler+0x1bc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d040      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a2a      	ldr	r2, [pc, #168]	; (8004d40 <HAL_DMA_IRQHandler+0x1c0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d03b      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a28      	ldr	r2, [pc, #160]	; (8004d44 <HAL_DMA_IRQHandler+0x1c4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d036      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <HAL_DMA_IRQHandler+0x1c8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d031      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a25      	ldr	r2, [pc, #148]	; (8004d4c <HAL_DMA_IRQHandler+0x1cc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02c      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a24      	ldr	r2, [pc, #144]	; (8004d50 <HAL_DMA_IRQHandler+0x1d0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d027      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <HAL_DMA_IRQHandler+0x1d4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <HAL_DMA_IRQHandler+0x1d8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d01d      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <HAL_DMA_IRQHandler+0x1dc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <HAL_DMA_IRQHandler+0x1e0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_DMA_IRQHandler+0x1e4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1b      	ldr	r2, [pc, #108]	; (8004d68 <HAL_DMA_IRQHandler+0x1e8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <HAL_DMA_IRQHandler+0x1ec>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x194>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a18      	ldr	r2, [pc, #96]	; (8004d70 <HAL_DMA_IRQHandler+0x1f0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d12f      	bne.n	8004d74 <HAL_DMA_IRQHandler+0x1f4>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	e02e      	b.n	8004d88 <HAL_DMA_IRQHandler+0x208>
 8004d2a:	bf00      	nop
 8004d2c:	24000008 	.word	0x24000008
 8004d30:	1b4e81b5 	.word	0x1b4e81b5
 8004d34:	40020010 	.word	0x40020010
 8004d38:	40020028 	.word	0x40020028
 8004d3c:	40020040 	.word	0x40020040
 8004d40:	40020058 	.word	0x40020058
 8004d44:	40020070 	.word	0x40020070
 8004d48:	40020088 	.word	0x40020088
 8004d4c:	400200a0 	.word	0x400200a0
 8004d50:	400200b8 	.word	0x400200b8
 8004d54:	40020410 	.word	0x40020410
 8004d58:	40020428 	.word	0x40020428
 8004d5c:	40020440 	.word	0x40020440
 8004d60:	40020458 	.word	0x40020458
 8004d64:	40020470 	.word	0x40020470
 8004d68:	40020488 	.word	0x40020488
 8004d6c:	400204a0 	.word	0x400204a0
 8004d70:	400204b8 	.word	0x400204b8
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bf14      	ite	ne
 8004d82:	2301      	movne	r3, #1
 8004d84:	2300      	moveq	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d015      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0204 	bic.w	r2, r2, #4
 8004d9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2208      	movs	r2, #8
 8004da6:	409a      	lsls	r2, r3
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f043 0201 	orr.w	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	f003 031f 	and.w	r3, r3, #31
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d06e      	beq.n	8004eac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a69      	ldr	r2, [pc, #420]	; (8004f78 <HAL_DMA_IRQHandler+0x3f8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d04a      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a67      	ldr	r2, [pc, #412]	; (8004f7c <HAL_DMA_IRQHandler+0x3fc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d045      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a66      	ldr	r2, [pc, #408]	; (8004f80 <HAL_DMA_IRQHandler+0x400>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d040      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a64      	ldr	r2, [pc, #400]	; (8004f84 <HAL_DMA_IRQHandler+0x404>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d03b      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a63      	ldr	r2, [pc, #396]	; (8004f88 <HAL_DMA_IRQHandler+0x408>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d036      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a61      	ldr	r2, [pc, #388]	; (8004f8c <HAL_DMA_IRQHandler+0x40c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d031      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a60      	ldr	r2, [pc, #384]	; (8004f90 <HAL_DMA_IRQHandler+0x410>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d02c      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a5e      	ldr	r2, [pc, #376]	; (8004f94 <HAL_DMA_IRQHandler+0x414>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d027      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a5d      	ldr	r2, [pc, #372]	; (8004f98 <HAL_DMA_IRQHandler+0x418>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a5b      	ldr	r2, [pc, #364]	; (8004f9c <HAL_DMA_IRQHandler+0x41c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01d      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a5a      	ldr	r2, [pc, #360]	; (8004fa0 <HAL_DMA_IRQHandler+0x420>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a58      	ldr	r2, [pc, #352]	; (8004fa4 <HAL_DMA_IRQHandler+0x424>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a57      	ldr	r2, [pc, #348]	; (8004fa8 <HAL_DMA_IRQHandler+0x428>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a55      	ldr	r2, [pc, #340]	; (8004fac <HAL_DMA_IRQHandler+0x42c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a54      	ldr	r2, [pc, #336]	; (8004fb0 <HAL_DMA_IRQHandler+0x430>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x2ee>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a52      	ldr	r2, [pc, #328]	; (8004fb4 <HAL_DMA_IRQHandler+0x434>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10a      	bne.n	8004e84 <HAL_DMA_IRQHandler+0x304>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf14      	ite	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	2300      	moveq	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e003      	b.n	8004e8c <HAL_DMA_IRQHandler+0x30c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00d      	beq.n	8004eac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2201      	movs	r2, #1
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	f043 0202 	orr.w	r2, r3, #2
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 808f 	beq.w	8004fe0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2c      	ldr	r2, [pc, #176]	; (8004f78 <HAL_DMA_IRQHandler+0x3f8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d04a      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <HAL_DMA_IRQHandler+0x3fc>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d045      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <HAL_DMA_IRQHandler+0x400>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d040      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <HAL_DMA_IRQHandler+0x404>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d03b      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a26      	ldr	r2, [pc, #152]	; (8004f88 <HAL_DMA_IRQHandler+0x408>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d036      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a24      	ldr	r2, [pc, #144]	; (8004f8c <HAL_DMA_IRQHandler+0x40c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d031      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a23      	ldr	r2, [pc, #140]	; (8004f90 <HAL_DMA_IRQHandler+0x410>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d02c      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <HAL_DMA_IRQHandler+0x414>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d027      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <HAL_DMA_IRQHandler+0x418>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d022      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1e      	ldr	r2, [pc, #120]	; (8004f9c <HAL_DMA_IRQHandler+0x41c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01d      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <HAL_DMA_IRQHandler+0x420>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d018      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1b      	ldr	r2, [pc, #108]	; (8004fa4 <HAL_DMA_IRQHandler+0x424>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1a      	ldr	r2, [pc, #104]	; (8004fa8 <HAL_DMA_IRQHandler+0x428>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a18      	ldr	r2, [pc, #96]	; (8004fac <HAL_DMA_IRQHandler+0x42c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a17      	ldr	r2, [pc, #92]	; (8004fb0 <HAL_DMA_IRQHandler+0x430>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x3e2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <HAL_DMA_IRQHandler+0x434>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d12a      	bne.n	8004fb8 <HAL_DMA_IRQHandler+0x438>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	e023      	b.n	8004fc0 <HAL_DMA_IRQHandler+0x440>
 8004f78:	40020010 	.word	0x40020010
 8004f7c:	40020028 	.word	0x40020028
 8004f80:	40020040 	.word	0x40020040
 8004f84:	40020058 	.word	0x40020058
 8004f88:	40020070 	.word	0x40020070
 8004f8c:	40020088 	.word	0x40020088
 8004f90:	400200a0 	.word	0x400200a0
 8004f94:	400200b8 	.word	0x400200b8
 8004f98:	40020410 	.word	0x40020410
 8004f9c:	40020428 	.word	0x40020428
 8004fa0:	40020440 	.word	0x40020440
 8004fa4:	40020458 	.word	0x40020458
 8004fa8:	40020470 	.word	0x40020470
 8004fac:	40020488 	.word	0x40020488
 8004fb0:	400204a0 	.word	0x400204a0
 8004fb4:	400204b8 	.word	0x400204b8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00d      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	2204      	movs	r2, #4
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	f043 0204 	orr.w	r2, r3, #4
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2210      	movs	r2, #16
 8004fea:	409a      	lsls	r2, r3
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80a6 	beq.w	8005142 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a85      	ldr	r2, [pc, #532]	; (8005210 <HAL_DMA_IRQHandler+0x690>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d04a      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a83      	ldr	r2, [pc, #524]	; (8005214 <HAL_DMA_IRQHandler+0x694>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d045      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a82      	ldr	r2, [pc, #520]	; (8005218 <HAL_DMA_IRQHandler+0x698>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d040      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a80      	ldr	r2, [pc, #512]	; (800521c <HAL_DMA_IRQHandler+0x69c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d03b      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a7f      	ldr	r2, [pc, #508]	; (8005220 <HAL_DMA_IRQHandler+0x6a0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d036      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a7d      	ldr	r2, [pc, #500]	; (8005224 <HAL_DMA_IRQHandler+0x6a4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d031      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a7c      	ldr	r2, [pc, #496]	; (8005228 <HAL_DMA_IRQHandler+0x6a8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d02c      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a7a      	ldr	r2, [pc, #488]	; (800522c <HAL_DMA_IRQHandler+0x6ac>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d027      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a79      	ldr	r2, [pc, #484]	; (8005230 <HAL_DMA_IRQHandler+0x6b0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d022      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a77      	ldr	r2, [pc, #476]	; (8005234 <HAL_DMA_IRQHandler+0x6b4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01d      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a76      	ldr	r2, [pc, #472]	; (8005238 <HAL_DMA_IRQHandler+0x6b8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a74      	ldr	r2, [pc, #464]	; (800523c <HAL_DMA_IRQHandler+0x6bc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a73      	ldr	r2, [pc, #460]	; (8005240 <HAL_DMA_IRQHandler+0x6c0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a71      	ldr	r2, [pc, #452]	; (8005244 <HAL_DMA_IRQHandler+0x6c4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a70      	ldr	r2, [pc, #448]	; (8005248 <HAL_DMA_IRQHandler+0x6c8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_DMA_IRQHandler+0x516>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a6e      	ldr	r2, [pc, #440]	; (800524c <HAL_DMA_IRQHandler+0x6cc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10a      	bne.n	80050ac <HAL_DMA_IRQHandler+0x52c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	e009      	b.n	80050c0 <HAL_DMA_IRQHandler+0x540>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d03e      	beq.n	8005142 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2210      	movs	r2, #16
 80050ce:	409a      	lsls	r2, r3
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d018      	beq.n	8005114 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d108      	bne.n	8005102 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d024      	beq.n	8005142 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
 8005100:	e01f      	b.n	8005142 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01b      	beq.n	8005142 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	4798      	blx	r3
 8005112:	e016      	b.n	8005142 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d107      	bne.n	8005132 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0208 	bic.w	r2, r2, #8
 8005130:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2220      	movs	r2, #32
 800514c:	409a      	lsls	r2, r3
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8110 	beq.w	8005378 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2c      	ldr	r2, [pc, #176]	; (8005210 <HAL_DMA_IRQHandler+0x690>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d04a      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a2b      	ldr	r2, [pc, #172]	; (8005214 <HAL_DMA_IRQHandler+0x694>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d045      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <HAL_DMA_IRQHandler+0x698>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d040      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a28      	ldr	r2, [pc, #160]	; (800521c <HAL_DMA_IRQHandler+0x69c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d03b      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a26      	ldr	r2, [pc, #152]	; (8005220 <HAL_DMA_IRQHandler+0x6a0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d036      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a25      	ldr	r2, [pc, #148]	; (8005224 <HAL_DMA_IRQHandler+0x6a4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d031      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a23      	ldr	r2, [pc, #140]	; (8005228 <HAL_DMA_IRQHandler+0x6a8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d02c      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a22      	ldr	r2, [pc, #136]	; (800522c <HAL_DMA_IRQHandler+0x6ac>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d027      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a20      	ldr	r2, [pc, #128]	; (8005230 <HAL_DMA_IRQHandler+0x6b0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d022      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1f      	ldr	r2, [pc, #124]	; (8005234 <HAL_DMA_IRQHandler+0x6b4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d01d      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <HAL_DMA_IRQHandler+0x6b8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d018      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1c      	ldr	r2, [pc, #112]	; (800523c <HAL_DMA_IRQHandler+0x6bc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1a      	ldr	r2, [pc, #104]	; (8005240 <HAL_DMA_IRQHandler+0x6c0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a19      	ldr	r2, [pc, #100]	; (8005244 <HAL_DMA_IRQHandler+0x6c4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d009      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a17      	ldr	r2, [pc, #92]	; (8005248 <HAL_DMA_IRQHandler+0x6c8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x678>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a16      	ldr	r2, [pc, #88]	; (800524c <HAL_DMA_IRQHandler+0x6cc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d12b      	bne.n	8005250 <HAL_DMA_IRQHandler+0x6d0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	bf14      	ite	ne
 8005206:	2301      	movne	r3, #1
 8005208:	2300      	moveq	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e02a      	b.n	8005264 <HAL_DMA_IRQHandler+0x6e4>
 800520e:	bf00      	nop
 8005210:	40020010 	.word	0x40020010
 8005214:	40020028 	.word	0x40020028
 8005218:	40020040 	.word	0x40020040
 800521c:	40020058 	.word	0x40020058
 8005220:	40020070 	.word	0x40020070
 8005224:	40020088 	.word	0x40020088
 8005228:	400200a0 	.word	0x400200a0
 800522c:	400200b8 	.word	0x400200b8
 8005230:	40020410 	.word	0x40020410
 8005234:	40020428 	.word	0x40020428
 8005238:	40020440 	.word	0x40020440
 800523c:	40020458 	.word	0x40020458
 8005240:	40020470 	.word	0x40020470
 8005244:	40020488 	.word	0x40020488
 8005248:	400204a0 	.word	0x400204a0
 800524c:	400204b8 	.word	0x400204b8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	bf14      	ite	ne
 800525e:	2301      	movne	r3, #1
 8005260:	2300      	moveq	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8087 	beq.w	8005378 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2220      	movs	r2, #32
 8005274:	409a      	lsls	r2, r3
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b04      	cmp	r3, #4
 8005284:	d139      	bne.n	80052fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0216 	bic.w	r2, r2, #22
 8005294:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <HAL_DMA_IRQHandler+0x736>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0208 	bic.w	r2, r2, #8
 80052c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	223f      	movs	r2, #63	; 0x3f
 80052d0:	409a      	lsls	r2, r3
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 8382 	beq.w	80059f4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
          }
          return;
 80052f8:	e37c      	b.n	80059f4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d018      	beq.n	800533a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02c      	beq.n	8005378 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4798      	blx	r3
 8005326:	e027      	b.n	8005378 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d023      	beq.n	8005378 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	4798      	blx	r3
 8005338:	e01e      	b.n	8005378 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10f      	bne.n	8005368 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0210 	bic.w	r2, r2, #16
 8005356:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 833e 	beq.w	80059fe <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8088 	beq.w	80054a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2204      	movs	r2, #4
 8005394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a89      	ldr	r2, [pc, #548]	; (80055c4 <HAL_DMA_IRQHandler+0xa44>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d04a      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a88      	ldr	r2, [pc, #544]	; (80055c8 <HAL_DMA_IRQHandler+0xa48>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d045      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a86      	ldr	r2, [pc, #536]	; (80055cc <HAL_DMA_IRQHandler+0xa4c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d040      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a85      	ldr	r2, [pc, #532]	; (80055d0 <HAL_DMA_IRQHandler+0xa50>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d03b      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a83      	ldr	r2, [pc, #524]	; (80055d4 <HAL_DMA_IRQHandler+0xa54>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d036      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a82      	ldr	r2, [pc, #520]	; (80055d8 <HAL_DMA_IRQHandler+0xa58>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d031      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a80      	ldr	r2, [pc, #512]	; (80055dc <HAL_DMA_IRQHandler+0xa5c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d02c      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a7f      	ldr	r2, [pc, #508]	; (80055e0 <HAL_DMA_IRQHandler+0xa60>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d027      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a7d      	ldr	r2, [pc, #500]	; (80055e4 <HAL_DMA_IRQHandler+0xa64>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d022      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a7c      	ldr	r2, [pc, #496]	; (80055e8 <HAL_DMA_IRQHandler+0xa68>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d01d      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a7a      	ldr	r2, [pc, #488]	; (80055ec <HAL_DMA_IRQHandler+0xa6c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d018      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a79      	ldr	r2, [pc, #484]	; (80055f0 <HAL_DMA_IRQHandler+0xa70>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a77      	ldr	r2, [pc, #476]	; (80055f4 <HAL_DMA_IRQHandler+0xa74>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00e      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a76      	ldr	r2, [pc, #472]	; (80055f8 <HAL_DMA_IRQHandler+0xa78>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d009      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a74      	ldr	r2, [pc, #464]	; (80055fc <HAL_DMA_IRQHandler+0xa7c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_DMA_IRQHandler+0x8b8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a73      	ldr	r2, [pc, #460]	; (8005600 <HAL_DMA_IRQHandler+0xa80>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d108      	bne.n	800544a <HAL_DMA_IRQHandler+0x8ca>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	e007      	b.n	800545a <HAL_DMA_IRQHandler+0x8da>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005462:	429a      	cmp	r2, r3
 8005464:	d307      	bcc.n	8005476 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f2      	bne.n	800545a <HAL_DMA_IRQHandler+0x8da>
 8005474:	e000      	b.n	8005478 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005476:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2203      	movs	r2, #3
 800548a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800548e:	e003      	b.n	8005498 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 82aa 	beq.w	80059fe <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
 80054b2:	e2a4      	b.n	80059fe <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a52      	ldr	r2, [pc, #328]	; (8005604 <HAL_DMA_IRQHandler+0xa84>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d04a      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a51      	ldr	r2, [pc, #324]	; (8005608 <HAL_DMA_IRQHandler+0xa88>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d045      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a4f      	ldr	r2, [pc, #316]	; (800560c <HAL_DMA_IRQHandler+0xa8c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d040      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a4e      	ldr	r2, [pc, #312]	; (8005610 <HAL_DMA_IRQHandler+0xa90>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d03b      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a4c      	ldr	r2, [pc, #304]	; (8005614 <HAL_DMA_IRQHandler+0xa94>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d036      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a4b      	ldr	r2, [pc, #300]	; (8005618 <HAL_DMA_IRQHandler+0xa98>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d031      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a49      	ldr	r2, [pc, #292]	; (800561c <HAL_DMA_IRQHandler+0xa9c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d02c      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a48      	ldr	r2, [pc, #288]	; (8005620 <HAL_DMA_IRQHandler+0xaa0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d027      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a46      	ldr	r2, [pc, #280]	; (8005624 <HAL_DMA_IRQHandler+0xaa4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d022      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a45      	ldr	r2, [pc, #276]	; (8005628 <HAL_DMA_IRQHandler+0xaa8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d01d      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a43      	ldr	r2, [pc, #268]	; (800562c <HAL_DMA_IRQHandler+0xaac>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d018      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a42      	ldr	r2, [pc, #264]	; (8005630 <HAL_DMA_IRQHandler+0xab0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a40      	ldr	r2, [pc, #256]	; (8005634 <HAL_DMA_IRQHandler+0xab4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00e      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a3f      	ldr	r2, [pc, #252]	; (8005638 <HAL_DMA_IRQHandler+0xab8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d009      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a3d      	ldr	r2, [pc, #244]	; (800563c <HAL_DMA_IRQHandler+0xabc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <HAL_DMA_IRQHandler+0x9d4>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a3c      	ldr	r2, [pc, #240]	; (8005640 <HAL_DMA_IRQHandler+0xac0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d101      	bne.n	8005558 <HAL_DMA_IRQHandler+0x9d8>
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <HAL_DMA_IRQHandler+0x9da>
 8005558:	2300      	movs	r3, #0
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 824f 	beq.w	80059fe <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	2204      	movs	r2, #4
 8005572:	409a      	lsls	r2, r3
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80dd 	beq.w	8005738 <HAL_DMA_IRQHandler+0xbb8>
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80d7 	beq.w	8005738 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	2204      	movs	r2, #4
 8005594:	409a      	lsls	r2, r3
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d059      	beq.n	8005658 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d14a      	bne.n	8005644 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 8220 	beq.w	80059f8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055c0:	e21a      	b.n	80059f8 <HAL_DMA_IRQHandler+0xe78>
 80055c2:	bf00      	nop
 80055c4:	40020010 	.word	0x40020010
 80055c8:	40020028 	.word	0x40020028
 80055cc:	40020040 	.word	0x40020040
 80055d0:	40020058 	.word	0x40020058
 80055d4:	40020070 	.word	0x40020070
 80055d8:	40020088 	.word	0x40020088
 80055dc:	400200a0 	.word	0x400200a0
 80055e0:	400200b8 	.word	0x400200b8
 80055e4:	40020410 	.word	0x40020410
 80055e8:	40020428 	.word	0x40020428
 80055ec:	40020440 	.word	0x40020440
 80055f0:	40020458 	.word	0x40020458
 80055f4:	40020470 	.word	0x40020470
 80055f8:	40020488 	.word	0x40020488
 80055fc:	400204a0 	.word	0x400204a0
 8005600:	400204b8 	.word	0x400204b8
 8005604:	48022c08 	.word	0x48022c08
 8005608:	48022c1c 	.word	0x48022c1c
 800560c:	48022c30 	.word	0x48022c30
 8005610:	48022c44 	.word	0x48022c44
 8005614:	48022c58 	.word	0x48022c58
 8005618:	48022c6c 	.word	0x48022c6c
 800561c:	48022c80 	.word	0x48022c80
 8005620:	48022c94 	.word	0x48022c94
 8005624:	58025408 	.word	0x58025408
 8005628:	5802541c 	.word	0x5802541c
 800562c:	58025430 	.word	0x58025430
 8005630:	58025444 	.word	0x58025444
 8005634:	58025458 	.word	0x58025458
 8005638:	5802546c 	.word	0x5802546c
 800563c:	58025480 	.word	0x58025480
 8005640:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 81d5 	beq.w	80059f8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005656:	e1cf      	b.n	80059f8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d160      	bne.n	8005724 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a7f      	ldr	r2, [pc, #508]	; (8005864 <HAL_DMA_IRQHandler+0xce4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d04a      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a7d      	ldr	r2, [pc, #500]	; (8005868 <HAL_DMA_IRQHandler+0xce8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d045      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a7c      	ldr	r2, [pc, #496]	; (800586c <HAL_DMA_IRQHandler+0xcec>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d040      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a7a      	ldr	r2, [pc, #488]	; (8005870 <HAL_DMA_IRQHandler+0xcf0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d03b      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a79      	ldr	r2, [pc, #484]	; (8005874 <HAL_DMA_IRQHandler+0xcf4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d036      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a77      	ldr	r2, [pc, #476]	; (8005878 <HAL_DMA_IRQHandler+0xcf8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d031      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a76      	ldr	r2, [pc, #472]	; (800587c <HAL_DMA_IRQHandler+0xcfc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d02c      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a74      	ldr	r2, [pc, #464]	; (8005880 <HAL_DMA_IRQHandler+0xd00>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d027      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a73      	ldr	r2, [pc, #460]	; (8005884 <HAL_DMA_IRQHandler+0xd04>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d022      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a71      	ldr	r2, [pc, #452]	; (8005888 <HAL_DMA_IRQHandler+0xd08>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01d      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a70      	ldr	r2, [pc, #448]	; (800588c <HAL_DMA_IRQHandler+0xd0c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d018      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a6e      	ldr	r2, [pc, #440]	; (8005890 <HAL_DMA_IRQHandler+0xd10>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6d      	ldr	r2, [pc, #436]	; (8005894 <HAL_DMA_IRQHandler+0xd14>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a6b      	ldr	r2, [pc, #428]	; (8005898 <HAL_DMA_IRQHandler+0xd18>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a6a      	ldr	r2, [pc, #424]	; (800589c <HAL_DMA_IRQHandler+0xd1c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_DMA_IRQHandler+0xb82>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a68      	ldr	r2, [pc, #416]	; (80058a0 <HAL_DMA_IRQHandler+0xd20>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d108      	bne.n	8005714 <HAL_DMA_IRQHandler+0xb94>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0208 	bic.w	r2, r2, #8
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	e007      	b.n	8005724 <HAL_DMA_IRQHandler+0xba4>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0204 	bic.w	r2, r2, #4
 8005722:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8165 	beq.w	80059f8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005736:	e15f      	b.n	80059f8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2202      	movs	r2, #2
 8005742:	409a      	lsls	r2, r3
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4013      	ands	r3, r2
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 80c5 	beq.w	80058d8 <HAL_DMA_IRQHandler+0xd58>
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80bf 	beq.w	80058d8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2202      	movs	r2, #2
 8005764:	409a      	lsls	r2, r3
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d018      	beq.n	80057a6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 813a 	beq.w	80059fc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005790:	e134      	b.n	80059fc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8130 	beq.w	80059fc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057a4:	e12a      	b.n	80059fc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f040 8089 	bne.w	80058c4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2b      	ldr	r2, [pc, #172]	; (8005864 <HAL_DMA_IRQHandler+0xce4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d04a      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a29      	ldr	r2, [pc, #164]	; (8005868 <HAL_DMA_IRQHandler+0xce8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d045      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a28      	ldr	r2, [pc, #160]	; (800586c <HAL_DMA_IRQHandler+0xcec>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d040      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a26      	ldr	r2, [pc, #152]	; (8005870 <HAL_DMA_IRQHandler+0xcf0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d03b      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a25      	ldr	r2, [pc, #148]	; (8005874 <HAL_DMA_IRQHandler+0xcf4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d036      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a23      	ldr	r2, [pc, #140]	; (8005878 <HAL_DMA_IRQHandler+0xcf8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d031      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a22      	ldr	r2, [pc, #136]	; (800587c <HAL_DMA_IRQHandler+0xcfc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d02c      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a20      	ldr	r2, [pc, #128]	; (8005880 <HAL_DMA_IRQHandler+0xd00>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d027      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <HAL_DMA_IRQHandler+0xd04>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d022      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <HAL_DMA_IRQHandler+0xd08>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01d      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1c      	ldr	r2, [pc, #112]	; (800588c <HAL_DMA_IRQHandler+0xd0c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1a      	ldr	r2, [pc, #104]	; (8005890 <HAL_DMA_IRQHandler+0xd10>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a19      	ldr	r2, [pc, #100]	; (8005894 <HAL_DMA_IRQHandler+0xd14>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a17      	ldr	r2, [pc, #92]	; (8005898 <HAL_DMA_IRQHandler+0xd18>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a16      	ldr	r2, [pc, #88]	; (800589c <HAL_DMA_IRQHandler+0xd1c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_DMA_IRQHandler+0xcd2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <HAL_DMA_IRQHandler+0xd20>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d128      	bne.n	80058a4 <HAL_DMA_IRQHandler+0xd24>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0214 	bic.w	r2, r2, #20
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	e027      	b.n	80058b4 <HAL_DMA_IRQHandler+0xd34>
 8005864:	40020010 	.word	0x40020010
 8005868:	40020028 	.word	0x40020028
 800586c:	40020040 	.word	0x40020040
 8005870:	40020058 	.word	0x40020058
 8005874:	40020070 	.word	0x40020070
 8005878:	40020088 	.word	0x40020088
 800587c:	400200a0 	.word	0x400200a0
 8005880:	400200b8 	.word	0x400200b8
 8005884:	40020410 	.word	0x40020410
 8005888:	40020428 	.word	0x40020428
 800588c:	40020440 	.word	0x40020440
 8005890:	40020458 	.word	0x40020458
 8005894:	40020470 	.word	0x40020470
 8005898:	40020488 	.word	0x40020488
 800589c:	400204a0 	.word	0x400204a0
 80058a0:	400204b8 	.word	0x400204b8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 020a 	bic.w	r2, r2, #10
 80058b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8097 	beq.w	80059fc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058d6:	e091      	b.n	80059fc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	2208      	movs	r2, #8
 80058e2:	409a      	lsls	r2, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8088 	beq.w	80059fe <HAL_DMA_IRQHandler+0xe7e>
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8082 	beq.w	80059fe <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a41      	ldr	r2, [pc, #260]	; (8005a04 <HAL_DMA_IRQHandler+0xe84>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d04a      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a3f      	ldr	r2, [pc, #252]	; (8005a08 <HAL_DMA_IRQHandler+0xe88>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d045      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a3e      	ldr	r2, [pc, #248]	; (8005a0c <HAL_DMA_IRQHandler+0xe8c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d040      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a3c      	ldr	r2, [pc, #240]	; (8005a10 <HAL_DMA_IRQHandler+0xe90>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d03b      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a3b      	ldr	r2, [pc, #236]	; (8005a14 <HAL_DMA_IRQHandler+0xe94>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d036      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a39      	ldr	r2, [pc, #228]	; (8005a18 <HAL_DMA_IRQHandler+0xe98>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d031      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a38      	ldr	r2, [pc, #224]	; (8005a1c <HAL_DMA_IRQHandler+0xe9c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d02c      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a36      	ldr	r2, [pc, #216]	; (8005a20 <HAL_DMA_IRQHandler+0xea0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d027      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a35      	ldr	r2, [pc, #212]	; (8005a24 <HAL_DMA_IRQHandler+0xea4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d022      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a33      	ldr	r2, [pc, #204]	; (8005a28 <HAL_DMA_IRQHandler+0xea8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01d      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a32      	ldr	r2, [pc, #200]	; (8005a2c <HAL_DMA_IRQHandler+0xeac>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d018      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a30      	ldr	r2, [pc, #192]	; (8005a30 <HAL_DMA_IRQHandler+0xeb0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a2f      	ldr	r2, [pc, #188]	; (8005a34 <HAL_DMA_IRQHandler+0xeb4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2d      	ldr	r2, [pc, #180]	; (8005a38 <HAL_DMA_IRQHandler+0xeb8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2c      	ldr	r2, [pc, #176]	; (8005a3c <HAL_DMA_IRQHandler+0xebc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_DMA_IRQHandler+0xe1a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2a      	ldr	r2, [pc, #168]	; (8005a40 <HAL_DMA_IRQHandler+0xec0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d108      	bne.n	80059ac <HAL_DMA_IRQHandler+0xe2c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 021c 	bic.w	r2, r2, #28
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e007      	b.n	80059bc <HAL_DMA_IRQHandler+0xe3c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 020e 	bic.w	r2, r2, #14
 80059ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	2201      	movs	r2, #1
 80059c6:	409a      	lsls	r2, r3
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	4798      	blx	r3
 80059f2:	e004      	b.n	80059fe <HAL_DMA_IRQHandler+0xe7e>
          return;
 80059f4:	bf00      	nop
 80059f6:	e002      	b.n	80059fe <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80059fe:	3728      	adds	r7, #40	; 0x28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40020010 	.word	0x40020010
 8005a08:	40020028 	.word	0x40020028
 8005a0c:	40020040 	.word	0x40020040
 8005a10:	40020058 	.word	0x40020058
 8005a14:	40020070 	.word	0x40020070
 8005a18:	40020088 	.word	0x40020088
 8005a1c:	400200a0 	.word	0x400200a0
 8005a20:	400200b8 	.word	0x400200b8
 8005a24:	40020410 	.word	0x40020410
 8005a28:	40020428 	.word	0x40020428
 8005a2c:	40020440 	.word	0x40020440
 8005a30:	40020458 	.word	0x40020458
 8005a34:	40020470 	.word	0x40020470
 8005a38:	40020488 	.word	0x40020488
 8005a3c:	400204a0 	.word	0x400204a0
 8005a40:	400204b8 	.word	0x400204b8

08005a44 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a74:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a7f      	ldr	r2, [pc, #508]	; (8005c78 <DMA_SetConfig+0x21c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d072      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a7d      	ldr	r2, [pc, #500]	; (8005c7c <DMA_SetConfig+0x220>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d06d      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a7c      	ldr	r2, [pc, #496]	; (8005c80 <DMA_SetConfig+0x224>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d068      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a7a      	ldr	r2, [pc, #488]	; (8005c84 <DMA_SetConfig+0x228>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d063      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a79      	ldr	r2, [pc, #484]	; (8005c88 <DMA_SetConfig+0x22c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d05e      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a77      	ldr	r2, [pc, #476]	; (8005c8c <DMA_SetConfig+0x230>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d059      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a76      	ldr	r2, [pc, #472]	; (8005c90 <DMA_SetConfig+0x234>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d054      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a74      	ldr	r2, [pc, #464]	; (8005c94 <DMA_SetConfig+0x238>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d04f      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a73      	ldr	r2, [pc, #460]	; (8005c98 <DMA_SetConfig+0x23c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d04a      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a71      	ldr	r2, [pc, #452]	; (8005c9c <DMA_SetConfig+0x240>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d045      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a70      	ldr	r2, [pc, #448]	; (8005ca0 <DMA_SetConfig+0x244>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d040      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a6e      	ldr	r2, [pc, #440]	; (8005ca4 <DMA_SetConfig+0x248>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d03b      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a6d      	ldr	r2, [pc, #436]	; (8005ca8 <DMA_SetConfig+0x24c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d036      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a6b      	ldr	r2, [pc, #428]	; (8005cac <DMA_SetConfig+0x250>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d031      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a6a      	ldr	r2, [pc, #424]	; (8005cb0 <DMA_SetConfig+0x254>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d02c      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a68      	ldr	r2, [pc, #416]	; (8005cb4 <DMA_SetConfig+0x258>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d027      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a67      	ldr	r2, [pc, #412]	; (8005cb8 <DMA_SetConfig+0x25c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d022      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a65      	ldr	r2, [pc, #404]	; (8005cbc <DMA_SetConfig+0x260>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01d      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a64      	ldr	r2, [pc, #400]	; (8005cc0 <DMA_SetConfig+0x264>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d018      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a62      	ldr	r2, [pc, #392]	; (8005cc4 <DMA_SetConfig+0x268>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d013      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a61      	ldr	r2, [pc, #388]	; (8005cc8 <DMA_SetConfig+0x26c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00e      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a5f      	ldr	r2, [pc, #380]	; (8005ccc <DMA_SetConfig+0x270>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d009      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5e      	ldr	r2, [pc, #376]	; (8005cd0 <DMA_SetConfig+0x274>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d004      	beq.n	8005b66 <DMA_SetConfig+0x10a>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5c      	ldr	r2, [pc, #368]	; (8005cd4 <DMA_SetConfig+0x278>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d101      	bne.n	8005b6a <DMA_SetConfig+0x10e>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <DMA_SetConfig+0x110>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b78:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b8a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a39      	ldr	r2, [pc, #228]	; (8005c78 <DMA_SetConfig+0x21c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d04a      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a38      	ldr	r2, [pc, #224]	; (8005c7c <DMA_SetConfig+0x220>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d045      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a36      	ldr	r2, [pc, #216]	; (8005c80 <DMA_SetConfig+0x224>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d040      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a35      	ldr	r2, [pc, #212]	; (8005c84 <DMA_SetConfig+0x228>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d03b      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a33      	ldr	r2, [pc, #204]	; (8005c88 <DMA_SetConfig+0x22c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d036      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a32      	ldr	r2, [pc, #200]	; (8005c8c <DMA_SetConfig+0x230>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d031      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a30      	ldr	r2, [pc, #192]	; (8005c90 <DMA_SetConfig+0x234>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d02c      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a2f      	ldr	r2, [pc, #188]	; (8005c94 <DMA_SetConfig+0x238>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d027      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a2d      	ldr	r2, [pc, #180]	; (8005c98 <DMA_SetConfig+0x23c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d022      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2c      	ldr	r2, [pc, #176]	; (8005c9c <DMA_SetConfig+0x240>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d01d      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a2a      	ldr	r2, [pc, #168]	; (8005ca0 <DMA_SetConfig+0x244>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d018      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a29      	ldr	r2, [pc, #164]	; (8005ca4 <DMA_SetConfig+0x248>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a27      	ldr	r2, [pc, #156]	; (8005ca8 <DMA_SetConfig+0x24c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a26      	ldr	r2, [pc, #152]	; (8005cac <DMA_SetConfig+0x250>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a24      	ldr	r2, [pc, #144]	; (8005cb0 <DMA_SetConfig+0x254>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <DMA_SetConfig+0x1d0>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a23      	ldr	r2, [pc, #140]	; (8005cb4 <DMA_SetConfig+0x258>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d101      	bne.n	8005c30 <DMA_SetConfig+0x1d4>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <DMA_SetConfig+0x1d6>
 8005c30:	2300      	movs	r3, #0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d059      	beq.n	8005cea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	223f      	movs	r2, #63	; 0x3f
 8005c40:	409a      	lsls	r2, r3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c54:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d138      	bne.n	8005cd8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c76:	e0ae      	b.n	8005dd6 <DMA_SetConfig+0x37a>
 8005c78:	40020010 	.word	0x40020010
 8005c7c:	40020028 	.word	0x40020028
 8005c80:	40020040 	.word	0x40020040
 8005c84:	40020058 	.word	0x40020058
 8005c88:	40020070 	.word	0x40020070
 8005c8c:	40020088 	.word	0x40020088
 8005c90:	400200a0 	.word	0x400200a0
 8005c94:	400200b8 	.word	0x400200b8
 8005c98:	40020410 	.word	0x40020410
 8005c9c:	40020428 	.word	0x40020428
 8005ca0:	40020440 	.word	0x40020440
 8005ca4:	40020458 	.word	0x40020458
 8005ca8:	40020470 	.word	0x40020470
 8005cac:	40020488 	.word	0x40020488
 8005cb0:	400204a0 	.word	0x400204a0
 8005cb4:	400204b8 	.word	0x400204b8
 8005cb8:	58025408 	.word	0x58025408
 8005cbc:	5802541c 	.word	0x5802541c
 8005cc0:	58025430 	.word	0x58025430
 8005cc4:	58025444 	.word	0x58025444
 8005cc8:	58025458 	.word	0x58025458
 8005ccc:	5802546c 	.word	0x5802546c
 8005cd0:	58025480 	.word	0x58025480
 8005cd4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	60da      	str	r2, [r3, #12]
}
 8005ce8:	e075      	b.n	8005dd6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a3d      	ldr	r2, [pc, #244]	; (8005de4 <DMA_SetConfig+0x388>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d04a      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a3b      	ldr	r2, [pc, #236]	; (8005de8 <DMA_SetConfig+0x38c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d045      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a3a      	ldr	r2, [pc, #232]	; (8005dec <DMA_SetConfig+0x390>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d040      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a38      	ldr	r2, [pc, #224]	; (8005df0 <DMA_SetConfig+0x394>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d03b      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a37      	ldr	r2, [pc, #220]	; (8005df4 <DMA_SetConfig+0x398>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d036      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a35      	ldr	r2, [pc, #212]	; (8005df8 <DMA_SetConfig+0x39c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d031      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a34      	ldr	r2, [pc, #208]	; (8005dfc <DMA_SetConfig+0x3a0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d02c      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a32      	ldr	r2, [pc, #200]	; (8005e00 <DMA_SetConfig+0x3a4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d027      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a31      	ldr	r2, [pc, #196]	; (8005e04 <DMA_SetConfig+0x3a8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a2f      	ldr	r2, [pc, #188]	; (8005e08 <DMA_SetConfig+0x3ac>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2e      	ldr	r2, [pc, #184]	; (8005e0c <DMA_SetConfig+0x3b0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2c      	ldr	r2, [pc, #176]	; (8005e10 <DMA_SetConfig+0x3b4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2b      	ldr	r2, [pc, #172]	; (8005e14 <DMA_SetConfig+0x3b8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a29      	ldr	r2, [pc, #164]	; (8005e18 <DMA_SetConfig+0x3bc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a28      	ldr	r2, [pc, #160]	; (8005e1c <DMA_SetConfig+0x3c0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <DMA_SetConfig+0x32e>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a26      	ldr	r2, [pc, #152]	; (8005e20 <DMA_SetConfig+0x3c4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <DMA_SetConfig+0x332>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <DMA_SetConfig+0x334>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d020      	beq.n	8005dd6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d108      	bne.n	8005dc6 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	60da      	str	r2, [r3, #12]
}
 8005dc4:	e007      	b.n	8005dd6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	60da      	str	r2, [r3, #12]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	48022c08 	.word	0x48022c08
 8005de8:	48022c1c 	.word	0x48022c1c
 8005dec:	48022c30 	.word	0x48022c30
 8005df0:	48022c44 	.word	0x48022c44
 8005df4:	48022c58 	.word	0x48022c58
 8005df8:	48022c6c 	.word	0x48022c6c
 8005dfc:	48022c80 	.word	0x48022c80
 8005e00:	48022c94 	.word	0x48022c94
 8005e04:	58025408 	.word	0x58025408
 8005e08:	5802541c 	.word	0x5802541c
 8005e0c:	58025430 	.word	0x58025430
 8005e10:	58025444 	.word	0x58025444
 8005e14:	58025458 	.word	0x58025458
 8005e18:	5802546c 	.word	0x5802546c
 8005e1c:	58025480 	.word	0x58025480
 8005e20:	58025494 	.word	0x58025494

08005e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a42      	ldr	r2, [pc, #264]	; (8005f3c <DMA_CalcBaseAndBitshift+0x118>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d04a      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a41      	ldr	r2, [pc, #260]	; (8005f40 <DMA_CalcBaseAndBitshift+0x11c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d045      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3f      	ldr	r2, [pc, #252]	; (8005f44 <DMA_CalcBaseAndBitshift+0x120>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d040      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a3e      	ldr	r2, [pc, #248]	; (8005f48 <DMA_CalcBaseAndBitshift+0x124>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d03b      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a3c      	ldr	r2, [pc, #240]	; (8005f4c <DMA_CalcBaseAndBitshift+0x128>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d036      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a3b      	ldr	r2, [pc, #236]	; (8005f50 <DMA_CalcBaseAndBitshift+0x12c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d031      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a39      	ldr	r2, [pc, #228]	; (8005f54 <DMA_CalcBaseAndBitshift+0x130>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d02c      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a38      	ldr	r2, [pc, #224]	; (8005f58 <DMA_CalcBaseAndBitshift+0x134>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d027      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a36      	ldr	r2, [pc, #216]	; (8005f5c <DMA_CalcBaseAndBitshift+0x138>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d022      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a35      	ldr	r2, [pc, #212]	; (8005f60 <DMA_CalcBaseAndBitshift+0x13c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d01d      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a33      	ldr	r2, [pc, #204]	; (8005f64 <DMA_CalcBaseAndBitshift+0x140>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a32      	ldr	r2, [pc, #200]	; (8005f68 <DMA_CalcBaseAndBitshift+0x144>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a30      	ldr	r2, [pc, #192]	; (8005f6c <DMA_CalcBaseAndBitshift+0x148>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2f      	ldr	r2, [pc, #188]	; (8005f70 <DMA_CalcBaseAndBitshift+0x14c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <DMA_CalcBaseAndBitshift+0x150>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <DMA_CalcBaseAndBitshift+0xa8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2c      	ldr	r2, [pc, #176]	; (8005f78 <DMA_CalcBaseAndBitshift+0x154>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d101      	bne.n	8005ed0 <DMA_CalcBaseAndBitshift+0xac>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <DMA_CalcBaseAndBitshift+0xae>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d024      	beq.n	8005f20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	3b10      	subs	r3, #16
 8005ede:	4a27      	ldr	r2, [pc, #156]	; (8005f7c <DMA_CalcBaseAndBitshift+0x158>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	4a24      	ldr	r2, [pc, #144]	; (8005f80 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d908      	bls.n	8005f10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	4b1f      	ldr	r3, [pc, #124]	; (8005f84 <DMA_CalcBaseAndBitshift+0x160>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	659a      	str	r2, [r3, #88]	; 0x58
 8005f0e:	e00d      	b.n	8005f2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <DMA_CalcBaseAndBitshift+0x160>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f1e:	e005      	b.n	8005f2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40020010 	.word	0x40020010
 8005f40:	40020028 	.word	0x40020028
 8005f44:	40020040 	.word	0x40020040
 8005f48:	40020058 	.word	0x40020058
 8005f4c:	40020070 	.word	0x40020070
 8005f50:	40020088 	.word	0x40020088
 8005f54:	400200a0 	.word	0x400200a0
 8005f58:	400200b8 	.word	0x400200b8
 8005f5c:	40020410 	.word	0x40020410
 8005f60:	40020428 	.word	0x40020428
 8005f64:	40020440 	.word	0x40020440
 8005f68:	40020458 	.word	0x40020458
 8005f6c:	40020470 	.word	0x40020470
 8005f70:	40020488 	.word	0x40020488
 8005f74:	400204a0 	.word	0x400204a0
 8005f78:	400204b8 	.word	0x400204b8
 8005f7c:	aaaaaaab 	.word	0xaaaaaaab
 8005f80:	080144f8 	.word	0x080144f8
 8005f84:	fffffc00 	.word	0xfffffc00

08005f88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d120      	bne.n	8005fde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d858      	bhi.n	8006056 <DMA_CheckFifoParam+0xce>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <DMA_CheckFifoParam+0x24>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fcf 	.word	0x08005fcf
 8005fb4:	08005fbd 	.word	0x08005fbd
 8005fb8:	08006057 	.word	0x08006057
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d048      	beq.n	800605a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fcc:	e045      	b.n	800605a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fd6:	d142      	bne.n	800605e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fdc:	e03f      	b.n	800605e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe6:	d123      	bne.n	8006030 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d838      	bhi.n	8006062 <DMA_CheckFifoParam+0xda>
 8005ff0:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <DMA_CheckFifoParam+0x70>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	0800600f 	.word	0x0800600f
 8006000:	08006009 	.word	0x08006009
 8006004:	08006021 	.word	0x08006021
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
        break;
 800600c:	e030      	b.n	8006070 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d025      	beq.n	8006066 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800601e:	e022      	b.n	8006066 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006028:	d11f      	bne.n	800606a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800602e:	e01c      	b.n	800606a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	2b02      	cmp	r3, #2
 8006036:	d902      	bls.n	800603e <DMA_CheckFifoParam+0xb6>
 8006038:	2b03      	cmp	r3, #3
 800603a:	d003      	beq.n	8006044 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800603c:	e018      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
        break;
 8006042:	e015      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00e      	beq.n	800606e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
    break;
 8006054:	e00b      	b.n	800606e <DMA_CheckFifoParam+0xe6>
        break;
 8006056:	bf00      	nop
 8006058:	e00a      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 800605a:	bf00      	nop
 800605c:	e008      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 800605e:	bf00      	nop
 8006060:	e006      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 8006062:	bf00      	nop
 8006064:	e004      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 8006066:	bf00      	nop
 8006068:	e002      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
        break;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <DMA_CheckFifoParam+0xe8>
    break;
 800606e:	bf00      	nop
    }
  }

  return status;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop

08006080 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a38      	ldr	r2, [pc, #224]	; (8006174 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d022      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a36      	ldr	r2, [pc, #216]	; (8006178 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01d      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a35      	ldr	r2, [pc, #212]	; (800617c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a33      	ldr	r2, [pc, #204]	; (8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a32      	ldr	r2, [pc, #200]	; (8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a30      	ldr	r2, [pc, #192]	; (8006188 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2f      	ldr	r2, [pc, #188]	; (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2d      	ldr	r2, [pc, #180]	; (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d101      	bne.n	80060e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80060e2:	2300      	movs	r3, #0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01a      	beq.n	800611e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	3b08      	subs	r3, #8
 80060f0:	4a28      	ldr	r2, [pc, #160]	; (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4b26      	ldr	r3, [pc, #152]	; (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a24      	ldr	r2, [pc, #144]	; (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	2201      	movs	r2, #1
 8006116:	409a      	lsls	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800611c:	e024      	b.n	8006168 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	3b10      	subs	r3, #16
 8006126:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006128:	fba2 2303 	umull	r2, r3, r2, r3
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d806      	bhi.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d902      	bls.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3308      	adds	r3, #8
 8006144:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4b18      	ldr	r3, [pc, #96]	; (80061ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a16      	ldr	r2, [pc, #88]	; (80061b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006158:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2201      	movs	r2, #1
 8006162:	409a      	lsls	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	58025408 	.word	0x58025408
 8006178:	5802541c 	.word	0x5802541c
 800617c:	58025430 	.word	0x58025430
 8006180:	58025444 	.word	0x58025444
 8006184:	58025458 	.word	0x58025458
 8006188:	5802546c 	.word	0x5802546c
 800618c:	58025480 	.word	0x58025480
 8006190:	58025494 	.word	0x58025494
 8006194:	cccccccd 	.word	0xcccccccd
 8006198:	16009600 	.word	0x16009600
 800619c:	58025880 	.word	0x58025880
 80061a0:	aaaaaaab 	.word	0xaaaaaaab
 80061a4:	400204b8 	.word	0x400204b8
 80061a8:	4002040f 	.word	0x4002040f
 80061ac:	10008200 	.word	0x10008200
 80061b0:	40020880 	.word	0x40020880

080061b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d04a      	beq.n	8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d847      	bhi.n	8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a25      	ldr	r2, [pc, #148]	; (800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d022      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a24      	ldr	r2, [pc, #144]	; (8006270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d01d      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a22      	ldr	r2, [pc, #136]	; (8006274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d018      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a21      	ldr	r2, [pc, #132]	; (8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d013      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1f      	ldr	r2, [pc, #124]	; (800627c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00e      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d009      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1c      	ldr	r2, [pc, #112]	; (8006284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d101      	bne.n	8006224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006224:	2300      	movs	r3, #0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4b17      	ldr	r3, [pc, #92]	; (800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	461a      	mov	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a15      	ldr	r2, [pc, #84]	; (8006290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800623c:	671a      	str	r2, [r3, #112]	; 0x70
 800623e:	e009      	b.n	8006254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	461a      	mov	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a11      	ldr	r2, [pc, #68]	; (8006298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006252:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3b01      	subs	r3, #1
 8006258:	2201      	movs	r2, #1
 800625a:	409a      	lsls	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	58025408 	.word	0x58025408
 8006270:	5802541c 	.word	0x5802541c
 8006274:	58025430 	.word	0x58025430
 8006278:	58025444 	.word	0x58025444
 800627c:	58025458 	.word	0x58025458
 8006280:	5802546c 	.word	0x5802546c
 8006284:	58025480 	.word	0x58025480
 8006288:	58025494 	.word	0x58025494
 800628c:	1600963f 	.word	0x1600963f
 8006290:	58025940 	.word	0x58025940
 8006294:	1000823f 	.word	0x1000823f
 8006298:	40020940 	.word	0x40020940

0800629c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800629c:	b480      	push	{r7}
 800629e:	b089      	sub	sp, #36	; 0x24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80062aa:	4b89      	ldr	r3, [pc, #548]	; (80064d0 <HAL_GPIO_Init+0x234>)
 80062ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062ae:	e194      	b.n	80065da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	2101      	movs	r1, #1
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	fa01 f303 	lsl.w	r3, r1, r3
 80062bc:	4013      	ands	r3, r2
 80062be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 8186 	beq.w	80065d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d005      	beq.n	80062e0 <HAL_GPIO_Init+0x44>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d130      	bne.n	8006342 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	2203      	movs	r2, #3
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	43db      	mvns	r3, r3
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	4013      	ands	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4313      	orrs	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006316:	2201      	movs	r2, #1
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	43db      	mvns	r3, r3
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	4013      	ands	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	091b      	lsrs	r3, r3, #4
 800632c:	f003 0201 	and.w	r2, r3, #1
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4313      	orrs	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b03      	cmp	r3, #3
 800634c:	d017      	beq.n	800637e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	2203      	movs	r2, #3
 800635a:	fa02 f303 	lsl.w	r3, r2, r3
 800635e:	43db      	mvns	r3, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4013      	ands	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4313      	orrs	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d123      	bne.n	80063d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	08da      	lsrs	r2, r3, #3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3208      	adds	r2, #8
 8006392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	220f      	movs	r2, #15
 80063a2:	fa02 f303 	lsl.w	r3, r2, r3
 80063a6:	43db      	mvns	r3, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	4013      	ands	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	08da      	lsrs	r2, r3, #3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3208      	adds	r2, #8
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	2203      	movs	r2, #3
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	43db      	mvns	r3, r3
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	4013      	ands	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f003 0203 	and.w	r2, r3, #3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 80e0 	beq.w	80065d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006414:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <HAL_GPIO_Init+0x238>)
 8006416:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800641a:	4a2e      	ldr	r2, [pc, #184]	; (80064d4 <HAL_GPIO_Init+0x238>)
 800641c:	f043 0302 	orr.w	r3, r3, #2
 8006420:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006424:	4b2b      	ldr	r3, [pc, #172]	; (80064d4 <HAL_GPIO_Init+0x238>)
 8006426:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006432:	4a29      	ldr	r2, [pc, #164]	; (80064d8 <HAL_GPIO_Init+0x23c>)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	089b      	lsrs	r3, r3, #2
 8006438:	3302      	adds	r3, #2
 800643a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	220f      	movs	r2, #15
 800644a:	fa02 f303 	lsl.w	r3, r2, r3
 800644e:	43db      	mvns	r3, r3
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	4013      	ands	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a20      	ldr	r2, [pc, #128]	; (80064dc <HAL_GPIO_Init+0x240>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d052      	beq.n	8006504 <HAL_GPIO_Init+0x268>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <HAL_GPIO_Init+0x244>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d031      	beq.n	80064ca <HAL_GPIO_Init+0x22e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <HAL_GPIO_Init+0x248>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02b      	beq.n	80064c6 <HAL_GPIO_Init+0x22a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <HAL_GPIO_Init+0x24c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d025      	beq.n	80064c2 <HAL_GPIO_Init+0x226>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a1c      	ldr	r2, [pc, #112]	; (80064ec <HAL_GPIO_Init+0x250>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01f      	beq.n	80064be <HAL_GPIO_Init+0x222>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a1b      	ldr	r2, [pc, #108]	; (80064f0 <HAL_GPIO_Init+0x254>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d019      	beq.n	80064ba <HAL_GPIO_Init+0x21e>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a1a      	ldr	r2, [pc, #104]	; (80064f4 <HAL_GPIO_Init+0x258>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_GPIO_Init+0x21a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a19      	ldr	r2, [pc, #100]	; (80064f8 <HAL_GPIO_Init+0x25c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00d      	beq.n	80064b2 <HAL_GPIO_Init+0x216>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a18      	ldr	r2, [pc, #96]	; (80064fc <HAL_GPIO_Init+0x260>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <HAL_GPIO_Init+0x212>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a17      	ldr	r2, [pc, #92]	; (8006500 <HAL_GPIO_Init+0x264>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d101      	bne.n	80064aa <HAL_GPIO_Init+0x20e>
 80064a6:	2309      	movs	r3, #9
 80064a8:	e02d      	b.n	8006506 <HAL_GPIO_Init+0x26a>
 80064aa:	230a      	movs	r3, #10
 80064ac:	e02b      	b.n	8006506 <HAL_GPIO_Init+0x26a>
 80064ae:	2308      	movs	r3, #8
 80064b0:	e029      	b.n	8006506 <HAL_GPIO_Init+0x26a>
 80064b2:	2307      	movs	r3, #7
 80064b4:	e027      	b.n	8006506 <HAL_GPIO_Init+0x26a>
 80064b6:	2306      	movs	r3, #6
 80064b8:	e025      	b.n	8006506 <HAL_GPIO_Init+0x26a>
 80064ba:	2305      	movs	r3, #5
 80064bc:	e023      	b.n	8006506 <HAL_GPIO_Init+0x26a>
 80064be:	2304      	movs	r3, #4
 80064c0:	e021      	b.n	8006506 <HAL_GPIO_Init+0x26a>
 80064c2:	2303      	movs	r3, #3
 80064c4:	e01f      	b.n	8006506 <HAL_GPIO_Init+0x26a>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e01d      	b.n	8006506 <HAL_GPIO_Init+0x26a>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e01b      	b.n	8006506 <HAL_GPIO_Init+0x26a>
 80064ce:	bf00      	nop
 80064d0:	58000080 	.word	0x58000080
 80064d4:	58024400 	.word	0x58024400
 80064d8:	58000400 	.word	0x58000400
 80064dc:	58020000 	.word	0x58020000
 80064e0:	58020400 	.word	0x58020400
 80064e4:	58020800 	.word	0x58020800
 80064e8:	58020c00 	.word	0x58020c00
 80064ec:	58021000 	.word	0x58021000
 80064f0:	58021400 	.word	0x58021400
 80064f4:	58021800 	.word	0x58021800
 80064f8:	58021c00 	.word	0x58021c00
 80064fc:	58022000 	.word	0x58022000
 8006500:	58022400 	.word	0x58022400
 8006504:	2300      	movs	r3, #0
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	f002 0203 	and.w	r2, r2, #3
 800650c:	0092      	lsls	r2, r2, #2
 800650e:	4093      	lsls	r3, r2
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4313      	orrs	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006516:	4938      	ldr	r1, [pc, #224]	; (80065f8 <HAL_GPIO_Init+0x35c>)
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	089b      	lsrs	r3, r3, #2
 800651c:	3302      	adds	r3, #2
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	43db      	mvns	r3, r3
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	4013      	ands	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800654a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	43db      	mvns	r3, r3
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	4013      	ands	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	43db      	mvns	r3, r3
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4013      	ands	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4013      	ands	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	3301      	adds	r3, #1
 80065d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f47f ae63 	bne.w	80062b0 <HAL_GPIO_Init+0x14>
  }
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	3724      	adds	r7, #36	; 0x24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	58000400 	.word	0x58000400

080065fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	807b      	strh	r3, [r7, #2]
 8006608:	4613      	mov	r3, r2
 800660a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800660c:	787b      	ldrb	r3, [r7, #1]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006612:	887a      	ldrh	r2, [r7, #2]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006618:	e003      	b.n	8006622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800661a:	887b      	ldrh	r3, [r7, #2]
 800661c:	041a      	lsls	r2, r3, #16
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	619a      	str	r2, [r3, #24]
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006640:	887a      	ldrh	r2, [r7, #2]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4013      	ands	r3, r2
 8006646:	041a      	lsls	r2, r3, #16
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	43d9      	mvns	r1, r3
 800664c:	887b      	ldrh	r3, [r7, #2]
 800664e:	400b      	ands	r3, r1
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	619a      	str	r2, [r3, #24]
}
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	4603      	mov	r3, r0
 800666a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800666c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006670:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006674:	88fb      	ldrh	r3, [r7, #6]
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800667c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006680:	88fb      	ldrh	r3, [r7, #6]
 8006682:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	4618      	mov	r0, r3
 800668a:	f7fb f853 	bl	8001734 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80066a0:	4b19      	ldr	r3, [pc, #100]	; (8006708 <HAL_PWREx_ConfigSupply+0x70>)
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d00a      	beq.n	80066c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066ac:	4b16      	ldr	r3, [pc, #88]	; (8006708 <HAL_PWREx_ConfigSupply+0x70>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d001      	beq.n	80066be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e01f      	b.n	80066fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	e01d      	b.n	80066fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066c2:	4b11      	ldr	r3, [pc, #68]	; (8006708 <HAL_PWREx_ConfigSupply+0x70>)
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f023 0207 	bic.w	r2, r3, #7
 80066ca:	490f      	ldr	r1, [pc, #60]	; (8006708 <HAL_PWREx_ConfigSupply+0x70>)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80066d2:	f7fc fd85 	bl	80031e0 <HAL_GetTick>
 80066d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066d8:	e009      	b.n	80066ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80066da:	f7fc fd81 	bl	80031e0 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066e8:	d901      	bls.n	80066ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e007      	b.n	80066fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <HAL_PWREx_ConfigSupply+0x70>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066fa:	d1ee      	bne.n	80066da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	58024800 	.word	0x58024800

0800670c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08c      	sub	sp, #48	; 0x30
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e3f6      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 80b5 	beq.w	8006896 <HAL_RCC_OscConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800672c:	4b96      	ldr	r3, [pc, #600]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006734:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006736:	4b94      	ldr	r3, [pc, #592]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	2b10      	cmp	r3, #16
 8006740:	d007      	beq.n	8006752 <HAL_RCC_OscConfig+0x46>
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	2b18      	cmp	r3, #24
 8006746:	d112      	bne.n	800676e <HAL_RCC_OscConfig+0x62>
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d10d      	bne.n	800676e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006752:	4b8d      	ldr	r3, [pc, #564]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 809a 	beq.w	8006894 <HAL_RCC_OscConfig+0x188>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f040 8095 	bne.w	8006894 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e3ce      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006776:	d106      	bne.n	8006786 <HAL_RCC_OscConfig+0x7a>
 8006778:	4b83      	ldr	r3, [pc, #524]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a82      	ldr	r2, [pc, #520]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800677e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	e058      	b.n	8006838 <HAL_RCC_OscConfig+0x12c>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d112      	bne.n	80067b4 <HAL_RCC_OscConfig+0xa8>
 800678e:	4b7e      	ldr	r3, [pc, #504]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a7d      	ldr	r2, [pc, #500]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	4b7b      	ldr	r3, [pc, #492]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a7a      	ldr	r2, [pc, #488]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	4b78      	ldr	r3, [pc, #480]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a77      	ldr	r2, [pc, #476]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	e041      	b.n	8006838 <HAL_RCC_OscConfig+0x12c>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067bc:	d112      	bne.n	80067e4 <HAL_RCC_OscConfig+0xd8>
 80067be:	4b72      	ldr	r3, [pc, #456]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a71      	ldr	r2, [pc, #452]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	4b6f      	ldr	r3, [pc, #444]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a6e      	ldr	r2, [pc, #440]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	4b6c      	ldr	r3, [pc, #432]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a6b      	ldr	r2, [pc, #428]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	e029      	b.n	8006838 <HAL_RCC_OscConfig+0x12c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80067ec:	d112      	bne.n	8006814 <HAL_RCC_OscConfig+0x108>
 80067ee:	4b66      	ldr	r3, [pc, #408]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a65      	ldr	r2, [pc, #404]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	4b63      	ldr	r3, [pc, #396]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a62      	ldr	r2, [pc, #392]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	4b60      	ldr	r3, [pc, #384]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a5f      	ldr	r2, [pc, #380]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800680c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e011      	b.n	8006838 <HAL_RCC_OscConfig+0x12c>
 8006814:	4b5c      	ldr	r3, [pc, #368]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a5b      	ldr	r2, [pc, #364]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800681a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	4b59      	ldr	r3, [pc, #356]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a58      	ldr	r2, [pc, #352]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	4b56      	ldr	r3, [pc, #344]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a55      	ldr	r2, [pc, #340]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006832:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d014      	beq.n	800686a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fc fcce 	bl	80031e0 <HAL_GetTick>
 8006844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006846:	e009      	b.n	800685c <HAL_RCC_OscConfig+0x150>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006848:	f7fc fcca 	bl	80031e0 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e357      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800685c:	4b4a      	ldr	r3, [pc, #296]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0ef      	beq.n	8006848 <HAL_RCC_OscConfig+0x13c>
 8006868:	e015      	b.n	8006896 <HAL_RCC_OscConfig+0x18a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686a:	f7fc fcb9 	bl	80031e0 <HAL_GetTick>
 800686e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006870:	e009      	b.n	8006886 <HAL_RCC_OscConfig+0x17a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006872:	f7fc fcb5 	bl	80031e0 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e342      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006886:	4b40      	ldr	r3, [pc, #256]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ef      	bne.n	8006872 <HAL_RCC_OscConfig+0x166>
 8006892:	e000      	b.n	8006896 <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 808d 	beq.w	80069be <HAL_RCC_OscConfig+0x2b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068a4:	4b38      	ldr	r3, [pc, #224]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068ae:	4b36      	ldr	r3, [pc, #216]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80068b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <HAL_RCC_OscConfig+0x1be>
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	2b18      	cmp	r3, #24
 80068be:	d137      	bne.n	8006930 <HAL_RCC_OscConfig+0x224>
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d132      	bne.n	8006930 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068ca:	4b2f      	ldr	r3, [pc, #188]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_RCC_OscConfig+0x1d6>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e314      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068e2:	4b29      	ldr	r3, [pc, #164]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f023 0219 	bic.w	r2, r3, #25
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	4926      	ldr	r1, [pc, #152]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068f4:	f7fc fc74 	bl	80031e0 <HAL_GetTick>
 80068f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x202>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068fc:	f7fc fc70 	bl	80031e0 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x202>
            {
              return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e2fe      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800690e:	4b1e      	ldr	r3, [pc, #120]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0f0      	beq.n	80068fc <HAL_RCC_OscConfig+0x1f0>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800691a:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	061b      	lsls	r3, r3, #24
 8006928:	4917      	ldr	r1, [pc, #92]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800692a:	4313      	orrs	r3, r2
 800692c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800692e:	e046      	b.n	80069be <HAL_RCC_OscConfig+0x2b2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d029      	beq.n	800698c <HAL_RCC_OscConfig+0x280>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006938:	4b13      	ldr	r3, [pc, #76]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f023 0219 	bic.w	r2, r3, #25
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4910      	ldr	r1, [pc, #64]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006946:	4313      	orrs	r3, r2
 8006948:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694a:	f7fc fc49 	bl	80031e0 <HAL_GetTick>
 800694e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x258>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006952:	f7fc fc45 	bl	80031e0 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x258>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e2d3      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006964:	4b08      	ldr	r3, [pc, #32]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCC_OscConfig+0x246>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006970:	4b05      	ldr	r3, [pc, #20]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	4902      	ldr	r1, [pc, #8]	; (8006988 <HAL_RCC_OscConfig+0x27c>)
 8006980:	4313      	orrs	r3, r2
 8006982:	604b      	str	r3, [r1, #4]
 8006984:	e01b      	b.n	80069be <HAL_RCC_OscConfig+0x2b2>
 8006986:	bf00      	nop
 8006988:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800698c:	4b97      	ldr	r3, [pc, #604]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a96      	ldr	r2, [pc, #600]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fc fc22 	bl	80031e0 <HAL_GetTick>
 800699c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x2a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069a0:	f7fc fc1e 	bl	80031e0 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e2ac      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069b2:	4b8e      	ldr	r3, [pc, #568]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d06a      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069ca:	4b88      	ldr	r3, [pc, #544]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069d4:	4b85      	ldr	r3, [pc, #532]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d007      	beq.n	80069f0 <HAL_RCC_OscConfig+0x2e4>
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b18      	cmp	r3, #24
 80069e4:	d11b      	bne.n	8006a1e <HAL_RCC_OscConfig+0x312>
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d116      	bne.n	8006a1e <HAL_RCC_OscConfig+0x312>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069f0:	4b7e      	ldr	r3, [pc, #504]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <HAL_RCC_OscConfig+0x2fc>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	d001      	beq.n	8006a08 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e281      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a08:	4b78      	ldr	r3, [pc, #480]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	061b      	lsls	r3, r3, #24
 8006a16:	4975      	ldr	r1, [pc, #468]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a1c:	e040      	b.n	8006aa0 <HAL_RCC_OscConfig+0x394>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d023      	beq.n	8006a6e <HAL_RCC_OscConfig+0x362>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a26:	4b71      	ldr	r3, [pc, #452]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a70      	ldr	r2, [pc, #448]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a32:	f7fc fbd5 	bl	80031e0 <HAL_GetTick>
 8006a36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006a3a:	f7fc fbd1 	bl	80031e0 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x340>
          {
            return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e25f      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a4c:	4b67      	ldr	r3, [pc, #412]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <HAL_RCC_OscConfig+0x32e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a58:	4b64      	ldr	r3, [pc, #400]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	061b      	lsls	r3, r3, #24
 8006a66:	4961      	ldr	r1, [pc, #388]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60cb      	str	r3, [r1, #12]
 8006a6c:	e018      	b.n	8006aa0 <HAL_RCC_OscConfig+0x394>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006a6e:	4b5f      	ldr	r3, [pc, #380]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a5e      	ldr	r2, [pc, #376]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7a:	f7fc fbb1 	bl	80031e0 <HAL_GetTick>
 8006a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006a80:	e008      	b.n	8006a94 <HAL_RCC_OscConfig+0x388>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006a82:	f7fc fbad 	bl	80031e0 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCC_OscConfig+0x388>
          {
            return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e23b      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006a94:	4b55      	ldr	r3, [pc, #340]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f0      	bne.n	8006a82 <HAL_RCC_OscConfig+0x376>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d036      	beq.n	8006b1a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d019      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x3dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ab4:	4b4d      	ldr	r3, [pc, #308]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab8:	4a4c      	ldr	r2, [pc, #304]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac0:	f7fc fb8e 	bl	80031e0 <HAL_GetTick>
 8006ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x3ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ac8:	f7fc fb8a 	bl	80031e0 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e218      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ada:	4b44      	ldr	r3, [pc, #272]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f0      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x3bc>
 8006ae6:	e018      	b.n	8006b1a <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ae8:	4b40      	ldr	r3, [pc, #256]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aec:	4a3f      	ldr	r2, [pc, #252]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006aee:	f023 0301 	bic.w	r3, r3, #1
 8006af2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af4:	f7fc fb74 	bl	80031e0 <HAL_GetTick>
 8006af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006afc:	f7fc fb70 	bl	80031e0 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e1fe      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b0e:	4b37      	ldr	r3, [pc, #220]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f0      	bne.n	8006afc <HAL_RCC_OscConfig+0x3f0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d036      	beq.n	8006b94 <HAL_RCC_OscConfig+0x488>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d019      	beq.n	8006b62 <HAL_RCC_OscConfig+0x456>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b2e:	4b2f      	ldr	r3, [pc, #188]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a2e      	ldr	r2, [pc, #184]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b3a:	f7fc fb51 	bl	80031e0 <HAL_GetTick>
 8006b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x448>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006b42:	f7fc fb4d 	bl	80031e0 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x448>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e1db      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b54:	4b25      	ldr	r3, [pc, #148]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x436>
 8006b60:	e018      	b.n	8006b94 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b62:	4b22      	ldr	r3, [pc, #136]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a21      	ldr	r2, [pc, #132]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b6e:	f7fc fb37 	bl	80031e0 <HAL_GetTick>
 8006b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006b76:	f7fc fb33 	bl	80031e0 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e1c1      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b88:	4b18      	ldr	r3, [pc, #96]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f0      	bne.n	8006b76 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 80af 	beq.w	8006d00 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ba2:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <HAL_RCC_OscConfig+0x4e4>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a12      	ldr	r2, [pc, #72]	; (8006bf0 <HAL_RCC_OscConfig+0x4e4>)
 8006ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bae:	f7fc fb17 	bl	80031e0 <HAL_GetTick>
 8006bb2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x4bc>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006bb6:	f7fc fb13 	bl	80031e0 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b64      	cmp	r3, #100	; 0x64
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x4bc>
      {
        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e1a1      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bc8:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <HAL_RCC_OscConfig+0x4e4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0f0      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x4aa>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d10b      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x4e8>
 8006bdc:	4b03      	ldr	r3, [pc, #12]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be0:	4a02      	ldr	r2, [pc, #8]	; (8006bec <HAL_RCC_OscConfig+0x4e0>)
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	6713      	str	r3, [r2, #112]	; 0x70
 8006be8:	e05b      	b.n	8006ca2 <HAL_RCC_OscConfig+0x596>
 8006bea:	bf00      	nop
 8006bec:	58024400 	.word	0x58024400
 8006bf0:	58024800 	.word	0x58024800
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d112      	bne.n	8006c22 <HAL_RCC_OscConfig+0x516>
 8006bfc:	4b9d      	ldr	r3, [pc, #628]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c00:	4a9c      	ldr	r2, [pc, #624]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	6713      	str	r3, [r2, #112]	; 0x70
 8006c08:	4b9a      	ldr	r3, [pc, #616]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0c:	4a99      	ldr	r2, [pc, #612]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c12:	6713      	str	r3, [r2, #112]	; 0x70
 8006c14:	4b97      	ldr	r3, [pc, #604]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c18:	4a96      	ldr	r2, [pc, #600]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c1a:	f023 0304 	bic.w	r3, r3, #4
 8006c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c20:	e03f      	b.n	8006ca2 <HAL_RCC_OscConfig+0x596>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b05      	cmp	r3, #5
 8006c28:	d112      	bne.n	8006c50 <HAL_RCC_OscConfig+0x544>
 8006c2a:	4b92      	ldr	r3, [pc, #584]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	4a91      	ldr	r2, [pc, #580]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c30:	f043 0304 	orr.w	r3, r3, #4
 8006c34:	6713      	str	r3, [r2, #112]	; 0x70
 8006c36:	4b8f      	ldr	r3, [pc, #572]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3a:	4a8e      	ldr	r2, [pc, #568]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c40:	6713      	str	r3, [r2, #112]	; 0x70
 8006c42:	4b8c      	ldr	r3, [pc, #560]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c46:	4a8b      	ldr	r2, [pc, #556]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c48:	f043 0301 	orr.w	r3, r3, #1
 8006c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c4e:	e028      	b.n	8006ca2 <HAL_RCC_OscConfig+0x596>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	2b85      	cmp	r3, #133	; 0x85
 8006c56:	d112      	bne.n	8006c7e <HAL_RCC_OscConfig+0x572>
 8006c58:	4b86      	ldr	r3, [pc, #536]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5c:	4a85      	ldr	r2, [pc, #532]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c5e:	f043 0304 	orr.w	r3, r3, #4
 8006c62:	6713      	str	r3, [r2, #112]	; 0x70
 8006c64:	4b83      	ldr	r3, [pc, #524]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c68:	4a82      	ldr	r2, [pc, #520]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c70:	4b80      	ldr	r3, [pc, #512]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c74:	4a7f      	ldr	r2, [pc, #508]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c7c:	e011      	b.n	8006ca2 <HAL_RCC_OscConfig+0x596>
 8006c7e:	4b7d      	ldr	r3, [pc, #500]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c82:	4a7c      	ldr	r2, [pc, #496]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8a:	4b7a      	ldr	r3, [pc, #488]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	4a79      	ldr	r2, [pc, #484]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c90:	f023 0304 	bic.w	r3, r3, #4
 8006c94:	6713      	str	r3, [r2, #112]	; 0x70
 8006c96:	4b77      	ldr	r3, [pc, #476]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	4a76      	ldr	r2, [pc, #472]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ca0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d015      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x5ca>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006caa:	f7fc fa99 	bl	80031e0 <HAL_GetTick>
 8006cae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cb0:	e00a      	b.n	8006cc8 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb2:	f7fc fa95 	bl	80031e0 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e121      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cc8:	4b6a      	ldr	r3, [pc, #424]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0ee      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x5a6>
 8006cd4:	e014      	b.n	8006d00 <HAL_RCC_OscConfig+0x5f4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd6:	f7fc fa83 	bl	80031e0 <HAL_GetTick>
 8006cda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCC_OscConfig+0x5e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cde:	f7fc fa7f 	bl	80031e0 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x5e8>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e10b      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cf4:	4b5f      	ldr	r3, [pc, #380]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1ee      	bne.n	8006cde <HAL_RCC_OscConfig+0x5d2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 8100 	beq.w	8006f0a <HAL_RCC_OscConfig+0x7fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d0a:	4b5a      	ldr	r3, [pc, #360]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d12:	2b18      	cmp	r3, #24
 8006d14:	f000 80bb 	beq.w	8006e8e <HAL_RCC_OscConfig+0x782>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	f040 8095 	bne.w	8006e4c <HAL_RCC_OscConfig+0x740>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d22:	4b54      	ldr	r3, [pc, #336]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a53      	ldr	r2, [pc, #332]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2e:	f7fc fa57 	bl	80031e0 <HAL_GetTick>
 8006d32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d34:	e008      	b.n	8006d48 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d36:	f7fc fa53 	bl	80031e0 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e0e1      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d48:	4b4a      	ldr	r3, [pc, #296]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1f0      	bne.n	8006d36 <HAL_RCC_OscConfig+0x62a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d54:	4b47      	ldr	r3, [pc, #284]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d58:	4b47      	ldr	r3, [pc, #284]	; (8006e78 <HAL_RCC_OscConfig+0x76c>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d64:	0112      	lsls	r2, r2, #4
 8006d66:	430a      	orrs	r2, r1
 8006d68:	4942      	ldr	r1, [pc, #264]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	628b      	str	r3, [r1, #40]	; 0x28
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	3b01      	subs	r3, #1
 8006d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	025b      	lsls	r3, r3, #9
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d96:	3b01      	subs	r3, #1
 8006d98:	061b      	lsls	r3, r3, #24
 8006d9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d9e:	4935      	ldr	r1, [pc, #212]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006da4:	4b33      	ldr	r3, [pc, #204]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	4a32      	ldr	r2, [pc, #200]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006db0:	4b30      	ldr	r3, [pc, #192]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db4:	4b31      	ldr	r3, [pc, #196]	; (8006e7c <HAL_RCC_OscConfig+0x770>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006dbc:	00d2      	lsls	r2, r2, #3
 8006dbe:	492d      	ldr	r1, [pc, #180]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006dc4:	4b2b      	ldr	r3, [pc, #172]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	f023 020c 	bic.w	r2, r3, #12
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	4928      	ldr	r1, [pc, #160]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006dd6:	4b27      	ldr	r3, [pc, #156]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	f023 0202 	bic.w	r2, r3, #2
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de2:	4924      	ldr	r1, [pc, #144]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006de8:	4b22      	ldr	r3, [pc, #136]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	4a21      	ldr	r2, [pc, #132]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df4:	4b1f      	ldr	r3, [pc, #124]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e00:	4b1c      	ldr	r3, [pc, #112]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	4a1b      	ldr	r2, [pc, #108]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006e0c:	4b19      	ldr	r3, [pc, #100]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e18:	4b16      	ldr	r3, [pc, #88]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e24:	f7fc f9dc 	bl	80031e0 <HAL_GetTick>
 8006e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x732>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e2c:	f7fc f9d8 	bl	80031e0 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x732>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e066      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0f0      	beq.n	8006e2c <HAL_RCC_OscConfig+0x720>
 8006e4a:	e05e      	b.n	8006f0a <HAL_RCC_OscConfig+0x7fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e4c:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a08      	ldr	r2, [pc, #32]	; (8006e74 <HAL_RCC_OscConfig+0x768>)
 8006e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fc f9c2 	bl	80031e0 <HAL_GetTick>
 8006e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e5e:	e00f      	b.n	8006e80 <HAL_RCC_OscConfig+0x774>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e60:	f7fc f9be 	bl	80031e0 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d908      	bls.n	8006e80 <HAL_RCC_OscConfig+0x774>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e04c      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
 8006e78:	fffffc0c 	.word	0xfffffc0c
 8006e7c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e80:	4b24      	ldr	r3, [pc, #144]	; (8006f14 <HAL_RCC_OscConfig+0x808>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e9      	bne.n	8006e60 <HAL_RCC_OscConfig+0x754>
 8006e8c:	e03d      	b.n	8006f0a <HAL_RCC_OscConfig+0x7fe>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006e8e:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <HAL_RCC_OscConfig+0x808>)
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e94:	4b1f      	ldr	r3, [pc, #124]	; (8006f14 <HAL_RCC_OscConfig+0x808>)
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d031      	beq.n	8006f06 <HAL_RCC_OscConfig+0x7fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f003 0203 	and.w	r2, r3, #3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d12a      	bne.n	8006f06 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	091b      	lsrs	r3, r3, #4
 8006eb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d122      	bne.n	8006f06 <HAL_RCC_OscConfig+0x7fa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d11a      	bne.n	8006f06 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	0a5b      	lsrs	r3, r3, #9
 8006ed4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006edc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d111      	bne.n	8006f06 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d108      	bne.n	8006f06 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	0e1b      	lsrs	r3, r3, #24
 8006ef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f00:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d001      	beq.n	8006f0a <HAL_RCC_OscConfig+0x7fe>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e000      	b.n	8006f0c <HAL_RCC_OscConfig+0x800>
      }
    }
  }
  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3730      	adds	r7, #48	; 0x30
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	58024400 	.word	0x58024400

08006f18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e19c      	b.n	8007266 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f2c:	4b8a      	ldr	r3, [pc, #552]	; (8007158 <HAL_RCC_ClockConfig+0x240>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d910      	bls.n	8006f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3a:	4b87      	ldr	r3, [pc, #540]	; (8007158 <HAL_RCC_ClockConfig+0x240>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f023 020f 	bic.w	r2, r3, #15
 8006f42:	4985      	ldr	r1, [pc, #532]	; (8007158 <HAL_RCC_ClockConfig+0x240>)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4a:	4b83      	ldr	r3, [pc, #524]	; (8007158 <HAL_RCC_ClockConfig+0x240>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d001      	beq.n	8006f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e184      	b.n	8007266 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d010      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	4b7b      	ldr	r3, [pc, #492]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d908      	bls.n	8006f8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f78:	4b78      	ldr	r3, [pc, #480]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	4975      	ldr	r1, [pc, #468]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d010      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	4b70      	ldr	r3, [pc, #448]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d908      	bls.n	8006fb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fa6:	4b6d      	ldr	r3, [pc, #436]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	496a      	ldr	r1, [pc, #424]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d010      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699a      	ldr	r2, [r3, #24]
 8006fc8:	4b64      	ldr	r3, [pc, #400]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d908      	bls.n	8006fe6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fd4:	4b61      	ldr	r3, [pc, #388]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	495e      	ldr	r1, [pc, #376]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d010      	beq.n	8007014 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69da      	ldr	r2, [r3, #28]
 8006ff6:	4b59      	ldr	r3, [pc, #356]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d908      	bls.n	8007014 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007002:	4b56      	ldr	r3, [pc, #344]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	4953      	ldr	r1, [pc, #332]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8007010:	4313      	orrs	r3, r2
 8007012:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d010      	beq.n	8007042 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	4b4d      	ldr	r3, [pc, #308]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	f003 030f 	and.w	r3, r3, #15
 800702c:	429a      	cmp	r2, r3
 800702e:	d908      	bls.n	8007042 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007030:	4b4a      	ldr	r3, [pc, #296]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	f023 020f 	bic.w	r2, r3, #15
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	4947      	ldr	r1, [pc, #284]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 800703e:	4313      	orrs	r3, r2
 8007040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d055      	beq.n	80070fa <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800704e:	4b43      	ldr	r3, [pc, #268]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	4940      	ldr	r1, [pc, #256]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 800705c:	4313      	orrs	r3, r2
 800705e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d107      	bne.n	8007078 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007068:	4b3c      	ldr	r3, [pc, #240]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d121      	bne.n	80070b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0f6      	b.n	8007266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d107      	bne.n	8007090 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007080:	4b36      	ldr	r3, [pc, #216]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d115      	bne.n	80070b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e0ea      	b.n	8007266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d107      	bne.n	80070a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007098:	4b30      	ldr	r3, [pc, #192]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0de      	b.n	8007266 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070a8:	4b2c      	ldr	r3, [pc, #176]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e0d6      	b.n	8007266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070b8:	4b28      	ldr	r3, [pc, #160]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f023 0207 	bic.w	r2, r3, #7
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4925      	ldr	r1, [pc, #148]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ca:	f7fc f889 	bl	80031e0 <HAL_GetTick>
 80070ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d0:	e00a      	b.n	80070e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d2:	f7fc f885 	bl	80031e0 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e0be      	b.n	8007266 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070e8:	4b1c      	ldr	r3, [pc, #112]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d1eb      	bne.n	80070d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d010      	beq.n	8007128 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	4b14      	ldr	r3, [pc, #80]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	429a      	cmp	r2, r3
 8007114:	d208      	bcs.n	8007128 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007116:	4b11      	ldr	r3, [pc, #68]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f023 020f 	bic.w	r2, r3, #15
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	490e      	ldr	r1, [pc, #56]	; (800715c <HAL_RCC_ClockConfig+0x244>)
 8007124:	4313      	orrs	r3, r2
 8007126:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <HAL_RCC_ClockConfig+0x240>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d214      	bcs.n	8007160 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007136:	4b08      	ldr	r3, [pc, #32]	; (8007158 <HAL_RCC_ClockConfig+0x240>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f023 020f 	bic.w	r2, r3, #15
 800713e:	4906      	ldr	r1, [pc, #24]	; (8007158 <HAL_RCC_ClockConfig+0x240>)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	4313      	orrs	r3, r2
 8007144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007146:	4b04      	ldr	r3, [pc, #16]	; (8007158 <HAL_RCC_ClockConfig+0x240>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d005      	beq.n	8007160 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e086      	b.n	8007266 <HAL_RCC_ClockConfig+0x34e>
 8007158:	52002000 	.word	0x52002000
 800715c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d010      	beq.n	800718e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	4b3f      	ldr	r3, [pc, #252]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007178:	429a      	cmp	r2, r3
 800717a:	d208      	bcs.n	800718e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800717c:	4b3c      	ldr	r3, [pc, #240]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	4939      	ldr	r1, [pc, #228]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 800718a:	4313      	orrs	r3, r2
 800718c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d010      	beq.n	80071bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695a      	ldr	r2, [r3, #20]
 800719e:	4b34      	ldr	r3, [pc, #208]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d208      	bcs.n	80071bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071aa:	4b31      	ldr	r3, [pc, #196]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	492e      	ldr	r1, [pc, #184]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d010      	beq.n	80071ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	4b28      	ldr	r3, [pc, #160]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d208      	bcs.n	80071ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071d8:	4b25      	ldr	r3, [pc, #148]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	4922      	ldr	r1, [pc, #136]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d010      	beq.n	8007218 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69da      	ldr	r2, [r3, #28]
 80071fa:	4b1d      	ldr	r3, [pc, #116]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007202:	429a      	cmp	r2, r3
 8007204:	d208      	bcs.n	8007218 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007206:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	4917      	ldr	r1, [pc, #92]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 8007214:	4313      	orrs	r3, r2
 8007216:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007218:	f000 f834 	bl	8007284 <HAL_RCC_GetSysClockFreq>
 800721c:	4602      	mov	r2, r0
 800721e:	4b14      	ldr	r3, [pc, #80]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	4912      	ldr	r1, [pc, #72]	; (8007274 <HAL_RCC_ClockConfig+0x35c>)
 800722a:	5ccb      	ldrb	r3, [r1, r3]
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	fa22 f303 	lsr.w	r3, r2, r3
 8007234:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007236:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <HAL_RCC_ClockConfig+0x358>)
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	4a0d      	ldr	r2, [pc, #52]	; (8007274 <HAL_RCC_ClockConfig+0x35c>)
 8007240:	5cd3      	ldrb	r3, [r2, r3]
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	fa22 f303 	lsr.w	r3, r2, r3
 800724c:	4a0a      	ldr	r2, [pc, #40]	; (8007278 <HAL_RCC_ClockConfig+0x360>)
 800724e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007250:	4a0a      	ldr	r2, [pc, #40]	; (800727c <HAL_RCC_ClockConfig+0x364>)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007256:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <HAL_RCC_ClockConfig+0x368>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4618      	mov	r0, r3
 800725c:	f7fb ff76 	bl	800314c <HAL_InitTick>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	58024400 	.word	0x58024400
 8007274:	080144e8 	.word	0x080144e8
 8007278:	2400000c 	.word	0x2400000c
 800727c:	24000008 	.word	0x24000008
 8007280:	24000010 	.word	0x24000010

08007284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007284:	b480      	push	{r7}
 8007286:	b089      	sub	sp, #36	; 0x24
 8007288:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800728a:	4bb3      	ldr	r3, [pc, #716]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007292:	2b18      	cmp	r3, #24
 8007294:	f200 8155 	bhi.w	8007542 <HAL_RCC_GetSysClockFreq+0x2be>
 8007298:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800729a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729e:	bf00      	nop
 80072a0:	08007305 	.word	0x08007305
 80072a4:	08007543 	.word	0x08007543
 80072a8:	08007543 	.word	0x08007543
 80072ac:	08007543 	.word	0x08007543
 80072b0:	08007543 	.word	0x08007543
 80072b4:	08007543 	.word	0x08007543
 80072b8:	08007543 	.word	0x08007543
 80072bc:	08007543 	.word	0x08007543
 80072c0:	0800732b 	.word	0x0800732b
 80072c4:	08007543 	.word	0x08007543
 80072c8:	08007543 	.word	0x08007543
 80072cc:	08007543 	.word	0x08007543
 80072d0:	08007543 	.word	0x08007543
 80072d4:	08007543 	.word	0x08007543
 80072d8:	08007543 	.word	0x08007543
 80072dc:	08007543 	.word	0x08007543
 80072e0:	08007331 	.word	0x08007331
 80072e4:	08007543 	.word	0x08007543
 80072e8:	08007543 	.word	0x08007543
 80072ec:	08007543 	.word	0x08007543
 80072f0:	08007543 	.word	0x08007543
 80072f4:	08007543 	.word	0x08007543
 80072f8:	08007543 	.word	0x08007543
 80072fc:	08007543 	.word	0x08007543
 8007300:	08007337 	.word	0x08007337
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007304:	4b94      	ldr	r3, [pc, #592]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d009      	beq.n	8007324 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007310:	4b91      	ldr	r3, [pc, #580]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	08db      	lsrs	r3, r3, #3
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	4a90      	ldr	r2, [pc, #576]	; (800755c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800731c:	fa22 f303 	lsr.w	r3, r2, r3
 8007320:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007322:	e111      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007324:	4b8d      	ldr	r3, [pc, #564]	; (800755c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007326:	61bb      	str	r3, [r7, #24]
    break;
 8007328:	e10e      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800732a:	4b8d      	ldr	r3, [pc, #564]	; (8007560 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800732c:	61bb      	str	r3, [r7, #24]
    break;
 800732e:	e10b      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007330:	4b8c      	ldr	r3, [pc, #560]	; (8007564 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007332:	61bb      	str	r3, [r7, #24]
    break;
 8007334:	e108      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007336:	4b88      	ldr	r3, [pc, #544]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007340:	4b85      	ldr	r3, [pc, #532]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	091b      	lsrs	r3, r3, #4
 8007346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800734a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800734c:	4b82      	ldr	r3, [pc, #520]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007356:	4b80      	ldr	r3, [pc, #512]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735a:	08db      	lsrs	r3, r3, #3
 800735c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	fb02 f303 	mul.w	r3, r2, r3
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80e1 	beq.w	800753c <HAL_RCC_GetSysClockFreq+0x2b8>
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b02      	cmp	r3, #2
 800737e:	f000 8083 	beq.w	8007488 <HAL_RCC_GetSysClockFreq+0x204>
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b02      	cmp	r3, #2
 8007386:	f200 80a1 	bhi.w	80074cc <HAL_RCC_GetSysClockFreq+0x248>
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_RCC_GetSysClockFreq+0x114>
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d056      	beq.n	8007444 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007396:	e099      	b.n	80074cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007398:	4b6f      	ldr	r3, [pc, #444]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0320 	and.w	r3, r3, #32
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d02d      	beq.n	8007400 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073a4:	4b6c      	ldr	r3, [pc, #432]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	08db      	lsrs	r3, r3, #3
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	4a6b      	ldr	r2, [pc, #428]	; (800755c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073b0:	fa22 f303 	lsr.w	r3, r2, r3
 80073b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	ee07 3a90 	vmov	s15, r3
 80073bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ce:	4b62      	ldr	r3, [pc, #392]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073de:	ed97 6a02 	vldr	s12, [r7, #8]
 80073e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007568 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80073fe:	e087      	b.n	8007510 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800756c <HAL_RCC_GetSysClockFreq+0x2e8>
 800740e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007412:	4b51      	ldr	r3, [pc, #324]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007422:	ed97 6a02 	vldr	s12, [r7, #8]
 8007426:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007568 <HAL_RCC_GetSysClockFreq+0x2e4>
 800742a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007442:	e065      	b.n	8007510 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007570 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007456:	4b40      	ldr	r3, [pc, #256]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007466:	ed97 6a02 	vldr	s12, [r7, #8]
 800746a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007568 <HAL_RCC_GetSysClockFreq+0x2e4>
 800746e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800747a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007486:	e043      	b.n	8007510 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007574 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749a:	4b2f      	ldr	r3, [pc, #188]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80074ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007568 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ca:	e021      	b.n	8007510 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007570 <HAL_RCC_GetSysClockFreq+0x2ec>
 80074da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074de:	4b1e      	ldr	r3, [pc, #120]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80074f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007568 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800750e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007510:	4b11      	ldr	r3, [pc, #68]	; (8007558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007514:	0a5b      	lsrs	r3, r3, #9
 8007516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751a:	3301      	adds	r3, #1
 800751c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007528:	edd7 6a07 	vldr	s13, [r7, #28]
 800752c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007534:	ee17 3a90 	vmov	r3, s15
 8007538:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800753a:	e005      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	61bb      	str	r3, [r7, #24]
    break;
 8007540:	e002      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007542:	4b07      	ldr	r3, [pc, #28]	; (8007560 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007544:	61bb      	str	r3, [r7, #24]
    break;
 8007546:	bf00      	nop
  }

  return sysclockfreq;
 8007548:	69bb      	ldr	r3, [r7, #24]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3724      	adds	r7, #36	; 0x24
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	58024400 	.word	0x58024400
 800755c:	03d09000 	.word	0x03d09000
 8007560:	003d0900 	.word	0x003d0900
 8007564:	016e3600 	.word	0x016e3600
 8007568:	46000000 	.word	0x46000000
 800756c:	4c742400 	.word	0x4c742400
 8007570:	4a742400 	.word	0x4a742400
 8007574:	4bb71b00 	.word	0x4bb71b00

08007578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800757e:	f7ff fe81 	bl	8007284 <HAL_RCC_GetSysClockFreq>
 8007582:	4602      	mov	r2, r0
 8007584:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	0a1b      	lsrs	r3, r3, #8
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	490f      	ldr	r1, [pc, #60]	; (80075cc <HAL_RCC_GetHCLKFreq+0x54>)
 8007590:	5ccb      	ldrb	r3, [r1, r3]
 8007592:	f003 031f 	and.w	r3, r3, #31
 8007596:	fa22 f303 	lsr.w	r3, r2, r3
 800759a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800759c:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	f003 030f 	and.w	r3, r3, #15
 80075a4:	4a09      	ldr	r2, [pc, #36]	; (80075cc <HAL_RCC_GetHCLKFreq+0x54>)
 80075a6:	5cd3      	ldrb	r3, [r2, r3]
 80075a8:	f003 031f 	and.w	r3, r3, #31
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	fa22 f303 	lsr.w	r3, r2, r3
 80075b2:	4a07      	ldr	r2, [pc, #28]	; (80075d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80075b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075b6:	4a07      	ldr	r2, [pc, #28]	; (80075d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80075be:	681b      	ldr	r3, [r3, #0]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	58024400 	.word	0x58024400
 80075cc:	080144e8 	.word	0x080144e8
 80075d0:	2400000c 	.word	0x2400000c
 80075d4:	24000008 	.word	0x24000008

080075d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80075dc:	f7ff ffcc 	bl	8007578 <HAL_RCC_GetHCLKFreq>
 80075e0:	4602      	mov	r2, r0
 80075e2:	4b06      	ldr	r3, [pc, #24]	; (80075fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	091b      	lsrs	r3, r3, #4
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	4904      	ldr	r1, [pc, #16]	; (8007600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80075ee:	5ccb      	ldrb	r3, [r1, r3]
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	58024400 	.word	0x58024400
 8007600:	080144e8 	.word	0x080144e8

08007604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007608:	f7ff ffb6 	bl	8007578 <HAL_RCC_GetHCLKFreq>
 800760c:	4602      	mov	r2, r0
 800760e:	4b06      	ldr	r3, [pc, #24]	; (8007628 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	4904      	ldr	r1, [pc, #16]	; (800762c <HAL_RCC_GetPCLK2Freq+0x28>)
 800761a:	5ccb      	ldrb	r3, [r1, r3]
 800761c:	f003 031f 	and.w	r3, r3, #31
 8007620:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007624:	4618      	mov	r0, r3
 8007626:	bd80      	pop	{r7, pc}
 8007628:	58024400 	.word	0x58024400
 800762c:	080144e8 	.word	0x080144e8

08007630 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007638:	2300      	movs	r3, #0
 800763a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800763c:	2300      	movs	r3, #0
 800763e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d03f      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007650:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007654:	d02a      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007656:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800765a:	d824      	bhi.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800765c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007660:	d018      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007666:	d81e      	bhi.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800766c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007670:	d007      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007672:	e018      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007674:	4b9f      	ldr	r3, [pc, #636]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	4a9e      	ldr	r2, [pc, #632]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800767a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800767e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007680:	e015      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3304      	adds	r3, #4
 8007686:	2102      	movs	r1, #2
 8007688:	4618      	mov	r0, r3
 800768a:	f001 ff1b 	bl	80094c4 <RCCEx_PLL2_Config>
 800768e:	4603      	mov	r3, r0
 8007690:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007692:	e00c      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3324      	adds	r3, #36	; 0x24
 8007698:	2102      	movs	r1, #2
 800769a:	4618      	mov	r0, r3
 800769c:	f001 ffc4 	bl	8009628 <RCCEx_PLL3_Config>
 80076a0:	4603      	mov	r3, r0
 80076a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80076a4:	e003      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	75fb      	strb	r3, [r7, #23]
      break;
 80076aa:	e000      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80076ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80076b4:	4b8f      	ldr	r3, [pc, #572]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80076b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c0:	498c      	ldr	r1, [pc, #560]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	650b      	str	r3, [r1, #80]	; 0x50
 80076c6:	e001      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d03d      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d826      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	080076fd 	.word	0x080076fd
 80076ec:	0800770b 	.word	0x0800770b
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	08007735 	.word	0x08007735
 80076f8:	08007735 	.word	0x08007735
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076fc:	4b7d      	ldr	r3, [pc, #500]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	4a7c      	ldr	r2, [pc, #496]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007708:	e015      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	2100      	movs	r1, #0
 8007710:	4618      	mov	r0, r3
 8007712:	f001 fed7 	bl	80094c4 <RCCEx_PLL2_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800771a:	e00c      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3324      	adds	r3, #36	; 0x24
 8007720:	2100      	movs	r1, #0
 8007722:	4618      	mov	r0, r3
 8007724:	f001 ff80 	bl	8009628 <RCCEx_PLL3_Config>
 8007728:	4603      	mov	r3, r0
 800772a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800772c:	e003      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	75fb      	strb	r3, [r7, #23]
      break;
 8007732:	e000      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d109      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800773c:	4b6d      	ldr	r3, [pc, #436]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800773e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007740:	f023 0207 	bic.w	r2, r3, #7
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007748:	496a      	ldr	r1, [pc, #424]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800774a:	4313      	orrs	r3, r2
 800774c:	650b      	str	r3, [r1, #80]	; 0x50
 800774e:	e001      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800775c:	2b00      	cmp	r3, #0
 800775e:	d04a      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007764:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007768:	d031      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800776a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800776e:	d82b      	bhi.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007774:	d02d      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800777a:	d825      	bhi.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800777c:	2bc0      	cmp	r3, #192	; 0xc0
 800777e:	d02a      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007780:	2bc0      	cmp	r3, #192	; 0xc0
 8007782:	d821      	bhi.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007784:	2b80      	cmp	r3, #128	; 0x80
 8007786:	d016      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007788:	2b80      	cmp	r3, #128	; 0x80
 800778a:	d81d      	bhi.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	d007      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007794:	e018      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007796:	4b57      	ldr	r3, [pc, #348]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	4a56      	ldr	r2, [pc, #344]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800779c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80077a2:	e019      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3304      	adds	r3, #4
 80077a8:	2100      	movs	r1, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 fe8a 	bl	80094c4 <RCCEx_PLL2_Config>
 80077b0:	4603      	mov	r3, r0
 80077b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80077b4:	e010      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3324      	adds	r3, #36	; 0x24
 80077ba:	2100      	movs	r1, #0
 80077bc:	4618      	mov	r0, r3
 80077be:	f001 ff33 	bl	8009628 <RCCEx_PLL3_Config>
 80077c2:	4603      	mov	r3, r0
 80077c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80077c6:	e007      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	75fb      	strb	r3, [r7, #23]
      break;
 80077cc:	e004      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80077ce:	bf00      	nop
 80077d0:	e002      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80077d2:	bf00      	nop
 80077d4:	e000      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80077d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d109      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80077de:	4b45      	ldr	r3, [pc, #276]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80077e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ea:	4942      	ldr	r1, [pc, #264]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	650b      	str	r3, [r1, #80]	; 0x50
 80077f0:	e001      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d04f      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007806:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800780a:	d036      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800780c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007810:	d830      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007816:	d032      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800781c:	d82a      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800781e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007822:	d02e      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007824:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007828:	d824      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800782a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800782e:	d018      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8007830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007834:	d81e      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800783a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800783e:	d007      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8007840:	e018      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007842:	4b2c      	ldr	r3, [pc, #176]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	4a2b      	ldr	r2, [pc, #172]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800784c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800784e:	e019      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3304      	adds	r3, #4
 8007854:	2100      	movs	r1, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f001 fe34 	bl	80094c4 <RCCEx_PLL2_Config>
 800785c:	4603      	mov	r3, r0
 800785e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007860:	e010      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3324      	adds	r3, #36	; 0x24
 8007866:	2100      	movs	r1, #0
 8007868:	4618      	mov	r0, r3
 800786a:	f001 fedd 	bl	8009628 <RCCEx_PLL3_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007872:	e007      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	75fb      	strb	r3, [r7, #23]
      break;
 8007878:	e004      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800787a:	bf00      	nop
 800787c:	e002      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800787e:	bf00      	nop
 8007880:	e000      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800788a:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800788c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007896:	4917      	ldr	r1, [pc, #92]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007898:	4313      	orrs	r3, r2
 800789a:	650b      	str	r3, [r1, #80]	; 0x50
 800789c:	e001      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d034      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b2:	2b30      	cmp	r3, #48	; 0x30
 80078b4:	d01c      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80078b6:	2b30      	cmp	r3, #48	; 0x30
 80078b8:	d817      	bhi.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d00c      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80078be:	2b20      	cmp	r3, #32
 80078c0:	d813      	bhi.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d018      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80078c6:	2b10      	cmp	r3, #16
 80078c8:	d10f      	bne.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80078d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80078d6:	e010      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3304      	adds	r3, #4
 80078dc:	2102      	movs	r1, #2
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 fdf0 	bl	80094c4 <RCCEx_PLL2_Config>
 80078e4:	4603      	mov	r3, r0
 80078e6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80078e8:	e007      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	75fb      	strb	r3, [r7, #23]
      break;
 80078ee:	e004      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80078f0:	bf00      	nop
 80078f2:	e002      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80078f4:	58024400 	.word	0x58024400
      break;
 80078f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d109      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007900:	4b9b      	ldr	r3, [pc, #620]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007904:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790c:	4998      	ldr	r1, [pc, #608]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800790e:	4313      	orrs	r3, r2
 8007910:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007912:	e001      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d047      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800792c:	d030      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800792e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007932:	d82a      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007934:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007938:	d02c      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800793a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800793e:	d824      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007944:	d018      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800794a:	d81e      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007954:	d007      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007956:	e018      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007958:	4b85      	ldr	r3, [pc, #532]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	4a84      	ldr	r2, [pc, #528]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800795e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007962:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007964:	e017      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3304      	adds	r3, #4
 800796a:	2100      	movs	r1, #0
 800796c:	4618      	mov	r0, r3
 800796e:	f001 fda9 	bl	80094c4 <RCCEx_PLL2_Config>
 8007972:	4603      	mov	r3, r0
 8007974:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007976:	e00e      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3324      	adds	r3, #36	; 0x24
 800797c:	2100      	movs	r1, #0
 800797e:	4618      	mov	r0, r3
 8007980:	f001 fe52 	bl	8009628 <RCCEx_PLL3_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007988:	e005      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	75fb      	strb	r3, [r7, #23]
      break;
 800798e:	e002      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d109      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800799c:	4b74      	ldr	r3, [pc, #464]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800799e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a8:	4971      	ldr	r1, [pc, #452]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	650b      	str	r3, [r1, #80]	; 0x50
 80079ae:	e001      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d049      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079c8:	d02e      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80079ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079ce:	d828      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80079d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079d4:	d02a      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80079d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079da:	d822      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80079dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079e0:	d026      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80079e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079e6:	d81c      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80079e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ec:	d010      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80079ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079f2:	d816      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01d      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80079f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079fc:	d111      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3304      	adds	r3, #4
 8007a02:	2101      	movs	r1, #1
 8007a04:	4618      	mov	r0, r3
 8007a06:	f001 fd5d 	bl	80094c4 <RCCEx_PLL2_Config>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007a0e:	e012      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3324      	adds	r3, #36	; 0x24
 8007a14:	2101      	movs	r1, #1
 8007a16:	4618      	mov	r0, r3
 8007a18:	f001 fe06 	bl	8009628 <RCCEx_PLL3_Config>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007a20:	e009      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
      break;
 8007a26:	e006      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007a28:	bf00      	nop
 8007a2a:	e004      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e002      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d109      	bne.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a3c:	4b4c      	ldr	r3, [pc, #304]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a48:	4949      	ldr	r1, [pc, #292]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	650b      	str	r3, [r1, #80]	; 0x50
 8007a4e:	e001      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d053      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a66:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007a6a:	d034      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007a6c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007a70:	d82e      	bhi.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a76:	d030      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a7c:	d828      	bhi.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a82:	d02c      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a88:	d822      	bhi.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007a8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a8e:	d028      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007a90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a94:	d81c      	bhi.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a9a:	d010      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8007a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa0:	d816      	bhi.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d01f      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aaa:	d111      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 fd06 	bl	80094c4 <RCCEx_PLL2_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007abc:	e014      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3324      	adds	r3, #36	; 0x24
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 fdaf 	bl	8009628 <RCCEx_PLL3_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ace:	e00b      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007ad6:	bf00      	nop
 8007ad8:	e006      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007ada:	bf00      	nop
 8007adc:	e004      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007ade:	bf00      	nop
 8007ae0:	e002      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007aee:	4b20      	ldr	r3, [pc, #128]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007afc:	491c      	ldr	r1, [pc, #112]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	658b      	str	r3, [r1, #88]	; 0x58
 8007b02:	e001      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d031      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b1c:	d00e      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b22:	d814      	bhi.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d015      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b2c:	d10f      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b2e:	4b10      	ldr	r3, [pc, #64]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	4a0f      	ldr	r2, [pc, #60]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007b3a:	e00c      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	2101      	movs	r1, #1
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 fcbe 	bl	80094c4 <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007b4c:	e003      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	75fb      	strb	r3, [r7, #23]
      break;
 8007b52:	e000      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8007b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10b      	bne.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b5c:	4b04      	ldr	r3, [pc, #16]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b68:	4901      	ldr	r1, [pc, #4]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	650b      	str	r3, [r1, #80]	; 0x50
 8007b6e:	e003      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8007b70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d032      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d81b      	bhi.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007b8c:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007bcb 	.word	0x08007bcb
 8007b98:	08007ba5 	.word	0x08007ba5
 8007b9c:	08007bb3 	.word	0x08007bb3
 8007ba0:	08007bcb 	.word	0x08007bcb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba4:	4bb2      	ldr	r3, [pc, #712]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	4ab1      	ldr	r2, [pc, #708]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007bb0:	e00c      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	2102      	movs	r1, #2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 fc83 	bl	80094c4 <RCCEx_PLL2_Config>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007bc2:	e003      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc8:	e000      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007bd2:	4ba7      	ldr	r3, [pc, #668]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd6:	f023 0203 	bic.w	r2, r3, #3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bde:	49a4      	ldr	r1, [pc, #656]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007be4:	e001      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8086 	beq.w	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bf8:	4b9e      	ldr	r3, [pc, #632]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a9d      	ldr	r2, [pc, #628]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c04:	f7fb faec 	bl	80031e0 <HAL_GetTick>
 8007c08:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c0a:	e009      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c0c:	f7fb fae8 	bl	80031e0 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b64      	cmp	r3, #100	; 0x64
 8007c18:	d902      	bls.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	75fb      	strb	r3, [r7, #23]
        break;
 8007c1e:	e005      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c20:	4b94      	ldr	r3, [pc, #592]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d0ef      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d166      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c32:	4b8f      	ldr	r3, [pc, #572]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007c34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c3c:	4053      	eors	r3, r2
 8007c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d013      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c46:	4b8a      	ldr	r3, [pc, #552]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c50:	4b87      	ldr	r3, [pc, #540]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c54:	4a86      	ldr	r2, [pc, #536]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c5a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c5c:	4b84      	ldr	r3, [pc, #528]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c60:	4a83      	ldr	r2, [pc, #524]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c66:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007c68:	4a81      	ldr	r2, [pc, #516]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c78:	d115      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c7a:	f7fb fab1 	bl	80031e0 <HAL_GetTick>
 8007c7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c80:	e00b      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c82:	f7fb faad 	bl	80031e0 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d902      	bls.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	75fb      	strb	r3, [r7, #23]
            break;
 8007c98:	e005      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c9a:	4b75      	ldr	r3, [pc, #468]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0ed      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d126      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cba:	d10d      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8007cbc:	4b6c      	ldr	r3, [pc, #432]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cca:	0919      	lsrs	r1, r3, #4
 8007ccc:	4b6a      	ldr	r3, [pc, #424]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007cce:	400b      	ands	r3, r1
 8007cd0:	4967      	ldr	r1, [pc, #412]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	610b      	str	r3, [r1, #16]
 8007cd6:	e005      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8007cd8:	4b65      	ldr	r3, [pc, #404]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	4a64      	ldr	r2, [pc, #400]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007cde:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ce2:	6113      	str	r3, [r2, #16]
 8007ce4:	4b62      	ldr	r3, [pc, #392]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ce6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf2:	495f      	ldr	r1, [pc, #380]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	670b      	str	r3, [r1, #112]	; 0x70
 8007cf8:	e004      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	75bb      	strb	r3, [r7, #22]
 8007cfe:	e001      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d07f      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d16:	2b28      	cmp	r3, #40	; 0x28
 8007d18:	d866      	bhi.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007def 	.word	0x08007def
 8007d24:	08007de9 	.word	0x08007de9
 8007d28:	08007de9 	.word	0x08007de9
 8007d2c:	08007de9 	.word	0x08007de9
 8007d30:	08007de9 	.word	0x08007de9
 8007d34:	08007de9 	.word	0x08007de9
 8007d38:	08007de9 	.word	0x08007de9
 8007d3c:	08007de9 	.word	0x08007de9
 8007d40:	08007dc5 	.word	0x08007dc5
 8007d44:	08007de9 	.word	0x08007de9
 8007d48:	08007de9 	.word	0x08007de9
 8007d4c:	08007de9 	.word	0x08007de9
 8007d50:	08007de9 	.word	0x08007de9
 8007d54:	08007de9 	.word	0x08007de9
 8007d58:	08007de9 	.word	0x08007de9
 8007d5c:	08007de9 	.word	0x08007de9
 8007d60:	08007dd7 	.word	0x08007dd7
 8007d64:	08007de9 	.word	0x08007de9
 8007d68:	08007de9 	.word	0x08007de9
 8007d6c:	08007de9 	.word	0x08007de9
 8007d70:	08007de9 	.word	0x08007de9
 8007d74:	08007de9 	.word	0x08007de9
 8007d78:	08007de9 	.word	0x08007de9
 8007d7c:	08007de9 	.word	0x08007de9
 8007d80:	08007def 	.word	0x08007def
 8007d84:	08007de9 	.word	0x08007de9
 8007d88:	08007de9 	.word	0x08007de9
 8007d8c:	08007de9 	.word	0x08007de9
 8007d90:	08007de9 	.word	0x08007de9
 8007d94:	08007de9 	.word	0x08007de9
 8007d98:	08007de9 	.word	0x08007de9
 8007d9c:	08007de9 	.word	0x08007de9
 8007da0:	08007def 	.word	0x08007def
 8007da4:	08007de9 	.word	0x08007de9
 8007da8:	08007de9 	.word	0x08007de9
 8007dac:	08007de9 	.word	0x08007de9
 8007db0:	08007de9 	.word	0x08007de9
 8007db4:	08007de9 	.word	0x08007de9
 8007db8:	08007de9 	.word	0x08007de9
 8007dbc:	08007de9 	.word	0x08007de9
 8007dc0:	08007def 	.word	0x08007def
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	2101      	movs	r1, #1
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f001 fb7a 	bl	80094c4 <RCCEx_PLL2_Config>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007dd4:	e00c      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3324      	adds	r3, #36	; 0x24
 8007dda:	2101      	movs	r1, #1
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 fc23 	bl	8009628 <RCCEx_PLL3_Config>
 8007de2:	4603      	mov	r3, r0
 8007de4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007de6:	e003      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	75fb      	strb	r3, [r7, #23]
      break;
 8007dec:	e000      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8007dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007df6:	4b1e      	ldr	r3, [pc, #120]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e04:	491a      	ldr	r1, [pc, #104]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	654b      	str	r3, [r1, #84]	; 0x54
 8007e0a:	e001      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d03f      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e20:	2b05      	cmp	r3, #5
 8007e22:	d821      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8007e24:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8007e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2a:	bf00      	nop
 8007e2c:	08007e7d 	.word	0x08007e7d
 8007e30:	08007e45 	.word	0x08007e45
 8007e34:	08007e57 	.word	0x08007e57
 8007e38:	08007e7d 	.word	0x08007e7d
 8007e3c:	08007e7d 	.word	0x08007e7d
 8007e40:	08007e7d 	.word	0x08007e7d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	2101      	movs	r1, #1
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 fb3a 	bl	80094c4 <RCCEx_PLL2_Config>
 8007e50:	4603      	mov	r3, r0
 8007e52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007e54:	e013      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3324      	adds	r3, #36	; 0x24
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f001 fbe3 	bl	8009628 <RCCEx_PLL3_Config>
 8007e62:	4603      	mov	r3, r0
 8007e64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007e66:	e00a      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e6c:	e007      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8007e6e:	bf00      	nop
 8007e70:	58024400 	.word	0x58024400
 8007e74:	58024800 	.word	0x58024800
 8007e78:	00ffffcf 	.word	0x00ffffcf
      break;
 8007e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d109      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e84:	4b9f      	ldr	r3, [pc, #636]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e88:	f023 0207 	bic.w	r2, r3, #7
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e90:	499c      	ldr	r1, [pc, #624]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	654b      	str	r3, [r1, #84]	; 0x54
 8007e96:	e001      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d039      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	d820      	bhi.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8007eb2:	a201      	add	r2, pc, #4	; (adr r2, 8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8007eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb8:	08007efb 	.word	0x08007efb
 8007ebc:	08007ed1 	.word	0x08007ed1
 8007ec0:	08007ee3 	.word	0x08007ee3
 8007ec4:	08007efb 	.word	0x08007efb
 8007ec8:	08007efb 	.word	0x08007efb
 8007ecc:	08007efb 	.word	0x08007efb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 faf4 	bl	80094c4 <RCCEx_PLL2_Config>
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ee0:	e00c      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3324      	adds	r3, #36	; 0x24
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f001 fb9d 	bl	8009628 <RCCEx_PLL3_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ef2:	e003      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef8:	e000      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8007efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f02:	4b80      	ldr	r3, [pc, #512]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f06:	f023 0207 	bic.w	r2, r3, #7
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f10:	497c      	ldr	r1, [pc, #496]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	658b      	str	r3, [r1, #88]	; 0x58
 8007f16:	e001      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0320 	and.w	r3, r3, #32
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d04b      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f32:	d02e      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f38:	d828      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3e:	d02a      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f44:	d822      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007f46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f4a:	d026      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007f4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f50:	d81c      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f56:	d010      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8007f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f5c:	d816      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01d      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f66:	d111      	bne.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f001 faa8 	bl	80094c4 <RCCEx_PLL2_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007f78:	e012      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3324      	adds	r3, #36	; 0x24
 8007f7e:	2102      	movs	r1, #2
 8007f80:	4618      	mov	r0, r3
 8007f82:	f001 fb51 	bl	8009628 <RCCEx_PLL3_Config>
 8007f86:	4603      	mov	r3, r0
 8007f88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007f8a:	e009      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f90:	e006      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007f92:	bf00      	nop
 8007f94:	e004      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007f96:	bf00      	nop
 8007f98:	e002      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007f9a:	bf00      	nop
 8007f9c:	e000      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fa6:	4b57      	ldr	r3, [pc, #348]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007faa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fb4:	4953      	ldr	r1, [pc, #332]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	654b      	str	r3, [r1, #84]	; 0x54
 8007fba:	e001      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d04b      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007fd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fd6:	d02e      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007fd8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fdc:	d828      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe2:	d02a      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe8:	d822      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007fea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fee:	d026      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007ff0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff4:	d81c      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffa:	d010      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8007ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008000:	d816      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01d      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800800a:	d111      	bne.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fa56 	bl	80094c4 <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800801c:	e012      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3324      	adds	r3, #36	; 0x24
 8008022:	2102      	movs	r1, #2
 8008024:	4618      	mov	r0, r3
 8008026:	f001 faff 	bl	8009628 <RCCEx_PLL3_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800802e:	e009      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
      break;
 8008034:	e006      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008036:	bf00      	nop
 8008038:	e004      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800803a:	bf00      	nop
 800803c:	e002      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800803e:	bf00      	nop
 8008040:	e000      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10a      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800804a:	4b2e      	ldr	r3, [pc, #184]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800804c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008058:	492a      	ldr	r1, [pc, #168]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800805a:	4313      	orrs	r3, r2
 800805c:	658b      	str	r3, [r1, #88]	; 0x58
 800805e:	e001      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008060:	7dfb      	ldrb	r3, [r7, #23]
 8008062:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806c:	2b00      	cmp	r3, #0
 800806e:	d04d      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008076:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800807a:	d02e      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800807c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008080:	d828      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008086:	d02a      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800808c:	d822      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800808e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008092:	d026      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008094:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008098:	d81c      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800809a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800809e:	d010      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80080a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080a4:	d816      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d01d      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80080aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ae:	d111      	bne.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	2100      	movs	r1, #0
 80080b6:	4618      	mov	r0, r3
 80080b8:	f001 fa04 	bl	80094c4 <RCCEx_PLL2_Config>
 80080bc:	4603      	mov	r3, r0
 80080be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80080c0:	e012      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3324      	adds	r3, #36	; 0x24
 80080c6:	2102      	movs	r1, #2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f001 faad 	bl	8009628 <RCCEx_PLL3_Config>
 80080ce:	4603      	mov	r3, r0
 80080d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80080d2:	e009      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	75fb      	strb	r3, [r7, #23]
      break;
 80080d8:	e006      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80080da:	bf00      	nop
 80080dc:	e004      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80080de:	bf00      	nop
 80080e0:	e002      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80080e2:	bf00      	nop
 80080e4:	e000      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80080e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10c      	bne.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080ee:	4b05      	ldr	r3, [pc, #20]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080fc:	4901      	ldr	r1, [pc, #4]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	658b      	str	r3, [r1, #88]	; 0x58
 8008102:	e003      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008104:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0308 	and.w	r3, r3, #8
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01a      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008122:	d10a      	bne.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3324      	adds	r3, #36	; 0x24
 8008128:	2102      	movs	r1, #2
 800812a:	4618      	mov	r0, r3
 800812c:	f001 fa7c 	bl	8009628 <RCCEx_PLL3_Config>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800813a:	4b8c      	ldr	r3, [pc, #560]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800813c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008148:	4988      	ldr	r1, [pc, #544]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800814a:	4313      	orrs	r3, r2
 800814c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0310 	and.w	r3, r3, #16
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01a      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008164:	d10a      	bne.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	3324      	adds	r3, #36	; 0x24
 800816a:	2102      	movs	r1, #2
 800816c:	4618      	mov	r0, r3
 800816e:	f001 fa5b 	bl	8009628 <RCCEx_PLL3_Config>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800817c:	4b7b      	ldr	r3, [pc, #492]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800817e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800818a:	4978      	ldr	r1, [pc, #480]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800818c:	4313      	orrs	r3, r2
 800818e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d034      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a6:	d01d      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80081a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ac:	d817      	bhi.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80081b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b6:	d009      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80081b8:	e011      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3304      	adds	r3, #4
 80081be:	2100      	movs	r1, #0
 80081c0:	4618      	mov	r0, r3
 80081c2:	f001 f97f 	bl	80094c4 <RCCEx_PLL2_Config>
 80081c6:	4603      	mov	r3, r0
 80081c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80081ca:	e00c      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3324      	adds	r3, #36	; 0x24
 80081d0:	2102      	movs	r1, #2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 fa28 	bl	8009628 <RCCEx_PLL3_Config>
 80081d8:	4603      	mov	r3, r0
 80081da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80081dc:	e003      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	75fb      	strb	r3, [r7, #23]
      break;
 80081e2:	e000      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80081e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081ec:	4b5f      	ldr	r3, [pc, #380]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80081ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081fa:	495c      	ldr	r1, [pc, #368]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	658b      	str	r3, [r1, #88]	; 0x58
 8008200:	e001      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d033      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008218:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800821c:	d01c      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800821e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008222:	d816      	bhi.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008228:	d003      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800822a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800822e:	d007      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008230:	e00f      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008232:	4b4e      	ldr	r3, [pc, #312]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008236:	4a4d      	ldr	r2, [pc, #308]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800823c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800823e:	e00c      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3324      	adds	r3, #36	; 0x24
 8008244:	2101      	movs	r1, #1
 8008246:	4618      	mov	r0, r3
 8008248:	f001 f9ee 	bl	8009628 <RCCEx_PLL3_Config>
 800824c:	4603      	mov	r3, r0
 800824e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008250:	e003      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	75fb      	strb	r3, [r7, #23]
      break;
 8008256:	e000      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800825a:	7dfb      	ldrb	r3, [r7, #23]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10a      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008260:	4b42      	ldr	r3, [pc, #264]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008264:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800826e:	493f      	ldr	r1, [pc, #252]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008270:	4313      	orrs	r3, r2
 8008272:	654b      	str	r3, [r1, #84]	; 0x54
 8008274:	e001      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d029      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800828e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008292:	d007      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008294:	e00f      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008296:	4b35      	ldr	r3, [pc, #212]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	4a34      	ldr	r2, [pc, #208]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800829c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80082a2:	e00b      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3304      	adds	r3, #4
 80082a8:	2102      	movs	r1, #2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 f90a 	bl	80094c4 <RCCEx_PLL2_Config>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80082b4:	e002      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80082c2:	4b2a      	ldr	r3, [pc, #168]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80082c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ce:	4927      	ldr	r1, [pc, #156]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082d4:	e001      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3324      	adds	r3, #36	; 0x24
 80082ea:	2102      	movs	r1, #2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f001 f99b 	bl	8009628 <RCCEx_PLL3_Config>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d035      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008312:	d017      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008318:	d811      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800831a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800831e:	d013      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008324:	d80b      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d010      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800832a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800832e:	d106      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008330:	4b0e      	ldr	r3, [pc, #56]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008334:	4a0d      	ldr	r2, [pc, #52]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800833a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800833c:	e007      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	75fb      	strb	r3, [r7, #23]
      break;
 8008342:	e004      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008344:	bf00      	nop
 8008346:	e002      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008348:	bf00      	nop
 800834a:	e000      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800834c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10d      	bne.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008354:	4b05      	ldr	r3, [pc, #20]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008362:	4902      	ldr	r1, [pc, #8]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008364:	4313      	orrs	r3, r2
 8008366:	654b      	str	r3, [r1, #84]	; 0x54
 8008368:	e004      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800836a:	bf00      	nop
 800836c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008370:	7dfb      	ldrb	r3, [r7, #23]
 8008372:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d008      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008380:	4b30      	ldr	r3, [pc, #192]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800838c:	492d      	ldr	r1, [pc, #180]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800838e:	4313      	orrs	r3, r2
 8008390:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d008      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800839e:	4b29      	ldr	r3, [pc, #164]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80083a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083aa:	4926      	ldr	r1, [pc, #152]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d008      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80083bc:	4b21      	ldr	r3, [pc, #132]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80083be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c8:	491e      	ldr	r1, [pc, #120]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00d      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083da:	4b1a      	ldr	r3, [pc, #104]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	4a19      	ldr	r2, [pc, #100]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80083e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083e4:	6113      	str	r3, [r2, #16]
 80083e6:	4b17      	ldr	r3, [pc, #92]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80083e8:	691a      	ldr	r2, [r3, #16]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083f0:	4914      	ldr	r1, [pc, #80]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	da08      	bge.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80083fe:	4b11      	ldr	r3, [pc, #68]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008402:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840a:	490e      	ldr	r1, [pc, #56]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800840c:	4313      	orrs	r3, r2
 800840e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d009      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800841c:	4b09      	ldr	r3, [pc, #36]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800841e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008420:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800842a:	4906      	ldr	r1, [pc, #24]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800842c:	4313      	orrs	r3, r2
 800842e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008430:	7dbb      	ldrb	r3, [r7, #22]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	e000      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	58024400 	.word	0x58024400

08008448 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b090      	sub	sp, #64	; 0x40
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008456:	f040 8089 	bne.w	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800845a:	4b91      	ldr	r3, [pc, #580]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800845c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	2b04      	cmp	r3, #4
 8008468:	d87d      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800846a:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	08008485 	.word	0x08008485
 8008474:	080084a9 	.word	0x080084a9
 8008478:	080084cd 	.word	0x080084cd
 800847c:	08008561 	.word	0x08008561
 8008480:	080084f1 	.word	0x080084f1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008484:	4b86      	ldr	r3, [pc, #536]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008490:	d107      	bne.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008496:	4618      	mov	r0, r3
 8008498:	f000 fec2 	bl	8009220 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084a0:	e3f4      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084a6:	e3f1      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084a8:	4b7d      	ldr	r3, [pc, #500]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084b4:	d107      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084b6:	f107 0318 	add.w	r3, r7, #24
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fc08 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084c4:	e3e2      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ca:	e3df      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084cc:	4b74      	ldr	r3, [pc, #464]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084d8:	d107      	bne.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084da:	f107 030c 	add.w	r3, r7, #12
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fd4a 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084e8:	e3d0      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ee:	e3cd      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084f0:	4b6b      	ldr	r3, [pc, #428]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084fa:	4b69      	ldr	r3, [pc, #420]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0304 	and.w	r3, r3, #4
 8008502:	2b04      	cmp	r3, #4
 8008504:	d10c      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800850c:	4b64      	ldr	r3, [pc, #400]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	08db      	lsrs	r3, r3, #3
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	4a63      	ldr	r2, [pc, #396]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008518:	fa22 f303 	lsr.w	r3, r2, r3
 800851c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800851e:	e01e      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008520:	4b5f      	ldr	r3, [pc, #380]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852c:	d106      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800852e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008534:	d102      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008536:	4b5c      	ldr	r3, [pc, #368]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800853a:	e010      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800853c:	4b58      	ldr	r3, [pc, #352]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008548:	d106      	bne.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800854a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008550:	d102      	bne.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008552:	4b56      	ldr	r3, [pc, #344]	; (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008556:	e002      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800855c:	e396      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800855e:	e395      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008560:	4b53      	ldr	r3, [pc, #332]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008564:	e392      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800856a:	e38f      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008572:	f040 809f 	bne.w	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8008576:	4b4a      	ldr	r3, [pc, #296]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800857e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008586:	d04d      	beq.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858e:	f200 8084 	bhi.w	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	2bc0      	cmp	r3, #192	; 0xc0
 8008596:	d07d      	beq.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8008598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859a:	2bc0      	cmp	r3, #192	; 0xc0
 800859c:	d87d      	bhi.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	2b80      	cmp	r3, #128	; 0x80
 80085a2:	d02d      	beq.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	2b80      	cmp	r3, #128	; 0x80
 80085a8:	d877      	bhi.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d003      	beq.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	2b40      	cmp	r3, #64	; 0x40
 80085b4:	d012      	beq.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80085b6:	e070      	b.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085b8:	4b39      	ldr	r3, [pc, #228]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085c4:	d107      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fe28 	bl	8009220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085d4:	e35a      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085da:	e357      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085dc:	4b30      	ldr	r3, [pc, #192]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085e8:	d107      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ea:	f107 0318 	add.w	r3, r7, #24
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fb6e 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085f8:	e348      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085fe:	e345      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008600:	4b27      	ldr	r3, [pc, #156]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800860c:	d107      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800860e:	f107 030c 	add.w	r3, r7, #12
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fcb0 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800861c:	e336      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008622:	e333      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008624:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800862c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800862e:	4b1c      	ldr	r3, [pc, #112]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0304 	and.w	r3, r3, #4
 8008636:	2b04      	cmp	r3, #4
 8008638:	d10c      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 800863a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863c:	2b00      	cmp	r3, #0
 800863e:	d109      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008640:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	08db      	lsrs	r3, r3, #3
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	4a16      	ldr	r2, [pc, #88]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800864c:	fa22 f303 	lsr.w	r3, r2, r3
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008652:	e01e      	b.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008654:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008660:	d106      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008668:	d102      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800866a:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800866e:	e010      	b.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008670:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800867c:	d106      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800867e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008684:	d102      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008686:	4b09      	ldr	r3, [pc, #36]	; (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800868a:	e002      	b.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800868c:	2300      	movs	r3, #0
 800868e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008690:	e2fc      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008692:	e2fb      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008694:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008698:	e2f8      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800869e:	e2f5      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80086a0:	58024400 	.word	0x58024400
 80086a4:	03d09000 	.word	0x03d09000
 80086a8:	003d0900 	.word	0x003d0900
 80086ac:	016e3600 	.word	0x016e3600
 80086b0:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ba:	f040 809c 	bne.w	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80086be:	4b9d      	ldr	r3, [pc, #628]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80086c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80086c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ce:	d054      	beq.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086d6:	f200 808b 	bhi.w	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80086e0:	f000 8083 	beq.w	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80086ea:	f200 8081 	bhi.w	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f4:	d02f      	beq.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086fc:	d878      	bhi.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800870a:	d012      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800870c:	e070      	b.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800870e:	4b89      	ldr	r3, [pc, #548]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800871a:	d107      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800871c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fd7d 	bl	8009220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800872a:	e2af      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008730:	e2ac      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008732:	4b80      	ldr	r3, [pc, #512]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800873a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800873e:	d107      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008740:	f107 0318 	add.w	r3, r7, #24
 8008744:	4618      	mov	r0, r3
 8008746:	f000 fac3 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800874e:	e29d      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008754:	e29a      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008756:	4b77      	ldr	r3, [pc, #476]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800875e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008762:	d107      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008764:	f107 030c 	add.w	r3, r7, #12
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fc05 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008772:	e28b      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008778:	e288      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800877a:	4b6e      	ldr	r3, [pc, #440]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800877c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008782:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008784:	4b6b      	ldr	r3, [pc, #428]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0304 	and.w	r3, r3, #4
 800878c:	2b04      	cmp	r3, #4
 800878e:	d10c      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8008790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008792:	2b00      	cmp	r3, #0
 8008794:	d109      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008796:	4b67      	ldr	r3, [pc, #412]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	08db      	lsrs	r3, r3, #3
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	4a65      	ldr	r2, [pc, #404]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80087a2:	fa22 f303 	lsr.w	r3, r2, r3
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087a8:	e01e      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087aa:	4b62      	ldr	r3, [pc, #392]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b6:	d106      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80087b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087be:	d102      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80087c0:	4b5e      	ldr	r3, [pc, #376]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087c4:	e010      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087c6:	4b5b      	ldr	r3, [pc, #364]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087d2:	d106      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80087d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087da:	d102      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80087dc:	4b58      	ldr	r3, [pc, #352]	; (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80087de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087e0:	e002      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 80087e6:	e251      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80087e8:	e250      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80087ea:	4b56      	ldr	r3, [pc, #344]	; (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80087ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087ee:	e24d      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087f4:	e24a      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fc:	f040 80a7 	bne.w	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008800:	4b4c      	ldr	r3, [pc, #304]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008804:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008808:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008810:	d055      	beq.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008818:	f200 8096 	bhi.w	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008822:	f000 8084 	beq.w	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800882c:	f200 808c 	bhi.w	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008836:	d030      	beq.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800883e:	f200 8083 	bhi.w	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884e:	d012      	beq.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8008850:	e07a      	b.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008852:	4b38      	ldr	r3, [pc, #224]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800885e:	d107      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008864:	4618      	mov	r0, r3
 8008866:	f000 fcdb 	bl	8009220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800886e:	e20d      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008874:	e20a      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008876:	4b2f      	ldr	r3, [pc, #188]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800887e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008882:	d107      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008884:	f107 0318 	add.w	r3, r7, #24
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fa21 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008892:	e1fb      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008898:	e1f8      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800889a:	4b26      	ldr	r3, [pc, #152]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088a6:	d107      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088a8:	f107 030c 	add.w	r3, r7, #12
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fb63 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088b6:	e1e9      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088bc:	e1e6      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088be:	4b1d      	ldr	r3, [pc, #116]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80088c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088c6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088c8:	4b1a      	ldr	r3, [pc, #104]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d10c      	bne.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d109      	bne.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088da:	4b16      	ldr	r3, [pc, #88]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	08db      	lsrs	r3, r3, #3
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	4a14      	ldr	r2, [pc, #80]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80088e6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088ec:	e01e      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088ee:	4b11      	ldr	r3, [pc, #68]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088fa:	d106      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008902:	d102      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008904:	4b0d      	ldr	r3, [pc, #52]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008908:	e010      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800890a:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008916:	d106      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800891e:	d102      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008920:	4b07      	ldr	r3, [pc, #28]	; (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008924:	e002      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800892a:	e1af      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800892c:	e1ae      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800892e:	4b05      	ldr	r3, [pc, #20]	; (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008932:	e1ab      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008934:	58024400 	.word	0x58024400
 8008938:	03d09000 	.word	0x03d09000
 800893c:	003d0900 	.word	0x003d0900
 8008940:	016e3600 	.word	0x016e3600
 8008944:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800894c:	e19e      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008954:	d173      	bne.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008956:	4b9d      	ldr	r3, [pc, #628]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800895e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008966:	d02f      	beq.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8008968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800896e:	d863      	bhi.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008972:	2b00      	cmp	r3, #0
 8008974:	d004      	beq.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800897c:	d012      	beq.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 800897e:	e05b      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008980:	4b92      	ldr	r3, [pc, #584]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800898c:	d107      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800898e:	f107 0318 	add.w	r3, r7, #24
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f99c 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800899c:	e176      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089a2:	e173      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089a4:	4b89      	ldr	r3, [pc, #548]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b0:	d107      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b2:	f107 030c 	add.w	r3, r7, #12
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fade 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089c0:	e164      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089c6:	e161      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089c8:	4b80      	ldr	r3, [pc, #512]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80089ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089d2:	4b7e      	ldr	r3, [pc, #504]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0304 	and.w	r3, r3, #4
 80089da:	2b04      	cmp	r3, #4
 80089dc:	d10c      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d109      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089e4:	4b79      	ldr	r3, [pc, #484]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	08db      	lsrs	r3, r3, #3
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	4a78      	ldr	r2, [pc, #480]	; (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80089f0:	fa22 f303 	lsr.w	r3, r2, r3
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f6:	e01e      	b.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089f8:	4b74      	ldr	r3, [pc, #464]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a04:	d106      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a0c:	d102      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a0e:	4b71      	ldr	r3, [pc, #452]	; (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008a10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a12:	e010      	b.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a14:	4b6d      	ldr	r3, [pc, #436]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a20:	d106      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a28:	d102      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a2a:	4b6b      	ldr	r3, [pc, #428]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a2e:	e002      	b.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a34:	e12a      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008a36:	e129      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a3c:	e126      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a44:	d133      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008a46:	4b61      	ldr	r3, [pc, #388]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a4e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a5c:	d012      	beq.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008a5e:	e023      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a60:	4b5a      	ldr	r3, [pc, #360]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a6c:	d107      	bne.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fbd4 	bl	8009220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a7c:	e106      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a82:	e103      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a84:	4b51      	ldr	r3, [pc, #324]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a90:	d107      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a92:	f107 0318 	add.w	r3, r7, #24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 f91a 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008aa0:	e0f4      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aa6:	e0f1      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aac:	e0ee      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ab4:	f040 809b 	bne.w	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008ab8:	4b44      	ldr	r3, [pc, #272]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008abc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008ac0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008ac8:	f000 808b 	beq.w	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008ad2:	f200 8089 	bhi.w	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008adc:	d06c      	beq.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ae4:	f200 8080 	bhi.w	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aee:	d056      	beq.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af6:	d877      	bhi.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008afe:	d03b      	beq.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b06:	d86f      	bhi.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b0e:	d021      	beq.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b16:	d867      	bhi.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d004      	beq.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b24:	d004      	beq.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8008b26:	e05f      	b.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b28:	f000 f8bc 	bl	8008ca4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b2c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008b2e:	e0ad      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b30:	4b26      	ldr	r3, [pc, #152]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b3c:	d107      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b3e:	f107 0318 	add.w	r3, r7, #24
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f8c4 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b4c:	e09e      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b52:	e09b      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b54:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b60:	d107      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b62:	f107 030c 	add.w	r3, r7, #12
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fa06 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b70:	e08c      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b76:	e089      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b78:	4b14      	ldr	r3, [pc, #80]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d109      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b84:	4b11      	ldr	r3, [pc, #68]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	08db      	lsrs	r3, r3, #3
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	4a10      	ldr	r2, [pc, #64]	; (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b96:	e079      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b9c:	e076      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b9e:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008baa:	d102      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bb0:	e06c      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bb6:	e069      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bb8:	4b04      	ldr	r3, [pc, #16]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bc4:	d10a      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8008bc6:	4b04      	ldr	r3, [pc, #16]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bca:	e05f      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008bcc:	58024400 	.word	0x58024400
 8008bd0:	03d09000 	.word	0x03d09000
 8008bd4:	003d0900 	.word	0x003d0900
 8008bd8:	016e3600 	.word	0x016e3600
          frequency = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be0:	e054      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008be2:	4b2d      	ldr	r3, [pc, #180]	; (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be6:	e051      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bec:	e04e      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bf4:	d148      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008bf6:	4b29      	ldr	r3, [pc, #164]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bfe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c06:	d02a      	beq.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c0e:	d838      	bhi.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d004      	beq.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c1c:	d00d      	beq.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008c1e:	e030      	b.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c20:	4b1e      	ldr	r3, [pc, #120]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c2c:	d102      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8008c2e:	4b1c      	ldr	r3, [pc, #112]	; (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c32:	e02b      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c38:	e028      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c3a:	4b18      	ldr	r3, [pc, #96]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c46:	d107      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fae7 	bl	8009220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c56:	e019      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c5c:	e016      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c6a:	d107      	bne.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c6c:	f107 0318 	add.w	r3, r7, #24
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 f82d 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c7a:	e007      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c80:	e004      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c86:	e001      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3740      	adds	r7, #64	; 0x40
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	00bb8000 	.word	0x00bb8000
 8008c9c:	58024400 	.word	0x58024400
 8008ca0:	016e3600 	.word	0x016e3600

08008ca4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008ca8:	f7fe fc66 	bl	8007578 <HAL_RCC_GetHCLKFreq>
 8008cac:	4602      	mov	r2, r0
 8008cae:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	091b      	lsrs	r3, r3, #4
 8008cb4:	f003 0307 	and.w	r3, r3, #7
 8008cb8:	4904      	ldr	r1, [pc, #16]	; (8008ccc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008cba:	5ccb      	ldrb	r3, [r1, r3]
 8008cbc:	f003 031f 	and.w	r3, r3, #31
 8008cc0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	58024400 	.word	0x58024400
 8008ccc:	080144e8 	.word	0x080144e8

08008cd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b089      	sub	sp, #36	; 0x24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cd8:	4ba1      	ldr	r3, [pc, #644]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	f003 0303 	and.w	r3, r3, #3
 8008ce0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008ce2:	4b9f      	ldr	r3, [pc, #636]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce6:	0b1b      	lsrs	r3, r3, #12
 8008ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008cee:	4b9c      	ldr	r3, [pc, #624]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	091b      	lsrs	r3, r3, #4
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008cfa:	4b99      	ldr	r3, [pc, #612]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfe:	08db      	lsrs	r3, r3, #3
 8008d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	fb02 f303 	mul.w	r3, r2, r3
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 8111 	beq.w	8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	f000 8083 	beq.w	8008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	f200 80a1 	bhi.w	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d056      	beq.n	8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d3a:	e099      	b.n	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d3c:	4b88      	ldr	r3, [pc, #544]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0320 	and.w	r3, r3, #32
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d02d      	beq.n	8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d48:	4b85      	ldr	r3, [pc, #532]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	08db      	lsrs	r3, r3, #3
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	4a84      	ldr	r2, [pc, #528]	; (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d54:	fa22 f303 	lsr.w	r3, r2, r3
 8008d58:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d72:	4b7b      	ldr	r3, [pc, #492]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008da2:	e087      	b.n	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b6a      	ldr	r3, [pc, #424]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008de6:	e065      	b.n	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	4b59      	ldr	r3, [pc, #356]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e2a:	e043      	b.n	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b48      	ldr	r3, [pc, #288]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e6e:	e021      	b.n	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e82:	4b37      	ldr	r3, [pc, #220]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008eb4:	4b2a      	ldr	r3, [pc, #168]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	0a5b      	lsrs	r3, r3, #9
 8008eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ebe:	ee07 3a90 	vmov	s15, r3
 8008ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eda:	ee17 2a90 	vmov	r2, s15
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008ee2:	4b1f      	ldr	r3, [pc, #124]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	0c1b      	lsrs	r3, r3, #16
 8008ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eec:	ee07 3a90 	vmov	s15, r3
 8008ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ef8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008efc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f08:	ee17 2a90 	vmov	r2, s15
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008f10:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	0e1b      	lsrs	r3, r3, #24
 8008f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f36:	ee17 2a90 	vmov	r2, s15
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f3e:	e008      	b.n	8008f52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	609a      	str	r2, [r3, #8]
}
 8008f52:	bf00      	nop
 8008f54:	3724      	adds	r7, #36	; 0x24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	58024400 	.word	0x58024400
 8008f64:	03d09000 	.word	0x03d09000
 8008f68:	46000000 	.word	0x46000000
 8008f6c:	4c742400 	.word	0x4c742400
 8008f70:	4a742400 	.word	0x4a742400
 8008f74:	4bb71b00 	.word	0x4bb71b00

08008f78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b089      	sub	sp, #36	; 0x24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f80:	4ba1      	ldr	r3, [pc, #644]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f84:	f003 0303 	and.w	r3, r3, #3
 8008f88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008f8a:	4b9f      	ldr	r3, [pc, #636]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	0d1b      	lsrs	r3, r3, #20
 8008f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f96:	4b9c      	ldr	r3, [pc, #624]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9a:	0a1b      	lsrs	r3, r3, #8
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008fa2:	4b99      	ldr	r3, [pc, #612]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa6:	08db      	lsrs	r3, r3, #3
 8008fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	fb02 f303 	mul.w	r3, r2, r3
 8008fb2:	ee07 3a90 	vmov	s15, r3
 8008fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 8111 	beq.w	80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	f000 8083 	beq.w	80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	f200 80a1 	bhi.w	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d056      	beq.n	8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008fe2:	e099      	b.n	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fe4:	4b88      	ldr	r3, [pc, #544]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d02d      	beq.n	800904c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ff0:	4b85      	ldr	r3, [pc, #532]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	08db      	lsrs	r3, r3, #3
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	4a84      	ldr	r2, [pc, #528]	; (800920c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8009000:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	ee07 3a90 	vmov	s15, r3
 8009008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	ee07 3a90 	vmov	s15, r3
 8009012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800901a:	4b7b      	ldr	r3, [pc, #492]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800902a:	ed97 6a03 	vldr	s12, [r7, #12]
 800902e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800903a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800903e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009046:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800904a:	e087      	b.n	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009056:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800905a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905e:	4b6a      	ldr	r3, [pc, #424]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009072:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800907a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800908e:	e065      	b.n	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009218 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800909e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a2:	4b59      	ldr	r3, [pc, #356]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090d2:	e043      	b.n	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	ee07 3a90 	vmov	s15, r3
 80090da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800921c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e6:	4b48      	ldr	r3, [pc, #288]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009116:	e021      	b.n	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009122:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009218 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912a:	4b37      	ldr	r3, [pc, #220]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913a:	ed97 6a03 	vldr	s12, [r7, #12]
 800913e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800914e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800915a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800915c:	4b2a      	ldr	r3, [pc, #168]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800915e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009160:	0a5b      	lsrs	r3, r3, #9
 8009162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009176:	edd7 6a07 	vldr	s13, [r7, #28]
 800917a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800917e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009182:	ee17 2a90 	vmov	r2, s15
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800918a:	4b1f      	ldr	r3, [pc, #124]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	0c1b      	lsrs	r3, r3, #16
 8009190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009194:	ee07 3a90 	vmov	s15, r3
 8009198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80091a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091b0:	ee17 2a90 	vmov	r2, s15
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80091b8:	4b13      	ldr	r3, [pc, #76]	; (8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091bc:	0e1b      	lsrs	r3, r3, #24
 80091be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c2:	ee07 3a90 	vmov	s15, r3
 80091c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091de:	ee17 2a90 	vmov	r2, s15
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80091e6:	e008      	b.n	80091fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	609a      	str	r2, [r3, #8]
}
 80091fa:	bf00      	nop
 80091fc:	3724      	adds	r7, #36	; 0x24
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	58024400 	.word	0x58024400
 800920c:	03d09000 	.word	0x03d09000
 8009210:	46000000 	.word	0x46000000
 8009214:	4c742400 	.word	0x4c742400
 8009218:	4a742400 	.word	0x4a742400
 800921c:	4bb71b00 	.word	0x4bb71b00

08009220 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009220:	b480      	push	{r7}
 8009222:	b089      	sub	sp, #36	; 0x24
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009228:	4ba0      	ldr	r3, [pc, #640]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	f003 0303 	and.w	r3, r3, #3
 8009230:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009232:	4b9e      	ldr	r3, [pc, #632]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009236:	091b      	lsrs	r3, r3, #4
 8009238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800923c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800923e:	4b9b      	ldr	r3, [pc, #620]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009248:	4b98      	ldr	r3, [pc, #608]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800924a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924c:	08db      	lsrs	r3, r3, #3
 800924e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	fb02 f303 	mul.w	r3, r2, r3
 8009258:	ee07 3a90 	vmov	s15, r3
 800925c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009260:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 8111 	beq.w	800948e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	2b02      	cmp	r3, #2
 8009270:	f000 8083 	beq.w	800937a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	2b02      	cmp	r3, #2
 8009278:	f200 80a1 	bhi.w	80093be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d056      	beq.n	8009336 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009288:	e099      	b.n	80093be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800928a:	4b88      	ldr	r3, [pc, #544]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b00      	cmp	r3, #0
 8009294:	d02d      	beq.n	80092f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009296:	4b85      	ldr	r3, [pc, #532]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	08db      	lsrs	r3, r3, #3
 800929c:	f003 0303 	and.w	r3, r3, #3
 80092a0:	4a83      	ldr	r2, [pc, #524]	; (80094b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80092a2:	fa22 f303 	lsr.w	r3, r2, r3
 80092a6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	ee07 3a90 	vmov	s15, r3
 80092ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	ee07 3a90 	vmov	s15, r3
 80092b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092c0:	4b7a      	ldr	r3, [pc, #488]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c8:	ee07 3a90 	vmov	s15, r3
 80092cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80092d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092f0:	e087      	b.n	8009402 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009304:	4b69      	ldr	r3, [pc, #420]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930c:	ee07 3a90 	vmov	s15, r3
 8009310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009314:	ed97 6a03 	vldr	s12, [r7, #12]
 8009318:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800931c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009320:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009324:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800932c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009330:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009334:	e065      	b.n	8009402 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	ee07 3a90 	vmov	s15, r3
 800933c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009340:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80094bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009348:	4b58      	ldr	r3, [pc, #352]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009350:	ee07 3a90 	vmov	s15, r3
 8009354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009358:	ed97 6a03 	vldr	s12, [r7, #12]
 800935c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800936c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009374:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009378:	e043      	b.n	8009402 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	ee07 3a90 	vmov	s15, r3
 8009380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009384:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800938c:	4b47      	ldr	r3, [pc, #284]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009394:	ee07 3a90 	vmov	s15, r3
 8009398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939c:	ed97 6a03 	vldr	s12, [r7, #12]
 80093a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093bc:	e021      	b.n	8009402 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	ee07 3a90 	vmov	s15, r3
 80093c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d0:	4b36      	ldr	r3, [pc, #216]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d8:	ee07 3a90 	vmov	s15, r3
 80093dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009400:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009402:	4b2a      	ldr	r3, [pc, #168]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009406:	0a5b      	lsrs	r3, r3, #9
 8009408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800940c:	ee07 3a90 	vmov	s15, r3
 8009410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800941c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009428:	ee17 2a90 	vmov	r2, s15
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009430:	4b1e      	ldr	r3, [pc, #120]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009434:	0c1b      	lsrs	r3, r3, #16
 8009436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800944a:	edd7 6a07 	vldr	s13, [r7, #28]
 800944e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009456:	ee17 2a90 	vmov	r2, s15
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	0e1b      	lsrs	r3, r3, #24
 8009464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009468:	ee07 3a90 	vmov	s15, r3
 800946c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009474:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009478:	edd7 6a07 	vldr	s13, [r7, #28]
 800947c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009484:	ee17 2a90 	vmov	r2, s15
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800948c:	e008      	b.n	80094a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	609a      	str	r2, [r3, #8]
}
 80094a0:	bf00      	nop
 80094a2:	3724      	adds	r7, #36	; 0x24
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	58024400 	.word	0x58024400
 80094b0:	03d09000 	.word	0x03d09000
 80094b4:	46000000 	.word	0x46000000
 80094b8:	4c742400 	.word	0x4c742400
 80094bc:	4a742400 	.word	0x4a742400
 80094c0:	4bb71b00 	.word	0x4bb71b00

080094c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094d2:	4b53      	ldr	r3, [pc, #332]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	f003 0303 	and.w	r3, r3, #3
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d101      	bne.n	80094e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e099      	b.n	8009616 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80094e2:	4b4f      	ldr	r3, [pc, #316]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a4e      	ldr	r2, [pc, #312]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80094e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094ee:	f7f9 fe77 	bl	80031e0 <HAL_GetTick>
 80094f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094f4:	e008      	b.n	8009508 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80094f6:	f7f9 fe73 	bl	80031e0 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d901      	bls.n	8009508 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e086      	b.n	8009616 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009508:	4b45      	ldr	r3, [pc, #276]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1f0      	bne.n	80094f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009514:	4b42      	ldr	r3, [pc, #264]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 8009516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009518:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	031b      	lsls	r3, r3, #12
 8009522:	493f      	ldr	r1, [pc, #252]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 8009524:	4313      	orrs	r3, r2
 8009526:	628b      	str	r3, [r1, #40]	; 0x28
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	3b01      	subs	r3, #1
 800952e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	3b01      	subs	r3, #1
 8009538:	025b      	lsls	r3, r3, #9
 800953a:	b29b      	uxth	r3, r3
 800953c:	431a      	orrs	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	3b01      	subs	r3, #1
 8009544:	041b      	lsls	r3, r3, #16
 8009546:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	3b01      	subs	r3, #1
 8009552:	061b      	lsls	r3, r3, #24
 8009554:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009558:	4931      	ldr	r1, [pc, #196]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 800955a:	4313      	orrs	r3, r2
 800955c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800955e:	4b30      	ldr	r3, [pc, #192]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 8009560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009562:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	492d      	ldr	r1, [pc, #180]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 800956c:	4313      	orrs	r3, r2
 800956e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009570:	4b2b      	ldr	r3, [pc, #172]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 8009572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009574:	f023 0220 	bic.w	r2, r3, #32
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	4928      	ldr	r1, [pc, #160]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 800957e:	4313      	orrs	r3, r2
 8009580:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009582:	4b27      	ldr	r3, [pc, #156]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	4a26      	ldr	r2, [pc, #152]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 8009588:	f023 0310 	bic.w	r3, r3, #16
 800958c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800958e:	4b24      	ldr	r3, [pc, #144]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 8009590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009592:	4b24      	ldr	r3, [pc, #144]	; (8009624 <RCCEx_PLL2_Config+0x160>)
 8009594:	4013      	ands	r3, r2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	69d2      	ldr	r2, [r2, #28]
 800959a:	00d2      	lsls	r2, r2, #3
 800959c:	4920      	ldr	r1, [pc, #128]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 800959e:	4313      	orrs	r3, r2
 80095a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095a2:	4b1f      	ldr	r3, [pc, #124]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a6:	4a1e      	ldr	r2, [pc, #120]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80095a8:	f043 0310 	orr.w	r3, r3, #16
 80095ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80095b4:	4b1a      	ldr	r3, [pc, #104]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	4a19      	ldr	r2, [pc, #100]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80095ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095c0:	e00f      	b.n	80095e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d106      	bne.n	80095d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80095c8:	4b15      	ldr	r3, [pc, #84]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80095ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095cc:	4a14      	ldr	r2, [pc, #80]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80095ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095d4:	e005      	b.n	80095e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80095d6:	4b12      	ldr	r3, [pc, #72]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80095d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095da:	4a11      	ldr	r2, [pc, #68]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80095dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80095e2:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a0e      	ldr	r2, [pc, #56]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 80095e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095ee:	f7f9 fdf7 	bl	80031e0 <HAL_GetTick>
 80095f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095f4:	e008      	b.n	8009608 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80095f6:	f7f9 fdf3 	bl	80031e0 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	2b02      	cmp	r3, #2
 8009602:	d901      	bls.n	8009608 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e006      	b.n	8009616 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009608:	4b05      	ldr	r3, [pc, #20]	; (8009620 <RCCEx_PLL2_Config+0x15c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0f0      	beq.n	80095f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009614:	7bfb      	ldrb	r3, [r7, #15]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	58024400 	.word	0x58024400
 8009624:	ffff0007 	.word	0xffff0007

08009628 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009636:	4b53      	ldr	r3, [pc, #332]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 8009638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	2b03      	cmp	r3, #3
 8009640:	d101      	bne.n	8009646 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e099      	b.n	800977a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009646:	4b4f      	ldr	r3, [pc, #316]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a4e      	ldr	r2, [pc, #312]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 800964c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009652:	f7f9 fdc5 	bl	80031e0 <HAL_GetTick>
 8009656:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009658:	e008      	b.n	800966c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800965a:	f7f9 fdc1 	bl	80031e0 <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	2b02      	cmp	r3, #2
 8009666:	d901      	bls.n	800966c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e086      	b.n	800977a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800966c:	4b45      	ldr	r3, [pc, #276]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1f0      	bne.n	800965a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009678:	4b42      	ldr	r3, [pc, #264]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 800967a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	051b      	lsls	r3, r3, #20
 8009686:	493f      	ldr	r1, [pc, #252]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 8009688:	4313      	orrs	r3, r2
 800968a:	628b      	str	r3, [r1, #40]	; 0x28
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	3b01      	subs	r3, #1
 8009692:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	3b01      	subs	r3, #1
 800969c:	025b      	lsls	r3, r3, #9
 800969e:	b29b      	uxth	r3, r3
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	041b      	lsls	r3, r3, #16
 80096aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80096ae:	431a      	orrs	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	3b01      	subs	r3, #1
 80096b6:	061b      	lsls	r3, r3, #24
 80096b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80096bc:	4931      	ldr	r1, [pc, #196]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096c2:	4b30      	ldr	r3, [pc, #192]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 80096c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	492d      	ldr	r1, [pc, #180]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80096d4:	4b2b      	ldr	r3, [pc, #172]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	4928      	ldr	r1, [pc, #160]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80096e6:	4b27      	ldr	r3, [pc, #156]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 80096e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ea:	4a26      	ldr	r2, [pc, #152]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 80096ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80096f2:	4b24      	ldr	r3, [pc, #144]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 80096f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096f6:	4b24      	ldr	r3, [pc, #144]	; (8009788 <RCCEx_PLL3_Config+0x160>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	69d2      	ldr	r2, [r2, #28]
 80096fe:	00d2      	lsls	r2, r2, #3
 8009700:	4920      	ldr	r1, [pc, #128]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 8009702:	4313      	orrs	r3, r2
 8009704:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009706:	4b1f      	ldr	r3, [pc, #124]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	4a1e      	ldr	r2, [pc, #120]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 800970c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d106      	bne.n	8009726 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009718:	4b1a      	ldr	r3, [pc, #104]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	4a19      	ldr	r2, [pc, #100]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 800971e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009722:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009724:	e00f      	b.n	8009746 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d106      	bne.n	800973a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800972c:	4b15      	ldr	r3, [pc, #84]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 800972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009730:	4a14      	ldr	r2, [pc, #80]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 8009732:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009736:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009738:	e005      	b.n	8009746 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 800973c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973e:	4a11      	ldr	r2, [pc, #68]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 8009740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009744:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009746:	4b0f      	ldr	r3, [pc, #60]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a0e      	ldr	r2, [pc, #56]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 800974c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009752:	f7f9 fd45 	bl	80031e0 <HAL_GetTick>
 8009756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009758:	e008      	b.n	800976c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800975a:	f7f9 fd41 	bl	80031e0 <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	2b02      	cmp	r3, #2
 8009766:	d901      	bls.n	800976c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e006      	b.n	800977a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <RCCEx_PLL3_Config+0x15c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d0f0      	beq.n	800975a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009778:	7bfb      	ldrb	r3, [r7, #15]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	58024400 	.word	0x58024400
 8009788:	ffff0007 	.word	0xffff0007

0800978c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08a      	sub	sp, #40	; 0x28
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e075      	b.n	800988a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d105      	bne.n	80097b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7f8 fd9d 	bl	80022f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2204      	movs	r2, #4
 80097ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f868 	bl	8009894 <HAL_SD_InitCard>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e05d      	b.n	800988a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80097ce:	f107 0308 	add.w	r3, r7, #8
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fda9 	bl	800a32c <HAL_SD_GetCardStatus>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e052      	b.n	800988a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80097e4:	7e3b      	ldrb	r3, [r7, #24]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80097ea:	7e7b      	ldrb	r3, [r7, #25]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d10a      	bne.n	800980e <HAL_SD_Init+0x82>
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d102      	bne.n	8009804 <HAL_SD_Init+0x78>
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d004      	beq.n	800980e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800980a:	659a      	str	r2, [r3, #88]	; 0x58
 800980c:	e00b      	b.n	8009826 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	2b01      	cmp	r3, #1
 8009814:	d104      	bne.n	8009820 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800981c:	659a      	str	r2, [r3, #88]	; 0x58
 800981e:	e002      	b.n	8009826 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fe67 	bl	800a500 <HAL_SD_ConfigWideBusOperation>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e026      	b.n	800988a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800983c:	f7f9 fcd0 	bl	80031e0 <HAL_GetTick>
 8009840:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009842:	e011      	b.n	8009868 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009844:	f7f9 fccc 	bl	80031e0 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009852:	d109      	bne.n	8009868 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800985a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	e010      	b.n	800988a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 ff5b 	bl	800a724 <HAL_SD_GetCardState>
 800986e:	4603      	mov	r3, r0
 8009870:	2b04      	cmp	r3, #4
 8009872:	d1e7      	bne.n	8009844 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3728      	adds	r7, #40	; 0x28
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009894:	b590      	push	{r4, r7, lr}
 8009896:	b08d      	sub	sp, #52	; 0x34
 8009898:	af02      	add	r7, sp, #8
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80098a4:	2300      	movs	r3, #0
 80098a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80098a8:	2300      	movs	r3, #0
 80098aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80098b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80098b4:	f7fe fdc8 	bl	8008448 <HAL_RCCEx_GetPeriphCLKFreq>
 80098b8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d109      	bne.n	80098d4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80098ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e06a      	b.n	80099aa <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	0a1b      	lsrs	r3, r3, #8
 80098d8:	4a36      	ldr	r2, [pc, #216]	; (80099b4 <HAL_SD_InitCard+0x120>)
 80098da:	fba2 2303 	umull	r2, r3, r2, r3
 80098de:	091b      	lsrs	r3, r3, #4
 80098e0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681c      	ldr	r4, [r3, #0]
 80098e6:	466a      	mov	r2, sp
 80098e8:	f107 0318 	add.w	r3, r7, #24
 80098ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80098f4:	f107 030c 	add.w	r3, r7, #12
 80098f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098fa:	4620      	mov	r0, r4
 80098fc:	f006 ff32 	bl	8010764 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	f006 ff75 	bl	80107f4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	005b      	lsls	r3, r3, #1
 800990e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009910:	fbb2 f3f3 	udiv	r3, r2, r3
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009916:	4a28      	ldr	r2, [pc, #160]	; (80099b8 <HAL_SD_InitCard+0x124>)
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	fbb2 f3f3 	udiv	r3, r2, r3
 800991e:	3301      	adds	r3, #1
 8009920:	4618      	mov	r0, r3
 8009922:	f7f9 fc69 	bl	80031f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 ffea 	bl	800a900 <SD_PowerON>
 800992c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	431a      	orrs	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e02e      	b.n	80099aa <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 ff09 	bl	800a764 <SD_InitCard>
 8009952:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00b      	beq.n	8009972 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	431a      	orrs	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e01b      	b.n	80099aa <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800997a:	4618      	mov	r0, r3
 800997c:	f006 ffd0 	bl	8010920 <SDMMC_CmdBlockLength>
 8009980:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00f      	beq.n	80099a8 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a0b      	ldr	r2, [pc, #44]	; (80099bc <HAL_SD_InitCard+0x128>)
 800998e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e000      	b.n	80099aa <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	372c      	adds	r7, #44	; 0x2c
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd90      	pop	{r4, r7, pc}
 80099b2:	bf00      	nop
 80099b4:	014f8b59 	.word	0x014f8b59
 80099b8:	00012110 	.word	0x00012110
 80099bc:	1fe00fff 	.word	0x1fe00fff

080099c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08c      	sub	sp, #48	; 0x30
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d107      	bne.n	80099e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e08d      	b.n	8009b04 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	f040 8086 	bne.w	8009b02 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	441a      	add	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d907      	bls.n	8009a1a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e074      	b.n	8009b04 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2203      	movs	r2, #3
 8009a1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2200      	movs	r2, #0
 8009a28:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	025a      	lsls	r2, r3, #9
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d002      	beq.n	8009a46 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	025b      	lsls	r3, r3, #9
 8009a44:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a46:	f04f 33ff 	mov.w	r3, #4294967295
 8009a4a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	025b      	lsls	r3, r3, #9
 8009a50:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009a52:	2390      	movs	r3, #144	; 0x90
 8009a54:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a56:	2302      	movs	r3, #2
 8009a58:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f107 0210 	add.w	r2, r7, #16
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f006 ff2b 	bl	80108c8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a80:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d90a      	bls.n	8009aae <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2282      	movs	r2, #130	; 0x82
 8009a9c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f006 ff81 	bl	80109ac <SDMMC_CmdReadMultiBlock>
 8009aaa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009aac:	e009      	b.n	8009ac2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2281      	movs	r2, #129	; 0x81
 8009ab2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aba:	4618      	mov	r0, r3
 8009abc:	f006 ff53 	bl	8010966 <SDMMC_CmdReadSingleBlock>
 8009ac0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d012      	beq.n	8009aee <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a0f      	ldr	r2, [pc, #60]	; (8009b0c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009ace:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e00a      	b.n	8009b04 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009afc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e000      	b.n	8009b04 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009b02:	2302      	movs	r3, #2
  }
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3730      	adds	r7, #48	; 0x30
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	1fe00fff 	.word	0x1fe00fff

08009b10 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08c      	sub	sp, #48	; 0x30
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d107      	bne.n	8009b38 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e08d      	b.n	8009c54 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	f040 8086 	bne.w	8009c52 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	441a      	add	r2, r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d907      	bls.n	8009b6a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e074      	b.n	8009c54 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2203      	movs	r2, #3
 8009b6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2200      	movs	r2, #0
 8009b78:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	025a      	lsls	r2, r3, #9
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d002      	beq.n	8009b96 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	025b      	lsls	r3, r3, #9
 8009b94:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b96:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	025b      	lsls	r3, r3, #9
 8009ba0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009ba2:	2390      	movs	r3, #144	; 0x90
 8009ba4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f107 0210 	add.w	r2, r7, #16
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f006 fe83 	bl	80108c8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bd0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2201      	movs	r2, #1
 8009be0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d90a      	bls.n	8009bfe <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	22a0      	movs	r2, #160	; 0xa0
 8009bec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f006 ff1f 	bl	8010a38 <SDMMC_CmdWriteMultiBlock>
 8009bfa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009bfc:	e009      	b.n	8009c12 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2290      	movs	r2, #144	; 0x90
 8009c02:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f006 fef1 	bl	80109f2 <SDMMC_CmdWriteSingleBlock>
 8009c10:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d012      	beq.n	8009c3e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a0f      	ldr	r2, [pc, #60]	; (8009c5c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009c1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	431a      	orrs	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e00a      	b.n	8009c54 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e000      	b.n	8009c54 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009c52:	2302      	movs	r3, #2
  }
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3730      	adds	r7, #48	; 0x30
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	1fe00fff 	.word	0x1fe00fff

08009c60 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d008      	beq.n	8009c8e <HAL_SD_IRQHandler+0x2e>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 f926 	bl	800aed8 <SD_Read_IT>
 8009c8c:	e19a      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 80ac 	beq.w	8009df6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	4b59      	ldr	r3, [pc, #356]	; (8009e18 <HAL_SD_IRQHandler+0x1b8>)
 8009cb4:	400b      	ands	r3, r1
 8009cb6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009cc6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cd6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f003 0308 	and.w	r3, r3, #8
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d038      	beq.n	8009d54 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f003 0302 	and.w	r3, r3, #2
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d104      	bne.n	8009cf6 <HAL_SD_IRQHandler+0x96>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f003 0320 	and.w	r3, r3, #32
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d011      	beq.n	8009d1a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f006 fec0 	bl	8010a80 <SDMMC_CmdStopTransfer>
 8009d00:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d008      	beq.n	8009d1a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f95b 	bl	8009fd0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a3f      	ldr	r2, [pc, #252]	; (8009e1c <HAL_SD_IRQHandler+0x1bc>)
 8009d20:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d104      	bne.n	8009d44 <HAL_SD_IRQHandler+0xe4>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f007 fb73 	bl	8011430 <HAL_SD_RxCpltCallback>
 8009d4a:	e13b      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f007 fb65 	bl	801141c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009d52:	e137      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 8132 	beq.w	8009fc4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2200      	movs	r2, #0
 8009d66:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2200      	movs	r2, #0
 8009d76:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d104      	bne.n	8009d8c <HAL_SD_IRQHandler+0x12c>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f003 0320 	and.w	r3, r3, #32
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d011      	beq.n	8009db0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f006 fe75 	bl	8010a80 <SDMMC_CmdStopTransfer>
 8009d96:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d008      	beq.n	8009db0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	431a      	orrs	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f910 	bl	8009fd0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f003 0310 	and.w	r3, r3, #16
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <HAL_SD_IRQHandler+0x172>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f003 0320 	and.w	r3, r3, #32
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f007 fb22 	bl	801141c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d105      	bne.n	8009dee <HAL_SD_IRQHandler+0x18e>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80eb 	beq.w	8009fc4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f007 fb1e 	bl	8011430 <HAL_SD_RxCpltCallback>
}
 8009df4:	e0e6      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00d      	beq.n	8009e20 <HAL_SD_IRQHandler+0x1c0>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d008      	beq.n	8009e20 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 f8a8 	bl	800af64 <SD_Write_IT>
 8009e14:	e0d6      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
 8009e16:	bf00      	nop
 8009e18:	ffff3ec5 	.word	0xffff3ec5
 8009e1c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e26:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f000 809d 	beq.w	8009f6a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e42:	f043 0202 	orr.w	r2, r3, #2
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d005      	beq.n	8009e64 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5c:	f043 0208 	orr.w	r2, r3, #8
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e76:	f043 0220 	orr.w	r2, r3, #32
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e84:	f003 0310 	and.w	r3, r3, #16
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d005      	beq.n	8009e98 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e90:	f043 0210 	orr.w	r2, r3, #16
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a4b      	ldr	r2, [pc, #300]	; (8009fcc <HAL_SD_IRQHandler+0x36c>)
 8009e9e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009eae:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ebe:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ece:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ede:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f006 fdcb 	bl	8010a80 <SDMMC_CmdStopTransfer>
 8009eea:	4602      	mov	r2, r0
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef0:	431a      	orrs	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f04:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f0e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f851 	bl	8009fd0 <HAL_SD_ErrorCallback>
}
 8009f2e:	e049      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d044      	beq.n	8009fc4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d040      	beq.n	8009fc4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009f50:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2200      	movs	r2, #0
 8009f58:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f834 	bl	8009fd0 <HAL_SD_ErrorCallback>
}
 8009f68:	e02c      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d025      	beq.n	8009fc4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f80:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10c      	bne.n	8009faa <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f001 f84a 	bl	800b034 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009fa0:	e010      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 f832 	bl	800b00c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009fa8:	e00c      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d003      	beq.n	8009fbc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f001 f833 	bl	800b020 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009fba:	e003      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 f81b 	bl	800aff8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009fc2:	e7ff      	b.n	8009fc4 <HAL_SD_IRQHandler+0x364>
 8009fc4:	bf00      	nop
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	18000f3a 	.word	0x18000f3a

08009fd0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff2:	0f9b      	lsrs	r3, r3, #30
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ffe:	0e9b      	lsrs	r3, r3, #26
 800a000:	b2db      	uxtb	r3, r3
 800a002:	f003 030f 	and.w	r3, r3, #15
 800a006:	b2da      	uxtb	r2, r3
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a010:	0e1b      	lsrs	r3, r3, #24
 800a012:	b2db      	uxtb	r3, r3
 800a014:	f003 0303 	and.w	r3, r3, #3
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a022:	0c1b      	lsrs	r3, r3, #16
 800a024:	b2da      	uxtb	r2, r3
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02e:	0a1b      	lsrs	r3, r3, #8
 800a030:	b2da      	uxtb	r2, r3
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a044:	0d1b      	lsrs	r3, r3, #20
 800a046:	b29a      	uxth	r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a050:	0c1b      	lsrs	r3, r3, #16
 800a052:	b2db      	uxtb	r3, r3
 800a054:	f003 030f 	and.w	r3, r3, #15
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a062:	0bdb      	lsrs	r3, r3, #15
 800a064:	b2db      	uxtb	r3, r3
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a074:	0b9b      	lsrs	r3, r3, #14
 800a076:	b2db      	uxtb	r3, r3
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a086:	0b5b      	lsrs	r3, r3, #13
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a098:	0b1b      	lsrs	r3, r3, #12
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d163      	bne.n	800a17c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0b8:	009a      	lsls	r2, r3, #2
 800a0ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a0be:	4013      	ands	r3, r2
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a0c4:	0f92      	lsrs	r2, r2, #30
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0d0:	0edb      	lsrs	r3, r3, #27
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f003 0307 	and.w	r3, r3, #7
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0e2:	0e1b      	lsrs	r3, r3, #24
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0f4:	0d5b      	lsrs	r3, r3, #21
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	f003 0307 	and.w	r3, r3, #7
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a106:	0c9b      	lsrs	r3, r3, #18
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	f003 0307 	and.w	r3, r3, #7
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a118:	0bdb      	lsrs	r3, r3, #15
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	f003 0307 	and.w	r3, r3, #7
 800a120:	b2da      	uxtb	r2, r3
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	7e1b      	ldrb	r3, [r3, #24]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	3302      	adds	r3, #2
 800a13c:	2201      	movs	r2, #1
 800a13e:	fa02 f303 	lsl.w	r3, r2, r3
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a146:	fb03 f202 	mul.w	r2, r3, r2
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	7a1b      	ldrb	r3, [r3, #8]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	f003 030f 	and.w	r3, r3, #15
 800a158:	2201      	movs	r2, #1
 800a15a:	409a      	lsls	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a168:	0a52      	lsrs	r2, r2, #9
 800a16a:	fb03 f202 	mul.w	r2, r3, r2
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a178:	655a      	str	r2, [r3, #84]	; 0x54
 800a17a:	e031      	b.n	800a1e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a180:	2b01      	cmp	r3, #1
 800a182:	d11d      	bne.n	800a1c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a188:	041b      	lsls	r3, r3, #16
 800a18a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a192:	0c1b      	lsrs	r3, r3, #16
 800a194:	431a      	orrs	r2, r3
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	029a      	lsls	r2, r3, #10
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	655a      	str	r2, [r3, #84]	; 0x54
 800a1be:	e00f      	b.n	800a1e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a58      	ldr	r2, [pc, #352]	; (800a328 <HAL_SD_GetCardCSD+0x344>)
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e09d      	b.n	800a31c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1e4:	0b9b      	lsrs	r3, r3, #14
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1f6:	09db      	lsrs	r3, r3, #7
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a218:	0fdb      	lsrs	r3, r3, #31
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a224:	0f5b      	lsrs	r3, r3, #29
 800a226:	b2db      	uxtb	r3, r3
 800a228:	f003 0303 	and.w	r3, r3, #3
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a236:	0e9b      	lsrs	r3, r3, #26
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	f003 0307 	and.w	r3, r3, #7
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a248:	0d9b      	lsrs	r3, r3, #22
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	f003 030f 	and.w	r3, r3, #15
 800a250:	b2da      	uxtb	r2, r3
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a25a:	0d5b      	lsrs	r3, r3, #21
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	b2da      	uxtb	r2, r3
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a276:	0c1b      	lsrs	r3, r3, #16
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a28a:	0bdb      	lsrs	r3, r3, #15
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	b2da      	uxtb	r2, r3
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a29e:	0b9b      	lsrs	r3, r3, #14
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2b2:	0b5b      	lsrs	r3, r3, #13
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2c6:	0b1b      	lsrs	r3, r3, #12
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2da:	0a9b      	lsrs	r3, r3, #10
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	f003 0303 	and.w	r3, r3, #3
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2ee:	0a1b      	lsrs	r3, r3, #8
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	f003 0303 	and.w	r3, r3, #3
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a302:	085b      	lsrs	r3, r3, #1
 800a304:	b2db      	uxtb	r3, r3
 800a306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	1fe00fff 	.word	0x1fe00fff

0800a32c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b094      	sub	sp, #80	; 0x50
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b03      	cmp	r3, #3
 800a346:	d101      	bne.n	800a34c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e0a7      	b.n	800a49c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a34c:	f107 0308 	add.w	r3, r7, #8
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fb62 	bl	800aa1c <SD_SendSDStatus>
 800a358:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a35a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d011      	beq.n	800a384 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a4f      	ldr	r2, [pc, #316]	; (800a4a4 <HAL_SD_GetCardStatus+0x178>)
 800a366:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a382:	e070      	b.n	800a466 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	099b      	lsrs	r3, r3, #6
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	f003 0303 	and.w	r3, r3, #3
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	095b      	lsrs	r3, r3, #5
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	0a1b      	lsrs	r3, r3, #8
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	0e1b      	lsrs	r3, r3, #24
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	061a      	lsls	r2, r3, #24
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3ca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	0a1b      	lsrs	r3, r3, #8
 800a3d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a3d4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	0e1b      	lsrs	r3, r3, #24
 800a3da:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	0a1b      	lsrs	r3, r3, #8
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	0d1b      	lsrs	r3, r3, #20
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	0c1b      	lsrs	r3, r3, #16
 800a406:	b29b      	uxth	r3, r3
 800a408:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	b29b      	uxth	r3, r3
 800a412:	b2db      	uxtb	r3, r3
 800a414:	b29b      	uxth	r3, r3
 800a416:	4313      	orrs	r3, r2
 800a418:	b29a      	uxth	r2, r3
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	0a9b      	lsrs	r3, r3, #10
 800a422:	b2db      	uxtb	r3, r3
 800a424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	0a1b      	lsrs	r3, r3, #8
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f003 0303 	and.w	r3, r3, #3
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	091b      	lsrs	r3, r3, #4
 800a442:	b2db      	uxtb	r3, r3
 800a444:	f003 030f 	and.w	r3, r3, #15
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	b2db      	uxtb	r3, r3
 800a452:	f003 030f 	and.w	r3, r3, #15
 800a456:	b2da      	uxtb	r2, r3
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	0e1b      	lsrs	r3, r3, #24
 800a460:	b2da      	uxtb	r2, r3
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a46e:	4618      	mov	r0, r3
 800a470:	f006 fa56 	bl	8010920 <SDMMC_CmdBlockLength>
 800a474:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00d      	beq.n	800a498 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a08      	ldr	r2, [pc, #32]	; (800a4a4 <HAL_SD_GetCardStatus+0x178>)
 800a482:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a488:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800a498:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3750      	adds	r7, #80	; 0x50
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	1fe00fff 	.word	0x1fe00fff

0800a4a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a500:	b590      	push	{r4, r7, lr}
 800a502:	b08d      	sub	sp, #52	; 0x34
 800a504:	af02      	add	r7, sp, #8
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2203      	movs	r2, #3
 800a518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	2b03      	cmp	r3, #3
 800a522:	d02e      	beq.n	800a582 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a52a:	d106      	bne.n	800a53a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a530:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	635a      	str	r2, [r3, #52]	; 0x34
 800a538:	e029      	b.n	800a58e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a540:	d10a      	bne.n	800a558 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fb62 	bl	800ac0c <SD_WideBus_Enable>
 800a548:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	431a      	orrs	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	635a      	str	r2, [r3, #52]	; 0x34
 800a556:	e01a      	b.n	800a58e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10a      	bne.n	800a574 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fb9f 	bl	800aca2 <SD_WideBus_Disable>
 800a564:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	431a      	orrs	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	635a      	str	r2, [r3, #52]	; 0x34
 800a572:	e00c      	b.n	800a58e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a578:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	635a      	str	r2, [r3, #52]	; 0x34
 800a580:	e005      	b.n	800a58e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a586:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a592:	2b00      	cmp	r3, #0
 800a594:	d007      	beq.n	800a5a6 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a5e      	ldr	r2, [pc, #376]	; (800a714 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a59c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5a4:	e094      	b.n	800a6d0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a5a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a5aa:	f7fd ff4d 	bl	8008448 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5ae:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 8083 	beq.w	800a6be <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	695a      	ldr	r2, [r3, #20]
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	4950      	ldr	r1, [pc, #320]	; (800a718 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a5d6:	fba1 1303 	umull	r1, r3, r1, r3
 800a5da:	0e1b      	lsrs	r3, r3, #24
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d303      	bcc.n	800a5e8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	695b      	ldr	r3, [r3, #20]
 800a5e4:	61bb      	str	r3, [r7, #24]
 800a5e6:	e05a      	b.n	800a69e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5f0:	d103      	bne.n	800a5fa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	61bb      	str	r3, [r7, #24]
 800a5f8:	e051      	b.n	800a69e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a602:	d126      	bne.n	800a652 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	695b      	ldr	r3, [r3, #20]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10e      	bne.n	800a62a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a60c:	6a3b      	ldr	r3, [r7, #32]
 800a60e:	4a43      	ldr	r2, [pc, #268]	; (800a71c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d906      	bls.n	800a622 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a614:	6a3b      	ldr	r3, [r7, #32]
 800a616:	4a40      	ldr	r2, [pc, #256]	; (800a718 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a618:	fba2 2303 	umull	r2, r3, r2, r3
 800a61c:	0e5b      	lsrs	r3, r3, #25
 800a61e:	61bb      	str	r3, [r7, #24]
 800a620:	e03d      	b.n	800a69e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	61bb      	str	r3, [r7, #24]
 800a628:	e039      	b.n	800a69e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	6a3a      	ldr	r2, [r7, #32]
 800a632:	fbb2 f3f3 	udiv	r3, r2, r3
 800a636:	4a39      	ldr	r2, [pc, #228]	; (800a71c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d906      	bls.n	800a64a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	4a36      	ldr	r2, [pc, #216]	; (800a718 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a640:	fba2 2303 	umull	r2, r3, r2, r3
 800a644:	0e5b      	lsrs	r3, r3, #25
 800a646:	61bb      	str	r3, [r7, #24]
 800a648:	e029      	b.n	800a69e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	61bb      	str	r3, [r7, #24]
 800a650:	e025      	b.n	800a69e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10e      	bne.n	800a678 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	4a30      	ldr	r2, [pc, #192]	; (800a720 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d906      	bls.n	800a670 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	4a2c      	ldr	r2, [pc, #176]	; (800a718 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a666:	fba2 2303 	umull	r2, r3, r2, r3
 800a66a:	0e1b      	lsrs	r3, r3, #24
 800a66c:	61bb      	str	r3, [r7, #24]
 800a66e:	e016      	b.n	800a69e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	695b      	ldr	r3, [r3, #20]
 800a674:	61bb      	str	r3, [r7, #24]
 800a676:	e012      	b.n	800a69e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	695b      	ldr	r3, [r3, #20]
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	6a3a      	ldr	r2, [r7, #32]
 800a680:	fbb2 f3f3 	udiv	r3, r2, r3
 800a684:	4a26      	ldr	r2, [pc, #152]	; (800a720 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d906      	bls.n	800a698 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	4a22      	ldr	r2, [pc, #136]	; (800a718 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a68e:	fba2 2303 	umull	r2, r3, r2, r3
 800a692:	0e1b      	lsrs	r3, r3, #24
 800a694:	61bb      	str	r3, [r7, #24]
 800a696:	e002      	b.n	800a69e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681c      	ldr	r4, [r3, #0]
 800a6a2:	466a      	mov	r2, sp
 800a6a4:	f107 0314 	add.w	r3, r7, #20
 800a6a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6ac:	e882 0003 	stmia.w	r2, {r0, r1}
 800a6b0:	f107 0308 	add.w	r3, r7, #8
 800a6b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f006 f854 	bl	8010764 <SDMMC_Init>
 800a6bc:	e008      	b.n	800a6d0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f006 f921 	bl	8010920 <SDMMC_CmdBlockLength>
 800a6de:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00c      	beq.n	800a700 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a0a      	ldr	r2, [pc, #40]	; (800a714 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a6ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	372c      	adds	r7, #44	; 0x2c
 800a710:	46bd      	mov	sp, r7
 800a712:	bd90      	pop	{r4, r7, pc}
 800a714:	1fe00fff 	.word	0x1fe00fff
 800a718:	55e63b89 	.word	0x55e63b89
 800a71c:	02faf080 	.word	0x02faf080
 800a720:	017d7840 	.word	0x017d7840

0800a724 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a730:	f107 030c 	add.w	r3, r7, #12
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fa40 	bl	800abbc <SD_SendStatus>
 800a73c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d005      	beq.n	800a750 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	431a      	orrs	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	0a5b      	lsrs	r3, r3, #9
 800a754:	f003 030f 	and.w	r3, r3, #15
 800a758:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a75a:	693b      	ldr	r3, [r7, #16]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b090      	sub	sp, #64	; 0x40
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a76c:	2300      	movs	r3, #0
 800a76e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a770:	f7f8 fd36 	bl	80031e0 <HAL_GetTick>
 800a774:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f006 f84b 	bl	8010816 <SDMMC_GetPowerState>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d102      	bne.n	800a78c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a786:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a78a:	e0b5      	b.n	800a8f8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	2b03      	cmp	r3, #3
 800a792:	d02e      	beq.n	800a7f2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4618      	mov	r0, r3
 800a79a:	f006 fa96 	bl	8010cca <SDMMC_CmdSendCID>
 800a79e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <SD_InitCard+0x46>
    {
      return errorstate;
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	e0a6      	b.n	800a8f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f006 f876 	bl	80108a2 <SDMMC_GetResponse>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2104      	movs	r1, #4
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f006 f86d 	bl	80108a2 <SDMMC_GetResponse>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2108      	movs	r1, #8
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f006 f864 	bl	80108a2 <SDMMC_GetResponse>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	210c      	movs	r1, #12
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f006 f85b 	bl	80108a2 <SDMMC_GetResponse>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d01d      	beq.n	800a836 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a7fa:	e019      	b.n	800a830 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f107 020a 	add.w	r2, r7, #10
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f006 fa9e 	bl	8010d48 <SDMMC_CmdSetRelAdd>
 800a80c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <SD_InitCard+0xb4>
      {
        return errorstate;
 800a814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a816:	e06f      	b.n	800a8f8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a818:	f7f8 fce2 	bl	80031e0 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	f241 3287 	movw	r2, #4999	; 0x1387
 800a826:	4293      	cmp	r3, r2
 800a828:	d902      	bls.n	800a830 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a82a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a82e:	e063      	b.n	800a8f8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a830:	897b      	ldrh	r3, [r7, #10]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0e2      	beq.n	800a7fc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d036      	beq.n	800a8ac <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a83e:	897b      	ldrh	r3, [r7, #10]
 800a840:	461a      	mov	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a84e:	041b      	lsls	r3, r3, #16
 800a850:	4619      	mov	r1, r3
 800a852:	4610      	mov	r0, r2
 800a854:	f006 fa58 	bl	8010d08 <SDMMC_CmdSendCSD>
 800a858:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <SD_InitCard+0x100>
    {
      return errorstate;
 800a860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a862:	e049      	b.n	800a8f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2100      	movs	r1, #0
 800a86a:	4618      	mov	r0, r3
 800a86c:	f006 f819 	bl	80108a2 <SDMMC_GetResponse>
 800a870:	4602      	mov	r2, r0
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2104      	movs	r1, #4
 800a87c:	4618      	mov	r0, r3
 800a87e:	f006 f810 	bl	80108a2 <SDMMC_GetResponse>
 800a882:	4602      	mov	r2, r0
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2108      	movs	r1, #8
 800a88e:	4618      	mov	r0, r3
 800a890:	f006 f807 	bl	80108a2 <SDMMC_GetResponse>
 800a894:	4602      	mov	r2, r0
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	210c      	movs	r1, #12
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f005 fffe 	bl	80108a2 <SDMMC_GetResponse>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2104      	movs	r1, #4
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f005 fff5 	bl	80108a2 <SDMMC_GetResponse>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	0d1a      	lsrs	r2, r3, #20
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a8c0:	f107 030c 	add.w	r3, r7, #12
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff fb8c 	bl	8009fe4 <HAL_SD_GetCardCSD>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d002      	beq.n	800a8d8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a8d6:	e00f      	b.n	800a8f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e0:	041b      	lsls	r3, r3, #16
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f006 f907 	bl	8010af8 <SDMMC_CmdSelDesel>
 800a8ea:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <SD_InitCard+0x192>
  {
    return errorstate;
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f4:	e000      	b.n	800a8f8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3740      	adds	r7, #64	; 0x40
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a90c:	2300      	movs	r3, #0
 800a90e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4618      	mov	r0, r3
 800a91a:	f006 f910 	bl	8010b3e <SDMMC_CmdGoIdleState>
 800a91e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	e072      	b.n	800aa10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4618      	mov	r0, r3
 800a930:	f006 f923 	bl	8010b7a <SDMMC_CmdOperCond>
 800a934:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a93c:	d10d      	bne.n	800a95a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4618      	mov	r0, r3
 800a94a:	f006 f8f8 	bl	8010b3e <SDMMC_CmdGoIdleState>
 800a94e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d004      	beq.n	800a960 <SD_PowerON+0x60>
    {
      return errorstate;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	e05a      	b.n	800aa10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a964:	2b01      	cmp	r3, #1
 800a966:	d137      	bne.n	800a9d8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2100      	movs	r1, #0
 800a96e:	4618      	mov	r0, r3
 800a970:	f006 f923 	bl	8010bba <SDMMC_CmdAppCommand>
 800a974:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d02d      	beq.n	800a9d8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a97c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a980:	e046      	b.n	800aa10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2100      	movs	r1, #0
 800a988:	4618      	mov	r0, r3
 800a98a:	f006 f916 	bl	8010bba <SDMMC_CmdAppCommand>
 800a98e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <SD_PowerON+0x9a>
    {
      return errorstate;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	e03a      	b.n	800aa10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	491e      	ldr	r1, [pc, #120]	; (800aa18 <SD_PowerON+0x118>)
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f006 f92d 	bl	8010c00 <SDMMC_CmdAppOperCommand>
 800a9a6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a9b2:	e02d      	b.n	800aa10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f005 ff71 	bl	80108a2 <SDMMC_GetResponse>
 800a9c0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	0fdb      	lsrs	r3, r3, #31
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d101      	bne.n	800a9ce <SD_PowerON+0xce>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e000      	b.n	800a9d0 <SD_PowerON+0xd0>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	613b      	str	r3, [r7, #16]

    count++;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d802      	bhi.n	800a9e8 <SD_PowerON+0xe8>
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0cc      	beq.n	800a982 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d902      	bls.n	800a9f8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a9f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9f6:	e00b      	b.n	800aa10 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3718      	adds	r7, #24
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	c1100000 	.word	0xc1100000

0800aa1c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08c      	sub	sp, #48	; 0x30
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aa26:	f7f8 fbdb 	bl	80031e0 <HAL_GetTick>
 800aa2a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2100      	movs	r1, #0
 800aa36:	4618      	mov	r0, r3
 800aa38:	f005 ff33 	bl	80108a2 <SDMMC_GetResponse>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa46:	d102      	bne.n	800aa4e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa4c:	e0b0      	b.n	800abb0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2140      	movs	r1, #64	; 0x40
 800aa54:	4618      	mov	r0, r3
 800aa56:	f005 ff63 	bl	8010920 <SDMMC_CmdBlockLength>
 800aa5a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d005      	beq.n	800aa6e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	e0a0      	b.n	800abb0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa76:	041b      	lsls	r3, r3, #16
 800aa78:	4619      	mov	r1, r3
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	f006 f89d 	bl	8010bba <SDMMC_CmdAppCommand>
 800aa80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d005      	beq.n	800aa94 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	e08d      	b.n	800abb0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa94:	f04f 33ff 	mov.w	r3, #4294967295
 800aa98:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800aa9a:	2340      	movs	r3, #64	; 0x40
 800aa9c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800aa9e:	2360      	movs	r3, #96	; 0x60
 800aaa0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f107 0208 	add.w	r2, r7, #8
 800aab6:	4611      	mov	r1, r2
 800aab8:	4618      	mov	r0, r3
 800aaba:	f005 ff05 	bl	80108c8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f006 f985 	bl	8010dd2 <SDMMC_CmdStatusRegister>
 800aac8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d02b      	beq.n	800ab28 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	e069      	b.n	800abb0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d013      	beq.n	800ab12 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800aaea:	2300      	movs	r3, #0
 800aaec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaee:	e00d      	b.n	800ab0c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f005 fe5f 	bl	80107b8 <SDMMC_ReadFIFO>
 800aafa:	4602      	mov	r2, r0
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	601a      	str	r2, [r3, #0]
        pData++;
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab02:	3304      	adds	r3, #4
 800ab04:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800ab06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab08:	3301      	adds	r3, #1
 800ab0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0e:	2b07      	cmp	r3, #7
 800ab10:	d9ee      	bls.n	800aaf0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ab12:	f7f8 fb65 	bl	80031e0 <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab20:	d102      	bne.n	800ab28 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ab22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab26:	e043      	b.n	800abb0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0d2      	beq.n	800aadc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab3c:	f003 0308 	and.w	r3, r3, #8
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ab44:	2308      	movs	r3, #8
 800ab46:	e033      	b.n	800abb0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab4e:	f003 0302 	and.w	r3, r3, #2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d001      	beq.n	800ab5a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ab56:	2302      	movs	r3, #2
 800ab58:	e02a      	b.n	800abb0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab60:	f003 0320 	and.w	r3, r3, #32
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d017      	beq.n	800ab98 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ab68:	2320      	movs	r3, #32
 800ab6a:	e021      	b.n	800abb0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f005 fe21 	bl	80107b8 <SDMMC_ReadFIFO>
 800ab76:	4602      	mov	r2, r0
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7a:	601a      	str	r2, [r3, #0]
    pData++;
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	3304      	adds	r3, #4
 800ab80:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ab82:	f7f8 fb2d 	bl	80031e0 <HAL_GetTick>
 800ab86:	4602      	mov	r2, r0
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab90:	d102      	bne.n	800ab98 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ab92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab96:	e00b      	b.n	800abb0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e2      	bne.n	800ab6c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a03      	ldr	r2, [pc, #12]	; (800abb8 <SD_SendSDStatus+0x19c>)
 800abac:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3730      	adds	r7, #48	; 0x30
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	18000f3a 	.word	0x18000f3a

0800abbc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800abcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abd0:	e018      	b.n	800ac04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abda:	041b      	lsls	r3, r3, #16
 800abdc:	4619      	mov	r1, r3
 800abde:	4610      	mov	r0, r2
 800abe0:	f006 f8d4 	bl	8010d8c <SDMMC_CmdSendStatus>
 800abe4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	e009      	b.n	800ac04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2100      	movs	r1, #0
 800abf6:	4618      	mov	r0, r3
 800abf8:	f005 fe53 	bl	80108a2 <SDMMC_GetResponse>
 800abfc:	4602      	mov	r2, r0
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ac14:	2300      	movs	r3, #0
 800ac16:	60fb      	str	r3, [r7, #12]
 800ac18:	2300      	movs	r3, #0
 800ac1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2100      	movs	r1, #0
 800ac22:	4618      	mov	r0, r3
 800ac24:	f005 fe3d 	bl	80108a2 <SDMMC_GetResponse>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac32:	d102      	bne.n	800ac3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ac34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac38:	e02f      	b.n	800ac9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ac3a:	f107 030c 	add.w	r3, r7, #12
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f879 	bl	800ad38 <SD_FindSCR>
 800ac46:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	e023      	b.n	800ac9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d01c      	beq.n	800ac96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac64:	041b      	lsls	r3, r3, #16
 800ac66:	4619      	mov	r1, r3
 800ac68:	4610      	mov	r0, r2
 800ac6a:	f005 ffa6 	bl	8010bba <SDMMC_CmdAppCommand>
 800ac6e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	e00f      	b.n	800ac9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2102      	movs	r1, #2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f005 ffdd 	bl	8010c40 <SDMMC_CmdBusWidth>
 800ac86:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	e003      	b.n	800ac9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ac92:	2300      	movs	r3, #0
 800ac94:	e001      	b.n	800ac9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b086      	sub	sp, #24
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800acaa:	2300      	movs	r3, #0
 800acac:	60fb      	str	r3, [r7, #12]
 800acae:	2300      	movs	r3, #0
 800acb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2100      	movs	r1, #0
 800acb8:	4618      	mov	r0, r3
 800acba:	f005 fdf2 	bl	80108a2 <SDMMC_GetResponse>
 800acbe:	4603      	mov	r3, r0
 800acc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acc8:	d102      	bne.n	800acd0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800acca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acce:	e02f      	b.n	800ad30 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800acd0:	f107 030c 	add.w	r3, r7, #12
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f82e 	bl	800ad38 <SD_FindSCR>
 800acdc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	e023      	b.n	800ad30 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d01c      	beq.n	800ad2c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acfa:	041b      	lsls	r3, r3, #16
 800acfc:	4619      	mov	r1, r3
 800acfe:	4610      	mov	r0, r2
 800ad00:	f005 ff5b 	bl	8010bba <SDMMC_CmdAppCommand>
 800ad04:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	e00f      	b.n	800ad30 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2100      	movs	r1, #0
 800ad16:	4618      	mov	r0, r3
 800ad18:	f005 ff92 	bl	8010c40 <SDMMC_CmdBusWidth>
 800ad1c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	e003      	b.n	800ad30 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	e001      	b.n	800ad30 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3718      	adds	r7, #24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08e      	sub	sp, #56	; 0x38
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ad42:	f7f8 fa4d 	bl	80031e0 <HAL_GetTick>
 800ad46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60bb      	str	r3, [r7, #8]
 800ad50:	2300      	movs	r3, #0
 800ad52:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2108      	movs	r1, #8
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f005 fdde 	bl	8010920 <SDMMC_CmdBlockLength>
 800ad64:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	e0ad      	b.n	800aecc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad78:	041b      	lsls	r3, r3, #16
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	f005 ff1c 	bl	8010bba <SDMMC_CmdAppCommand>
 800ad82:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <SD_FindSCR+0x56>
  {
    return errorstate;
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8c:	e09e      	b.n	800aecc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ad8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad92:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ad94:	2308      	movs	r3, #8
 800ad96:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ad98:	2330      	movs	r3, #48	; 0x30
 800ad9a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ada4:	2301      	movs	r3, #1
 800ada6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f107 0210 	add.w	r2, r7, #16
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f005 fd88 	bl	80108c8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f005 ff62 	bl	8010c86 <SDMMC_CmdSendSCR>
 800adc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d027      	beq.n	800ae1a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adcc:	e07e      	b.n	800aecc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d113      	bne.n	800ae04 <SD_FindSCR+0xcc>
 800addc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d110      	bne.n	800ae04 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f005 fce6 	bl	80107b8 <SDMMC_ReadFIFO>
 800adec:	4603      	mov	r3, r0
 800adee:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f005 fcdf 	bl	80107b8 <SDMMC_ReadFIFO>
 800adfa:	4603      	mov	r3, r0
 800adfc:	60fb      	str	r3, [r7, #12]
      index++;
 800adfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae00:	3301      	adds	r3, #1
 800ae02:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ae04:	f7f8 f9ec 	bl	80031e0 <HAL_GetTick>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0c:	1ad3      	subs	r3, r2, r3
 800ae0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae12:	d102      	bne.n	800ae1a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ae14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae18:	e058      	b.n	800aecc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae20:	f240 532a 	movw	r3, #1322	; 0x52a
 800ae24:	4013      	ands	r3, r2
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d0d1      	beq.n	800adce <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae30:	f003 0308 	and.w	r3, r3, #8
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d005      	beq.n	800ae44 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2208      	movs	r2, #8
 800ae3e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ae40:	2308      	movs	r3, #8
 800ae42:	e043      	b.n	800aecc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d005      	beq.n	800ae5e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2202      	movs	r2, #2
 800ae58:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e036      	b.n	800aecc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae64:	f003 0320 	and.w	r3, r3, #32
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d005      	beq.n	800ae78 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2220      	movs	r2, #32
 800ae72:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ae74:	2320      	movs	r3, #32
 800ae76:	e029      	b.n	800aecc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a15      	ldr	r2, [pc, #84]	; (800aed4 <SD_FindSCR+0x19c>)
 800ae7e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	061a      	lsls	r2, r3, #24
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	021b      	lsls	r3, r3, #8
 800ae88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	0a1b      	lsrs	r3, r3, #8
 800ae92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ae96:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	0e1b      	lsrs	r3, r3, #24
 800ae9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ae9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea0:	601a      	str	r2, [r3, #0]
    scr++;
 800aea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea4:	3304      	adds	r3, #4
 800aea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	061a      	lsls	r2, r3, #24
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	021b      	lsls	r3, r3, #8
 800aeb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aeb4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	0a1b      	lsrs	r3, r3, #8
 800aeba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800aebe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	0e1b      	lsrs	r3, r3, #24
 800aec4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800aec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3738      	adds	r7, #56	; 0x38
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	18000f3a 	.word	0x18000f3a

0800aed8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeea:	2b1f      	cmp	r3, #31
 800aeec:	d936      	bls.n	800af5c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800aeee:	2300      	movs	r3, #0
 800aef0:	617b      	str	r3, [r7, #20]
 800aef2:	e027      	b.n	800af44 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f005 fc5d 	bl	80107b8 <SDMMC_ReadFIFO>
 800aefe:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	b2da      	uxtb	r2, r3
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	701a      	strb	r2, [r3, #0]
      tmp++;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	3301      	adds	r3, #1
 800af0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	0a1b      	lsrs	r3, r3, #8
 800af12:	b2da      	uxtb	r2, r3
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	701a      	strb	r2, [r3, #0]
      tmp++;
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	3301      	adds	r3, #1
 800af1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	0c1b      	lsrs	r3, r3, #16
 800af22:	b2da      	uxtb	r2, r3
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	3301      	adds	r3, #1
 800af2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	0e1b      	lsrs	r3, r3, #24
 800af32:	b2da      	uxtb	r2, r3
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	3301      	adds	r3, #1
 800af3c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	3301      	adds	r3, #1
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	2b07      	cmp	r3, #7
 800af48:	d9d4      	bls.n	800aef4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af54:	f1a3 0220 	sub.w	r2, r3, #32
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800af5c:	bf00      	nop
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	69db      	ldr	r3, [r3, #28]
 800af70:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	2b1f      	cmp	r3, #31
 800af78:	d93a      	bls.n	800aff0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800af7a:	2300      	movs	r3, #0
 800af7c:	617b      	str	r3, [r7, #20]
 800af7e:	e02b      	b.n	800afd8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	60fb      	str	r3, [r7, #12]
      tmp++;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	3301      	adds	r3, #1
 800af8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	021a      	lsls	r2, r3, #8
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4313      	orrs	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]
      tmp++;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	3301      	adds	r3, #1
 800af9c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	041a      	lsls	r2, r3, #16
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	3301      	adds	r3, #1
 800afae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	061a      	lsls	r2, r3, #24
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	4313      	orrs	r3, r2
 800afba:	60fb      	str	r3, [r7, #12]
      tmp++;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	3301      	adds	r3, #1
 800afc0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f107 020c 	add.w	r2, r7, #12
 800afca:	4611      	mov	r1, r2
 800afcc:	4618      	mov	r0, r3
 800afce:	f005 fc00 	bl	80107d2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	3301      	adds	r3, #1
 800afd6:	617b      	str	r3, [r7, #20]
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	2b07      	cmp	r3, #7
 800afdc:	d9d0      	bls.n	800af80 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	f1a3 0220 	sub.w	r2, r3, #32
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	621a      	str	r2, [r3, #32]
  }
}
 800aff0:	bf00      	nop
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e02b      	b.n	800b0b4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b00      	cmp	r3, #0
 800b066:	d106      	bne.n	800b076 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7f7 fe87 	bl	8002d84 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2202      	movs	r2, #2
 800b07a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3304      	adds	r3, #4
 800b086:	4619      	mov	r1, r3
 800b088:	4610      	mov	r0, r2
 800b08a:	f005 fa69 	bl	8010560 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6818      	ldr	r0, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	461a      	mov	r2, r3
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	f005 fabd 	bl	8010618 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b09e:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <HAL_SDRAM_Init+0x74>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a06      	ldr	r2, [pc, #24]	; (800b0bc <HAL_SDRAM_Init+0x74>)
 800b0a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0a8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	52004000 	.word	0x52004000

0800b0c0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b0d2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b0d4:	7dfb      	ldrb	r3, [r7, #23]
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d101      	bne.n	800b0de <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b0da:	2302      	movs	r3, #2
 800b0dc:	e021      	b.n	800b122 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b0de:	7dfb      	ldrb	r3, [r7, #23]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d002      	beq.n	800b0ea <HAL_SDRAM_SendCommand+0x2a>
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	d118      	bne.n	800b11c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	68b9      	ldr	r1, [r7, #8]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f005 faf6 	bl	80106ec <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b02      	cmp	r3, #2
 800b106:	d104      	bne.n	800b112 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2205      	movs	r2, #5
 800b10c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b110:	e006      	b.n	800b120 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2201      	movs	r2, #1
 800b116:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b11a:	e001      	b.n	800b120 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e000      	b.n	800b122 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3718      	adds	r7, #24
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b082      	sub	sp, #8
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d101      	bne.n	800b144 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b140:	2302      	movs	r3, #2
 800b142:	e016      	b.n	800b172 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d10f      	bne.n	800b170 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	4618      	mov	r0, r3
 800b160:	f005 fae8 	bl	8010734 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b16c:	2300      	movs	r3, #0
 800b16e:	e000      	b.n	800b172 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
}
 800b172:	4618      	mov	r0, r3
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
	...

0800b17c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e0f1      	b.n	800b372 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a78      	ldr	r2, [pc, #480]	; (800b37c <HAL_SPI_Init+0x200>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d00f      	beq.n	800b1be <HAL_SPI_Init+0x42>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a77      	ldr	r2, [pc, #476]	; (800b380 <HAL_SPI_Init+0x204>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d00a      	beq.n	800b1be <HAL_SPI_Init+0x42>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a75      	ldr	r2, [pc, #468]	; (800b384 <HAL_SPI_Init+0x208>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d005      	beq.n	800b1be <HAL_SPI_Init+0x42>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	2b0f      	cmp	r3, #15
 800b1b8:	d901      	bls.n	800b1be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e0d9      	b.n	800b372 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f001 f816 	bl	800c1f0 <SPI_GetPacketSize>
 800b1c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a6c      	ldr	r2, [pc, #432]	; (800b37c <HAL_SPI_Init+0x200>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d00c      	beq.n	800b1ea <HAL_SPI_Init+0x6e>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a6a      	ldr	r2, [pc, #424]	; (800b380 <HAL_SPI_Init+0x204>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d007      	beq.n	800b1ea <HAL_SPI_Init+0x6e>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a69      	ldr	r2, [pc, #420]	; (800b384 <HAL_SPI_Init+0x208>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d002      	beq.n	800b1ea <HAL_SPI_Init+0x6e>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2b08      	cmp	r3, #8
 800b1e8:	d811      	bhi.n	800b20e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1ee:	4a63      	ldr	r2, [pc, #396]	; (800b37c <HAL_SPI_Init+0x200>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d009      	beq.n	800b208 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a61      	ldr	r2, [pc, #388]	; (800b380 <HAL_SPI_Init+0x204>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d004      	beq.n	800b208 <HAL_SPI_Init+0x8c>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a60      	ldr	r2, [pc, #384]	; (800b384 <HAL_SPI_Init+0x208>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d104      	bne.n	800b212 <HAL_SPI_Init+0x96>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b10      	cmp	r3, #16
 800b20c:	d901      	bls.n	800b212 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e0af      	b.n	800b372 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d106      	bne.n	800b22c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7f7 f8f8 	bl	800241c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2202      	movs	r2, #2
 800b230:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f022 0201 	bic.w	r2, r2, #1
 800b242:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b24e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b258:	d119      	bne.n	800b28e <HAL_SPI_Init+0x112>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b262:	d103      	bne.n	800b26c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d008      	beq.n	800b27e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10c      	bne.n	800b28e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b27c:	d107      	bne.n	800b28e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b28c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	69da      	ldr	r2, [r3, #28]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b296:	431a      	orrs	r2, r3
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	431a      	orrs	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2a0:	ea42 0103 	orr.w	r1, r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68da      	ldr	r2, [r3, #12]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	430a      	orrs	r2, r1
 800b2ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	431a      	orrs	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	431a      	orrs	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	431a      	orrs	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	431a      	orrs	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ee:	ea42 0103 	orr.w	r1, r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	430a      	orrs	r2, r1
 800b2fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d113      	bne.n	800b32e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b318:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b32c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f022 0201 	bic.w	r2, r2, #1
 800b33c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00a      	beq.n	800b360 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	430a      	orrs	r2, r1
 800b35e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	40013000 	.word	0x40013000
 800b380:	40003800 	.word	0x40003800
 800b384:	40003c00 	.word	0x40003c00

0800b388 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08a      	sub	sp, #40	; 0x28
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	603b      	str	r3, [r7, #0]
 800b394:	4613      	mov	r3, r2
 800b396:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3320      	adds	r3, #32
 800b39e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d101      	bne.n	800b3b2 <HAL_SPI_Transmit+0x2a>
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	e1d7      	b.n	800b762 <HAL_SPI_Transmit+0x3da>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3ba:	f7f7 ff11 	bl	80031e0 <HAL_GetTick>
 800b3be:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d007      	beq.n	800b3dc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b3d8:	7efb      	ldrb	r3, [r7, #27]
 800b3da:	e1c2      	b.n	800b762 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <HAL_SPI_Transmit+0x60>
 800b3e2:	88fb      	ldrh	r3, [r7, #6]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d107      	bne.n	800b3f8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b3f4:	7efb      	ldrb	r3, [r7, #27]
 800b3f6:	e1b4      	b.n	800b762 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2203      	movs	r2, #3
 800b3fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	88fa      	ldrh	r2, [r7, #6]
 800b412:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	88fa      	ldrh	r2, [r7, #6]
 800b41a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2200      	movs	r2, #0
 800b430:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b448:	d107      	bne.n	800b45a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b458:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	4b96      	ldr	r3, [pc, #600]	; (800b6bc <HAL_SPI_Transmit+0x334>)
 800b462:	4013      	ands	r3, r2
 800b464:	88f9      	ldrh	r1, [r7, #6]
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	6812      	ldr	r2, [r2, #0]
 800b46a:	430b      	orrs	r3, r1
 800b46c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f042 0201 	orr.w	r2, r2, #1
 800b47c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b486:	d107      	bne.n	800b498 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	2b0f      	cmp	r3, #15
 800b49e:	d947      	bls.n	800b530 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b4a0:	e03f      	b.n	800b522 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	695b      	ldr	r3, [r3, #20]
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d114      	bne.n	800b4da <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	6812      	ldr	r2, [r2, #0]
 800b4ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4c0:	1d1a      	adds	r2, r3, #4
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b4d8:	e023      	b.n	800b522 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4da:	f7f7 fe81 	bl	80031e0 <HAL_GetTick>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d803      	bhi.n	800b4f2 <HAL_SPI_Transmit+0x16a>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f0:	d102      	bne.n	800b4f8 <HAL_SPI_Transmit+0x170>
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d114      	bne.n	800b522 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 fdab 	bl	800c054 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b50c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e11f      	b.n	800b762 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b528:	b29b      	uxth	r3, r3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1b9      	bne.n	800b4a2 <HAL_SPI_Transmit+0x11a>
 800b52e:	e0f2      	b.n	800b716 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	2b07      	cmp	r3, #7
 800b536:	f240 80e7 	bls.w	800b708 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b53a:	e05d      	b.n	800b5f8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	695b      	ldr	r3, [r3, #20]
 800b542:	f003 0302 	and.w	r3, r3, #2
 800b546:	2b02      	cmp	r3, #2
 800b548:	d132      	bne.n	800b5b0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b550:	b29b      	uxth	r3, r3
 800b552:	2b01      	cmp	r3, #1
 800b554:	d918      	bls.n	800b588 <HAL_SPI_Transmit+0x200>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d014      	beq.n	800b588 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6812      	ldr	r2, [r2, #0]
 800b568:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b56e:	1d1a      	adds	r2, r3, #4
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	3b02      	subs	r3, #2
 800b57e:	b29a      	uxth	r2, r3
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b586:	e037      	b.n	800b5f8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b58c:	881a      	ldrh	r2, [r3, #0]
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b596:	1c9a      	adds	r2, r3, #2
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b5ae:	e023      	b.n	800b5f8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5b0:	f7f7 fe16 	bl	80031e0 <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d803      	bhi.n	800b5c8 <HAL_SPI_Transmit+0x240>
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c6:	d102      	bne.n	800b5ce <HAL_SPI_Transmit+0x246>
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d114      	bne.n	800b5f8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f000 fd40 	bl	800c054 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	e0b4      	b.n	800b762 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	2b00      	cmp	r3, #0
 800b602:	d19b      	bne.n	800b53c <HAL_SPI_Transmit+0x1b4>
 800b604:	e087      	b.n	800b716 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	f003 0302 	and.w	r3, r3, #2
 800b610:	2b02      	cmp	r3, #2
 800b612:	d155      	bne.n	800b6c0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	2b03      	cmp	r3, #3
 800b61e:	d918      	bls.n	800b652 <HAL_SPI_Transmit+0x2ca>
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b624:	2b40      	cmp	r3, #64	; 0x40
 800b626:	d914      	bls.n	800b652 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6812      	ldr	r2, [r2, #0]
 800b632:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b638:	1d1a      	adds	r2, r3, #4
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b644:	b29b      	uxth	r3, r3
 800b646:	3b04      	subs	r3, #4
 800b648:	b29a      	uxth	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b650:	e05a      	b.n	800b708 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b658:	b29b      	uxth	r3, r3
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d917      	bls.n	800b68e <HAL_SPI_Transmit+0x306>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b662:	2b00      	cmp	r3, #0
 800b664:	d013      	beq.n	800b68e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b66a:	881a      	ldrh	r2, [r3, #0]
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b674:	1c9a      	adds	r2, r3, #2
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b680:	b29b      	uxth	r3, r3
 800b682:	3b02      	subs	r3, #2
 800b684:	b29a      	uxth	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b68c:	e03c      	b.n	800b708 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3320      	adds	r3, #32
 800b698:	7812      	ldrb	r2, [r2, #0]
 800b69a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b6b8:	e026      	b.n	800b708 <HAL_SPI_Transmit+0x380>
 800b6ba:	bf00      	nop
 800b6bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6c0:	f7f7 fd8e 	bl	80031e0 <HAL_GetTick>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d803      	bhi.n	800b6d8 <HAL_SPI_Transmit+0x350>
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d6:	d102      	bne.n	800b6de <HAL_SPI_Transmit+0x356>
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d114      	bne.n	800b708 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f000 fcb8 	bl	800c054 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b704:	2303      	movs	r3, #3
 800b706:	e02c      	b.n	800b762 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b70e:	b29b      	uxth	r3, r3
 800b710:	2b00      	cmp	r3, #0
 800b712:	f47f af78 	bne.w	800b606 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2200      	movs	r2, #0
 800b71e:	2108      	movs	r1, #8
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 fd37 	bl	800c194 <SPI_WaitOnFlagUntilTimeout>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d007      	beq.n	800b73c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b732:	f043 0220 	orr.w	r2, r3, #32
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f000 fc89 	bl	800c054 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	e000      	b.n	800b762 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800b760:	7efb      	ldrb	r3, [r7, #27]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3720      	adds	r7, #32
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop

0800b76c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b784:	2b01      	cmp	r3, #1
 800b786:	d101      	bne.n	800b78c <HAL_SPI_TransmitReceive_DMA+0x20>
 800b788:	2302      	movs	r3, #2
 800b78a:	e1b4      	b.n	800baf6 <HAL_SPI_TransmitReceive_DMA+0x38a>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b79a:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b7a2:	7dbb      	ldrb	r3, [r7, #22]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d012      	beq.n	800b7ce <HAL_SPI_TransmitReceive_DMA+0x62>
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7ae:	d106      	bne.n	800b7be <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d102      	bne.n	800b7be <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b7b8:	7dbb      	ldrb	r3, [r7, #22]
 800b7ba:	2b04      	cmp	r3, #4
 800b7bc:	d007      	beq.n	800b7ce <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b7be:	2302      	movs	r3, #2
 800b7c0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
 800b7cc:	e193      	b.n	800baf6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d005      	beq.n	800b7e0 <HAL_SPI_TransmitReceive_DMA+0x74>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <HAL_SPI_TransmitReceive_DMA+0x74>
 800b7da:	887b      	ldrh	r3, [r7, #2]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d107      	bne.n	800b7f0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	e182      	b.n	800baf6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d003      	beq.n	800b804 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2205      	movs	r2, #5
 800b800:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2200      	movs	r2, #0
 800b808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	887a      	ldrh	r2, [r7, #2]
 800b816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	887a      	ldrh	r2, [r7, #2]
 800b81e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	887a      	ldrh	r2, [r7, #2]
 800b82c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	887a      	ldrh	r2, [r7, #2]
 800b834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	689a      	ldr	r2, [r3, #8]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b852:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	2b0f      	cmp	r3, #15
 800b85a:	d905      	bls.n	800b868 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b866:	d10f      	bne.n	800b888 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b86c:	2b07      	cmp	r3, #7
 800b86e:	d913      	bls.n	800b898 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b87a:	d00d      	beq.n	800b898 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b880:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b886:	d007      	beq.n	800b898 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b894:	7dfb      	ldrb	r3, [r7, #23]
 800b896:	e12e      	b.n	800baf6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	2b07      	cmp	r3, #7
 800b89e:	d840      	bhi.n	800b922 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8aa:	d109      	bne.n	800b8c0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	105b      	asrs	r3, r3, #1
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8ca:	d109      	bne.n	800b8e0 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	3303      	adds	r3, #3
 800b8d6:	109b      	asrs	r3, r3, #2
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8ea:	d109      	bne.n	800b900 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	105b      	asrs	r3, r3, #1
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b90a:	d12e      	bne.n	800b96a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b912:	b29b      	uxth	r3, r3
 800b914:	3303      	adds	r3, #3
 800b916:	109b      	asrs	r3, r3, #2
 800b918:	b29a      	uxth	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b920:	e023      	b.n	800b96a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	2b0f      	cmp	r3, #15
 800b928:	d81f      	bhi.n	800b96a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b92e:	699b      	ldr	r3, [r3, #24]
 800b930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b934:	d109      	bne.n	800b94a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	3301      	adds	r3, #1
 800b940:	105b      	asrs	r3, r3, #1
 800b942:	b29a      	uxth	r2, r3
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b954:	d109      	bne.n	800b96a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	3301      	adds	r3, #1
 800b960:	105b      	asrs	r3, r3, #1
 800b962:	b29a      	uxth	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b04      	cmp	r3, #4
 800b974:	d108      	bne.n	800b988 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b97a:	4a61      	ldr	r2, [pc, #388]	; (800bb00 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800b97c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b982:	4a60      	ldr	r2, [pc, #384]	; (800bb04 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800b984:	63da      	str	r2, [r3, #60]	; 0x3c
 800b986:	e007      	b.n	800b998 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b98c:	4a5e      	ldr	r2, [pc, #376]	; (800bb08 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800b98e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b994:	4a5d      	ldr	r2, [pc, #372]	; (800bb0c <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800b996:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b99c:	4a5c      	ldr	r2, [pc, #368]	; (800bb10 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800b99e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3330      	adds	r3, #48	; 0x30
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9c0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b9c2:	f7f8 f90f 	bl	8003be4 <HAL_DMA_Start_IT>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d013      	beq.n	800b9f4 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9d2:	f043 0210 	orr.w	r2, r3, #16
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b9f0:	7dfb      	ldrb	r3, [r7, #23]
 800b9f2:	e080      	b.n	800baf6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	689a      	ldr	r2, [r3, #8]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba02:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba08:	2200      	movs	r2, #0
 800ba0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba10:	2200      	movs	r2, #0
 800ba12:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba18:	2200      	movs	r2, #0
 800ba1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba20:	2200      	movs	r2, #0
 800ba22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3320      	adds	r3, #32
 800ba34:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ba3e:	f7f8 f8d1 	bl	8003be4 <HAL_DMA_Start_IT>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d013      	beq.n	800ba70 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba4e:	f043 0210 	orr.w	r2, r3, #16
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	e042      	b.n	800baf6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba7a:	d108      	bne.n	800ba8e <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6859      	ldr	r1, [r3, #4]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	4b23      	ldr	r3, [pc, #140]	; (800bb14 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800ba88:	400b      	ands	r3, r1
 800ba8a:	6053      	str	r3, [r2, #4]
 800ba8c:	e009      	b.n	800baa2 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	4b1f      	ldr	r3, [pc, #124]	; (800bb14 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800ba96:	4013      	ands	r3, r2
 800ba98:	8879      	ldrh	r1, [r7, #2]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	6812      	ldr	r2, [r2, #0]
 800ba9e:	430b      	orrs	r3, r1
 800baa0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	689a      	ldr	r2, [r3, #8]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bab0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	691a      	ldr	r2, [r3, #16]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800bac0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0201 	orr.w	r2, r2, #1
 800bad0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bada:	d107      	bne.n	800baec <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800baea:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	0800bfa1 	.word	0x0800bfa1
 800bb04:	0800bf15 	.word	0x0800bf15
 800bb08:	0800bfbd 	.word	0x0800bfbd
 800bb0c:	0800bf5b 	.word	0x0800bf5b
 800bb10:	0800bfd9 	.word	0x0800bfd9
 800bb14:	ffff0000 	.word	0xffff0000

0800bb18 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b08a      	sub	sp, #40	; 0x28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	695b      	ldr	r3, [r3, #20]
 800bb2e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800bb30:	6a3a      	ldr	r2, [r7, #32]
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	4013      	ands	r3, r2
 800bb36:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800bb40:	2300      	movs	r3, #0
 800bb42:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb4a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	3330      	adds	r3, #48	; 0x30
 800bb52:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d113      	bne.n	800bb86 <HAL_SPI_IRQHandler+0x6e>
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	f003 0320 	and.w	r3, r3, #32
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10e      	bne.n	800bb86 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d009      	beq.n	800bb86 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	4798      	blx	r3
    hspi->RxISR(hspi);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	4798      	blx	r3
    handled = 1UL;
 800bb82:	2301      	movs	r3, #1
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10f      	bne.n	800bbb0 <HAL_SPI_IRQHandler+0x98>
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00a      	beq.n	800bbb0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d105      	bne.n	800bbb0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	4798      	blx	r3
    handled = 1UL;
 800bbac:	2301      	movs	r3, #1
 800bbae:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	f003 0320 	and.w	r3, r3, #32
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10f      	bne.n	800bbda <HAL_SPI_IRQHandler+0xc2>
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	f003 0302 	and.w	r3, r3, #2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00a      	beq.n	800bbda <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d105      	bne.n	800bbda <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	4798      	blx	r3
    handled = 1UL;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f040 815a 	bne.w	800be96 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	f003 0308 	and.w	r3, r3, #8
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 808b 	beq.w	800bd04 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	699a      	ldr	r2, [r3, #24]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f042 0208 	orr.w	r2, r2, #8
 800bbfc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	699a      	ldr	r2, [r3, #24]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f042 0210 	orr.w	r2, r2, #16
 800bc0c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	699a      	ldr	r2, [r3, #24]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc1c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	691a      	ldr	r2, [r3, #16]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f022 0208 	bic.w	r2, r2, #8
 800bc2c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d13d      	bne.n	800bcb8 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800bc3c:	e036      	b.n	800bcac <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	2b0f      	cmp	r3, #15
 800bc44:	d90b      	bls.n	800bc5e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc50:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc56:	1d1a      	adds	r2, r3, #4
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	665a      	str	r2, [r3, #100]	; 0x64
 800bc5c:	e01d      	b.n	800bc9a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	2b07      	cmp	r3, #7
 800bc64:	d90b      	bls.n	800bc7e <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	8812      	ldrh	r2, [r2, #0]
 800bc6e:	b292      	uxth	r2, r2
 800bc70:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc76:	1c9a      	adds	r2, r3, #2
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	665a      	str	r2, [r3, #100]	; 0x64
 800bc7c:	e00d      	b.n	800bc9a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc8a:	7812      	ldrb	r2, [r2, #0]
 800bc8c:	b2d2      	uxtb	r2, r2
 800bc8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc94:	1c5a      	adds	r2, r3, #1
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	3b01      	subs	r3, #1
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1c2      	bne.n	800bc3e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 f9cb 	bl	800c054 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d003      	beq.n	800bcd8 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 f915 	bl	800bf00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bcd6:	e0e3      	b.n	800bea0 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800bcd8:	7cfb      	ldrb	r3, [r7, #19]
 800bcda:	2b05      	cmp	r3, #5
 800bcdc:	d103      	bne.n	800bce6 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f7f5 fd72 	bl	80017c8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800bce4:	e0d9      	b.n	800be9a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800bce6:	7cfb      	ldrb	r3, [r7, #19]
 800bce8:	2b04      	cmp	r3, #4
 800bcea:	d103      	bne.n	800bcf4 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f8e9 	bl	800bec4 <HAL_SPI_RxCpltCallback>
    return;
 800bcf2:	e0d2      	b.n	800be9a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800bcf4:	7cfb      	ldrb	r3, [r7, #19]
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	f040 80cf 	bne.w	800be9a <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 f8d7 	bl	800beb0 <HAL_SPI_TxCpltCallback>
    return;
 800bd02:	e0ca      	b.n	800be9a <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00d      	beq.n	800bd2a <HAL_SPI_IRQHandler+0x212>
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	f003 0308 	and.w	r3, r3, #8
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d008      	beq.n	800bd2a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	699a      	ldr	r2, [r3, #24]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd26:	619a      	str	r2, [r3, #24]

    return;
 800bd28:	e0ba      	b.n	800bea0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 80b5 	beq.w	800bea0 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00f      	beq.n	800bd60 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd46:	f043 0204 	orr.w	r2, r3, #4
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	699a      	ldr	r2, [r3, #24]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd5e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00f      	beq.n	800bd8a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd70:	f043 0201 	orr.w	r2, r3, #1
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	699a      	ldr	r2, [r3, #24]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd88:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00f      	beq.n	800bdb4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd9a:	f043 0208 	orr.w	r2, r3, #8
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	699a      	ldr	r2, [r3, #24]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdb2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	f003 0320 	and.w	r3, r3, #32
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00f      	beq.n	800bdde <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	699a      	ldr	r2, [r3, #24]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f042 0220 	orr.w	r2, r2, #32
 800bddc:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d05a      	beq.n	800be9e <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f022 0201 	bic.w	r2, r2, #1
 800bdf6:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6919      	ldr	r1, [r3, #16]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	4b29      	ldr	r3, [pc, #164]	; (800bea8 <HAL_SPI_IRQHandler+0x390>)
 800be04:	400b      	ands	r3, r1
 800be06:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800be0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be12:	d138      	bne.n	800be86 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800be22:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d013      	beq.n	800be54 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be30:	4a1e      	ldr	r2, [pc, #120]	; (800beac <HAL_SPI_IRQHandler+0x394>)
 800be32:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f8 fc5b 	bl	80046f4 <HAL_DMA_Abort_IT>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d007      	beq.n	800be54 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d020      	beq.n	800be9e <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be60:	4a12      	ldr	r2, [pc, #72]	; (800beac <HAL_SPI_IRQHandler+0x394>)
 800be62:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f8 fc43 	bl	80046f4 <HAL_DMA_Abort_IT>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d014      	beq.n	800be9e <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800be84:	e00b      	b.n	800be9e <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f836 	bl	800bf00 <HAL_SPI_ErrorCallback>
    return;
 800be94:	e003      	b.n	800be9e <HAL_SPI_IRQHandler+0x386>
    return;
 800be96:	bf00      	nop
 800be98:	e002      	b.n	800bea0 <HAL_SPI_IRQHandler+0x388>
    return;
 800be9a:	bf00      	nop
 800be9c:	e000      	b.n	800bea0 <HAL_SPI_IRQHandler+0x388>
    return;
 800be9e:	bf00      	nop
  }
}
 800bea0:	3728      	adds	r7, #40	; 0x28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	fffffc94 	.word	0xfffffc94
 800beac:	0800c01f 	.word	0x0800c01f

0800beb0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800becc:	bf00      	nop
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf20:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b07      	cmp	r3, #7
 800bf2c:	d011      	beq.n	800bf52 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf32:	69db      	ldr	r3, [r3, #28]
 800bf34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf38:	d103      	bne.n	800bf42 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f7ff ffc2 	bl	800bec4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bf40:	e007      	b.n	800bf52 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	691a      	ldr	r2, [r3, #16]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f042 0208 	orr.w	r2, r2, #8
 800bf50:	611a      	str	r2, [r3, #16]
}
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf66:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b07      	cmp	r3, #7
 800bf72:	d011      	beq.n	800bf98 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf78:	69db      	ldr	r3, [r3, #28]
 800bf7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf7e:	d103      	bne.n	800bf88 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f7f5 fc21 	bl	80017c8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bf86:	e007      	b.n	800bf98 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	691a      	ldr	r2, [r3, #16]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f042 0208 	orr.w	r2, r2, #8
 800bf96:	611a      	str	r2, [r3, #16]
}
 800bf98:	bf00      	nop
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f7ff ff92 	bl	800bed8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bfb4:	bf00      	nop
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f7ff ff8e 	bl	800beec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bfd0:	bf00      	nop
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe4:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7f9 fd2c 	bl	8005a44 <HAL_DMA_GetError>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d011      	beq.n	800c016 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f000 f82e 	bl	800c054 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bffe:	f043 0210 	orr.w	r2, r3, #16
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f7ff ff75 	bl	800bf00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800c016:	bf00      	nop
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2201      	movs	r2, #1
 800c040:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f7ff ff5b 	bl	800bf00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c04a:	bf00      	nop
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	695b      	ldr	r3, [r3, #20]
 800c062:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	699a      	ldr	r2, [r3, #24]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f042 0208 	orr.w	r2, r2, #8
 800c072:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	699a      	ldr	r2, [r3, #24]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f042 0210 	orr.w	r2, r2, #16
 800c082:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f022 0201 	bic.w	r2, r2, #1
 800c092:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	6919      	ldr	r1, [r3, #16]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	4b3c      	ldr	r3, [pc, #240]	; (800c190 <SPI_CloseTransfer+0x13c>)
 800c0a0:	400b      	ands	r3, r1
 800c0a2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	689a      	ldr	r2, [r3, #8]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c0b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b04      	cmp	r3, #4
 800c0be:	d014      	beq.n	800c0ea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f003 0320 	and.w	r3, r3, #32
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00f      	beq.n	800c0ea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	699a      	ldr	r2, [r3, #24]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f042 0220 	orr.w	r2, r2, #32
 800c0e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b03      	cmp	r3, #3
 800c0f4:	d014      	beq.n	800c120 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00f      	beq.n	800c120 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c106:	f043 0204 	orr.w	r2, r3, #4
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	699a      	ldr	r2, [r3, #24]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c11e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00f      	beq.n	800c14a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c130:	f043 0201 	orr.w	r2, r3, #1
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	699a      	ldr	r2, [r3, #24]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c148:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00f      	beq.n	800c174 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c15a:	f043 0208 	orr.w	r2, r3, #8
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	699a      	ldr	r2, [r3, #24]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c172:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c184:	bf00      	nop
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr
 800c190:	fffffc90 	.word	0xfffffc90

0800c194 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	603b      	str	r3, [r7, #0]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c1a4:	e010      	b.n	800c1c8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1a6:	f7f7 f81b 	bl	80031e0 <HAL_GetTick>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d803      	bhi.n	800c1be <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1bc:	d102      	bne.n	800c1c4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e00f      	b.n	800c1e8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	695a      	ldr	r2, [r3, #20]
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	bf0c      	ite	eq
 800c1d8:	2301      	moveq	r3, #1
 800c1da:	2300      	movne	r3, #0
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	461a      	mov	r2, r3
 800c1e0:	79fb      	ldrb	r3, [r7, #7]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d0df      	beq.n	800c1a6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1fc:	095b      	lsrs	r3, r3, #5
 800c1fe:	3301      	adds	r3, #1
 800c200:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	3301      	adds	r3, #1
 800c208:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	3307      	adds	r3, #7
 800c20e:	08db      	lsrs	r3, r3, #3
 800c210:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	fb02 f303 	mul.w	r3, r2, r3
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	e049      	b.n	800c2cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b00      	cmp	r3, #0
 800c242:	d106      	bne.n	800c252 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7f6 fbbf 	bl	80029d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2202      	movs	r2, #2
 800c256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	3304      	adds	r3, #4
 800c262:	4619      	mov	r1, r3
 800c264:	4610      	mov	r0, r2
 800c266:	f000 fda1 	bl	800cdac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2201      	movs	r2, #1
 800c286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2201      	movs	r2, #1
 800c29e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2ca:	2300      	movs	r3, #0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d001      	beq.n	800c2ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e054      	b.n	800c396 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2202      	movs	r2, #2
 800c2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68da      	ldr	r2, [r3, #12]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f042 0201 	orr.w	r2, r2, #1
 800c302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a26      	ldr	r2, [pc, #152]	; (800c3a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d022      	beq.n	800c354 <HAL_TIM_Base_Start_IT+0x80>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c316:	d01d      	beq.n	800c354 <HAL_TIM_Base_Start_IT+0x80>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a22      	ldr	r2, [pc, #136]	; (800c3a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d018      	beq.n	800c354 <HAL_TIM_Base_Start_IT+0x80>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a21      	ldr	r2, [pc, #132]	; (800c3ac <HAL_TIM_Base_Start_IT+0xd8>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d013      	beq.n	800c354 <HAL_TIM_Base_Start_IT+0x80>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a1f      	ldr	r2, [pc, #124]	; (800c3b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d00e      	beq.n	800c354 <HAL_TIM_Base_Start_IT+0x80>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a1e      	ldr	r2, [pc, #120]	; (800c3b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d009      	beq.n	800c354 <HAL_TIM_Base_Start_IT+0x80>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a1c      	ldr	r2, [pc, #112]	; (800c3b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d004      	beq.n	800c354 <HAL_TIM_Base_Start_IT+0x80>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a1b      	ldr	r2, [pc, #108]	; (800c3bc <HAL_TIM_Base_Start_IT+0xe8>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d115      	bne.n	800c380 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	689a      	ldr	r2, [r3, #8]
 800c35a:	4b19      	ldr	r3, [pc, #100]	; (800c3c0 <HAL_TIM_Base_Start_IT+0xec>)
 800c35c:	4013      	ands	r3, r2
 800c35e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2b06      	cmp	r3, #6
 800c364:	d015      	beq.n	800c392 <HAL_TIM_Base_Start_IT+0xbe>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c36c:	d011      	beq.n	800c392 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f042 0201 	orr.w	r2, r2, #1
 800c37c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c37e:	e008      	b.n	800c392 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f042 0201 	orr.w	r2, r2, #1
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	e000      	b.n	800c394 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c392:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	40010000 	.word	0x40010000
 800c3a8:	40000400 	.word	0x40000400
 800c3ac:	40000800 	.word	0x40000800
 800c3b0:	40000c00 	.word	0x40000c00
 800c3b4:	40010400 	.word	0x40010400
 800c3b8:	40001800 	.word	0x40001800
 800c3bc:	40014000 	.word	0x40014000
 800c3c0:	00010007 	.word	0x00010007

0800c3c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d101      	bne.n	800c3d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e049      	b.n	800c46a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 f841 	bl	800c472 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3304      	adds	r3, #4
 800c400:	4619      	mov	r1, r3
 800c402:	4610      	mov	r0, r2
 800c404:	f000 fcd2 	bl	800cdac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c472:	b480      	push	{r7}
 800c474:	b083      	sub	sp, #12
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c47a:	bf00      	nop
 800c47c:	370c      	adds	r7, #12
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b082      	sub	sp, #8
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d101      	bne.n	800c498 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e049      	b.n	800c52c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d106      	bne.n	800c4b2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f841 	bl	800c534 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2202      	movs	r2, #2
 800c4b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	f000 fc71 	bl	800cdac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2201      	movs	r2, #1
 800c506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2201      	movs	r2, #1
 800c516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	f003 0302 	and.w	r3, r3, #2
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d122      	bne.n	800c5a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	f003 0302 	and.w	r3, r3, #2
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d11b      	bne.n	800c5a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f06f 0202 	mvn.w	r2, #2
 800c574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	f003 0303 	and.w	r3, r3, #3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fbf0 	bl	800cd70 <HAL_TIM_IC_CaptureCallback>
 800c590:	e005      	b.n	800c59e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 fbe2 	bl	800cd5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fbf3 	bl	800cd84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	f003 0304 	and.w	r3, r3, #4
 800c5ae:	2b04      	cmp	r3, #4
 800c5b0:	d122      	bne.n	800c5f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	f003 0304 	and.w	r3, r3, #4
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d11b      	bne.n	800c5f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f06f 0204 	mvn.w	r2, #4
 800c5c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2202      	movs	r2, #2
 800c5ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d003      	beq.n	800c5e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fbc6 	bl	800cd70 <HAL_TIM_IC_CaptureCallback>
 800c5e4:	e005      	b.n	800c5f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fbb8 	bl	800cd5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fbc9 	bl	800cd84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	f003 0308 	and.w	r3, r3, #8
 800c602:	2b08      	cmp	r3, #8
 800c604:	d122      	bne.n	800c64c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	f003 0308 	and.w	r3, r3, #8
 800c610:	2b08      	cmp	r3, #8
 800c612:	d11b      	bne.n	800c64c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f06f 0208 	mvn.w	r2, #8
 800c61c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2204      	movs	r2, #4
 800c622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	69db      	ldr	r3, [r3, #28]
 800c62a:	f003 0303 	and.w	r3, r3, #3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fb9c 	bl	800cd70 <HAL_TIM_IC_CaptureCallback>
 800c638:	e005      	b.n	800c646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fb8e 	bl	800cd5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fb9f 	bl	800cd84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	f003 0310 	and.w	r3, r3, #16
 800c656:	2b10      	cmp	r3, #16
 800c658:	d122      	bne.n	800c6a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	f003 0310 	and.w	r3, r3, #16
 800c664:	2b10      	cmp	r3, #16
 800c666:	d11b      	bne.n	800c6a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f06f 0210 	mvn.w	r2, #16
 800c670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2208      	movs	r2, #8
 800c676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c682:	2b00      	cmp	r3, #0
 800c684:	d003      	beq.n	800c68e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fb72 	bl	800cd70 <HAL_TIM_IC_CaptureCallback>
 800c68c:	e005      	b.n	800c69a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fb64 	bl	800cd5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 fb75 	bl	800cd84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	f003 0301 	and.w	r3, r3, #1
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d10e      	bne.n	800c6cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	f003 0301 	and.w	r3, r3, #1
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d107      	bne.n	800c6cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f06f 0201 	mvn.w	r2, #1
 800c6c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7f5 f934 	bl	8001934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6d6:	2b80      	cmp	r3, #128	; 0x80
 800c6d8:	d10e      	bne.n	800c6f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6e4:	2b80      	cmp	r3, #128	; 0x80
 800c6e6:	d107      	bne.n	800c6f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c6f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f001 fab4 	bl	800dc60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c706:	d10e      	bne.n	800c726 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c712:	2b80      	cmp	r3, #128	; 0x80
 800c714:	d107      	bne.n	800c726 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c71e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f001 faa7 	bl	800dc74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c730:	2b40      	cmp	r3, #64	; 0x40
 800c732:	d10e      	bne.n	800c752 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c73e:	2b40      	cmp	r3, #64	; 0x40
 800c740:	d107      	bne.n	800c752 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c74a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 fb23 	bl	800cd98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	f003 0320 	and.w	r3, r3, #32
 800c75c:	2b20      	cmp	r3, #32
 800c75e:	d10e      	bne.n	800c77e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f003 0320 	and.w	r3, r3, #32
 800c76a:	2b20      	cmp	r3, #32
 800c76c:	d107      	bne.n	800c77e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f06f 0220 	mvn.w	r2, #32
 800c776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f001 fa67 	bl	800dc4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c77e:	bf00      	nop
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b086      	sub	sp, #24
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	60f8      	str	r0, [r7, #12]
 800c78e:	60b9      	str	r1, [r7, #8]
 800c790:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c792:	2300      	movs	r3, #0
 800c794:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d101      	bne.n	800c7a4 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	e088      	b.n	800c8b6 <HAL_TIM_IC_ConfigChannel+0x130>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d11b      	bne.n	800c7ea <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6818      	ldr	r0, [r3, #0]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	6819      	ldr	r1, [r3, #0]
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	f000 ff4d 	bl	800d660 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	699a      	ldr	r2, [r3, #24]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f022 020c 	bic.w	r2, r2, #12
 800c7d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6999      	ldr	r1, [r3, #24]
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	689a      	ldr	r2, [r3, #8]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	430a      	orrs	r2, r1
 800c7e6:	619a      	str	r2, [r3, #24]
 800c7e8:	e060      	b.n	800c8ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2b04      	cmp	r3, #4
 800c7ee:	d11c      	bne.n	800c82a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	6818      	ldr	r0, [r3, #0]
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	6819      	ldr	r1, [r3, #0]
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	685a      	ldr	r2, [r3, #4]
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	f000 ffd1 	bl	800d7a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	699a      	ldr	r2, [r3, #24]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c812:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6999      	ldr	r1, [r3, #24]
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	021a      	lsls	r2, r3, #8
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	430a      	orrs	r2, r1
 800c826:	619a      	str	r2, [r3, #24]
 800c828:	e040      	b.n	800c8ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b08      	cmp	r3, #8
 800c82e:	d11b      	bne.n	800c868 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6818      	ldr	r0, [r3, #0]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	6819      	ldr	r1, [r3, #0]
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f001 f81e 	bl	800d880 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	69da      	ldr	r2, [r3, #28]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f022 020c 	bic.w	r2, r2, #12
 800c852:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	69d9      	ldr	r1, [r3, #28]
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	689a      	ldr	r2, [r3, #8]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	430a      	orrs	r2, r1
 800c864:	61da      	str	r2, [r3, #28]
 800c866:	e021      	b.n	800c8ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b0c      	cmp	r3, #12
 800c86c:	d11c      	bne.n	800c8a8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6818      	ldr	r0, [r3, #0]
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	6819      	ldr	r1, [r3, #0]
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	f001 f83b 	bl	800d8f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	69da      	ldr	r2, [r3, #28]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c890:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	69d9      	ldr	r1, [r3, #28]
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	021a      	lsls	r2, r3, #8
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	61da      	str	r2, [r3, #28]
 800c8a6:	e001      	b.n	800c8ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3718      	adds	r7, #24
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
	...

0800c8c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d101      	bne.n	800c8de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c8da:	2302      	movs	r3, #2
 800c8dc:	e0ff      	b.n	800cade <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b14      	cmp	r3, #20
 800c8ea:	f200 80f0 	bhi.w	800cace <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c8ee:	a201      	add	r2, pc, #4	; (adr r2, 800c8f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f4:	0800c949 	.word	0x0800c949
 800c8f8:	0800cacf 	.word	0x0800cacf
 800c8fc:	0800cacf 	.word	0x0800cacf
 800c900:	0800cacf 	.word	0x0800cacf
 800c904:	0800c989 	.word	0x0800c989
 800c908:	0800cacf 	.word	0x0800cacf
 800c90c:	0800cacf 	.word	0x0800cacf
 800c910:	0800cacf 	.word	0x0800cacf
 800c914:	0800c9cb 	.word	0x0800c9cb
 800c918:	0800cacf 	.word	0x0800cacf
 800c91c:	0800cacf 	.word	0x0800cacf
 800c920:	0800cacf 	.word	0x0800cacf
 800c924:	0800ca0b 	.word	0x0800ca0b
 800c928:	0800cacf 	.word	0x0800cacf
 800c92c:	0800cacf 	.word	0x0800cacf
 800c930:	0800cacf 	.word	0x0800cacf
 800c934:	0800ca4d 	.word	0x0800ca4d
 800c938:	0800cacf 	.word	0x0800cacf
 800c93c:	0800cacf 	.word	0x0800cacf
 800c940:	0800cacf 	.word	0x0800cacf
 800c944:	0800ca8d 	.word	0x0800ca8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68b9      	ldr	r1, [r7, #8]
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 fac6 	bl	800cee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	699a      	ldr	r2, [r3, #24]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f042 0208 	orr.w	r2, r2, #8
 800c962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	699a      	ldr	r2, [r3, #24]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f022 0204 	bic.w	r2, r2, #4
 800c972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	6999      	ldr	r1, [r3, #24]
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	691a      	ldr	r2, [r3, #16]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	430a      	orrs	r2, r1
 800c984:	619a      	str	r2, [r3, #24]
      break;
 800c986:	e0a5      	b.n	800cad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68b9      	ldr	r1, [r7, #8]
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 fb36 	bl	800d000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	699a      	ldr	r2, [r3, #24]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	699a      	ldr	r2, [r3, #24]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6999      	ldr	r1, [r3, #24]
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	691b      	ldr	r3, [r3, #16]
 800c9be:	021a      	lsls	r2, r3, #8
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	430a      	orrs	r2, r1
 800c9c6:	619a      	str	r2, [r3, #24]
      break;
 800c9c8:	e084      	b.n	800cad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68b9      	ldr	r1, [r7, #8]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 fb9f 	bl	800d114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	69da      	ldr	r2, [r3, #28]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f042 0208 	orr.w	r2, r2, #8
 800c9e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	69da      	ldr	r2, [r3, #28]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f022 0204 	bic.w	r2, r2, #4
 800c9f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	69d9      	ldr	r1, [r3, #28]
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	691a      	ldr	r2, [r3, #16]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	430a      	orrs	r2, r1
 800ca06:	61da      	str	r2, [r3, #28]
      break;
 800ca08:	e064      	b.n	800cad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68b9      	ldr	r1, [r7, #8]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 fc07 	bl	800d224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	69da      	ldr	r2, [r3, #28]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	69da      	ldr	r2, [r3, #28]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	69d9      	ldr	r1, [r3, #28]
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	021a      	lsls	r2, r3, #8
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	430a      	orrs	r2, r1
 800ca48:	61da      	str	r2, [r3, #28]
      break;
 800ca4a:	e043      	b.n	800cad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68b9      	ldr	r1, [r7, #8]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 fc50 	bl	800d2f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f042 0208 	orr.w	r2, r2, #8
 800ca66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f022 0204 	bic.w	r2, r2, #4
 800ca76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	691a      	ldr	r2, [r3, #16]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	430a      	orrs	r2, r1
 800ca88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca8a:	e023      	b.n	800cad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68b9      	ldr	r1, [r7, #8]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 fc94 	bl	800d3c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800caa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cab6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	691b      	ldr	r3, [r3, #16]
 800cac2:	021a      	lsls	r2, r3, #8
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	430a      	orrs	r2, r1
 800caca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cacc:	e002      	b.n	800cad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	75fb      	strb	r3, [r7, #23]
      break;
 800cad2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop

0800cae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d101      	bne.n	800cb04 <HAL_TIM_ConfigClockSource+0x1c>
 800cb00:	2302      	movs	r3, #2
 800cb02:	e0dc      	b.n	800ccbe <HAL_TIM_ConfigClockSource+0x1d6>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2202      	movs	r2, #2
 800cb10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	4b6a      	ldr	r3, [pc, #424]	; (800ccc8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cb20:	4013      	ands	r3, r2
 800cb22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a64      	ldr	r2, [pc, #400]	; (800cccc <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	f000 80a9 	beq.w	800cc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb40:	4a62      	ldr	r2, [pc, #392]	; (800cccc <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	f200 80ae 	bhi.w	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb48:	4a61      	ldr	r2, [pc, #388]	; (800ccd0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	f000 80a1 	beq.w	800cc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb50:	4a5f      	ldr	r2, [pc, #380]	; (800ccd0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	f200 80a6 	bhi.w	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb58:	4a5e      	ldr	r2, [pc, #376]	; (800ccd4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	f000 8099 	beq.w	800cc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb60:	4a5c      	ldr	r2, [pc, #368]	; (800ccd4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	f200 809e 	bhi.w	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cb6c:	f000 8091 	beq.w	800cc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cb74:	f200 8096 	bhi.w	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb7c:	f000 8089 	beq.w	800cc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb84:	f200 808e 	bhi.w	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb8c:	d03e      	beq.n	800cc0c <HAL_TIM_ConfigClockSource+0x124>
 800cb8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb92:	f200 8087 	bhi.w	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb9a:	f000 8086 	beq.w	800ccaa <HAL_TIM_ConfigClockSource+0x1c2>
 800cb9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cba2:	d87f      	bhi.n	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cba4:	2b70      	cmp	r3, #112	; 0x70
 800cba6:	d01a      	beq.n	800cbde <HAL_TIM_ConfigClockSource+0xf6>
 800cba8:	2b70      	cmp	r3, #112	; 0x70
 800cbaa:	d87b      	bhi.n	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbac:	2b60      	cmp	r3, #96	; 0x60
 800cbae:	d050      	beq.n	800cc52 <HAL_TIM_ConfigClockSource+0x16a>
 800cbb0:	2b60      	cmp	r3, #96	; 0x60
 800cbb2:	d877      	bhi.n	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbb4:	2b50      	cmp	r3, #80	; 0x50
 800cbb6:	d03c      	beq.n	800cc32 <HAL_TIM_ConfigClockSource+0x14a>
 800cbb8:	2b50      	cmp	r3, #80	; 0x50
 800cbba:	d873      	bhi.n	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbbc:	2b40      	cmp	r3, #64	; 0x40
 800cbbe:	d058      	beq.n	800cc72 <HAL_TIM_ConfigClockSource+0x18a>
 800cbc0:	2b40      	cmp	r3, #64	; 0x40
 800cbc2:	d86f      	bhi.n	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbc4:	2b30      	cmp	r3, #48	; 0x30
 800cbc6:	d064      	beq.n	800cc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbc8:	2b30      	cmp	r3, #48	; 0x30
 800cbca:	d86b      	bhi.n	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbcc:	2b20      	cmp	r3, #32
 800cbce:	d060      	beq.n	800cc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbd0:	2b20      	cmp	r3, #32
 800cbd2:	d867      	bhi.n	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d05c      	beq.n	800cc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbd8:	2b10      	cmp	r3, #16
 800cbda:	d05a      	beq.n	800cc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbdc:	e062      	b.n	800cca4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6818      	ldr	r0, [r3, #0]
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	6899      	ldr	r1, [r3, #8]
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	685a      	ldr	r2, [r3, #4]
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	f000 fedf 	bl	800d9b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cc00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68ba      	ldr	r2, [r7, #8]
 800cc08:	609a      	str	r2, [r3, #8]
      break;
 800cc0a:	e04f      	b.n	800ccac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6818      	ldr	r0, [r3, #0]
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	6899      	ldr	r1, [r3, #8]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	f000 fec8 	bl	800d9b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	689a      	ldr	r2, [r3, #8]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc2e:	609a      	str	r2, [r3, #8]
      break;
 800cc30:	e03c      	b.n	800ccac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6818      	ldr	r0, [r3, #0]
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	6859      	ldr	r1, [r3, #4]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	68db      	ldr	r3, [r3, #12]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	f000 fd82 	bl	800d748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2150      	movs	r1, #80	; 0x50
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 fe92 	bl	800d974 <TIM_ITRx_SetConfig>
      break;
 800cc50:	e02c      	b.n	800ccac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6818      	ldr	r0, [r3, #0]
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	6859      	ldr	r1, [r3, #4]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	461a      	mov	r2, r3
 800cc60:	f000 fdde 	bl	800d820 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2160      	movs	r1, #96	; 0x60
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f000 fe82 	bl	800d974 <TIM_ITRx_SetConfig>
      break;
 800cc70:	e01c      	b.n	800ccac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6818      	ldr	r0, [r3, #0]
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	6859      	ldr	r1, [r3, #4]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	f000 fd62 	bl	800d748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2140      	movs	r1, #64	; 0x40
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f000 fe72 	bl	800d974 <TIM_ITRx_SetConfig>
      break;
 800cc90:	e00c      	b.n	800ccac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	4610      	mov	r0, r2
 800cc9e:	f000 fe69 	bl	800d974 <TIM_ITRx_SetConfig>
      break;
 800cca2:	e003      	b.n	800ccac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	73fb      	strb	r3, [r7, #15]
      break;
 800cca8:	e000      	b.n	800ccac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ccaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	ffceff88 	.word	0xffceff88
 800cccc:	00100040 	.word	0x00100040
 800ccd0:	00100030 	.word	0x00100030
 800ccd4:	00100020 	.word	0x00100020

0800ccd8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d101      	bne.n	800ccf0 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ccec:	2302      	movs	r3, #2
 800ccee:	e031      	b.n	800cd54 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800cd00:	6839      	ldr	r1, [r7, #0]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 fbc2 	bl	800d48c <TIM_SlaveTimer_SetConfig>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d009      	beq.n	800cd22 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2201      	movs	r2, #1
 800cd12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e018      	b.n	800cd54 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68da      	ldr	r2, [r3, #12]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd30:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68da      	ldr	r2, [r3, #12]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cd40:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2201      	movs	r2, #1
 800cd46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd52:	2300      	movs	r3, #0
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd64:	bf00      	nop
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd78:	bf00      	nop
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd8c:	bf00      	nop
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cda0:	bf00      	nop
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	4a40      	ldr	r2, [pc, #256]	; (800cec0 <TIM_Base_SetConfig+0x114>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d013      	beq.n	800cdec <TIM_Base_SetConfig+0x40>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdca:	d00f      	beq.n	800cdec <TIM_Base_SetConfig+0x40>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4a3d      	ldr	r2, [pc, #244]	; (800cec4 <TIM_Base_SetConfig+0x118>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d00b      	beq.n	800cdec <TIM_Base_SetConfig+0x40>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	4a3c      	ldr	r2, [pc, #240]	; (800cec8 <TIM_Base_SetConfig+0x11c>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d007      	beq.n	800cdec <TIM_Base_SetConfig+0x40>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4a3b      	ldr	r2, [pc, #236]	; (800cecc <TIM_Base_SetConfig+0x120>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d003      	beq.n	800cdec <TIM_Base_SetConfig+0x40>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	4a3a      	ldr	r2, [pc, #232]	; (800ced0 <TIM_Base_SetConfig+0x124>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d108      	bne.n	800cdfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4a2f      	ldr	r2, [pc, #188]	; (800cec0 <TIM_Base_SetConfig+0x114>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d01f      	beq.n	800ce46 <TIM_Base_SetConfig+0x9a>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce0c:	d01b      	beq.n	800ce46 <TIM_Base_SetConfig+0x9a>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4a2c      	ldr	r2, [pc, #176]	; (800cec4 <TIM_Base_SetConfig+0x118>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d017      	beq.n	800ce46 <TIM_Base_SetConfig+0x9a>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4a2b      	ldr	r2, [pc, #172]	; (800cec8 <TIM_Base_SetConfig+0x11c>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d013      	beq.n	800ce46 <TIM_Base_SetConfig+0x9a>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4a2a      	ldr	r2, [pc, #168]	; (800cecc <TIM_Base_SetConfig+0x120>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d00f      	beq.n	800ce46 <TIM_Base_SetConfig+0x9a>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4a29      	ldr	r2, [pc, #164]	; (800ced0 <TIM_Base_SetConfig+0x124>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d00b      	beq.n	800ce46 <TIM_Base_SetConfig+0x9a>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4a28      	ldr	r2, [pc, #160]	; (800ced4 <TIM_Base_SetConfig+0x128>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d007      	beq.n	800ce46 <TIM_Base_SetConfig+0x9a>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4a27      	ldr	r2, [pc, #156]	; (800ced8 <TIM_Base_SetConfig+0x12c>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d003      	beq.n	800ce46 <TIM_Base_SetConfig+0x9a>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a26      	ldr	r2, [pc, #152]	; (800cedc <TIM_Base_SetConfig+0x130>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d108      	bne.n	800ce58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	689a      	ldr	r2, [r3, #8]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a10      	ldr	r2, [pc, #64]	; (800cec0 <TIM_Base_SetConfig+0x114>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d00f      	beq.n	800cea4 <TIM_Base_SetConfig+0xf8>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4a12      	ldr	r2, [pc, #72]	; (800ced0 <TIM_Base_SetConfig+0x124>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d00b      	beq.n	800cea4 <TIM_Base_SetConfig+0xf8>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4a11      	ldr	r2, [pc, #68]	; (800ced4 <TIM_Base_SetConfig+0x128>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d007      	beq.n	800cea4 <TIM_Base_SetConfig+0xf8>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4a10      	ldr	r2, [pc, #64]	; (800ced8 <TIM_Base_SetConfig+0x12c>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d003      	beq.n	800cea4 <TIM_Base_SetConfig+0xf8>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4a0f      	ldr	r2, [pc, #60]	; (800cedc <TIM_Base_SetConfig+0x130>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d103      	bne.n	800ceac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	691a      	ldr	r2, [r3, #16]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	615a      	str	r2, [r3, #20]
}
 800ceb2:	bf00      	nop
 800ceb4:	3714      	adds	r7, #20
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	40010000 	.word	0x40010000
 800cec4:	40000400 	.word	0x40000400
 800cec8:	40000800 	.word	0x40000800
 800cecc:	40000c00 	.word	0x40000c00
 800ced0:	40010400 	.word	0x40010400
 800ced4:	40014000 	.word	0x40014000
 800ced8:	40014400 	.word	0x40014400
 800cedc:	40014800 	.word	0x40014800

0800cee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b087      	sub	sp, #28
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a1b      	ldr	r3, [r3, #32]
 800ceee:	f023 0201 	bic.w	r2, r3, #1
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	699b      	ldr	r3, [r3, #24]
 800cf06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	4b37      	ldr	r3, [pc, #220]	; (800cfe8 <TIM_OC1_SetConfig+0x108>)
 800cf0c:	4013      	ands	r3, r2
 800cf0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f023 0303 	bic.w	r3, r3, #3
 800cf16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	68fa      	ldr	r2, [r7, #12]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	f023 0302 	bic.w	r3, r3, #2
 800cf28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	697a      	ldr	r2, [r7, #20]
 800cf30:	4313      	orrs	r3, r2
 800cf32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4a2d      	ldr	r2, [pc, #180]	; (800cfec <TIM_OC1_SetConfig+0x10c>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d00f      	beq.n	800cf5c <TIM_OC1_SetConfig+0x7c>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4a2c      	ldr	r2, [pc, #176]	; (800cff0 <TIM_OC1_SetConfig+0x110>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d00b      	beq.n	800cf5c <TIM_OC1_SetConfig+0x7c>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	4a2b      	ldr	r2, [pc, #172]	; (800cff4 <TIM_OC1_SetConfig+0x114>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d007      	beq.n	800cf5c <TIM_OC1_SetConfig+0x7c>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	4a2a      	ldr	r2, [pc, #168]	; (800cff8 <TIM_OC1_SetConfig+0x118>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d003      	beq.n	800cf5c <TIM_OC1_SetConfig+0x7c>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4a29      	ldr	r2, [pc, #164]	; (800cffc <TIM_OC1_SetConfig+0x11c>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d10c      	bne.n	800cf76 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	f023 0308 	bic.w	r3, r3, #8
 800cf62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	697a      	ldr	r2, [r7, #20]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f023 0304 	bic.w	r3, r3, #4
 800cf74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a1c      	ldr	r2, [pc, #112]	; (800cfec <TIM_OC1_SetConfig+0x10c>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d00f      	beq.n	800cf9e <TIM_OC1_SetConfig+0xbe>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4a1b      	ldr	r2, [pc, #108]	; (800cff0 <TIM_OC1_SetConfig+0x110>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d00b      	beq.n	800cf9e <TIM_OC1_SetConfig+0xbe>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a1a      	ldr	r2, [pc, #104]	; (800cff4 <TIM_OC1_SetConfig+0x114>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d007      	beq.n	800cf9e <TIM_OC1_SetConfig+0xbe>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4a19      	ldr	r2, [pc, #100]	; (800cff8 <TIM_OC1_SetConfig+0x118>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d003      	beq.n	800cf9e <TIM_OC1_SetConfig+0xbe>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4a18      	ldr	r2, [pc, #96]	; (800cffc <TIM_OC1_SetConfig+0x11c>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d111      	bne.n	800cfc2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cfa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cfac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	695b      	ldr	r3, [r3, #20]
 800cfb2:	693a      	ldr	r2, [r7, #16]
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	693a      	ldr	r2, [r7, #16]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	693a      	ldr	r2, [r7, #16]
 800cfc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	68fa      	ldr	r2, [r7, #12]
 800cfcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	685a      	ldr	r2, [r3, #4]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	621a      	str	r2, [r3, #32]
}
 800cfdc:	bf00      	nop
 800cfde:	371c      	adds	r7, #28
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr
 800cfe8:	fffeff8f 	.word	0xfffeff8f
 800cfec:	40010000 	.word	0x40010000
 800cff0:	40010400 	.word	0x40010400
 800cff4:	40014000 	.word	0x40014000
 800cff8:	40014400 	.word	0x40014400
 800cffc:	40014800 	.word	0x40014800

0800d000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d000:	b480      	push	{r7}
 800d002:	b087      	sub	sp, #28
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6a1b      	ldr	r3, [r3, #32]
 800d00e:	f023 0210 	bic.w	r2, r3, #16
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	4b34      	ldr	r3, [pc, #208]	; (800d0fc <TIM_OC2_SetConfig+0xfc>)
 800d02c:	4013      	ands	r3, r2
 800d02e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	021b      	lsls	r3, r3, #8
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	4313      	orrs	r3, r2
 800d042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f023 0320 	bic.w	r3, r3, #32
 800d04a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	011b      	lsls	r3, r3, #4
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	4313      	orrs	r3, r2
 800d056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a29      	ldr	r2, [pc, #164]	; (800d100 <TIM_OC2_SetConfig+0x100>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d003      	beq.n	800d068 <TIM_OC2_SetConfig+0x68>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a28      	ldr	r2, [pc, #160]	; (800d104 <TIM_OC2_SetConfig+0x104>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d10d      	bne.n	800d084 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d06e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	011b      	lsls	r3, r3, #4
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	4313      	orrs	r3, r2
 800d07a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4a1e      	ldr	r2, [pc, #120]	; (800d100 <TIM_OC2_SetConfig+0x100>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d00f      	beq.n	800d0ac <TIM_OC2_SetConfig+0xac>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a1d      	ldr	r2, [pc, #116]	; (800d104 <TIM_OC2_SetConfig+0x104>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d00b      	beq.n	800d0ac <TIM_OC2_SetConfig+0xac>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a1c      	ldr	r2, [pc, #112]	; (800d108 <TIM_OC2_SetConfig+0x108>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d007      	beq.n	800d0ac <TIM_OC2_SetConfig+0xac>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4a1b      	ldr	r2, [pc, #108]	; (800d10c <TIM_OC2_SetConfig+0x10c>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d003      	beq.n	800d0ac <TIM_OC2_SetConfig+0xac>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4a1a      	ldr	r2, [pc, #104]	; (800d110 <TIM_OC2_SetConfig+0x110>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d113      	bne.n	800d0d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d0b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	695b      	ldr	r3, [r3, #20]
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	693a      	ldr	r2, [r7, #16]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	699b      	ldr	r3, [r3, #24]
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	693a      	ldr	r2, [r7, #16]
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	693a      	ldr	r2, [r7, #16]
 800d0d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	685a      	ldr	r2, [r3, #4]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	621a      	str	r2, [r3, #32]
}
 800d0ee:	bf00      	nop
 800d0f0:	371c      	adds	r7, #28
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	feff8fff 	.word	0xfeff8fff
 800d100:	40010000 	.word	0x40010000
 800d104:	40010400 	.word	0x40010400
 800d108:	40014000 	.word	0x40014000
 800d10c:	40014400 	.word	0x40014400
 800d110:	40014800 	.word	0x40014800

0800d114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d114:	b480      	push	{r7}
 800d116:	b087      	sub	sp, #28
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a1b      	ldr	r3, [r3, #32]
 800d122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a1b      	ldr	r3, [r3, #32]
 800d12e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	69db      	ldr	r3, [r3, #28]
 800d13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	4b33      	ldr	r3, [pc, #204]	; (800d20c <TIM_OC3_SetConfig+0xf8>)
 800d140:	4013      	ands	r3, r2
 800d142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f023 0303 	bic.w	r3, r3, #3
 800d14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4313      	orrs	r3, r2
 800d154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d15c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	021b      	lsls	r3, r3, #8
 800d164:	697a      	ldr	r2, [r7, #20]
 800d166:	4313      	orrs	r3, r2
 800d168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4a28      	ldr	r2, [pc, #160]	; (800d210 <TIM_OC3_SetConfig+0xfc>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d003      	beq.n	800d17a <TIM_OC3_SetConfig+0x66>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4a27      	ldr	r2, [pc, #156]	; (800d214 <TIM_OC3_SetConfig+0x100>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d10d      	bne.n	800d196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	021b      	lsls	r3, r3, #8
 800d188:	697a      	ldr	r2, [r7, #20]
 800d18a:	4313      	orrs	r3, r2
 800d18c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a1d      	ldr	r2, [pc, #116]	; (800d210 <TIM_OC3_SetConfig+0xfc>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d00f      	beq.n	800d1be <TIM_OC3_SetConfig+0xaa>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4a1c      	ldr	r2, [pc, #112]	; (800d214 <TIM_OC3_SetConfig+0x100>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d00b      	beq.n	800d1be <TIM_OC3_SetConfig+0xaa>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a1b      	ldr	r2, [pc, #108]	; (800d218 <TIM_OC3_SetConfig+0x104>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d007      	beq.n	800d1be <TIM_OC3_SetConfig+0xaa>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a1a      	ldr	r2, [pc, #104]	; (800d21c <TIM_OC3_SetConfig+0x108>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d003      	beq.n	800d1be <TIM_OC3_SetConfig+0xaa>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a19      	ldr	r2, [pc, #100]	; (800d220 <TIM_OC3_SetConfig+0x10c>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d113      	bne.n	800d1e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	695b      	ldr	r3, [r3, #20]
 800d1d2:	011b      	lsls	r3, r3, #4
 800d1d4:	693a      	ldr	r2, [r7, #16]
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	011b      	lsls	r3, r3, #4
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	693a      	ldr	r2, [r7, #16]
 800d1ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	68fa      	ldr	r2, [r7, #12]
 800d1f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	685a      	ldr	r2, [r3, #4]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	697a      	ldr	r2, [r7, #20]
 800d1fe:	621a      	str	r2, [r3, #32]
}
 800d200:	bf00      	nop
 800d202:	371c      	adds	r7, #28
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr
 800d20c:	fffeff8f 	.word	0xfffeff8f
 800d210:	40010000 	.word	0x40010000
 800d214:	40010400 	.word	0x40010400
 800d218:	40014000 	.word	0x40014000
 800d21c:	40014400 	.word	0x40014400
 800d220:	40014800 	.word	0x40014800

0800d224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d224:	b480      	push	{r7}
 800d226:	b087      	sub	sp, #28
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6a1b      	ldr	r3, [r3, #32]
 800d23e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	69db      	ldr	r3, [r3, #28]
 800d24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	4b24      	ldr	r3, [pc, #144]	; (800d2e0 <TIM_OC4_SetConfig+0xbc>)
 800d250:	4013      	ands	r3, r2
 800d252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d25a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	021b      	lsls	r3, r3, #8
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	4313      	orrs	r3, r2
 800d266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d26e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	031b      	lsls	r3, r3, #12
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	4313      	orrs	r3, r2
 800d27a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4a19      	ldr	r2, [pc, #100]	; (800d2e4 <TIM_OC4_SetConfig+0xc0>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d00f      	beq.n	800d2a4 <TIM_OC4_SetConfig+0x80>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a18      	ldr	r2, [pc, #96]	; (800d2e8 <TIM_OC4_SetConfig+0xc4>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d00b      	beq.n	800d2a4 <TIM_OC4_SetConfig+0x80>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a17      	ldr	r2, [pc, #92]	; (800d2ec <TIM_OC4_SetConfig+0xc8>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d007      	beq.n	800d2a4 <TIM_OC4_SetConfig+0x80>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4a16      	ldr	r2, [pc, #88]	; (800d2f0 <TIM_OC4_SetConfig+0xcc>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d003      	beq.n	800d2a4 <TIM_OC4_SetConfig+0x80>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4a15      	ldr	r2, [pc, #84]	; (800d2f4 <TIM_OC4_SetConfig+0xd0>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d109      	bne.n	800d2b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d2aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	695b      	ldr	r3, [r3, #20]
 800d2b0:	019b      	lsls	r3, r3, #6
 800d2b2:	697a      	ldr	r2, [r7, #20]
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	697a      	ldr	r2, [r7, #20]
 800d2bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	621a      	str	r2, [r3, #32]
}
 800d2d2:	bf00      	nop
 800d2d4:	371c      	adds	r7, #28
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	feff8fff 	.word	0xfeff8fff
 800d2e4:	40010000 	.word	0x40010000
 800d2e8:	40010400 	.word	0x40010400
 800d2ec:	40014000 	.word	0x40014000
 800d2f0:	40014400 	.word	0x40014400
 800d2f4:	40014800 	.word	0x40014800

0800d2f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b087      	sub	sp, #28
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	4b21      	ldr	r3, [pc, #132]	; (800d3a8 <TIM_OC5_SetConfig+0xb0>)
 800d324:	4013      	ands	r3, r2
 800d326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	4313      	orrs	r3, r2
 800d330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d338:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	041b      	lsls	r3, r3, #16
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	4313      	orrs	r3, r2
 800d344:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4a18      	ldr	r2, [pc, #96]	; (800d3ac <TIM_OC5_SetConfig+0xb4>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d00f      	beq.n	800d36e <TIM_OC5_SetConfig+0x76>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4a17      	ldr	r2, [pc, #92]	; (800d3b0 <TIM_OC5_SetConfig+0xb8>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d00b      	beq.n	800d36e <TIM_OC5_SetConfig+0x76>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4a16      	ldr	r2, [pc, #88]	; (800d3b4 <TIM_OC5_SetConfig+0xbc>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d007      	beq.n	800d36e <TIM_OC5_SetConfig+0x76>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4a15      	ldr	r2, [pc, #84]	; (800d3b8 <TIM_OC5_SetConfig+0xc0>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d003      	beq.n	800d36e <TIM_OC5_SetConfig+0x76>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	4a14      	ldr	r2, [pc, #80]	; (800d3bc <TIM_OC5_SetConfig+0xc4>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d109      	bne.n	800d382 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d374:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	695b      	ldr	r3, [r3, #20]
 800d37a:	021b      	lsls	r3, r3, #8
 800d37c:	697a      	ldr	r2, [r7, #20]
 800d37e:	4313      	orrs	r3, r2
 800d380:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	697a      	ldr	r2, [r7, #20]
 800d386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	685a      	ldr	r2, [r3, #4]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	693a      	ldr	r2, [r7, #16]
 800d39a:	621a      	str	r2, [r3, #32]
}
 800d39c:	bf00      	nop
 800d39e:	371c      	adds	r7, #28
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr
 800d3a8:	fffeff8f 	.word	0xfffeff8f
 800d3ac:	40010000 	.word	0x40010000
 800d3b0:	40010400 	.word	0x40010400
 800d3b4:	40014000 	.word	0x40014000
 800d3b8:	40014400 	.word	0x40014400
 800d3bc:	40014800 	.word	0x40014800

0800d3c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b087      	sub	sp, #28
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a1b      	ldr	r3, [r3, #32]
 800d3ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6a1b      	ldr	r3, [r3, #32]
 800d3da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	4b22      	ldr	r3, [pc, #136]	; (800d474 <TIM_OC6_SetConfig+0xb4>)
 800d3ec:	4013      	ands	r3, r2
 800d3ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	021b      	lsls	r3, r3, #8
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	051b      	lsls	r3, r3, #20
 800d40a:	693a      	ldr	r2, [r7, #16]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4a19      	ldr	r2, [pc, #100]	; (800d478 <TIM_OC6_SetConfig+0xb8>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d00f      	beq.n	800d438 <TIM_OC6_SetConfig+0x78>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4a18      	ldr	r2, [pc, #96]	; (800d47c <TIM_OC6_SetConfig+0xbc>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d00b      	beq.n	800d438 <TIM_OC6_SetConfig+0x78>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	4a17      	ldr	r2, [pc, #92]	; (800d480 <TIM_OC6_SetConfig+0xc0>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d007      	beq.n	800d438 <TIM_OC6_SetConfig+0x78>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	4a16      	ldr	r2, [pc, #88]	; (800d484 <TIM_OC6_SetConfig+0xc4>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d003      	beq.n	800d438 <TIM_OC6_SetConfig+0x78>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	4a15      	ldr	r2, [pc, #84]	; (800d488 <TIM_OC6_SetConfig+0xc8>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d109      	bne.n	800d44c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d43e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	695b      	ldr	r3, [r3, #20]
 800d444:	029b      	lsls	r3, r3, #10
 800d446:	697a      	ldr	r2, [r7, #20]
 800d448:	4313      	orrs	r3, r2
 800d44a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	697a      	ldr	r2, [r7, #20]
 800d450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	685a      	ldr	r2, [r3, #4]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	693a      	ldr	r2, [r7, #16]
 800d464:	621a      	str	r2, [r3, #32]
}
 800d466:	bf00      	nop
 800d468:	371c      	adds	r7, #28
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	feff8fff 	.word	0xfeff8fff
 800d478:	40010000 	.word	0x40010000
 800d47c:	40010400 	.word	0x40010400
 800d480:	40014000 	.word	0x40014000
 800d484:	40014400 	.word	0x40014400
 800d488:	40014800 	.word	0x40014800

0800d48c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b086      	sub	sp, #24
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d496:	2300      	movs	r3, #0
 800d498:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	4b65      	ldr	r3, [pc, #404]	; (800d63c <TIM_SlaveTimer_SetConfig+0x1b0>)
 800d4a6:	4013      	ands	r3, r2
 800d4a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	4b62      	ldr	r3, [pc, #392]	; (800d640 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	693a      	ldr	r2, [r7, #16]
 800d4cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	4a5c      	ldr	r2, [pc, #368]	; (800d644 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	f000 80ab 	beq.w	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d4da:	4a5a      	ldr	r2, [pc, #360]	; (800d644 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	f200 80a4 	bhi.w	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d4e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d4e6:	f000 80a3 	beq.w	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d4ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d4ee:	f200 809c 	bhi.w	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d4f2:	4a55      	ldr	r2, [pc, #340]	; (800d648 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	f000 809b 	beq.w	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d4fa:	4a53      	ldr	r2, [pc, #332]	; (800d648 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	f200 8094 	bhi.w	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d502:	4a52      	ldr	r2, [pc, #328]	; (800d64c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d504:	4293      	cmp	r3, r2
 800d506:	f000 8093 	beq.w	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d50a:	4a50      	ldr	r2, [pc, #320]	; (800d64c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	f200 808c 	bhi.w	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d512:	4a4f      	ldr	r2, [pc, #316]	; (800d650 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d514:	4293      	cmp	r3, r2
 800d516:	f000 808b 	beq.w	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d51a:	4a4d      	ldr	r2, [pc, #308]	; (800d650 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	f200 8084 	bhi.w	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d522:	4a4c      	ldr	r2, [pc, #304]	; (800d654 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d524:	4293      	cmp	r3, r2
 800d526:	f000 8083 	beq.w	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d52a:	4a4a      	ldr	r2, [pc, #296]	; (800d654 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d87c      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d530:	4a49      	ldr	r2, [pc, #292]	; (800d658 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d07c      	beq.n	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d536:	4a48      	ldr	r2, [pc, #288]	; (800d658 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d876      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d53c:	4a47      	ldr	r2, [pc, #284]	; (800d65c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d076      	beq.n	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d542:	4a46      	ldr	r2, [pc, #280]	; (800d65c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d870      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d548:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d54c:	d070      	beq.n	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d54e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d552:	d86a      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d558:	d06a      	beq.n	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d55a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d55e:	d864      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d560:	2b70      	cmp	r3, #112	; 0x70
 800d562:	d01a      	beq.n	800d59a <TIM_SlaveTimer_SetConfig+0x10e>
 800d564:	2b70      	cmp	r3, #112	; 0x70
 800d566:	d860      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d568:	2b60      	cmp	r3, #96	; 0x60
 800d56a:	d054      	beq.n	800d616 <TIM_SlaveTimer_SetConfig+0x18a>
 800d56c:	2b60      	cmp	r3, #96	; 0x60
 800d56e:	d85c      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d570:	2b50      	cmp	r3, #80	; 0x50
 800d572:	d046      	beq.n	800d602 <TIM_SlaveTimer_SetConfig+0x176>
 800d574:	2b50      	cmp	r3, #80	; 0x50
 800d576:	d858      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d578:	2b40      	cmp	r3, #64	; 0x40
 800d57a:	d019      	beq.n	800d5b0 <TIM_SlaveTimer_SetConfig+0x124>
 800d57c:	2b40      	cmp	r3, #64	; 0x40
 800d57e:	d854      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d580:	2b30      	cmp	r3, #48	; 0x30
 800d582:	d055      	beq.n	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d584:	2b30      	cmp	r3, #48	; 0x30
 800d586:	d850      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d588:	2b20      	cmp	r3, #32
 800d58a:	d051      	beq.n	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d58c:	2b20      	cmp	r3, #32
 800d58e:	d84c      	bhi.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
 800d590:	2b00      	cmp	r3, #0
 800d592:	d04d      	beq.n	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d594:	2b10      	cmp	r3, #16
 800d596:	d04b      	beq.n	800d630 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d598:	e047      	b.n	800d62a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6818      	ldr	r0, [r3, #0]
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	68d9      	ldr	r1, [r3, #12]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	689a      	ldr	r2, [r3, #8]
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	f000 fa01 	bl	800d9b0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800d5ae:	e040      	b.n	800d632 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2b05      	cmp	r3, #5
 800d5b6:	d101      	bne.n	800d5bc <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e03b      	b.n	800d634 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6a1a      	ldr	r2, [r3, #32]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f022 0201 	bic.w	r2, r2, #1
 800d5d2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	699b      	ldr	r3, [r3, #24]
 800d5da:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d5e2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	011b      	lsls	r3, r3, #4
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68fa      	ldr	r2, [r7, #12]
 800d5fe:	621a      	str	r2, [r3, #32]
      break;
 800d600:	e017      	b.n	800d632 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6818      	ldr	r0, [r3, #0]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	6899      	ldr	r1, [r3, #8]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	691b      	ldr	r3, [r3, #16]
 800d60e:	461a      	mov	r2, r3
 800d610:	f000 f89a 	bl	800d748 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d614:	e00d      	b.n	800d632 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6818      	ldr	r0, [r3, #0]
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	6899      	ldr	r1, [r3, #8]
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	461a      	mov	r2, r3
 800d624:	f000 f8fc 	bl	800d820 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d628:	e003      	b.n	800d632 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	75fb      	strb	r3, [r7, #23]
      break;
 800d62e:	e000      	b.n	800d632 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800d630:	bf00      	nop
  }

  return status;
 800d632:	7dfb      	ldrb	r3, [r7, #23]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3718      	adds	r7, #24
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	ffcfff8f 	.word	0xffcfff8f
 800d640:	fffefff8 	.word	0xfffefff8
 800d644:	00200010 	.word	0x00200010
 800d648:	00100070 	.word	0x00100070
 800d64c:	00100060 	.word	0x00100060
 800d650:	00100050 	.word	0x00100050
 800d654:	00100040 	.word	0x00100040
 800d658:	00100030 	.word	0x00100030
 800d65c:	00100020 	.word	0x00100020

0800d660 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d660:	b480      	push	{r7}
 800d662:	b087      	sub	sp, #28
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
 800d66c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6a1b      	ldr	r3, [r3, #32]
 800d672:	f023 0201 	bic.w	r2, r3, #1
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	699b      	ldr	r3, [r3, #24]
 800d67e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6a1b      	ldr	r3, [r3, #32]
 800d684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	4a28      	ldr	r2, [pc, #160]	; (800d72c <TIM_TI1_SetConfig+0xcc>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d01b      	beq.n	800d6c6 <TIM_TI1_SetConfig+0x66>
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d694:	d017      	beq.n	800d6c6 <TIM_TI1_SetConfig+0x66>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	4a25      	ldr	r2, [pc, #148]	; (800d730 <TIM_TI1_SetConfig+0xd0>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d013      	beq.n	800d6c6 <TIM_TI1_SetConfig+0x66>
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	4a24      	ldr	r2, [pc, #144]	; (800d734 <TIM_TI1_SetConfig+0xd4>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d00f      	beq.n	800d6c6 <TIM_TI1_SetConfig+0x66>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	4a23      	ldr	r2, [pc, #140]	; (800d738 <TIM_TI1_SetConfig+0xd8>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d00b      	beq.n	800d6c6 <TIM_TI1_SetConfig+0x66>
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	4a22      	ldr	r2, [pc, #136]	; (800d73c <TIM_TI1_SetConfig+0xdc>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d007      	beq.n	800d6c6 <TIM_TI1_SetConfig+0x66>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	4a21      	ldr	r2, [pc, #132]	; (800d740 <TIM_TI1_SetConfig+0xe0>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d003      	beq.n	800d6c6 <TIM_TI1_SetConfig+0x66>
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	4a20      	ldr	r2, [pc, #128]	; (800d744 <TIM_TI1_SetConfig+0xe4>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d101      	bne.n	800d6ca <TIM_TI1_SetConfig+0x6a>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e000      	b.n	800d6cc <TIM_TI1_SetConfig+0x6c>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d008      	beq.n	800d6e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	f023 0303 	bic.w	r3, r3, #3
 800d6d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	617b      	str	r3, [r7, #20]
 800d6e0:	e003      	b.n	800d6ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f043 0301 	orr.w	r3, r3, #1
 800d6e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d6f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	011b      	lsls	r3, r3, #4
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	697a      	ldr	r2, [r7, #20]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	f023 030a 	bic.w	r3, r3, #10
 800d704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	f003 030a 	and.w	r3, r3, #10
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	4313      	orrs	r3, r2
 800d710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	697a      	ldr	r2, [r7, #20]
 800d716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	693a      	ldr	r2, [r7, #16]
 800d71c:	621a      	str	r2, [r3, #32]
}
 800d71e:	bf00      	nop
 800d720:	371c      	adds	r7, #28
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	40010000 	.word	0x40010000
 800d730:	40000400 	.word	0x40000400
 800d734:	40000800 	.word	0x40000800
 800d738:	40000c00 	.word	0x40000c00
 800d73c:	40010400 	.word	0x40010400
 800d740:	40001800 	.word	0x40001800
 800d744:	40014000 	.word	0x40014000

0800d748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d748:	b480      	push	{r7}
 800d74a:	b087      	sub	sp, #28
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6a1b      	ldr	r3, [r3, #32]
 800d758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	f023 0201 	bic.w	r2, r3, #1
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	011b      	lsls	r3, r3, #4
 800d778:	693a      	ldr	r2, [r7, #16]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	f023 030a 	bic.w	r3, r3, #10
 800d784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d786:	697a      	ldr	r2, [r7, #20]
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	621a      	str	r2, [r3, #32]
}
 800d79a:	bf00      	nop
 800d79c:	371c      	adds	r7, #28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr

0800d7a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d7a6:	b480      	push	{r7}
 800d7a8:	b087      	sub	sp, #28
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	60f8      	str	r0, [r7, #12]
 800d7ae:	60b9      	str	r1, [r7, #8]
 800d7b0:	607a      	str	r2, [r7, #4]
 800d7b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6a1b      	ldr	r3, [r3, #32]
 800d7b8:	f023 0210 	bic.w	r2, r3, #16
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6a1b      	ldr	r3, [r3, #32]
 800d7ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	021b      	lsls	r3, r3, #8
 800d7d8:	697a      	ldr	r2, [r7, #20]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d7e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	031b      	lsls	r3, r3, #12
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d7f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	011b      	lsls	r3, r3, #4
 800d7fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	4313      	orrs	r3, r2
 800d806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	697a      	ldr	r2, [r7, #20]
 800d80c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	693a      	ldr	r2, [r7, #16]
 800d812:	621a      	str	r2, [r3, #32]
}
 800d814:	bf00      	nop
 800d816:	371c      	adds	r7, #28
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d820:	b480      	push	{r7}
 800d822:	b087      	sub	sp, #28
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6a1b      	ldr	r3, [r3, #32]
 800d830:	f023 0210 	bic.w	r2, r3, #16
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6a1b      	ldr	r3, [r3, #32]
 800d842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d84a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	031b      	lsls	r3, r3, #12
 800d850:	697a      	ldr	r2, [r7, #20]
 800d852:	4313      	orrs	r3, r2
 800d854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d85c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	011b      	lsls	r3, r3, #4
 800d862:	693a      	ldr	r2, [r7, #16]
 800d864:	4313      	orrs	r3, r2
 800d866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	697a      	ldr	r2, [r7, #20]
 800d86c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	621a      	str	r2, [r3, #32]
}
 800d874:	bf00      	nop
 800d876:	371c      	adds	r7, #28
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d880:	b480      	push	{r7}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	69db      	ldr	r3, [r3, #28]
 800d89e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6a1b      	ldr	r3, [r3, #32]
 800d8a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	f023 0303 	bic.w	r3, r3, #3
 800d8ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d8ae:	697a      	ldr	r2, [r7, #20]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	011b      	lsls	r3, r3, #4
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	697a      	ldr	r2, [r7, #20]
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d8d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	021b      	lsls	r3, r3, #8
 800d8d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	697a      	ldr	r2, [r7, #20]
 800d8e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	693a      	ldr	r2, [r7, #16]
 800d8ea:	621a      	str	r2, [r3, #32]
}
 800d8ec:	bf00      	nop
 800d8ee:	371c      	adds	r7, #28
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b087      	sub	sp, #28
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
 800d904:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6a1b      	ldr	r3, [r3, #32]
 800d90a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	69db      	ldr	r3, [r3, #28]
 800d916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d924:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	021b      	lsls	r3, r3, #8
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d936:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	031b      	lsls	r3, r3, #12
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	697a      	ldr	r2, [r7, #20]
 800d940:	4313      	orrs	r3, r2
 800d942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d94a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	031b      	lsls	r3, r3, #12
 800d950:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	4313      	orrs	r3, r2
 800d958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	697a      	ldr	r2, [r7, #20]
 800d95e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	693a      	ldr	r2, [r7, #16]
 800d964:	621a      	str	r2, [r3, #32]
}
 800d966:	bf00      	nop
 800d968:	371c      	adds	r7, #28
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
	...

0800d974 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	4b09      	ldr	r3, [pc, #36]	; (800d9ac <TIM_ITRx_SetConfig+0x38>)
 800d988:	4013      	ands	r3, r2
 800d98a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d98c:	683a      	ldr	r2, [r7, #0]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	4313      	orrs	r3, r2
 800d992:	f043 0307 	orr.w	r3, r3, #7
 800d996:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	609a      	str	r2, [r3, #8]
}
 800d99e:	bf00      	nop
 800d9a0:	3714      	adds	r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop
 800d9ac:	ffcfff8f 	.word	0xffcfff8f

0800d9b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
 800d9bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	021a      	lsls	r2, r3, #8
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	431a      	orrs	r2, r3
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	609a      	str	r2, [r3, #8]
}
 800d9e4:	bf00      	nop
 800d9e6:	371c      	adds	r7, #28
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da00:	2b01      	cmp	r3, #1
 800da02:	d101      	bne.n	800da08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da04:	2302      	movs	r3, #2
 800da06:	e06d      	b.n	800dae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2202      	movs	r2, #2
 800da14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a30      	ldr	r2, [pc, #192]	; (800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d004      	beq.n	800da3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a2f      	ldr	r2, [pc, #188]	; (800daf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d108      	bne.n	800da4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800da42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a20      	ldr	r2, [pc, #128]	; (800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d022      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da7a:	d01d      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a1d      	ldr	r2, [pc, #116]	; (800daf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d018      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a1c      	ldr	r2, [pc, #112]	; (800dafc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d013      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a1a      	ldr	r2, [pc, #104]	; (800db00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d00e      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a15      	ldr	r2, [pc, #84]	; (800daf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d009      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a16      	ldr	r2, [pc, #88]	; (800db04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d004      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a15      	ldr	r2, [pc, #84]	; (800db08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d10c      	bne.n	800dad2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dabe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	68ba      	ldr	r2, [r7, #8]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2201      	movs	r2, #1
 800dad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	40010000 	.word	0x40010000
 800daf4:	40010400 	.word	0x40010400
 800daf8:	40000400 	.word	0x40000400
 800dafc:	40000800 	.word	0x40000800
 800db00:	40000c00 	.word	0x40000c00
 800db04:	40001800 	.word	0x40001800
 800db08:	40014000 	.word	0x40014000

0800db0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800db16:	2300      	movs	r3, #0
 800db18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db20:	2b01      	cmp	r3, #1
 800db22:	d101      	bne.n	800db28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800db24:	2302      	movs	r3, #2
 800db26:	e087      	b.n	800dc38 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	4313      	orrs	r3, r2
 800db4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	4313      	orrs	r3, r2
 800db58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4313      	orrs	r3, r2
 800db66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	4313      	orrs	r3, r2
 800db74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	695b      	ldr	r3, [r3, #20]
 800db80:	4313      	orrs	r3, r2
 800db82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db8e:	4313      	orrs	r3, r2
 800db90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	699b      	ldr	r3, [r3, #24]
 800db9c:	041b      	lsls	r3, r3, #16
 800db9e:	4313      	orrs	r3, r2
 800dba0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a27      	ldr	r2, [pc, #156]	; (800dc44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d004      	beq.n	800dbb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a25      	ldr	r2, [pc, #148]	; (800dc48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d106      	bne.n	800dbc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	69db      	ldr	r3, [r3, #28]
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a1e      	ldr	r2, [pc, #120]	; (800dc44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d004      	beq.n	800dbd8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a1d      	ldr	r2, [pc, #116]	; (800dc48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d126      	bne.n	800dc26 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe2:	051b      	lsls	r3, r3, #20
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc00:	4313      	orrs	r3, r2
 800dc02:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a0e      	ldr	r2, [pc, #56]	; (800dc44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d004      	beq.n	800dc18 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a0d      	ldr	r2, [pc, #52]	; (800dc48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d106      	bne.n	800dc26 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc22:	4313      	orrs	r3, r2
 800dc24:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc36:	2300      	movs	r3, #0
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3714      	adds	r7, #20
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	40010000 	.word	0x40010000
 800dc48:	40010400 	.word	0x40010400

0800dc4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc68:	bf00      	nop
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc7c:	bf00      	nop
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	e042      	b.n	800dd20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d106      	bne.n	800dcb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f7f4 ff49 	bl	8002b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2224      	movs	r2, #36	; 0x24
 800dcb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f022 0201 	bic.w	r2, r2, #1
 800dcc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 fcd6 	bl	800e67c <UART_SetConfig>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	d101      	bne.n	800dcda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e022      	b.n	800dd20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d002      	beq.n	800dce8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f001 fb36 	bl	800f354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	685a      	ldr	r2, [r3, #4]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dcf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	689a      	ldr	r2, [r3, #8]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f042 0201 	orr.w	r2, r2, #1
 800dd16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f001 fbbd 	bl	800f498 <UART_CheckIdleState>
 800dd1e:	4603      	mov	r3, r0
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af02      	add	r7, sp, #8
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	603b      	str	r3, [r7, #0]
 800dd34:	4613      	mov	r3, r2
 800dd36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd3e:	2b20      	cmp	r3, #32
 800dd40:	f040 8083 	bne.w	800de4a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d002      	beq.n	800dd50 <HAL_UART_Transmit+0x28>
 800dd4a:	88fb      	ldrh	r3, [r7, #6]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d101      	bne.n	800dd54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dd50:	2301      	movs	r3, #1
 800dd52:	e07b      	b.n	800de4c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d101      	bne.n	800dd62 <HAL_UART_Transmit+0x3a>
 800dd5e:	2302      	movs	r3, #2
 800dd60:	e074      	b.n	800de4c <HAL_UART_Transmit+0x124>
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2221      	movs	r2, #33	; 0x21
 800dd76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dd7a:	f7f5 fa31 	bl	80031e0 <HAL_GetTick>
 800dd7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	88fa      	ldrh	r2, [r7, #6]
 800dd84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	88fa      	ldrh	r2, [r7, #6]
 800dd8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd98:	d108      	bne.n	800ddac <HAL_UART_Transmit+0x84>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d104      	bne.n	800ddac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800dda2:	2300      	movs	r3, #0
 800dda4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	61bb      	str	r3, [r7, #24]
 800ddaa:	e003      	b.n	800ddb4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ddbc:	e02c      	b.n	800de18 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	2180      	movs	r1, #128	; 0x80
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f001 fbb0 	bl	800f52e <UART_WaitOnFlagUntilTimeout>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	e039      	b.n	800de4c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d10b      	bne.n	800ddf6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	461a      	mov	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ddec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	3302      	adds	r3, #2
 800ddf2:	61bb      	str	r3, [r7, #24]
 800ddf4:	e007      	b.n	800de06 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	781a      	ldrb	r2, [r3, #0]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	3301      	adds	r3, #1
 800de04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	3b01      	subs	r3, #1
 800de10:	b29a      	uxth	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de1e:	b29b      	uxth	r3, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1cc      	bne.n	800ddbe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	9300      	str	r3, [sp, #0]
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2200      	movs	r2, #0
 800de2c:	2140      	movs	r1, #64	; 0x40
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	f001 fb7d 	bl	800f52e <UART_WaitOnFlagUntilTimeout>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800de3a:	2303      	movs	r3, #3
 800de3c:	e006      	b.n	800de4c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2220      	movs	r2, #32
 800de42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800de46:	2300      	movs	r3, #0
 800de48:	e000      	b.n	800de4c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800de4a:	2302      	movs	r3, #2
  }
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3720      	adds	r7, #32
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b08a      	sub	sp, #40	; 0x28
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	4613      	mov	r3, r2
 800de60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de68:	2b20      	cmp	r3, #32
 800de6a:	d142      	bne.n	800def2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d002      	beq.n	800de78 <HAL_UART_Receive_IT+0x24>
 800de72:	88fb      	ldrh	r3, [r7, #6]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d101      	bne.n	800de7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800de78:	2301      	movs	r3, #1
 800de7a:	e03b      	b.n	800def4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de82:	2b01      	cmp	r3, #1
 800de84:	d101      	bne.n	800de8a <HAL_UART_Receive_IT+0x36>
 800de86:	2302      	movs	r3, #2
 800de88:	e034      	b.n	800def4 <HAL_UART_Receive_IT+0xa0>
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2201      	movs	r2, #1
 800de8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2200      	movs	r2, #0
 800de96:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a17      	ldr	r2, [pc, #92]	; (800defc <HAL_UART_Receive_IT+0xa8>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d01f      	beq.n	800dee2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800deac:	2b00      	cmp	r3, #0
 800deae:	d018      	beq.n	800dee2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	e853 3f00 	ldrex	r3, [r3]
 800debc:	613b      	str	r3, [r7, #16]
   return(result);
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dec4:	627b      	str	r3, [r7, #36]	; 0x24
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	461a      	mov	r2, r3
 800decc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dece:	623b      	str	r3, [r7, #32]
 800ded0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded2:	69f9      	ldr	r1, [r7, #28]
 800ded4:	6a3a      	ldr	r2, [r7, #32]
 800ded6:	e841 2300 	strex	r3, r2, [r1]
 800deda:	61bb      	str	r3, [r7, #24]
   return(result);
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1e6      	bne.n	800deb0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dee2:	88fb      	ldrh	r3, [r7, #6]
 800dee4:	461a      	mov	r2, r3
 800dee6:	68b9      	ldr	r1, [r7, #8]
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f001 fbe9 	bl	800f6c0 <UART_Start_Receive_IT>
 800deee:	4603      	mov	r3, r0
 800def0:	e000      	b.n	800def4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800def2:	2302      	movs	r3, #2
  }
}
 800def4:	4618      	mov	r0, r3
 800def6:	3728      	adds	r7, #40	; 0x28
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	58000c00 	.word	0x58000c00

0800df00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b0ba      	sub	sp, #232	; 0xe8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	69db      	ldr	r3, [r3, #28]
 800df0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800df26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800df2a:	f640 030f 	movw	r3, #2063	; 0x80f
 800df2e:	4013      	ands	r3, r2
 800df30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800df34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d11b      	bne.n	800df74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df40:	f003 0320 	and.w	r3, r3, #32
 800df44:	2b00      	cmp	r3, #0
 800df46:	d015      	beq.n	800df74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df4c:	f003 0320 	and.w	r3, r3, #32
 800df50:	2b00      	cmp	r3, #0
 800df52:	d105      	bne.n	800df60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d009      	beq.n	800df74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df64:	2b00      	cmp	r3, #0
 800df66:	f000 835a 	beq.w	800e61e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	4798      	blx	r3
      }
      return;
 800df72:	e354      	b.n	800e61e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800df74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f000 811f 	beq.w	800e1bc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800df7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800df82:	4b8b      	ldr	r3, [pc, #556]	; (800e1b0 <HAL_UART_IRQHandler+0x2b0>)
 800df84:	4013      	ands	r3, r2
 800df86:	2b00      	cmp	r3, #0
 800df88:	d106      	bne.n	800df98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800df8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800df8e:	4b89      	ldr	r3, [pc, #548]	; (800e1b4 <HAL_UART_IRQHandler+0x2b4>)
 800df90:	4013      	ands	r3, r2
 800df92:	2b00      	cmp	r3, #0
 800df94:	f000 8112 	beq.w	800e1bc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800df98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df9c:	f003 0301 	and.w	r3, r3, #1
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d011      	beq.n	800dfc8 <HAL_UART_IRQHandler+0xc8>
 800dfa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00b      	beq.n	800dfc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfbe:	f043 0201 	orr.w	r2, r3, #1
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfcc:	f003 0302 	and.w	r3, r3, #2
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d011      	beq.n	800dff8 <HAL_UART_IRQHandler+0xf8>
 800dfd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfd8:	f003 0301 	and.w	r3, r3, #1
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00b      	beq.n	800dff8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2202      	movs	r2, #2
 800dfe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfee:	f043 0204 	orr.w	r2, r3, #4
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dffc:	f003 0304 	and.w	r3, r3, #4
 800e000:	2b00      	cmp	r3, #0
 800e002:	d011      	beq.n	800e028 <HAL_UART_IRQHandler+0x128>
 800e004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00b      	beq.n	800e028 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2204      	movs	r2, #4
 800e016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e01e:	f043 0202 	orr.w	r2, r3, #2
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e02c:	f003 0308 	and.w	r3, r3, #8
 800e030:	2b00      	cmp	r3, #0
 800e032:	d017      	beq.n	800e064 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e038:	f003 0320 	and.w	r3, r3, #32
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d105      	bne.n	800e04c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e040:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e044:	4b5a      	ldr	r3, [pc, #360]	; (800e1b0 <HAL_UART_IRQHandler+0x2b0>)
 800e046:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00b      	beq.n	800e064 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2208      	movs	r2, #8
 800e052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e05a:	f043 0208 	orr.w	r2, r3, #8
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d012      	beq.n	800e096 <HAL_UART_IRQHandler+0x196>
 800e070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00c      	beq.n	800e096 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e08c:	f043 0220 	orr.w	r2, r3, #32
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f000 82c0 	beq.w	800e622 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0a6:	f003 0320 	and.w	r3, r3, #32
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d013      	beq.n	800e0d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0b2:	f003 0320 	and.w	r3, r3, #32
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d105      	bne.n	800e0c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e0ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d007      	beq.n	800e0d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d003      	beq.n	800e0d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ea:	2b40      	cmp	r3, #64	; 0x40
 800e0ec:	d005      	beq.n	800e0fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e0ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d04f      	beq.n	800e19a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f001 fc0a 	bl	800f914 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e10a:	2b40      	cmp	r3, #64	; 0x40
 800e10c:	d141      	bne.n	800e192 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	3308      	adds	r3, #8
 800e114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e11c:	e853 3f00 	ldrex	r3, [r3]
 800e120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e12c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	3308      	adds	r3, #8
 800e136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e13a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e13e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e14a:	e841 2300 	strex	r3, r2, [r1]
 800e14e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1d9      	bne.n	800e10e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d013      	beq.n	800e18a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e166:	4a14      	ldr	r2, [pc, #80]	; (800e1b8 <HAL_UART_IRQHandler+0x2b8>)
 800e168:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e16e:	4618      	mov	r0, r3
 800e170:	f7f6 fac0 	bl	80046f4 <HAL_DMA_Abort_IT>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d017      	beq.n	800e1aa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e17e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e184:	4610      	mov	r0, r2
 800e186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e188:	e00f      	b.n	800e1aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fa60 	bl	800e650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e190:	e00b      	b.n	800e1aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 fa5c 	bl	800e650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e198:	e007      	b.n	800e1aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 fa58 	bl	800e650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e1a8:	e23b      	b.n	800e622 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1aa:	bf00      	nop
    return;
 800e1ac:	e239      	b.n	800e622 <HAL_UART_IRQHandler+0x722>
 800e1ae:	bf00      	nop
 800e1b0:	10000001 	.word	0x10000001
 800e1b4:	04000120 	.word	0x04000120
 800e1b8:	0800f9e1 	.word	0x0800f9e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	f040 81ce 	bne.w	800e562 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1ca:	f003 0310 	and.w	r3, r3, #16
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	f000 81c7 	beq.w	800e562 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1d8:	f003 0310 	and.w	r3, r3, #16
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 81c0 	beq.w	800e562 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2210      	movs	r2, #16
 800e1e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f4:	2b40      	cmp	r3, #64	; 0x40
 800e1f6:	f040 813b 	bne.w	800e470 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a8b      	ldr	r2, [pc, #556]	; (800e430 <HAL_UART_IRQHandler+0x530>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d059      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a89      	ldr	r2, [pc, #548]	; (800e434 <HAL_UART_IRQHandler+0x534>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d053      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a87      	ldr	r2, [pc, #540]	; (800e438 <HAL_UART_IRQHandler+0x538>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d04d      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a85      	ldr	r2, [pc, #532]	; (800e43c <HAL_UART_IRQHandler+0x53c>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d047      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a83      	ldr	r2, [pc, #524]	; (800e440 <HAL_UART_IRQHandler+0x540>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d041      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4a81      	ldr	r2, [pc, #516]	; (800e444 <HAL_UART_IRQHandler+0x544>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d03b      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a7f      	ldr	r2, [pc, #508]	; (800e448 <HAL_UART_IRQHandler+0x548>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d035      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a7d      	ldr	r2, [pc, #500]	; (800e44c <HAL_UART_IRQHandler+0x54c>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d02f      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a7b      	ldr	r2, [pc, #492]	; (800e450 <HAL_UART_IRQHandler+0x550>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d029      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a79      	ldr	r2, [pc, #484]	; (800e454 <HAL_UART_IRQHandler+0x554>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d023      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a77      	ldr	r2, [pc, #476]	; (800e458 <HAL_UART_IRQHandler+0x558>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d01d      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a75      	ldr	r2, [pc, #468]	; (800e45c <HAL_UART_IRQHandler+0x55c>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d017      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a73      	ldr	r2, [pc, #460]	; (800e460 <HAL_UART_IRQHandler+0x560>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d011      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a71      	ldr	r2, [pc, #452]	; (800e464 <HAL_UART_IRQHandler+0x564>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d00b      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a6f      	ldr	r2, [pc, #444]	; (800e468 <HAL_UART_IRQHandler+0x568>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d005      	beq.n	800e2ba <HAL_UART_IRQHandler+0x3ba>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a6d      	ldr	r2, [pc, #436]	; (800e46c <HAL_UART_IRQHandler+0x56c>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d105      	bne.n	800e2c6 <HAL_UART_IRQHandler+0x3c6>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	e004      	b.n	800e2d0 <HAL_UART_IRQHandler+0x3d0>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e2d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	f000 81a4 	beq.w	800e626 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	f080 819c 	bcs.w	800e626 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e2f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2fc:	69db      	ldr	r3, [r3, #28]
 800e2fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e302:	f000 8086 	beq.w	800e412 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e312:	e853 3f00 	ldrex	r3, [r3]
 800e316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e31a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e31e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e322:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	461a      	mov	r2, r3
 800e32c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e330:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e334:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e338:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e33c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e340:	e841 2300 	strex	r3, r2, [r1]
 800e344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1da      	bne.n	800e306 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3308      	adds	r3, #8
 800e356:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e35a:	e853 3f00 	ldrex	r3, [r3]
 800e35e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e362:	f023 0301 	bic.w	r3, r3, #1
 800e366:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3308      	adds	r3, #8
 800e370:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e374:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e378:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e37c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e380:	e841 2300 	strex	r3, r2, [r1]
 800e384:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d1e1      	bne.n	800e350 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	3308      	adds	r3, #8
 800e392:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e396:	e853 3f00 	ldrex	r3, [r3]
 800e39a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e39c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e39e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3308      	adds	r3, #8
 800e3ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e3b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e3b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e3b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e3b8:	e841 2300 	strex	r3, r2, [r1]
 800e3bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e3be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1e3      	bne.n	800e38c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2220      	movs	r2, #32
 800e3c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3da:	e853 3f00 	ldrex	r3, [r3]
 800e3de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e3e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3e2:	f023 0310 	bic.w	r3, r3, #16
 800e3e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e3fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3fc:	e841 2300 	strex	r3, r2, [r1]
 800e400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1e4      	bne.n	800e3d2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7f5 fe53 	bl	80040b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e41e:	b29b      	uxth	r3, r3
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	b29b      	uxth	r3, r3
 800e424:	4619      	mov	r1, r3
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 f91c 	bl	800e664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e42c:	e0fb      	b.n	800e626 <HAL_UART_IRQHandler+0x726>
 800e42e:	bf00      	nop
 800e430:	40020010 	.word	0x40020010
 800e434:	40020028 	.word	0x40020028
 800e438:	40020040 	.word	0x40020040
 800e43c:	40020058 	.word	0x40020058
 800e440:	40020070 	.word	0x40020070
 800e444:	40020088 	.word	0x40020088
 800e448:	400200a0 	.word	0x400200a0
 800e44c:	400200b8 	.word	0x400200b8
 800e450:	40020410 	.word	0x40020410
 800e454:	40020428 	.word	0x40020428
 800e458:	40020440 	.word	0x40020440
 800e45c:	40020458 	.word	0x40020458
 800e460:	40020470 	.word	0x40020470
 800e464:	40020488 	.word	0x40020488
 800e468:	400204a0 	.word	0x400204a0
 800e46c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	1ad3      	subs	r3, r2, r3
 800e480:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 80cc 	beq.w	800e62a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e492:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e496:	2b00      	cmp	r3, #0
 800e498:	f000 80c7 	beq.w	800e62a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	e853 3f00 	ldrex	r3, [r3]
 800e4a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e4be:	647b      	str	r3, [r7, #68]	; 0x44
 800e4c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4c6:	e841 2300 	strex	r3, r2, [r1]
 800e4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e4      	bne.n	800e49c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	3308      	adds	r3, #8
 800e4d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	e853 3f00 	ldrex	r3, [r3]
 800e4e0:	623b      	str	r3, [r7, #32]
   return(result);
 800e4e2:	6a3a      	ldr	r2, [r7, #32]
 800e4e4:	4b54      	ldr	r3, [pc, #336]	; (800e638 <HAL_UART_IRQHandler+0x738>)
 800e4e6:	4013      	ands	r3, r2
 800e4e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	3308      	adds	r3, #8
 800e4f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e4f6:	633a      	str	r2, [r7, #48]	; 0x30
 800e4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4fe:	e841 2300 	strex	r3, r2, [r1]
 800e502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e506:	2b00      	cmp	r3, #0
 800e508:	d1e3      	bne.n	800e4d2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2220      	movs	r2, #32
 800e50e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	e853 3f00 	ldrex	r3, [r3]
 800e52a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f023 0310 	bic.w	r3, r3, #16
 800e532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e540:	61fb      	str	r3, [r7, #28]
 800e542:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e544:	69b9      	ldr	r1, [r7, #24]
 800e546:	69fa      	ldr	r2, [r7, #28]
 800e548:	e841 2300 	strex	r3, r2, [r1]
 800e54c:	617b      	str	r3, [r7, #20]
   return(result);
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d1e4      	bne.n	800e51e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e558:	4619      	mov	r1, r3
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 f882 	bl	800e664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e560:	e063      	b.n	800e62a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00e      	beq.n	800e58c <HAL_UART_IRQHandler+0x68c>
 800e56e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e576:	2b00      	cmp	r3, #0
 800e578:	d008      	beq.n	800e58c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e582:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f001 fec9 	bl	801031c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e58a:	e051      	b.n	800e630 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e594:	2b00      	cmp	r3, #0
 800e596:	d014      	beq.n	800e5c2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e59c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d105      	bne.n	800e5b0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e5a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d008      	beq.n	800e5c2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d03a      	beq.n	800e62e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	4798      	blx	r3
    }
    return;
 800e5c0:	e035      	b.n	800e62e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d009      	beq.n	800e5e2 <HAL_UART_IRQHandler+0x6e2>
 800e5ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f001 fa16 	bl	800fa0c <UART_EndTransmit_IT>
    return;
 800e5e0:	e026      	b.n	800e630 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d009      	beq.n	800e602 <HAL_UART_IRQHandler+0x702>
 800e5ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d003      	beq.n	800e602 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f001 fea2 	bl	8010344 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e600:	e016      	b.n	800e630 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d010      	beq.n	800e630 <HAL_UART_IRQHandler+0x730>
 800e60e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e612:	2b00      	cmp	r3, #0
 800e614:	da0c      	bge.n	800e630 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f001 fe8a 	bl	8010330 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e61c:	e008      	b.n	800e630 <HAL_UART_IRQHandler+0x730>
      return;
 800e61e:	bf00      	nop
 800e620:	e006      	b.n	800e630 <HAL_UART_IRQHandler+0x730>
    return;
 800e622:	bf00      	nop
 800e624:	e004      	b.n	800e630 <HAL_UART_IRQHandler+0x730>
      return;
 800e626:	bf00      	nop
 800e628:	e002      	b.n	800e630 <HAL_UART_IRQHandler+0x730>
      return;
 800e62a:	bf00      	nop
 800e62c:	e000      	b.n	800e630 <HAL_UART_IRQHandler+0x730>
    return;
 800e62e:	bf00      	nop
  }
}
 800e630:	37e8      	adds	r7, #232	; 0xe8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	effffffe 	.word	0xeffffffe

0800e63c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e644:	bf00      	nop
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e650:	b480      	push	{r7}
 800e652:	b083      	sub	sp, #12
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e658:	bf00      	nop
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr

0800e664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	460b      	mov	r3, r1
 800e66e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e670:	bf00      	nop
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e67c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e680:	b092      	sub	sp, #72	; 0x48
 800e682:	af00      	add	r7, sp, #0
 800e684:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e686:	2300      	movs	r3, #0
 800e688:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	689a      	ldr	r2, [r3, #8]
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	691b      	ldr	r3, [r3, #16]
 800e694:	431a      	orrs	r2, r3
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	431a      	orrs	r2, r3
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	69db      	ldr	r3, [r3, #28]
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	4bbe      	ldr	r3, [pc, #760]	; (800e9a4 <UART_SetConfig+0x328>)
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	6812      	ldr	r2, [r2, #0]
 800e6b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6b4:	430b      	orrs	r3, r1
 800e6b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	68da      	ldr	r2, [r3, #12]
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	430a      	orrs	r2, r1
 800e6cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	699b      	ldr	r3, [r3, #24]
 800e6d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4ab3      	ldr	r2, [pc, #716]	; (800e9a8 <UART_SetConfig+0x32c>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d004      	beq.n	800e6e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	689a      	ldr	r2, [r3, #8]
 800e6ee:	4baf      	ldr	r3, [pc, #700]	; (800e9ac <UART_SetConfig+0x330>)
 800e6f0:	4013      	ands	r3, r2
 800e6f2:	697a      	ldr	r2, [r7, #20]
 800e6f4:	6812      	ldr	r2, [r2, #0]
 800e6f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6f8:	430b      	orrs	r3, r1
 800e6fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e702:	f023 010f 	bic.w	r1, r3, #15
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	430a      	orrs	r2, r1
 800e710:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4aa6      	ldr	r2, [pc, #664]	; (800e9b0 <UART_SetConfig+0x334>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d177      	bne.n	800e80c <UART_SetConfig+0x190>
 800e71c:	4ba5      	ldr	r3, [pc, #660]	; (800e9b4 <UART_SetConfig+0x338>)
 800e71e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e724:	2b28      	cmp	r3, #40	; 0x28
 800e726:	d86d      	bhi.n	800e804 <UART_SetConfig+0x188>
 800e728:	a201      	add	r2, pc, #4	; (adr r2, 800e730 <UART_SetConfig+0xb4>)
 800e72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e72e:	bf00      	nop
 800e730:	0800e7d5 	.word	0x0800e7d5
 800e734:	0800e805 	.word	0x0800e805
 800e738:	0800e805 	.word	0x0800e805
 800e73c:	0800e805 	.word	0x0800e805
 800e740:	0800e805 	.word	0x0800e805
 800e744:	0800e805 	.word	0x0800e805
 800e748:	0800e805 	.word	0x0800e805
 800e74c:	0800e805 	.word	0x0800e805
 800e750:	0800e7dd 	.word	0x0800e7dd
 800e754:	0800e805 	.word	0x0800e805
 800e758:	0800e805 	.word	0x0800e805
 800e75c:	0800e805 	.word	0x0800e805
 800e760:	0800e805 	.word	0x0800e805
 800e764:	0800e805 	.word	0x0800e805
 800e768:	0800e805 	.word	0x0800e805
 800e76c:	0800e805 	.word	0x0800e805
 800e770:	0800e7e5 	.word	0x0800e7e5
 800e774:	0800e805 	.word	0x0800e805
 800e778:	0800e805 	.word	0x0800e805
 800e77c:	0800e805 	.word	0x0800e805
 800e780:	0800e805 	.word	0x0800e805
 800e784:	0800e805 	.word	0x0800e805
 800e788:	0800e805 	.word	0x0800e805
 800e78c:	0800e805 	.word	0x0800e805
 800e790:	0800e7ed 	.word	0x0800e7ed
 800e794:	0800e805 	.word	0x0800e805
 800e798:	0800e805 	.word	0x0800e805
 800e79c:	0800e805 	.word	0x0800e805
 800e7a0:	0800e805 	.word	0x0800e805
 800e7a4:	0800e805 	.word	0x0800e805
 800e7a8:	0800e805 	.word	0x0800e805
 800e7ac:	0800e805 	.word	0x0800e805
 800e7b0:	0800e7f5 	.word	0x0800e7f5
 800e7b4:	0800e805 	.word	0x0800e805
 800e7b8:	0800e805 	.word	0x0800e805
 800e7bc:	0800e805 	.word	0x0800e805
 800e7c0:	0800e805 	.word	0x0800e805
 800e7c4:	0800e805 	.word	0x0800e805
 800e7c8:	0800e805 	.word	0x0800e805
 800e7cc:	0800e805 	.word	0x0800e805
 800e7d0:	0800e7fd 	.word	0x0800e7fd
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7da:	e326      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e7dc:	2304      	movs	r3, #4
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e2:	e322      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e7e4:	2308      	movs	r3, #8
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ea:	e31e      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e7ec:	2310      	movs	r3, #16
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f2:	e31a      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e7f4:	2320      	movs	r3, #32
 800e7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fa:	e316      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e7fc:	2340      	movs	r3, #64	; 0x40
 800e7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e802:	e312      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e804:	2380      	movs	r3, #128	; 0x80
 800e806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80a:	e30e      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a69      	ldr	r2, [pc, #420]	; (800e9b8 <UART_SetConfig+0x33c>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d130      	bne.n	800e878 <UART_SetConfig+0x1fc>
 800e816:	4b67      	ldr	r3, [pc, #412]	; (800e9b4 <UART_SetConfig+0x338>)
 800e818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e81a:	f003 0307 	and.w	r3, r3, #7
 800e81e:	2b05      	cmp	r3, #5
 800e820:	d826      	bhi.n	800e870 <UART_SetConfig+0x1f4>
 800e822:	a201      	add	r2, pc, #4	; (adr r2, 800e828 <UART_SetConfig+0x1ac>)
 800e824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e828:	0800e841 	.word	0x0800e841
 800e82c:	0800e849 	.word	0x0800e849
 800e830:	0800e851 	.word	0x0800e851
 800e834:	0800e859 	.word	0x0800e859
 800e838:	0800e861 	.word	0x0800e861
 800e83c:	0800e869 	.word	0x0800e869
 800e840:	2300      	movs	r3, #0
 800e842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e846:	e2f0      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e848:	2304      	movs	r3, #4
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84e:	e2ec      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e850:	2308      	movs	r3, #8
 800e852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e856:	e2e8      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e858:	2310      	movs	r3, #16
 800e85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85e:	e2e4      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e860:	2320      	movs	r3, #32
 800e862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e866:	e2e0      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e868:	2340      	movs	r3, #64	; 0x40
 800e86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86e:	e2dc      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e870:	2380      	movs	r3, #128	; 0x80
 800e872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e876:	e2d8      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a4f      	ldr	r2, [pc, #316]	; (800e9bc <UART_SetConfig+0x340>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d130      	bne.n	800e8e4 <UART_SetConfig+0x268>
 800e882:	4b4c      	ldr	r3, [pc, #304]	; (800e9b4 <UART_SetConfig+0x338>)
 800e884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e886:	f003 0307 	and.w	r3, r3, #7
 800e88a:	2b05      	cmp	r3, #5
 800e88c:	d826      	bhi.n	800e8dc <UART_SetConfig+0x260>
 800e88e:	a201      	add	r2, pc, #4	; (adr r2, 800e894 <UART_SetConfig+0x218>)
 800e890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e894:	0800e8ad 	.word	0x0800e8ad
 800e898:	0800e8b5 	.word	0x0800e8b5
 800e89c:	0800e8bd 	.word	0x0800e8bd
 800e8a0:	0800e8c5 	.word	0x0800e8c5
 800e8a4:	0800e8cd 	.word	0x0800e8cd
 800e8a8:	0800e8d5 	.word	0x0800e8d5
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8b2:	e2ba      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e8b4:	2304      	movs	r3, #4
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ba:	e2b6      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e8bc:	2308      	movs	r3, #8
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c2:	e2b2      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e8c4:	2310      	movs	r3, #16
 800e8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ca:	e2ae      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e8cc:	2320      	movs	r3, #32
 800e8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8d2:	e2aa      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e8d4:	2340      	movs	r3, #64	; 0x40
 800e8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8da:	e2a6      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e8dc:	2380      	movs	r3, #128	; 0x80
 800e8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8e2:	e2a2      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a35      	ldr	r2, [pc, #212]	; (800e9c0 <UART_SetConfig+0x344>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d130      	bne.n	800e950 <UART_SetConfig+0x2d4>
 800e8ee:	4b31      	ldr	r3, [pc, #196]	; (800e9b4 <UART_SetConfig+0x338>)
 800e8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8f2:	f003 0307 	and.w	r3, r3, #7
 800e8f6:	2b05      	cmp	r3, #5
 800e8f8:	d826      	bhi.n	800e948 <UART_SetConfig+0x2cc>
 800e8fa:	a201      	add	r2, pc, #4	; (adr r2, 800e900 <UART_SetConfig+0x284>)
 800e8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e900:	0800e919 	.word	0x0800e919
 800e904:	0800e921 	.word	0x0800e921
 800e908:	0800e929 	.word	0x0800e929
 800e90c:	0800e931 	.word	0x0800e931
 800e910:	0800e939 	.word	0x0800e939
 800e914:	0800e941 	.word	0x0800e941
 800e918:	2300      	movs	r3, #0
 800e91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e91e:	e284      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e920:	2304      	movs	r3, #4
 800e922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e926:	e280      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e928:	2308      	movs	r3, #8
 800e92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e92e:	e27c      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e930:	2310      	movs	r3, #16
 800e932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e936:	e278      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e938:	2320      	movs	r3, #32
 800e93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e93e:	e274      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e940:	2340      	movs	r3, #64	; 0x40
 800e942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e946:	e270      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e948:	2380      	movs	r3, #128	; 0x80
 800e94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e94e:	e26c      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a1b      	ldr	r2, [pc, #108]	; (800e9c4 <UART_SetConfig+0x348>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d142      	bne.n	800e9e0 <UART_SetConfig+0x364>
 800e95a:	4b16      	ldr	r3, [pc, #88]	; (800e9b4 <UART_SetConfig+0x338>)
 800e95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e95e:	f003 0307 	and.w	r3, r3, #7
 800e962:	2b05      	cmp	r3, #5
 800e964:	d838      	bhi.n	800e9d8 <UART_SetConfig+0x35c>
 800e966:	a201      	add	r2, pc, #4	; (adr r2, 800e96c <UART_SetConfig+0x2f0>)
 800e968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e96c:	0800e985 	.word	0x0800e985
 800e970:	0800e98d 	.word	0x0800e98d
 800e974:	0800e995 	.word	0x0800e995
 800e978:	0800e99d 	.word	0x0800e99d
 800e97c:	0800e9c9 	.word	0x0800e9c9
 800e980:	0800e9d1 	.word	0x0800e9d1
 800e984:	2300      	movs	r3, #0
 800e986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98a:	e24e      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e98c:	2304      	movs	r3, #4
 800e98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e992:	e24a      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e994:	2308      	movs	r3, #8
 800e996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e99a:	e246      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e99c:	2310      	movs	r3, #16
 800e99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9a2:	e242      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e9a4:	cfff69f3 	.word	0xcfff69f3
 800e9a8:	58000c00 	.word	0x58000c00
 800e9ac:	11fff4ff 	.word	0x11fff4ff
 800e9b0:	40011000 	.word	0x40011000
 800e9b4:	58024400 	.word	0x58024400
 800e9b8:	40004400 	.word	0x40004400
 800e9bc:	40004800 	.word	0x40004800
 800e9c0:	40004c00 	.word	0x40004c00
 800e9c4:	40005000 	.word	0x40005000
 800e9c8:	2320      	movs	r3, #32
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ce:	e22c      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e9d0:	2340      	movs	r3, #64	; 0x40
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d6:	e228      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e9d8:	2380      	movs	r3, #128	; 0x80
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9de:	e224      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4ab1      	ldr	r2, [pc, #708]	; (800ecac <UART_SetConfig+0x630>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d176      	bne.n	800ead8 <UART_SetConfig+0x45c>
 800e9ea:	4bb1      	ldr	r3, [pc, #708]	; (800ecb0 <UART_SetConfig+0x634>)
 800e9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9f2:	2b28      	cmp	r3, #40	; 0x28
 800e9f4:	d86c      	bhi.n	800ead0 <UART_SetConfig+0x454>
 800e9f6:	a201      	add	r2, pc, #4	; (adr r2, 800e9fc <UART_SetConfig+0x380>)
 800e9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fc:	0800eaa1 	.word	0x0800eaa1
 800ea00:	0800ead1 	.word	0x0800ead1
 800ea04:	0800ead1 	.word	0x0800ead1
 800ea08:	0800ead1 	.word	0x0800ead1
 800ea0c:	0800ead1 	.word	0x0800ead1
 800ea10:	0800ead1 	.word	0x0800ead1
 800ea14:	0800ead1 	.word	0x0800ead1
 800ea18:	0800ead1 	.word	0x0800ead1
 800ea1c:	0800eaa9 	.word	0x0800eaa9
 800ea20:	0800ead1 	.word	0x0800ead1
 800ea24:	0800ead1 	.word	0x0800ead1
 800ea28:	0800ead1 	.word	0x0800ead1
 800ea2c:	0800ead1 	.word	0x0800ead1
 800ea30:	0800ead1 	.word	0x0800ead1
 800ea34:	0800ead1 	.word	0x0800ead1
 800ea38:	0800ead1 	.word	0x0800ead1
 800ea3c:	0800eab1 	.word	0x0800eab1
 800ea40:	0800ead1 	.word	0x0800ead1
 800ea44:	0800ead1 	.word	0x0800ead1
 800ea48:	0800ead1 	.word	0x0800ead1
 800ea4c:	0800ead1 	.word	0x0800ead1
 800ea50:	0800ead1 	.word	0x0800ead1
 800ea54:	0800ead1 	.word	0x0800ead1
 800ea58:	0800ead1 	.word	0x0800ead1
 800ea5c:	0800eab9 	.word	0x0800eab9
 800ea60:	0800ead1 	.word	0x0800ead1
 800ea64:	0800ead1 	.word	0x0800ead1
 800ea68:	0800ead1 	.word	0x0800ead1
 800ea6c:	0800ead1 	.word	0x0800ead1
 800ea70:	0800ead1 	.word	0x0800ead1
 800ea74:	0800ead1 	.word	0x0800ead1
 800ea78:	0800ead1 	.word	0x0800ead1
 800ea7c:	0800eac1 	.word	0x0800eac1
 800ea80:	0800ead1 	.word	0x0800ead1
 800ea84:	0800ead1 	.word	0x0800ead1
 800ea88:	0800ead1 	.word	0x0800ead1
 800ea8c:	0800ead1 	.word	0x0800ead1
 800ea90:	0800ead1 	.word	0x0800ead1
 800ea94:	0800ead1 	.word	0x0800ead1
 800ea98:	0800ead1 	.word	0x0800ead1
 800ea9c:	0800eac9 	.word	0x0800eac9
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa6:	e1c0      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eaa8:	2304      	movs	r3, #4
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaae:	e1bc      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eab0:	2308      	movs	r3, #8
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab6:	e1b8      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eab8:	2310      	movs	r3, #16
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eabe:	e1b4      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eac0:	2320      	movs	r3, #32
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac6:	e1b0      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eac8:	2340      	movs	r3, #64	; 0x40
 800eaca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eace:	e1ac      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ead0:	2380      	movs	r3, #128	; 0x80
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ead6:	e1a8      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4a75      	ldr	r2, [pc, #468]	; (800ecb4 <UART_SetConfig+0x638>)
 800eade:	4293      	cmp	r3, r2
 800eae0:	d130      	bne.n	800eb44 <UART_SetConfig+0x4c8>
 800eae2:	4b73      	ldr	r3, [pc, #460]	; (800ecb0 <UART_SetConfig+0x634>)
 800eae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eae6:	f003 0307 	and.w	r3, r3, #7
 800eaea:	2b05      	cmp	r3, #5
 800eaec:	d826      	bhi.n	800eb3c <UART_SetConfig+0x4c0>
 800eaee:	a201      	add	r2, pc, #4	; (adr r2, 800eaf4 <UART_SetConfig+0x478>)
 800eaf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf4:	0800eb0d 	.word	0x0800eb0d
 800eaf8:	0800eb15 	.word	0x0800eb15
 800eafc:	0800eb1d 	.word	0x0800eb1d
 800eb00:	0800eb25 	.word	0x0800eb25
 800eb04:	0800eb2d 	.word	0x0800eb2d
 800eb08:	0800eb35 	.word	0x0800eb35
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb12:	e18a      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb14:	2304      	movs	r3, #4
 800eb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb1a:	e186      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb1c:	2308      	movs	r3, #8
 800eb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb22:	e182      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb24:	2310      	movs	r3, #16
 800eb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb2a:	e17e      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb2c:	2320      	movs	r3, #32
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb32:	e17a      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb34:	2340      	movs	r3, #64	; 0x40
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3a:	e176      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb3c:	2380      	movs	r3, #128	; 0x80
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb42:	e172      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4a5b      	ldr	r2, [pc, #364]	; (800ecb8 <UART_SetConfig+0x63c>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d130      	bne.n	800ebb0 <UART_SetConfig+0x534>
 800eb4e:	4b58      	ldr	r3, [pc, #352]	; (800ecb0 <UART_SetConfig+0x634>)
 800eb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb52:	f003 0307 	and.w	r3, r3, #7
 800eb56:	2b05      	cmp	r3, #5
 800eb58:	d826      	bhi.n	800eba8 <UART_SetConfig+0x52c>
 800eb5a:	a201      	add	r2, pc, #4	; (adr r2, 800eb60 <UART_SetConfig+0x4e4>)
 800eb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb60:	0800eb79 	.word	0x0800eb79
 800eb64:	0800eb81 	.word	0x0800eb81
 800eb68:	0800eb89 	.word	0x0800eb89
 800eb6c:	0800eb91 	.word	0x0800eb91
 800eb70:	0800eb99 	.word	0x0800eb99
 800eb74:	0800eba1 	.word	0x0800eba1
 800eb78:	2300      	movs	r3, #0
 800eb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7e:	e154      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb80:	2304      	movs	r3, #4
 800eb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb86:	e150      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb88:	2308      	movs	r3, #8
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8e:	e14c      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb90:	2310      	movs	r3, #16
 800eb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb96:	e148      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eb98:	2320      	movs	r3, #32
 800eb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb9e:	e144      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eba0:	2340      	movs	r3, #64	; 0x40
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eba6:	e140      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eba8:	2380      	movs	r3, #128	; 0x80
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebae:	e13c      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a41      	ldr	r2, [pc, #260]	; (800ecbc <UART_SetConfig+0x640>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	f040 8082 	bne.w	800ecc0 <UART_SetConfig+0x644>
 800ebbc:	4b3c      	ldr	r3, [pc, #240]	; (800ecb0 <UART_SetConfig+0x634>)
 800ebbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebc4:	2b28      	cmp	r3, #40	; 0x28
 800ebc6:	d86d      	bhi.n	800eca4 <UART_SetConfig+0x628>
 800ebc8:	a201      	add	r2, pc, #4	; (adr r2, 800ebd0 <UART_SetConfig+0x554>)
 800ebca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebce:	bf00      	nop
 800ebd0:	0800ec75 	.word	0x0800ec75
 800ebd4:	0800eca5 	.word	0x0800eca5
 800ebd8:	0800eca5 	.word	0x0800eca5
 800ebdc:	0800eca5 	.word	0x0800eca5
 800ebe0:	0800eca5 	.word	0x0800eca5
 800ebe4:	0800eca5 	.word	0x0800eca5
 800ebe8:	0800eca5 	.word	0x0800eca5
 800ebec:	0800eca5 	.word	0x0800eca5
 800ebf0:	0800ec7d 	.word	0x0800ec7d
 800ebf4:	0800eca5 	.word	0x0800eca5
 800ebf8:	0800eca5 	.word	0x0800eca5
 800ebfc:	0800eca5 	.word	0x0800eca5
 800ec00:	0800eca5 	.word	0x0800eca5
 800ec04:	0800eca5 	.word	0x0800eca5
 800ec08:	0800eca5 	.word	0x0800eca5
 800ec0c:	0800eca5 	.word	0x0800eca5
 800ec10:	0800ec85 	.word	0x0800ec85
 800ec14:	0800eca5 	.word	0x0800eca5
 800ec18:	0800eca5 	.word	0x0800eca5
 800ec1c:	0800eca5 	.word	0x0800eca5
 800ec20:	0800eca5 	.word	0x0800eca5
 800ec24:	0800eca5 	.word	0x0800eca5
 800ec28:	0800eca5 	.word	0x0800eca5
 800ec2c:	0800eca5 	.word	0x0800eca5
 800ec30:	0800ec8d 	.word	0x0800ec8d
 800ec34:	0800eca5 	.word	0x0800eca5
 800ec38:	0800eca5 	.word	0x0800eca5
 800ec3c:	0800eca5 	.word	0x0800eca5
 800ec40:	0800eca5 	.word	0x0800eca5
 800ec44:	0800eca5 	.word	0x0800eca5
 800ec48:	0800eca5 	.word	0x0800eca5
 800ec4c:	0800eca5 	.word	0x0800eca5
 800ec50:	0800ec95 	.word	0x0800ec95
 800ec54:	0800eca5 	.word	0x0800eca5
 800ec58:	0800eca5 	.word	0x0800eca5
 800ec5c:	0800eca5 	.word	0x0800eca5
 800ec60:	0800eca5 	.word	0x0800eca5
 800ec64:	0800eca5 	.word	0x0800eca5
 800ec68:	0800eca5 	.word	0x0800eca5
 800ec6c:	0800eca5 	.word	0x0800eca5
 800ec70:	0800ec9d 	.word	0x0800ec9d
 800ec74:	2301      	movs	r3, #1
 800ec76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec7a:	e0d6      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ec7c:	2304      	movs	r3, #4
 800ec7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec82:	e0d2      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ec84:	2308      	movs	r3, #8
 800ec86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8a:	e0ce      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ec8c:	2310      	movs	r3, #16
 800ec8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec92:	e0ca      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ec94:	2320      	movs	r3, #32
 800ec96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9a:	e0c6      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ec9c:	2340      	movs	r3, #64	; 0x40
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca2:	e0c2      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eca4:	2380      	movs	r3, #128	; 0x80
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecaa:	e0be      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ecac:	40011400 	.word	0x40011400
 800ecb0:	58024400 	.word	0x58024400
 800ecb4:	40007800 	.word	0x40007800
 800ecb8:	40007c00 	.word	0x40007c00
 800ecbc:	40011800 	.word	0x40011800
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4aad      	ldr	r2, [pc, #692]	; (800ef7c <UART_SetConfig+0x900>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d176      	bne.n	800edb8 <UART_SetConfig+0x73c>
 800ecca:	4bad      	ldr	r3, [pc, #692]	; (800ef80 <UART_SetConfig+0x904>)
 800eccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ecd2:	2b28      	cmp	r3, #40	; 0x28
 800ecd4:	d86c      	bhi.n	800edb0 <UART_SetConfig+0x734>
 800ecd6:	a201      	add	r2, pc, #4	; (adr r2, 800ecdc <UART_SetConfig+0x660>)
 800ecd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecdc:	0800ed81 	.word	0x0800ed81
 800ece0:	0800edb1 	.word	0x0800edb1
 800ece4:	0800edb1 	.word	0x0800edb1
 800ece8:	0800edb1 	.word	0x0800edb1
 800ecec:	0800edb1 	.word	0x0800edb1
 800ecf0:	0800edb1 	.word	0x0800edb1
 800ecf4:	0800edb1 	.word	0x0800edb1
 800ecf8:	0800edb1 	.word	0x0800edb1
 800ecfc:	0800ed89 	.word	0x0800ed89
 800ed00:	0800edb1 	.word	0x0800edb1
 800ed04:	0800edb1 	.word	0x0800edb1
 800ed08:	0800edb1 	.word	0x0800edb1
 800ed0c:	0800edb1 	.word	0x0800edb1
 800ed10:	0800edb1 	.word	0x0800edb1
 800ed14:	0800edb1 	.word	0x0800edb1
 800ed18:	0800edb1 	.word	0x0800edb1
 800ed1c:	0800ed91 	.word	0x0800ed91
 800ed20:	0800edb1 	.word	0x0800edb1
 800ed24:	0800edb1 	.word	0x0800edb1
 800ed28:	0800edb1 	.word	0x0800edb1
 800ed2c:	0800edb1 	.word	0x0800edb1
 800ed30:	0800edb1 	.word	0x0800edb1
 800ed34:	0800edb1 	.word	0x0800edb1
 800ed38:	0800edb1 	.word	0x0800edb1
 800ed3c:	0800ed99 	.word	0x0800ed99
 800ed40:	0800edb1 	.word	0x0800edb1
 800ed44:	0800edb1 	.word	0x0800edb1
 800ed48:	0800edb1 	.word	0x0800edb1
 800ed4c:	0800edb1 	.word	0x0800edb1
 800ed50:	0800edb1 	.word	0x0800edb1
 800ed54:	0800edb1 	.word	0x0800edb1
 800ed58:	0800edb1 	.word	0x0800edb1
 800ed5c:	0800eda1 	.word	0x0800eda1
 800ed60:	0800edb1 	.word	0x0800edb1
 800ed64:	0800edb1 	.word	0x0800edb1
 800ed68:	0800edb1 	.word	0x0800edb1
 800ed6c:	0800edb1 	.word	0x0800edb1
 800ed70:	0800edb1 	.word	0x0800edb1
 800ed74:	0800edb1 	.word	0x0800edb1
 800ed78:	0800edb1 	.word	0x0800edb1
 800ed7c:	0800eda9 	.word	0x0800eda9
 800ed80:	2301      	movs	r3, #1
 800ed82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed86:	e050      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ed88:	2304      	movs	r3, #4
 800ed8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8e:	e04c      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ed90:	2308      	movs	r3, #8
 800ed92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed96:	e048      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ed98:	2310      	movs	r3, #16
 800ed9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9e:	e044      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eda0:	2320      	movs	r3, #32
 800eda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eda6:	e040      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800eda8:	2340      	movs	r3, #64	; 0x40
 800edaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edae:	e03c      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800edb0:	2380      	movs	r3, #128	; 0x80
 800edb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edb6:	e038      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4a71      	ldr	r2, [pc, #452]	; (800ef84 <UART_SetConfig+0x908>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d130      	bne.n	800ee24 <UART_SetConfig+0x7a8>
 800edc2:	4b6f      	ldr	r3, [pc, #444]	; (800ef80 <UART_SetConfig+0x904>)
 800edc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edc6:	f003 0307 	and.w	r3, r3, #7
 800edca:	2b05      	cmp	r3, #5
 800edcc:	d826      	bhi.n	800ee1c <UART_SetConfig+0x7a0>
 800edce:	a201      	add	r2, pc, #4	; (adr r2, 800edd4 <UART_SetConfig+0x758>)
 800edd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd4:	0800eded 	.word	0x0800eded
 800edd8:	0800edf5 	.word	0x0800edf5
 800eddc:	0800edfd 	.word	0x0800edfd
 800ede0:	0800ee05 	.word	0x0800ee05
 800ede4:	0800ee0d 	.word	0x0800ee0d
 800ede8:	0800ee15 	.word	0x0800ee15
 800edec:	2302      	movs	r3, #2
 800edee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf2:	e01a      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800edf4:	2304      	movs	r3, #4
 800edf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edfa:	e016      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800edfc:	2308      	movs	r3, #8
 800edfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee02:	e012      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ee04:	2310      	movs	r3, #16
 800ee06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee0a:	e00e      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ee0c:	2320      	movs	r3, #32
 800ee0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee12:	e00a      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ee14:	2340      	movs	r3, #64	; 0x40
 800ee16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1a:	e006      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ee1c:	2380      	movs	r3, #128	; 0x80
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee22:	e002      	b.n	800ee2a <UART_SetConfig+0x7ae>
 800ee24:	2380      	movs	r3, #128	; 0x80
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	4a55      	ldr	r2, [pc, #340]	; (800ef84 <UART_SetConfig+0x908>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	f040 80f8 	bne.w	800f026 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ee3a:	2b20      	cmp	r3, #32
 800ee3c:	dc46      	bgt.n	800eecc <UART_SetConfig+0x850>
 800ee3e:	2b02      	cmp	r3, #2
 800ee40:	db75      	blt.n	800ef2e <UART_SetConfig+0x8b2>
 800ee42:	3b02      	subs	r3, #2
 800ee44:	2b1e      	cmp	r3, #30
 800ee46:	d872      	bhi.n	800ef2e <UART_SetConfig+0x8b2>
 800ee48:	a201      	add	r2, pc, #4	; (adr r2, 800ee50 <UART_SetConfig+0x7d4>)
 800ee4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4e:	bf00      	nop
 800ee50:	0800eed3 	.word	0x0800eed3
 800ee54:	0800ef2f 	.word	0x0800ef2f
 800ee58:	0800eedb 	.word	0x0800eedb
 800ee5c:	0800ef2f 	.word	0x0800ef2f
 800ee60:	0800ef2f 	.word	0x0800ef2f
 800ee64:	0800ef2f 	.word	0x0800ef2f
 800ee68:	0800eeeb 	.word	0x0800eeeb
 800ee6c:	0800ef2f 	.word	0x0800ef2f
 800ee70:	0800ef2f 	.word	0x0800ef2f
 800ee74:	0800ef2f 	.word	0x0800ef2f
 800ee78:	0800ef2f 	.word	0x0800ef2f
 800ee7c:	0800ef2f 	.word	0x0800ef2f
 800ee80:	0800ef2f 	.word	0x0800ef2f
 800ee84:	0800ef2f 	.word	0x0800ef2f
 800ee88:	0800eefb 	.word	0x0800eefb
 800ee8c:	0800ef2f 	.word	0x0800ef2f
 800ee90:	0800ef2f 	.word	0x0800ef2f
 800ee94:	0800ef2f 	.word	0x0800ef2f
 800ee98:	0800ef2f 	.word	0x0800ef2f
 800ee9c:	0800ef2f 	.word	0x0800ef2f
 800eea0:	0800ef2f 	.word	0x0800ef2f
 800eea4:	0800ef2f 	.word	0x0800ef2f
 800eea8:	0800ef2f 	.word	0x0800ef2f
 800eeac:	0800ef2f 	.word	0x0800ef2f
 800eeb0:	0800ef2f 	.word	0x0800ef2f
 800eeb4:	0800ef2f 	.word	0x0800ef2f
 800eeb8:	0800ef2f 	.word	0x0800ef2f
 800eebc:	0800ef2f 	.word	0x0800ef2f
 800eec0:	0800ef2f 	.word	0x0800ef2f
 800eec4:	0800ef2f 	.word	0x0800ef2f
 800eec8:	0800ef21 	.word	0x0800ef21
 800eecc:	2b40      	cmp	r3, #64	; 0x40
 800eece:	d02a      	beq.n	800ef26 <UART_SetConfig+0x8aa>
 800eed0:	e02d      	b.n	800ef2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800eed2:	f7f9 fee7 	bl	8008ca4 <HAL_RCCEx_GetD3PCLK1Freq>
 800eed6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eed8:	e02f      	b.n	800ef3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eeda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eede:	4618      	mov	r0, r3
 800eee0:	f7f9 fef6 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eee8:	e027      	b.n	800ef3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eeea:	f107 0318 	add.w	r3, r7, #24
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fa f842 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eef8:	e01f      	b.n	800ef3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eefa:	4b21      	ldr	r3, [pc, #132]	; (800ef80 <UART_SetConfig+0x904>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f003 0320 	and.w	r3, r3, #32
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d009      	beq.n	800ef1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef06:	4b1e      	ldr	r3, [pc, #120]	; (800ef80 <UART_SetConfig+0x904>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	08db      	lsrs	r3, r3, #3
 800ef0c:	f003 0303 	and.w	r3, r3, #3
 800ef10:	4a1d      	ldr	r2, [pc, #116]	; (800ef88 <UART_SetConfig+0x90c>)
 800ef12:	fa22 f303 	lsr.w	r3, r2, r3
 800ef16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef18:	e00f      	b.n	800ef3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ef1a:	4b1b      	ldr	r3, [pc, #108]	; (800ef88 <UART_SetConfig+0x90c>)
 800ef1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef1e:	e00c      	b.n	800ef3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef20:	4b1a      	ldr	r3, [pc, #104]	; (800ef8c <UART_SetConfig+0x910>)
 800ef22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef24:	e009      	b.n	800ef3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef2c:	e005      	b.n	800ef3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ef32:	2301      	movs	r3, #1
 800ef34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ef38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ef3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f000 81ee 	beq.w	800f31e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef46:	4a12      	ldr	r2, [pc, #72]	; (800ef90 <UART_SetConfig+0x914>)
 800ef48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef54:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	685a      	ldr	r2, [r3, #4]
 800ef5a:	4613      	mov	r3, r2
 800ef5c:	005b      	lsls	r3, r3, #1
 800ef5e:	4413      	add	r3, r2
 800ef60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d305      	bcc.n	800ef72 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d910      	bls.n	800ef94 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ef72:	2301      	movs	r3, #1
 800ef74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef78:	e1d1      	b.n	800f31e <UART_SetConfig+0xca2>
 800ef7a:	bf00      	nop
 800ef7c:	40011c00 	.word	0x40011c00
 800ef80:	58024400 	.word	0x58024400
 800ef84:	58000c00 	.word	0x58000c00
 800ef88:	03d09000 	.word	0x03d09000
 800ef8c:	003d0900 	.word	0x003d0900
 800ef90:	08014500 	.word	0x08014500
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef96:	2200      	movs	r2, #0
 800ef98:	60bb      	str	r3, [r7, #8]
 800ef9a:	60fa      	str	r2, [r7, #12]
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa0:	4ac0      	ldr	r2, [pc, #768]	; (800f2a4 <UART_SetConfig+0xc28>)
 800efa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	2200      	movs	r2, #0
 800efaa:	603b      	str	r3, [r7, #0]
 800efac:	607a      	str	r2, [r7, #4]
 800efae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800efb6:	f7f1 f9f3 	bl	80003a0 <__aeabi_uldivmod>
 800efba:	4602      	mov	r2, r0
 800efbc:	460b      	mov	r3, r1
 800efbe:	4610      	mov	r0, r2
 800efc0:	4619      	mov	r1, r3
 800efc2:	f04f 0200 	mov.w	r2, #0
 800efc6:	f04f 0300 	mov.w	r3, #0
 800efca:	020b      	lsls	r3, r1, #8
 800efcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800efd0:	0202      	lsls	r2, r0, #8
 800efd2:	6979      	ldr	r1, [r7, #20]
 800efd4:	6849      	ldr	r1, [r1, #4]
 800efd6:	0849      	lsrs	r1, r1, #1
 800efd8:	2000      	movs	r0, #0
 800efda:	460c      	mov	r4, r1
 800efdc:	4605      	mov	r5, r0
 800efde:	eb12 0804 	adds.w	r8, r2, r4
 800efe2:	eb43 0905 	adc.w	r9, r3, r5
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	2200      	movs	r2, #0
 800efec:	469a      	mov	sl, r3
 800efee:	4693      	mov	fp, r2
 800eff0:	4652      	mov	r2, sl
 800eff2:	465b      	mov	r3, fp
 800eff4:	4640      	mov	r0, r8
 800eff6:	4649      	mov	r1, r9
 800eff8:	f7f1 f9d2 	bl	80003a0 <__aeabi_uldivmod>
 800effc:	4602      	mov	r2, r0
 800effe:	460b      	mov	r3, r1
 800f000:	4613      	mov	r3, r2
 800f002:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f00a:	d308      	bcc.n	800f01e <UART_SetConfig+0x9a2>
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f012:	d204      	bcs.n	800f01e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f01a:	60da      	str	r2, [r3, #12]
 800f01c:	e17f      	b.n	800f31e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f01e:	2301      	movs	r3, #1
 800f020:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f024:	e17b      	b.n	800f31e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	69db      	ldr	r3, [r3, #28]
 800f02a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f02e:	f040 80bd 	bne.w	800f1ac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f032:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f036:	2b20      	cmp	r3, #32
 800f038:	dc48      	bgt.n	800f0cc <UART_SetConfig+0xa50>
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	db7b      	blt.n	800f136 <UART_SetConfig+0xaba>
 800f03e:	2b20      	cmp	r3, #32
 800f040:	d879      	bhi.n	800f136 <UART_SetConfig+0xaba>
 800f042:	a201      	add	r2, pc, #4	; (adr r2, 800f048 <UART_SetConfig+0x9cc>)
 800f044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f048:	0800f0d3 	.word	0x0800f0d3
 800f04c:	0800f0db 	.word	0x0800f0db
 800f050:	0800f137 	.word	0x0800f137
 800f054:	0800f137 	.word	0x0800f137
 800f058:	0800f0e3 	.word	0x0800f0e3
 800f05c:	0800f137 	.word	0x0800f137
 800f060:	0800f137 	.word	0x0800f137
 800f064:	0800f137 	.word	0x0800f137
 800f068:	0800f0f3 	.word	0x0800f0f3
 800f06c:	0800f137 	.word	0x0800f137
 800f070:	0800f137 	.word	0x0800f137
 800f074:	0800f137 	.word	0x0800f137
 800f078:	0800f137 	.word	0x0800f137
 800f07c:	0800f137 	.word	0x0800f137
 800f080:	0800f137 	.word	0x0800f137
 800f084:	0800f137 	.word	0x0800f137
 800f088:	0800f103 	.word	0x0800f103
 800f08c:	0800f137 	.word	0x0800f137
 800f090:	0800f137 	.word	0x0800f137
 800f094:	0800f137 	.word	0x0800f137
 800f098:	0800f137 	.word	0x0800f137
 800f09c:	0800f137 	.word	0x0800f137
 800f0a0:	0800f137 	.word	0x0800f137
 800f0a4:	0800f137 	.word	0x0800f137
 800f0a8:	0800f137 	.word	0x0800f137
 800f0ac:	0800f137 	.word	0x0800f137
 800f0b0:	0800f137 	.word	0x0800f137
 800f0b4:	0800f137 	.word	0x0800f137
 800f0b8:	0800f137 	.word	0x0800f137
 800f0bc:	0800f137 	.word	0x0800f137
 800f0c0:	0800f137 	.word	0x0800f137
 800f0c4:	0800f137 	.word	0x0800f137
 800f0c8:	0800f129 	.word	0x0800f129
 800f0cc:	2b40      	cmp	r3, #64	; 0x40
 800f0ce:	d02e      	beq.n	800f12e <UART_SetConfig+0xab2>
 800f0d0:	e031      	b.n	800f136 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0d2:	f7f8 fa81 	bl	80075d8 <HAL_RCC_GetPCLK1Freq>
 800f0d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f0d8:	e033      	b.n	800f142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0da:	f7f8 fa93 	bl	8007604 <HAL_RCC_GetPCLK2Freq>
 800f0de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f0e0:	e02f      	b.n	800f142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7f9 fdf2 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0f0:	e027      	b.n	800f142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0f2:	f107 0318 	add.w	r3, r7, #24
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7f9 ff3e 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f100:	e01f      	b.n	800f142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f102:	4b69      	ldr	r3, [pc, #420]	; (800f2a8 <UART_SetConfig+0xc2c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f003 0320 	and.w	r3, r3, #32
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d009      	beq.n	800f122 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f10e:	4b66      	ldr	r3, [pc, #408]	; (800f2a8 <UART_SetConfig+0xc2c>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	08db      	lsrs	r3, r3, #3
 800f114:	f003 0303 	and.w	r3, r3, #3
 800f118:	4a64      	ldr	r2, [pc, #400]	; (800f2ac <UART_SetConfig+0xc30>)
 800f11a:	fa22 f303 	lsr.w	r3, r2, r3
 800f11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f120:	e00f      	b.n	800f142 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f122:	4b62      	ldr	r3, [pc, #392]	; (800f2ac <UART_SetConfig+0xc30>)
 800f124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f126:	e00c      	b.n	800f142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f128:	4b61      	ldr	r3, [pc, #388]	; (800f2b0 <UART_SetConfig+0xc34>)
 800f12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f12c:	e009      	b.n	800f142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f12e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f134:	e005      	b.n	800f142 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f136:	2300      	movs	r3, #0
 800f138:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f13a:	2301      	movs	r3, #1
 800f13c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f140:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f144:	2b00      	cmp	r3, #0
 800f146:	f000 80ea 	beq.w	800f31e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f14e:	4a55      	ldr	r2, [pc, #340]	; (800f2a4 <UART_SetConfig+0xc28>)
 800f150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f154:	461a      	mov	r2, r3
 800f156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f158:	fbb3 f3f2 	udiv	r3, r3, r2
 800f15c:	005a      	lsls	r2, r3, #1
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	085b      	lsrs	r3, r3, #1
 800f164:	441a      	add	r2, r3
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f16e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f172:	2b0f      	cmp	r3, #15
 800f174:	d916      	bls.n	800f1a4 <UART_SetConfig+0xb28>
 800f176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f17c:	d212      	bcs.n	800f1a4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f180:	b29b      	uxth	r3, r3
 800f182:	f023 030f 	bic.w	r3, r3, #15
 800f186:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18a:	085b      	lsrs	r3, r3, #1
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	f003 0307 	and.w	r3, r3, #7
 800f192:	b29a      	uxth	r2, r3
 800f194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f196:	4313      	orrs	r3, r2
 800f198:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f1a0:	60da      	str	r2, [r3, #12]
 800f1a2:	e0bc      	b.n	800f31e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f1aa:	e0b8      	b.n	800f31e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f1ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f1b0:	2b20      	cmp	r3, #32
 800f1b2:	dc4b      	bgt.n	800f24c <UART_SetConfig+0xbd0>
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f2c0 8087 	blt.w	800f2c8 <UART_SetConfig+0xc4c>
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	f200 8084 	bhi.w	800f2c8 <UART_SetConfig+0xc4c>
 800f1c0:	a201      	add	r2, pc, #4	; (adr r2, 800f1c8 <UART_SetConfig+0xb4c>)
 800f1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c6:	bf00      	nop
 800f1c8:	0800f253 	.word	0x0800f253
 800f1cc:	0800f25b 	.word	0x0800f25b
 800f1d0:	0800f2c9 	.word	0x0800f2c9
 800f1d4:	0800f2c9 	.word	0x0800f2c9
 800f1d8:	0800f263 	.word	0x0800f263
 800f1dc:	0800f2c9 	.word	0x0800f2c9
 800f1e0:	0800f2c9 	.word	0x0800f2c9
 800f1e4:	0800f2c9 	.word	0x0800f2c9
 800f1e8:	0800f273 	.word	0x0800f273
 800f1ec:	0800f2c9 	.word	0x0800f2c9
 800f1f0:	0800f2c9 	.word	0x0800f2c9
 800f1f4:	0800f2c9 	.word	0x0800f2c9
 800f1f8:	0800f2c9 	.word	0x0800f2c9
 800f1fc:	0800f2c9 	.word	0x0800f2c9
 800f200:	0800f2c9 	.word	0x0800f2c9
 800f204:	0800f2c9 	.word	0x0800f2c9
 800f208:	0800f283 	.word	0x0800f283
 800f20c:	0800f2c9 	.word	0x0800f2c9
 800f210:	0800f2c9 	.word	0x0800f2c9
 800f214:	0800f2c9 	.word	0x0800f2c9
 800f218:	0800f2c9 	.word	0x0800f2c9
 800f21c:	0800f2c9 	.word	0x0800f2c9
 800f220:	0800f2c9 	.word	0x0800f2c9
 800f224:	0800f2c9 	.word	0x0800f2c9
 800f228:	0800f2c9 	.word	0x0800f2c9
 800f22c:	0800f2c9 	.word	0x0800f2c9
 800f230:	0800f2c9 	.word	0x0800f2c9
 800f234:	0800f2c9 	.word	0x0800f2c9
 800f238:	0800f2c9 	.word	0x0800f2c9
 800f23c:	0800f2c9 	.word	0x0800f2c9
 800f240:	0800f2c9 	.word	0x0800f2c9
 800f244:	0800f2c9 	.word	0x0800f2c9
 800f248:	0800f2bb 	.word	0x0800f2bb
 800f24c:	2b40      	cmp	r3, #64	; 0x40
 800f24e:	d037      	beq.n	800f2c0 <UART_SetConfig+0xc44>
 800f250:	e03a      	b.n	800f2c8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f252:	f7f8 f9c1 	bl	80075d8 <HAL_RCC_GetPCLK1Freq>
 800f256:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f258:	e03c      	b.n	800f2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f25a:	f7f8 f9d3 	bl	8007604 <HAL_RCC_GetPCLK2Freq>
 800f25e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f260:	e038      	b.n	800f2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f266:	4618      	mov	r0, r3
 800f268:	f7f9 fd32 	bl	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f270:	e030      	b.n	800f2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f272:	f107 0318 	add.w	r3, r7, #24
 800f276:	4618      	mov	r0, r3
 800f278:	f7f9 fe7e 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f280:	e028      	b.n	800f2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f282:	4b09      	ldr	r3, [pc, #36]	; (800f2a8 <UART_SetConfig+0xc2c>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f003 0320 	and.w	r3, r3, #32
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d012      	beq.n	800f2b4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f28e:	4b06      	ldr	r3, [pc, #24]	; (800f2a8 <UART_SetConfig+0xc2c>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	08db      	lsrs	r3, r3, #3
 800f294:	f003 0303 	and.w	r3, r3, #3
 800f298:	4a04      	ldr	r2, [pc, #16]	; (800f2ac <UART_SetConfig+0xc30>)
 800f29a:	fa22 f303 	lsr.w	r3, r2, r3
 800f29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2a0:	e018      	b.n	800f2d4 <UART_SetConfig+0xc58>
 800f2a2:	bf00      	nop
 800f2a4:	08014500 	.word	0x08014500
 800f2a8:	58024400 	.word	0x58024400
 800f2ac:	03d09000 	.word	0x03d09000
 800f2b0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f2b4:	4b24      	ldr	r3, [pc, #144]	; (800f348 <UART_SetConfig+0xccc>)
 800f2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2b8:	e00c      	b.n	800f2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2ba:	4b24      	ldr	r3, [pc, #144]	; (800f34c <UART_SetConfig+0xcd0>)
 800f2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2be:	e009      	b.n	800f2d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2c6:	e005      	b.n	800f2d4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f2d2:	bf00      	nop
    }

    if (pclk != 0U)
 800f2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d021      	beq.n	800f31e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2de:	4a1c      	ldr	r2, [pc, #112]	; (800f350 <UART_SetConfig+0xcd4>)
 800f2e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e8:	fbb3 f2f2 	udiv	r2, r3, r2
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	085b      	lsrs	r3, r3, #1
 800f2f2:	441a      	add	r2, r3
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2fc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f300:	2b0f      	cmp	r3, #15
 800f302:	d909      	bls.n	800f318 <UART_SetConfig+0xc9c>
 800f304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f30a:	d205      	bcs.n	800f318 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30e:	b29a      	uxth	r2, r3
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	60da      	str	r2, [r3, #12]
 800f316:	e002      	b.n	800f31e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f318:	2301      	movs	r3, #1
 800f31a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	2201      	movs	r2, #1
 800f322:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	2201      	movs	r2, #1
 800f32a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2200      	movs	r2, #0
 800f332:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2200      	movs	r2, #0
 800f338:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f33a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3748      	adds	r7, #72	; 0x48
 800f342:	46bd      	mov	sp, r7
 800f344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f348:	03d09000 	.word	0x03d09000
 800f34c:	003d0900 	.word	0x003d0900
 800f350:	08014500 	.word	0x08014500

0800f354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f360:	f003 0301 	and.w	r3, r3, #1
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00a      	beq.n	800f37e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	430a      	orrs	r2, r1
 800f37c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f382:	f003 0302 	and.w	r3, r3, #2
 800f386:	2b00      	cmp	r3, #0
 800f388:	d00a      	beq.n	800f3a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	430a      	orrs	r2, r1
 800f39e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3a4:	f003 0304 	and.w	r3, r3, #4
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d00a      	beq.n	800f3c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	430a      	orrs	r2, r1
 800f3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c6:	f003 0308 	and.w	r3, r3, #8
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00a      	beq.n	800f3e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	430a      	orrs	r2, r1
 800f3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e8:	f003 0310 	and.w	r3, r3, #16
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d00a      	beq.n	800f406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	689b      	ldr	r3, [r3, #8]
 800f3f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	430a      	orrs	r2, r1
 800f404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f40a:	f003 0320 	and.w	r3, r3, #32
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00a      	beq.n	800f428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	430a      	orrs	r2, r1
 800f426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f42c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f430:	2b00      	cmp	r3, #0
 800f432:	d01a      	beq.n	800f46a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	430a      	orrs	r2, r1
 800f448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f44e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f452:	d10a      	bne.n	800f46a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	430a      	orrs	r2, r1
 800f468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00a      	beq.n	800f48c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	430a      	orrs	r2, r1
 800f48a:	605a      	str	r2, [r3, #4]
  }
}
 800f48c:	bf00      	nop
 800f48e:	370c      	adds	r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b086      	sub	sp, #24
 800f49c:	af02      	add	r7, sp, #8
 800f49e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f4a8:	f7f3 fe9a 	bl	80031e0 <HAL_GetTick>
 800f4ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f003 0308 	and.w	r3, r3, #8
 800f4b8:	2b08      	cmp	r3, #8
 800f4ba:	d10e      	bne.n	800f4da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 f82f 	bl	800f52e <UART_WaitOnFlagUntilTimeout>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d001      	beq.n	800f4da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4d6:	2303      	movs	r3, #3
 800f4d8:	e025      	b.n	800f526 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f003 0304 	and.w	r3, r3, #4
 800f4e4:	2b04      	cmp	r3, #4
 800f4e6:	d10e      	bne.n	800f506 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 f819 	bl	800f52e <UART_WaitOnFlagUntilTimeout>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d001      	beq.n	800f506 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f502:	2303      	movs	r3, #3
 800f504:	e00f      	b.n	800f526 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2220      	movs	r2, #32
 800f50a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2220      	movs	r2, #32
 800f512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f524:	2300      	movs	r3, #0
}
 800f526:	4618      	mov	r0, r3
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f52e:	b580      	push	{r7, lr}
 800f530:	b09c      	sub	sp, #112	; 0x70
 800f532:	af00      	add	r7, sp, #0
 800f534:	60f8      	str	r0, [r7, #12]
 800f536:	60b9      	str	r1, [r7, #8]
 800f538:	603b      	str	r3, [r7, #0]
 800f53a:	4613      	mov	r3, r2
 800f53c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f53e:	e0a9      	b.n	800f694 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f546:	f000 80a5 	beq.w	800f694 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f54a:	f7f3 fe49 	bl	80031e0 <HAL_GetTick>
 800f54e:	4602      	mov	r2, r0
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f556:	429a      	cmp	r2, r3
 800f558:	d302      	bcc.n	800f560 <UART_WaitOnFlagUntilTimeout+0x32>
 800f55a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d140      	bne.n	800f5e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f568:	e853 3f00 	ldrex	r3, [r3]
 800f56c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f570:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f574:	667b      	str	r3, [r7, #100]	; 0x64
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	461a      	mov	r2, r3
 800f57c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f57e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f580:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f582:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f584:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f586:	e841 2300 	strex	r3, r2, [r1]
 800f58a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f58c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1e6      	bne.n	800f560 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	3308      	adds	r3, #8
 800f598:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f59c:	e853 3f00 	ldrex	r3, [r3]
 800f5a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a4:	f023 0301 	bic.w	r3, r3, #1
 800f5a8:	663b      	str	r3, [r7, #96]	; 0x60
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	3308      	adds	r3, #8
 800f5b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f5b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800f5b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5ba:	e841 2300 	strex	r3, r2, [r1]
 800f5be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f5c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d1e5      	bne.n	800f592 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2220      	movs	r2, #32
 800f5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2220      	movs	r2, #32
 800f5d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f5de:	2303      	movs	r3, #3
 800f5e0:	e069      	b.n	800f6b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f003 0304 	and.w	r3, r3, #4
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d051      	beq.n	800f694 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	69db      	ldr	r3, [r3, #28]
 800f5f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5fe:	d149      	bne.n	800f694 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f608:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f612:	e853 3f00 	ldrex	r3, [r3]
 800f616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f61e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	461a      	mov	r2, r3
 800f626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f628:	637b      	str	r3, [r7, #52]	; 0x34
 800f62a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f62c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f62e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f630:	e841 2300 	strex	r3, r2, [r1]
 800f634:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d1e6      	bne.n	800f60a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	3308      	adds	r3, #8
 800f642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	e853 3f00 	ldrex	r3, [r3]
 800f64a:	613b      	str	r3, [r7, #16]
   return(result);
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	f023 0301 	bic.w	r3, r3, #1
 800f652:	66bb      	str	r3, [r7, #104]	; 0x68
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	3308      	adds	r3, #8
 800f65a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f65c:	623a      	str	r2, [r7, #32]
 800f65e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f660:	69f9      	ldr	r1, [r7, #28]
 800f662:	6a3a      	ldr	r2, [r7, #32]
 800f664:	e841 2300 	strex	r3, r2, [r1]
 800f668:	61bb      	str	r3, [r7, #24]
   return(result);
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1e5      	bne.n	800f63c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2220      	movs	r2, #32
 800f674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2220      	movs	r2, #32
 800f67c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2220      	movs	r2, #32
 800f684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2200      	movs	r2, #0
 800f68c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f690:	2303      	movs	r3, #3
 800f692:	e010      	b.n	800f6b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	69da      	ldr	r2, [r3, #28]
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	4013      	ands	r3, r2
 800f69e:	68ba      	ldr	r2, [r7, #8]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	bf0c      	ite	eq
 800f6a4:	2301      	moveq	r3, #1
 800f6a6:	2300      	movne	r3, #0
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	79fb      	ldrb	r3, [r7, #7]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	f43f af46 	beq.w	800f540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3770      	adds	r7, #112	; 0x70
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
	...

0800f6c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b0a3      	sub	sp, #140	; 0x8c
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	4613      	mov	r3, r2
 800f6cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	88fa      	ldrh	r2, [r7, #6]
 800f6d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	88fa      	ldrh	r2, [r7, #6]
 800f6e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6f2:	d10e      	bne.n	800f712 <UART_Start_Receive_IT+0x52>
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	691b      	ldr	r3, [r3, #16]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d105      	bne.n	800f708 <UART_Start_Receive_IT+0x48>
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f702:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f706:	e02d      	b.n	800f764 <UART_Start_Receive_IT+0xa4>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	22ff      	movs	r2, #255	; 0xff
 800f70c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f710:	e028      	b.n	800f764 <UART_Start_Receive_IT+0xa4>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	689b      	ldr	r3, [r3, #8]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d10d      	bne.n	800f736 <UART_Start_Receive_IT+0x76>
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d104      	bne.n	800f72c <UART_Start_Receive_IT+0x6c>
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	22ff      	movs	r2, #255	; 0xff
 800f726:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f72a:	e01b      	b.n	800f764 <UART_Start_Receive_IT+0xa4>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	227f      	movs	r2, #127	; 0x7f
 800f730:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f734:	e016      	b.n	800f764 <UART_Start_Receive_IT+0xa4>
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f73e:	d10d      	bne.n	800f75c <UART_Start_Receive_IT+0x9c>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	691b      	ldr	r3, [r3, #16]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d104      	bne.n	800f752 <UART_Start_Receive_IT+0x92>
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	227f      	movs	r2, #127	; 0x7f
 800f74c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f750:	e008      	b.n	800f764 <UART_Start_Receive_IT+0xa4>
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	223f      	movs	r2, #63	; 0x3f
 800f756:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f75a:	e003      	b.n	800f764 <UART_Start_Receive_IT+0xa4>
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2200      	movs	r2, #0
 800f760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2200      	movs	r2, #0
 800f768:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2222      	movs	r2, #34	; 0x22
 800f770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	3308      	adds	r3, #8
 800f77a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f77c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f77e:	e853 3f00 	ldrex	r3, [r3]
 800f782:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f786:	f043 0301 	orr.w	r3, r3, #1
 800f78a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	3308      	adds	r3, #8
 800f794:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f798:	673a      	str	r2, [r7, #112]	; 0x70
 800f79a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f79c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f79e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f7a0:	e841 2300 	strex	r3, r2, [r1]
 800f7a4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f7a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d1e3      	bne.n	800f774 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f7b4:	d153      	bne.n	800f85e <UART_Start_Receive_IT+0x19e>
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7bc:	88fa      	ldrh	r2, [r7, #6]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d34d      	bcc.n	800f85e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7ca:	d107      	bne.n	800f7dc <UART_Start_Receive_IT+0x11c>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	691b      	ldr	r3, [r3, #16]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d103      	bne.n	800f7dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	4a4b      	ldr	r2, [pc, #300]	; (800f904 <UART_Start_Receive_IT+0x244>)
 800f7d8:	671a      	str	r2, [r3, #112]	; 0x70
 800f7da:	e002      	b.n	800f7e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	4a4a      	ldr	r2, [pc, #296]	; (800f908 <UART_Start_Receive_IT+0x248>)
 800f7e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d01a      	beq.n	800f828 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7fa:	e853 3f00 	ldrex	r3, [r3]
 800f7fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	461a      	mov	r2, r3
 800f810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f814:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f816:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f818:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f81a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f81c:	e841 2300 	strex	r3, r2, [r1]
 800f820:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f824:	2b00      	cmp	r3, #0
 800f826:	d1e4      	bne.n	800f7f2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	3308      	adds	r3, #8
 800f82e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f832:	e853 3f00 	ldrex	r3, [r3]
 800f836:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f83e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	3308      	adds	r3, #8
 800f846:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f848:	64ba      	str	r2, [r7, #72]	; 0x48
 800f84a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f84c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f84e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f850:	e841 2300 	strex	r3, r2, [r1]
 800f854:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1e5      	bne.n	800f828 <UART_Start_Receive_IT+0x168>
 800f85c:	e04a      	b.n	800f8f4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	689b      	ldr	r3, [r3, #8]
 800f862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f866:	d107      	bne.n	800f878 <UART_Start_Receive_IT+0x1b8>
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	691b      	ldr	r3, [r3, #16]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d103      	bne.n	800f878 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	4a26      	ldr	r2, [pc, #152]	; (800f90c <UART_Start_Receive_IT+0x24c>)
 800f874:	671a      	str	r2, [r3, #112]	; 0x70
 800f876:	e002      	b.n	800f87e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	4a25      	ldr	r2, [pc, #148]	; (800f910 <UART_Start_Receive_IT+0x250>)
 800f87c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2200      	movs	r2, #0
 800f882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	691b      	ldr	r3, [r3, #16]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d019      	beq.n	800f8c2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f896:	e853 3f00 	ldrex	r3, [r3]
 800f89a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f8a2:	677b      	str	r3, [r7, #116]	; 0x74
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8ac:	637b      	str	r3, [r7, #52]	; 0x34
 800f8ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8b4:	e841 2300 	strex	r3, r2, [r1]
 800f8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1e6      	bne.n	800f88e <UART_Start_Receive_IT+0x1ce>
 800f8c0:	e018      	b.n	800f8f4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	e853 3f00 	ldrex	r3, [r3]
 800f8ce:	613b      	str	r3, [r7, #16]
   return(result);
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	f043 0320 	orr.w	r3, r3, #32
 800f8d6:	67bb      	str	r3, [r7, #120]	; 0x78
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8e0:	623b      	str	r3, [r7, #32]
 800f8e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8e4:	69f9      	ldr	r1, [r7, #28]
 800f8e6:	6a3a      	ldr	r2, [r7, #32]
 800f8e8:	e841 2300 	strex	r3, r2, [r1]
 800f8ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d1e6      	bne.n	800f8c2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f8f4:	2300      	movs	r3, #0
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	378c      	adds	r7, #140	; 0x8c
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr
 800f902:	bf00      	nop
 800f904:	0801001d 	.word	0x0801001d
 800f908:	0800fd25 	.word	0x0800fd25
 800f90c:	0800fbc3 	.word	0x0800fbc3
 800f910:	0800fa63 	.word	0x0800fa63

0800f914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f914:	b480      	push	{r7}
 800f916:	b095      	sub	sp, #84	; 0x54
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f924:	e853 3f00 	ldrex	r3, [r3]
 800f928:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f930:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	461a      	mov	r2, r3
 800f938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f93a:	643b      	str	r3, [r7, #64]	; 0x40
 800f93c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f942:	e841 2300 	strex	r3, r2, [r1]
 800f946:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1e6      	bne.n	800f91c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3308      	adds	r3, #8
 800f954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f956:	6a3b      	ldr	r3, [r7, #32]
 800f958:	e853 3f00 	ldrex	r3, [r3]
 800f95c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f95e:	69fa      	ldr	r2, [r7, #28]
 800f960:	4b1e      	ldr	r3, [pc, #120]	; (800f9dc <UART_EndRxTransfer+0xc8>)
 800f962:	4013      	ands	r3, r2
 800f964:	64bb      	str	r3, [r7, #72]	; 0x48
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	3308      	adds	r3, #8
 800f96c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f96e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f970:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f976:	e841 2300 	strex	r3, r2, [r1]
 800f97a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1e5      	bne.n	800f94e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f986:	2b01      	cmp	r3, #1
 800f988:	d118      	bne.n	800f9bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	e853 3f00 	ldrex	r3, [r3]
 800f996:	60bb      	str	r3, [r7, #8]
   return(result);
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	f023 0310 	bic.w	r3, r3, #16
 800f99e:	647b      	str	r3, [r7, #68]	; 0x44
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9a8:	61bb      	str	r3, [r7, #24]
 800f9aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ac:	6979      	ldr	r1, [r7, #20]
 800f9ae:	69ba      	ldr	r2, [r7, #24]
 800f9b0:	e841 2300 	strex	r3, r2, [r1]
 800f9b4:	613b      	str	r3, [r7, #16]
   return(result);
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d1e6      	bne.n	800f98a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2220      	movs	r2, #32
 800f9c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f9d0:	bf00      	nop
 800f9d2:	3754      	adds	r7, #84	; 0x54
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr
 800f9dc:	effffffe 	.word	0xeffffffe

0800f9e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	f7fe fe26 	bl	800e650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa04:	bf00      	nop
 800fa06:	3710      	adds	r7, #16
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b088      	sub	sp, #32
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	e853 3f00 	ldrex	r3, [r3]
 800fa20:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa28:	61fb      	str	r3, [r7, #28]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	61bb      	str	r3, [r7, #24]
 800fa34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa36:	6979      	ldr	r1, [r7, #20]
 800fa38:	69ba      	ldr	r2, [r7, #24]
 800fa3a:	e841 2300 	strex	r3, r2, [r1]
 800fa3e:	613b      	str	r3, [r7, #16]
   return(result);
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d1e6      	bne.n	800fa14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2220      	movs	r2, #32
 800fa4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2200      	movs	r2, #0
 800fa52:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f7fe fdf1 	bl	800e63c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa5a:	bf00      	nop
 800fa5c:	3720      	adds	r7, #32
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b096      	sub	sp, #88	; 0x58
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa7a:	2b22      	cmp	r3, #34	; 0x22
 800fa7c:	f040 8095 	bne.w	800fbaa <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fa8a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800fa8e:	b2d9      	uxtb	r1, r3
 800fa90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fa94:	b2da      	uxtb	r2, r3
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa9a:	400a      	ands	r2, r1
 800fa9c:	b2d2      	uxtb	r2, r2
 800fa9e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faa4:	1c5a      	adds	r2, r3, #1
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	3b01      	subs	r3, #1
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d178      	bne.n	800fbba <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800face:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad0:	e853 3f00 	ldrex	r3, [r3]
 800fad4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fadc:	653b      	str	r3, [r7, #80]	; 0x50
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fae6:	647b      	str	r3, [r7, #68]	; 0x44
 800fae8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800faec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800faee:	e841 2300 	strex	r3, r2, [r1]
 800faf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800faf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d1e6      	bne.n	800fac8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	3308      	adds	r3, #8
 800fb00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb04:	e853 3f00 	ldrex	r3, [r3]
 800fb08:	623b      	str	r3, [r7, #32]
   return(result);
 800fb0a:	6a3b      	ldr	r3, [r7, #32]
 800fb0c:	f023 0301 	bic.w	r3, r3, #1
 800fb10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3308      	adds	r3, #8
 800fb18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb1a:	633a      	str	r2, [r7, #48]	; 0x30
 800fb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb22:	e841 2300 	strex	r3, r2, [r1]
 800fb26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1e5      	bne.n	800fafa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2220      	movs	r2, #32
 800fb32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d12e      	bne.n	800fba2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	e853 3f00 	ldrex	r3, [r3]
 800fb56:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f023 0310 	bic.w	r3, r3, #16
 800fb5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	461a      	mov	r2, r3
 800fb66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb68:	61fb      	str	r3, [r7, #28]
 800fb6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb6c:	69b9      	ldr	r1, [r7, #24]
 800fb6e:	69fa      	ldr	r2, [r7, #28]
 800fb70:	e841 2300 	strex	r3, r2, [r1]
 800fb74:	617b      	str	r3, [r7, #20]
   return(result);
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d1e6      	bne.n	800fb4a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	69db      	ldr	r3, [r3, #28]
 800fb82:	f003 0310 	and.w	r3, r3, #16
 800fb86:	2b10      	cmp	r3, #16
 800fb88:	d103      	bne.n	800fb92 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2210      	movs	r2, #16
 800fb90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb98:	4619      	mov	r1, r3
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f7fe fd62 	bl	800e664 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fba0:	e00b      	b.n	800fbba <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f7f1 fea4 	bl	80018f0 <HAL_UART_RxCpltCallback>
}
 800fba8:	e007      	b.n	800fbba <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	699a      	ldr	r2, [r3, #24]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f042 0208 	orr.w	r2, r2, #8
 800fbb8:	619a      	str	r2, [r3, #24]
}
 800fbba:	bf00      	nop
 800fbbc:	3758      	adds	r7, #88	; 0x58
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}

0800fbc2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b096      	sub	sp, #88	; 0x58
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbd0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbda:	2b22      	cmp	r3, #34	; 0x22
 800fbdc:	f040 8095 	bne.w	800fd0a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbee:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800fbf0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800fbf4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fbf8:	4013      	ands	r3, r2
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbfe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc04:	1c9a      	adds	r2, r3, #2
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	3b01      	subs	r3, #1
 800fc14:	b29a      	uxth	r2, r3
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d178      	bne.n	800fd1a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc30:	e853 3f00 	ldrex	r3, [r3]
 800fc34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	461a      	mov	r2, r3
 800fc44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc46:	643b      	str	r3, [r7, #64]	; 0x40
 800fc48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc4e:	e841 2300 	strex	r3, r2, [r1]
 800fc52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1e6      	bne.n	800fc28 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	3308      	adds	r3, #8
 800fc60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc62:	6a3b      	ldr	r3, [r7, #32]
 800fc64:	e853 3f00 	ldrex	r3, [r3]
 800fc68:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	f023 0301 	bic.w	r3, r3, #1
 800fc70:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	3308      	adds	r3, #8
 800fc78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fc7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc82:	e841 2300 	strex	r3, r2, [r1]
 800fc86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d1e5      	bne.n	800fc5a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2220      	movs	r2, #32
 800fc92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d12e      	bne.n	800fd02 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2200      	movs	r2, #0
 800fca8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	e853 3f00 	ldrex	r3, [r3]
 800fcb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	f023 0310 	bic.w	r3, r3, #16
 800fcbe:	647b      	str	r3, [r7, #68]	; 0x44
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcc8:	61bb      	str	r3, [r7, #24]
 800fcca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fccc:	6979      	ldr	r1, [r7, #20]
 800fcce:	69ba      	ldr	r2, [r7, #24]
 800fcd0:	e841 2300 	strex	r3, r2, [r1]
 800fcd4:	613b      	str	r3, [r7, #16]
   return(result);
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d1e6      	bne.n	800fcaa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	69db      	ldr	r3, [r3, #28]
 800fce2:	f003 0310 	and.w	r3, r3, #16
 800fce6:	2b10      	cmp	r3, #16
 800fce8:	d103      	bne.n	800fcf2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2210      	movs	r2, #16
 800fcf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f7fe fcb2 	bl	800e664 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fd00:	e00b      	b.n	800fd1a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f7f1 fdf4 	bl	80018f0 <HAL_UART_RxCpltCallback>
}
 800fd08:	e007      	b.n	800fd1a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	699a      	ldr	r2, [r3, #24]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f042 0208 	orr.w	r2, r2, #8
 800fd18:	619a      	str	r2, [r3, #24]
}
 800fd1a:	bf00      	nop
 800fd1c:	3758      	adds	r7, #88	; 0x58
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
	...

0800fd24 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b0a6      	sub	sp, #152	; 0x98
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd32:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	69db      	ldr	r3, [r3, #28]
 800fd3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	689b      	ldr	r3, [r3, #8]
 800fd50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd5a:	2b22      	cmp	r3, #34	; 0x22
 800fd5c:	f040 814d 	bne.w	800fffa <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd66:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fd6a:	e0f4      	b.n	800ff56 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd72:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fd76:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800fd7a:	b2d9      	uxtb	r1, r3
 800fd7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fd80:	b2da      	uxtb	r2, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd86:	400a      	ands	r2, r1
 800fd88:	b2d2      	uxtb	r2, r2
 800fd8a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd90:	1c5a      	adds	r2, r3, #1
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	3b01      	subs	r3, #1
 800fda0:	b29a      	uxth	r2, r3
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	69db      	ldr	r3, [r3, #28]
 800fdae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fdb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fdb6:	f003 0307 	and.w	r3, r3, #7
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d053      	beq.n	800fe66 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fdbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fdc2:	f003 0301 	and.w	r3, r3, #1
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d011      	beq.n	800fdee <UART_RxISR_8BIT_FIFOEN+0xca>
 800fdca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d00b      	beq.n	800fdee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2201      	movs	r2, #1
 800fddc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fde4:	f043 0201 	orr.w	r2, r3, #1
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fdee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fdf2:	f003 0302 	and.w	r3, r3, #2
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d011      	beq.n	800fe1e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800fdfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fdfe:	f003 0301 	and.w	r3, r3, #1
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00b      	beq.n	800fe1e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2202      	movs	r2, #2
 800fe0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe14:	f043 0204 	orr.w	r2, r3, #4
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe22:	f003 0304 	and.w	r3, r3, #4
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d011      	beq.n	800fe4e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fe2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fe2e:	f003 0301 	and.w	r3, r3, #1
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d00b      	beq.n	800fe4e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2204      	movs	r2, #4
 800fe3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe44:	f043 0202 	orr.w	r2, r3, #2
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d006      	beq.n	800fe66 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7fe fbf9 	bl	800e650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d171      	bne.n	800ff56 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe7a:	e853 3f00 	ldrex	r3, [r3]
 800fe7e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fe80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe94:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe96:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe98:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fe9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe9c:	e841 2300 	strex	r3, r2, [r1]
 800fea0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1e4      	bne.n	800fe72 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	3308      	adds	r3, #8
 800feae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feb2:	e853 3f00 	ldrex	r3, [r3]
 800feb6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800feb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800feba:	4b56      	ldr	r3, [pc, #344]	; (8010014 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800febc:	4013      	ands	r3, r2
 800febe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3308      	adds	r3, #8
 800fec6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fec8:	657a      	str	r2, [r7, #84]	; 0x54
 800feca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fecc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fece:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fed0:	e841 2300 	strex	r3, r2, [r1]
 800fed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d1e5      	bne.n	800fea8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2220      	movs	r2, #32
 800fee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2200      	movs	r2, #0
 800fee8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d12e      	bne.n	800ff50 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fefe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff00:	e853 3f00 	ldrex	r3, [r3]
 800ff04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ff06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff08:	f023 0310 	bic.w	r3, r3, #16
 800ff0c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	461a      	mov	r2, r3
 800ff14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff16:	643b      	str	r3, [r7, #64]	; 0x40
 800ff18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff1e:	e841 2300 	strex	r3, r2, [r1]
 800ff22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ff24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d1e6      	bne.n	800fef8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	69db      	ldr	r3, [r3, #28]
 800ff30:	f003 0310 	and.w	r3, r3, #16
 800ff34:	2b10      	cmp	r3, #16
 800ff36:	d103      	bne.n	800ff40 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2210      	movs	r2, #16
 800ff3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff46:	4619      	mov	r1, r3
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7fe fb8b 	bl	800e664 <HAL_UARTEx_RxEventCallback>
 800ff4e:	e002      	b.n	800ff56 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7f1 fccd 	bl	80018f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d006      	beq.n	800ff6c <UART_RxISR_8BIT_FIFOEN+0x248>
 800ff5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff62:	f003 0320 	and.w	r3, r3, #32
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f47f af00 	bne.w	800fd6c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ff76:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d045      	beq.n	801000a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d23e      	bcs.n	801000a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	3308      	adds	r3, #8
 800ff92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff94:	6a3b      	ldr	r3, [r7, #32]
 800ff96:	e853 3f00 	ldrex	r3, [r3]
 800ff9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ffa2:	673b      	str	r3, [r7, #112]	; 0x70
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	3308      	adds	r3, #8
 800ffaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ffac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ffae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ffb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffb4:	e841 2300 	strex	r3, r2, [r1]
 800ffb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ffba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1e5      	bne.n	800ff8c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4a15      	ldr	r2, [pc, #84]	; (8010018 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800ffc4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	e853 3f00 	ldrex	r3, [r3]
 800ffd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	f043 0320 	orr.w	r3, r3, #32
 800ffda:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffe4:	61bb      	str	r3, [r7, #24]
 800ffe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe8:	6979      	ldr	r1, [r7, #20]
 800ffea:	69ba      	ldr	r2, [r7, #24]
 800ffec:	e841 2300 	strex	r3, r2, [r1]
 800fff0:	613b      	str	r3, [r7, #16]
   return(result);
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1e6      	bne.n	800ffc6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fff8:	e007      	b.n	801000a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	699a      	ldr	r2, [r3, #24]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f042 0208 	orr.w	r2, r2, #8
 8010008:	619a      	str	r2, [r3, #24]
}
 801000a:	bf00      	nop
 801000c:	3798      	adds	r7, #152	; 0x98
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	effffffe 	.word	0xeffffffe
 8010018:	0800fa63 	.word	0x0800fa63

0801001c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b0a8      	sub	sp, #160	; 0xa0
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801002a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	69db      	ldr	r3, [r3, #28]
 8010034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010052:	2b22      	cmp	r3, #34	; 0x22
 8010054:	f040 8151 	bne.w	80102fa <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801005e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010062:	e0f8      	b.n	8010256 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010072:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8010076:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 801007a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 801007e:	4013      	ands	r3, r2
 8010080:	b29a      	uxth	r2, r3
 8010082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010086:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801008c:	1c9a      	adds	r2, r3, #2
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010098:	b29b      	uxth	r3, r3
 801009a:	3b01      	subs	r3, #1
 801009c:	b29a      	uxth	r2, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	69db      	ldr	r3, [r3, #28]
 80100aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80100ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80100b2:	f003 0307 	and.w	r3, r3, #7
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d053      	beq.n	8010162 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80100ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80100be:	f003 0301 	and.w	r3, r3, #1
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d011      	beq.n	80100ea <UART_RxISR_16BIT_FIFOEN+0xce>
 80100c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00b      	beq.n	80100ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	2201      	movs	r2, #1
 80100d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100e0:	f043 0201 	orr.w	r2, r3, #1
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80100ee:	f003 0302 	and.w	r3, r3, #2
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d011      	beq.n	801011a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80100f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80100fa:	f003 0301 	and.w	r3, r3, #1
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d00b      	beq.n	801011a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	2202      	movs	r2, #2
 8010108:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010110:	f043 0204 	orr.w	r2, r3, #4
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801011a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801011e:	f003 0304 	and.w	r3, r3, #4
 8010122:	2b00      	cmp	r3, #0
 8010124:	d011      	beq.n	801014a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010126:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801012a:	f003 0301 	and.w	r3, r3, #1
 801012e:	2b00      	cmp	r3, #0
 8010130:	d00b      	beq.n	801014a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	2204      	movs	r2, #4
 8010138:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010140:	f043 0202 	orr.w	r2, r3, #2
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010150:	2b00      	cmp	r3, #0
 8010152:	d006      	beq.n	8010162 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f7fe fa7b 	bl	800e650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010168:	b29b      	uxth	r3, r3
 801016a:	2b00      	cmp	r3, #0
 801016c:	d173      	bne.n	8010256 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010176:	e853 3f00 	ldrex	r3, [r3]
 801017a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801017c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801017e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	461a      	mov	r2, r3
 801018c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010190:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010192:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010194:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010196:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010198:	e841 2300 	strex	r3, r2, [r1]
 801019c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801019e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d1e4      	bne.n	801016e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	3308      	adds	r3, #8
 80101aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101ae:	e853 3f00 	ldrex	r3, [r3]
 80101b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80101b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101b6:	4b57      	ldr	r3, [pc, #348]	; (8010314 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80101b8:	4013      	ands	r3, r2
 80101ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	3308      	adds	r3, #8
 80101c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80101c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80101ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80101ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101d0:	e841 2300 	strex	r3, r2, [r1]
 80101d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80101d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d1e3      	bne.n	80101a4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2220      	movs	r2, #32
 80101e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2200      	movs	r2, #0
 80101e8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d12e      	bne.n	8010250 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2200      	movs	r2, #0
 80101f6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010200:	e853 3f00 	ldrex	r3, [r3]
 8010204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010208:	f023 0310 	bic.w	r3, r3, #16
 801020c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	461a      	mov	r2, r3
 8010214:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010216:	647b      	str	r3, [r7, #68]	; 0x44
 8010218:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801021a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801021c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801021e:	e841 2300 	strex	r3, r2, [r1]
 8010222:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010226:	2b00      	cmp	r3, #0
 8010228:	d1e6      	bne.n	80101f8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	69db      	ldr	r3, [r3, #28]
 8010230:	f003 0310 	and.w	r3, r3, #16
 8010234:	2b10      	cmp	r3, #16
 8010236:	d103      	bne.n	8010240 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2210      	movs	r2, #16
 801023e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010246:	4619      	mov	r1, r3
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7fe fa0b 	bl	800e664 <HAL_UARTEx_RxEventCallback>
 801024e:	e002      	b.n	8010256 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7f1 fb4d 	bl	80018f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010256:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801025a:	2b00      	cmp	r3, #0
 801025c:	d006      	beq.n	801026c <UART_RxISR_16BIT_FIFOEN+0x250>
 801025e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010262:	f003 0320 	and.w	r3, r3, #32
 8010266:	2b00      	cmp	r3, #0
 8010268:	f47f aefc 	bne.w	8010064 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010272:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010276:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801027a:	2b00      	cmp	r3, #0
 801027c:	d045      	beq.n	801030a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010284:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8010288:	429a      	cmp	r2, r3
 801028a:	d23e      	bcs.n	801030a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	3308      	adds	r3, #8
 8010292:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010296:	e853 3f00 	ldrex	r3, [r3]
 801029a:	623b      	str	r3, [r7, #32]
   return(result);
 801029c:	6a3b      	ldr	r3, [r7, #32]
 801029e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80102a2:	677b      	str	r3, [r7, #116]	; 0x74
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	3308      	adds	r3, #8
 80102aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80102ac:	633a      	str	r2, [r7, #48]	; 0x30
 80102ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102b4:	e841 2300 	strex	r3, r2, [r1]
 80102b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80102ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d1e5      	bne.n	801028c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	4a15      	ldr	r2, [pc, #84]	; (8010318 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80102c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	e853 3f00 	ldrex	r3, [r3]
 80102d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f043 0320 	orr.w	r3, r3, #32
 80102da:	673b      	str	r3, [r7, #112]	; 0x70
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	461a      	mov	r2, r3
 80102e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102e4:	61fb      	str	r3, [r7, #28]
 80102e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e8:	69b9      	ldr	r1, [r7, #24]
 80102ea:	69fa      	ldr	r2, [r7, #28]
 80102ec:	e841 2300 	strex	r3, r2, [r1]
 80102f0:	617b      	str	r3, [r7, #20]
   return(result);
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1e6      	bne.n	80102c6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80102f8:	e007      	b.n	801030a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	699a      	ldr	r2, [r3, #24]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f042 0208 	orr.w	r2, r2, #8
 8010308:	619a      	str	r2, [r3, #24]
}
 801030a:	bf00      	nop
 801030c:	37a0      	adds	r7, #160	; 0xa0
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	effffffe 	.word	0xeffffffe
 8010318:	0800fbc3 	.word	0x0800fbc3

0801031c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801031c:	b480      	push	{r7}
 801031e:	b083      	sub	sp, #12
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010324:	bf00      	nop
 8010326:	370c      	adds	r7, #12
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010338:	bf00      	nop
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010358:	b480      	push	{r7}
 801035a:	b085      	sub	sp, #20
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010366:	2b01      	cmp	r3, #1
 8010368:	d101      	bne.n	801036e <HAL_UARTEx_DisableFifoMode+0x16>
 801036a:	2302      	movs	r3, #2
 801036c:	e027      	b.n	80103be <HAL_UARTEx_DisableFifoMode+0x66>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2201      	movs	r2, #1
 8010372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2224      	movs	r2, #36	; 0x24
 801037a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f022 0201 	bic.w	r2, r2, #1
 8010394:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801039c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2220      	movs	r2, #32
 80103b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2200      	movs	r2, #0
 80103b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80103bc:	2300      	movs	r3, #0
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3714      	adds	r7, #20
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr

080103ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80103ca:	b580      	push	{r7, lr}
 80103cc:	b084      	sub	sp, #16
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
 80103d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d101      	bne.n	80103e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80103de:	2302      	movs	r3, #2
 80103e0:	e02d      	b.n	801043e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2201      	movs	r2, #1
 80103e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2224      	movs	r2, #36	; 0x24
 80103ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	681a      	ldr	r2, [r3, #0]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f022 0201 	bic.w	r2, r2, #1
 8010408:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	689b      	ldr	r3, [r3, #8]
 8010410:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	683a      	ldr	r2, [r7, #0]
 801041a:	430a      	orrs	r2, r1
 801041c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 f850 	bl	80104c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2220      	movs	r2, #32
 8010430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2200      	movs	r2, #0
 8010438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801043c:	2300      	movs	r3, #0
}
 801043e:	4618      	mov	r0, r3
 8010440:	3710      	adds	r7, #16
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b084      	sub	sp, #16
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
 801044e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010456:	2b01      	cmp	r3, #1
 8010458:	d101      	bne.n	801045e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801045a:	2302      	movs	r3, #2
 801045c:	e02d      	b.n	80104ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2201      	movs	r2, #1
 8010462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2224      	movs	r2, #36	; 0x24
 801046a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f022 0201 	bic.w	r2, r2, #1
 8010484:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	683a      	ldr	r2, [r7, #0]
 8010496:	430a      	orrs	r2, r1
 8010498:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f000 f812 	bl	80104c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	68fa      	ldr	r2, [r7, #12]
 80104a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2220      	movs	r2, #32
 80104ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2200      	movs	r2, #0
 80104b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80104b8:	2300      	movs	r3, #0
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3710      	adds	r7, #16
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
	...

080104c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80104c4:	b480      	push	{r7}
 80104c6:	b085      	sub	sp, #20
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d108      	bne.n	80104e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2201      	movs	r2, #1
 80104d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2201      	movs	r2, #1
 80104e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80104e4:	e031      	b.n	801054a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80104e6:	2310      	movs	r3, #16
 80104e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80104ea:	2310      	movs	r3, #16
 80104ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	689b      	ldr	r3, [r3, #8]
 80104f4:	0e5b      	lsrs	r3, r3, #25
 80104f6:	b2db      	uxtb	r3, r3
 80104f8:	f003 0307 	and.w	r3, r3, #7
 80104fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	0f5b      	lsrs	r3, r3, #29
 8010506:	b2db      	uxtb	r3, r3
 8010508:	f003 0307 	and.w	r3, r3, #7
 801050c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801050e:	7bbb      	ldrb	r3, [r7, #14]
 8010510:	7b3a      	ldrb	r2, [r7, #12]
 8010512:	4911      	ldr	r1, [pc, #68]	; (8010558 <UARTEx_SetNbDataToProcess+0x94>)
 8010514:	5c8a      	ldrb	r2, [r1, r2]
 8010516:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801051a:	7b3a      	ldrb	r2, [r7, #12]
 801051c:	490f      	ldr	r1, [pc, #60]	; (801055c <UARTEx_SetNbDataToProcess+0x98>)
 801051e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010520:	fb93 f3f2 	sdiv	r3, r3, r2
 8010524:	b29a      	uxth	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801052c:	7bfb      	ldrb	r3, [r7, #15]
 801052e:	7b7a      	ldrb	r2, [r7, #13]
 8010530:	4909      	ldr	r1, [pc, #36]	; (8010558 <UARTEx_SetNbDataToProcess+0x94>)
 8010532:	5c8a      	ldrb	r2, [r1, r2]
 8010534:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010538:	7b7a      	ldrb	r2, [r7, #13]
 801053a:	4908      	ldr	r1, [pc, #32]	; (801055c <UARTEx_SetNbDataToProcess+0x98>)
 801053c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801053e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010542:	b29a      	uxth	r2, r3
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801054a:	bf00      	nop
 801054c:	3714      	adds	r7, #20
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	08014518 	.word	0x08014518
 801055c:	08014520 	.word	0x08014520

08010560 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010560:	b480      	push	{r7}
 8010562:	b083      	sub	sp, #12
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d121      	bne.n	80105b6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681a      	ldr	r2, [r3, #0]
 8010576:	4b27      	ldr	r3, [pc, #156]	; (8010614 <FMC_SDRAM_Init+0xb4>)
 8010578:	4013      	ands	r3, r2
 801057a:	683a      	ldr	r2, [r7, #0]
 801057c:	6851      	ldr	r1, [r2, #4]
 801057e:	683a      	ldr	r2, [r7, #0]
 8010580:	6892      	ldr	r2, [r2, #8]
 8010582:	4311      	orrs	r1, r2
 8010584:	683a      	ldr	r2, [r7, #0]
 8010586:	68d2      	ldr	r2, [r2, #12]
 8010588:	4311      	orrs	r1, r2
 801058a:	683a      	ldr	r2, [r7, #0]
 801058c:	6912      	ldr	r2, [r2, #16]
 801058e:	4311      	orrs	r1, r2
 8010590:	683a      	ldr	r2, [r7, #0]
 8010592:	6952      	ldr	r2, [r2, #20]
 8010594:	4311      	orrs	r1, r2
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	6992      	ldr	r2, [r2, #24]
 801059a:	4311      	orrs	r1, r2
 801059c:	683a      	ldr	r2, [r7, #0]
 801059e:	69d2      	ldr	r2, [r2, #28]
 80105a0:	4311      	orrs	r1, r2
 80105a2:	683a      	ldr	r2, [r7, #0]
 80105a4:	6a12      	ldr	r2, [r2, #32]
 80105a6:	4311      	orrs	r1, r2
 80105a8:	683a      	ldr	r2, [r7, #0]
 80105aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80105ac:	430a      	orrs	r2, r1
 80105ae:	431a      	orrs	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	601a      	str	r2, [r3, #0]
 80105b4:	e026      	b.n	8010604 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	69d9      	ldr	r1, [r3, #28]
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	6a1b      	ldr	r3, [r3, #32]
 80105c6:	4319      	orrs	r1, r3
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105cc:	430b      	orrs	r3, r1
 80105ce:	431a      	orrs	r2, r3
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	685a      	ldr	r2, [r3, #4]
 80105d8:	4b0e      	ldr	r3, [pc, #56]	; (8010614 <FMC_SDRAM_Init+0xb4>)
 80105da:	4013      	ands	r3, r2
 80105dc:	683a      	ldr	r2, [r7, #0]
 80105de:	6851      	ldr	r1, [r2, #4]
 80105e0:	683a      	ldr	r2, [r7, #0]
 80105e2:	6892      	ldr	r2, [r2, #8]
 80105e4:	4311      	orrs	r1, r2
 80105e6:	683a      	ldr	r2, [r7, #0]
 80105e8:	68d2      	ldr	r2, [r2, #12]
 80105ea:	4311      	orrs	r1, r2
 80105ec:	683a      	ldr	r2, [r7, #0]
 80105ee:	6912      	ldr	r2, [r2, #16]
 80105f0:	4311      	orrs	r1, r2
 80105f2:	683a      	ldr	r2, [r7, #0]
 80105f4:	6952      	ldr	r2, [r2, #20]
 80105f6:	4311      	orrs	r1, r2
 80105f8:	683a      	ldr	r2, [r7, #0]
 80105fa:	6992      	ldr	r2, [r2, #24]
 80105fc:	430a      	orrs	r2, r1
 80105fe:	431a      	orrs	r2, r3
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010604:	2300      	movs	r3, #0
}
 8010606:	4618      	mov	r0, r3
 8010608:	370c      	adds	r7, #12
 801060a:	46bd      	mov	sp, r7
 801060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010610:	4770      	bx	lr
 8010612:	bf00      	nop
 8010614:	ffff8000 	.word	0xffff8000

08010618 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010618:	b480      	push	{r7}
 801061a:	b085      	sub	sp, #20
 801061c:	af00      	add	r7, sp, #0
 801061e:	60f8      	str	r0, [r7, #12]
 8010620:	60b9      	str	r1, [r7, #8]
 8010622:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d128      	bne.n	801067c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	689b      	ldr	r3, [r3, #8]
 801062e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	1e59      	subs	r1, r3, #1
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	3b01      	subs	r3, #1
 801063e:	011b      	lsls	r3, r3, #4
 8010640:	4319      	orrs	r1, r3
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	689b      	ldr	r3, [r3, #8]
 8010646:	3b01      	subs	r3, #1
 8010648:	021b      	lsls	r3, r3, #8
 801064a:	4319      	orrs	r1, r3
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	3b01      	subs	r3, #1
 8010652:	031b      	lsls	r3, r3, #12
 8010654:	4319      	orrs	r1, r3
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	691b      	ldr	r3, [r3, #16]
 801065a:	3b01      	subs	r3, #1
 801065c:	041b      	lsls	r3, r3, #16
 801065e:	4319      	orrs	r1, r3
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	695b      	ldr	r3, [r3, #20]
 8010664:	3b01      	subs	r3, #1
 8010666:	051b      	lsls	r3, r3, #20
 8010668:	4319      	orrs	r1, r3
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	699b      	ldr	r3, [r3, #24]
 801066e:	3b01      	subs	r3, #1
 8010670:	061b      	lsls	r3, r3, #24
 8010672:	430b      	orrs	r3, r1
 8010674:	431a      	orrs	r2, r3
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	609a      	str	r2, [r3, #8]
 801067a:	e02d      	b.n	80106d8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	689a      	ldr	r2, [r3, #8]
 8010680:	4b19      	ldr	r3, [pc, #100]	; (80106e8 <FMC_SDRAM_Timing_Init+0xd0>)
 8010682:	4013      	ands	r3, r2
 8010684:	68ba      	ldr	r2, [r7, #8]
 8010686:	68d2      	ldr	r2, [r2, #12]
 8010688:	3a01      	subs	r2, #1
 801068a:	0311      	lsls	r1, r2, #12
 801068c:	68ba      	ldr	r2, [r7, #8]
 801068e:	6952      	ldr	r2, [r2, #20]
 8010690:	3a01      	subs	r2, #1
 8010692:	0512      	lsls	r2, r2, #20
 8010694:	430a      	orrs	r2, r1
 8010696:	431a      	orrs	r2, r3
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	1e59      	subs	r1, r3, #1
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	3b01      	subs	r3, #1
 80106b0:	011b      	lsls	r3, r3, #4
 80106b2:	4319      	orrs	r1, r3
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	689b      	ldr	r3, [r3, #8]
 80106b8:	3b01      	subs	r3, #1
 80106ba:	021b      	lsls	r3, r3, #8
 80106bc:	4319      	orrs	r1, r3
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	691b      	ldr	r3, [r3, #16]
 80106c2:	3b01      	subs	r3, #1
 80106c4:	041b      	lsls	r3, r3, #16
 80106c6:	4319      	orrs	r1, r3
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	699b      	ldr	r3, [r3, #24]
 80106cc:	3b01      	subs	r3, #1
 80106ce:	061b      	lsls	r3, r3, #24
 80106d0:	430b      	orrs	r3, r1
 80106d2:	431a      	orrs	r2, r3
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80106d8:	2300      	movs	r3, #0
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3714      	adds	r7, #20
 80106de:	46bd      	mov	sp, r7
 80106e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e4:	4770      	bx	lr
 80106e6:	bf00      	nop
 80106e8:	ff0f0fff 	.word	0xff0f0fff

080106ec <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b085      	sub	sp, #20
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	691a      	ldr	r2, [r3, #16]
 80106fc:	4b0c      	ldr	r3, [pc, #48]	; (8010730 <FMC_SDRAM_SendCommand+0x44>)
 80106fe:	4013      	ands	r3, r2
 8010700:	68ba      	ldr	r2, [r7, #8]
 8010702:	6811      	ldr	r1, [r2, #0]
 8010704:	68ba      	ldr	r2, [r7, #8]
 8010706:	6852      	ldr	r2, [r2, #4]
 8010708:	4311      	orrs	r1, r2
 801070a:	68ba      	ldr	r2, [r7, #8]
 801070c:	6892      	ldr	r2, [r2, #8]
 801070e:	3a01      	subs	r2, #1
 8010710:	0152      	lsls	r2, r2, #5
 8010712:	4311      	orrs	r1, r2
 8010714:	68ba      	ldr	r2, [r7, #8]
 8010716:	68d2      	ldr	r2, [r2, #12]
 8010718:	0252      	lsls	r2, r2, #9
 801071a:	430a      	orrs	r2, r1
 801071c:	431a      	orrs	r2, r3
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8010722:	2300      	movs	r3, #0
}
 8010724:	4618      	mov	r0, r3
 8010726:	3714      	adds	r7, #20
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr
 8010730:	ffc00000 	.word	0xffc00000

08010734 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8010734:	b480      	push	{r7}
 8010736:	b083      	sub	sp, #12
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	695a      	ldr	r2, [r3, #20]
 8010742:	4b07      	ldr	r3, [pc, #28]	; (8010760 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8010744:	4013      	ands	r3, r2
 8010746:	683a      	ldr	r2, [r7, #0]
 8010748:	0052      	lsls	r2, r2, #1
 801074a:	431a      	orrs	r2, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8010750:	2300      	movs	r3, #0
}
 8010752:	4618      	mov	r0, r3
 8010754:	370c      	adds	r7, #12
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	ffffc001 	.word	0xffffc001

08010764 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010764:	b084      	sub	sp, #16
 8010766:	b480      	push	{r7}
 8010768:	b085      	sub	sp, #20
 801076a:	af00      	add	r7, sp, #0
 801076c:	6078      	str	r0, [r7, #4]
 801076e:	f107 001c 	add.w	r0, r7, #28
 8010772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010776:	2300      	movs	r3, #0
 8010778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801077a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801077c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801077e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8010782:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010784:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8010786:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801078a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801078c:	68fa      	ldr	r2, [r7, #12]
 801078e:	4313      	orrs	r3, r2
 8010790:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	685a      	ldr	r2, [r3, #4]
 8010796:	4b07      	ldr	r3, [pc, #28]	; (80107b4 <SDMMC_Init+0x50>)
 8010798:	4013      	ands	r3, r2
 801079a:	68fa      	ldr	r2, [r7, #12]
 801079c:	431a      	orrs	r2, r3
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80107a2:	2300      	movs	r3, #0
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3714      	adds	r7, #20
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	b004      	add	sp, #16
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	ffc02c00 	.word	0xffc02c00

080107b8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b083      	sub	sp, #12
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	370c      	adds	r7, #12
 80107ca:	46bd      	mov	sp, r7
 80107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d0:	4770      	bx	lr

080107d2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80107d2:	b480      	push	{r7}
 80107d4:	b083      	sub	sp, #12
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]
 80107da:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	681a      	ldr	r2, [r3, #0]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80107e6:	2300      	movs	r3, #0
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	370c      	adds	r7, #12
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr

080107f4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b083      	sub	sp, #12
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f043 0203 	orr.w	r2, r3, #3
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010808:	2300      	movs	r3, #0
}
 801080a:	4618      	mov	r0, r3
 801080c:	370c      	adds	r7, #12
 801080e:	46bd      	mov	sp, r7
 8010810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010814:	4770      	bx	lr

08010816 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010816:	b480      	push	{r7}
 8010818:	b083      	sub	sp, #12
 801081a:	af00      	add	r7, sp, #0
 801081c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f003 0303 	and.w	r3, r3, #3
}
 8010826:	4618      	mov	r0, r3
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
	...

08010834 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010834:	b480      	push	{r7}
 8010836:	b085      	sub	sp, #20
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801083e:	2300      	movs	r3, #0
 8010840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010852:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010858:	431a      	orrs	r2, r3
                       Command->CPSM);
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801085e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	4313      	orrs	r3, r2
 8010864:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	68da      	ldr	r2, [r3, #12]
 801086a:	4b06      	ldr	r3, [pc, #24]	; (8010884 <SDMMC_SendCommand+0x50>)
 801086c:	4013      	ands	r3, r2
 801086e:	68fa      	ldr	r2, [r7, #12]
 8010870:	431a      	orrs	r2, r3
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010876:	2300      	movs	r3, #0
}
 8010878:	4618      	mov	r0, r3
 801087a:	3714      	adds	r7, #20
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr
 8010884:	fffee0c0 	.word	0xfffee0c0

08010888 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	691b      	ldr	r3, [r3, #16]
 8010894:	b2db      	uxtb	r3, r3
}
 8010896:	4618      	mov	r0, r3
 8010898:	370c      	adds	r7, #12
 801089a:	46bd      	mov	sp, r7
 801089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a0:	4770      	bx	lr

080108a2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80108a2:	b480      	push	{r7}
 80108a4:	b085      	sub	sp, #20
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
 80108aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	3314      	adds	r3, #20
 80108b0:	461a      	mov	r2, r3
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	4413      	add	r3, r2
 80108b6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3714      	adds	r7, #20
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr

080108c8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80108d2:	2300      	movs	r3, #0
 80108d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	685a      	ldr	r2, [r3, #4]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80108ee:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80108f4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80108fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	4313      	orrs	r3, r2
 8010900:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	431a      	orrs	r2, r3
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010912:	2300      	movs	r3, #0

}
 8010914:	4618      	mov	r0, r3
 8010916:	3714      	adds	r7, #20
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b088      	sub	sp, #32
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801092e:	2310      	movs	r3, #16
 8010930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010938:	2300      	movs	r3, #0
 801093a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010940:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010942:	f107 0308 	add.w	r3, r7, #8
 8010946:	4619      	mov	r1, r3
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f7ff ff73 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801094e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010952:	2110      	movs	r1, #16
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 fa5f 	bl	8010e18 <SDMMC_GetCmdResp1>
 801095a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801095c:	69fb      	ldr	r3, [r7, #28]
}
 801095e:	4618      	mov	r0, r3
 8010960:	3720      	adds	r7, #32
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}

08010966 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010966:	b580      	push	{r7, lr}
 8010968:	b088      	sub	sp, #32
 801096a:	af00      	add	r7, sp, #0
 801096c:	6078      	str	r0, [r7, #4]
 801096e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010974:	2311      	movs	r3, #17
 8010976:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010978:	f44f 7380 	mov.w	r3, #256	; 0x100
 801097c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801097e:	2300      	movs	r3, #0
 8010980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010986:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010988:	f107 0308 	add.w	r3, r7, #8
 801098c:	4619      	mov	r1, r3
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f7ff ff50 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010994:	f241 3288 	movw	r2, #5000	; 0x1388
 8010998:	2111      	movs	r1, #17
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f000 fa3c 	bl	8010e18 <SDMMC_GetCmdResp1>
 80109a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109a2:	69fb      	ldr	r3, [r7, #28]
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3720      	adds	r7, #32
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b088      	sub	sp, #32
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80109ba:	2312      	movs	r3, #18
 80109bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109c4:	2300      	movs	r3, #0
 80109c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109ce:	f107 0308 	add.w	r3, r7, #8
 80109d2:	4619      	mov	r1, r3
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7ff ff2d 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80109da:	f241 3288 	movw	r2, #5000	; 0x1388
 80109de:	2112      	movs	r1, #18
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 fa19 	bl	8010e18 <SDMMC_GetCmdResp1>
 80109e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109e8:	69fb      	ldr	r3, [r7, #28]
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3720      	adds	r7, #32
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}

080109f2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80109f2:	b580      	push	{r7, lr}
 80109f4:	b088      	sub	sp, #32
 80109f6:	af00      	add	r7, sp, #0
 80109f8:	6078      	str	r0, [r7, #4]
 80109fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010a00:	2318      	movs	r3, #24
 8010a02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a14:	f107 0308 	add.w	r3, r7, #8
 8010a18:	4619      	mov	r1, r3
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f7ff ff0a 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a24:	2118      	movs	r1, #24
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 f9f6 	bl	8010e18 <SDMMC_GetCmdResp1>
 8010a2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a2e:	69fb      	ldr	r3, [r7, #28]
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3720      	adds	r7, #32
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b088      	sub	sp, #32
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010a46:	2319      	movs	r3, #25
 8010a48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a50:	2300      	movs	r3, #0
 8010a52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a5a:	f107 0308 	add.w	r3, r7, #8
 8010a5e:	4619      	mov	r1, r3
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7ff fee7 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a6a:	2119      	movs	r1, #25
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f000 f9d3 	bl	8010e18 <SDMMC_GetCmdResp1>
 8010a72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a74:	69fb      	ldr	r3, [r7, #28]
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3720      	adds	r7, #32
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
	...

08010a80 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b088      	sub	sp, #32
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010a8c:	230c      	movs	r3, #12
 8010a8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a96:	2300      	movs	r3, #0
 8010a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a9e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ab8:	f107 0308 	add.w	r3, r7, #8
 8010abc:	4619      	mov	r1, r3
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f7ff feb8 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010ac4:	4a0b      	ldr	r2, [pc, #44]	; (8010af4 <SDMMC_CmdStopTransfer+0x74>)
 8010ac6:	210c      	movs	r1, #12
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f000 f9a5 	bl	8010e18 <SDMMC_GetCmdResp1>
 8010ace:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010ae2:	d101      	bne.n	8010ae8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010ae8:	69fb      	ldr	r3, [r7, #28]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3720      	adds	r7, #32
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	05f5e100 	.word	0x05f5e100

08010af8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b088      	sub	sp, #32
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010b06:	2307      	movs	r3, #7
 8010b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b10:	2300      	movs	r3, #0
 8010b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b1a:	f107 0308 	add.w	r3, r7, #8
 8010b1e:	4619      	mov	r1, r3
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7ff fe87 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b2a:	2107      	movs	r1, #7
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 f973 	bl	8010e18 <SDMMC_GetCmdResp1>
 8010b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b34:	69fb      	ldr	r3, [r7, #28]
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3720      	adds	r7, #32
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b088      	sub	sp, #32
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010b46:	2300      	movs	r3, #0
 8010b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b52:	2300      	movs	r3, #0
 8010b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b5c:	f107 0308 	add.w	r3, r7, #8
 8010b60:	4619      	mov	r1, r3
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f7ff fe66 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 fb97 	bl	801129c <SDMMC_GetCmdError>
 8010b6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b70:	69fb      	ldr	r3, [r7, #28]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3720      	adds	r7, #32
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b088      	sub	sp, #32
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010b82:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010b86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010b88:	2308      	movs	r3, #8
 8010b8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b92:	2300      	movs	r3, #0
 8010b94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b9c:	f107 0308 	add.w	r3, r7, #8
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7ff fe46 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f000 fb29 	bl	8011200 <SDMMC_GetCmdResp7>
 8010bae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bb0:	69fb      	ldr	r3, [r7, #28]
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3720      	adds	r7, #32
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}

08010bba <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010bba:	b580      	push	{r7, lr}
 8010bbc:	b088      	sub	sp, #32
 8010bbe:	af00      	add	r7, sp, #0
 8010bc0:	6078      	str	r0, [r7, #4]
 8010bc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010bc8:	2337      	movs	r3, #55	; 0x37
 8010bca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bdc:	f107 0308 	add.w	r3, r7, #8
 8010be0:	4619      	mov	r1, r3
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7ff fe26 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bec:	2137      	movs	r1, #55	; 0x37
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f000 f912 	bl	8010e18 <SDMMC_GetCmdResp1>
 8010bf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bf6:	69fb      	ldr	r3, [r7, #28]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3720      	adds	r7, #32
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b088      	sub	sp, #32
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010c0e:	2329      	movs	r3, #41	; 0x29
 8010c10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c22:	f107 0308 	add.w	r3, r7, #8
 8010c26:	4619      	mov	r1, r3
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f7ff fe03 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f000 fa2e 	bl	8011090 <SDMMC_GetCmdResp3>
 8010c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c36:	69fb      	ldr	r3, [r7, #28]
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3720      	adds	r7, #32
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b088      	sub	sp, #32
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010c4e:	2306      	movs	r3, #6
 8010c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c62:	f107 0308 	add.w	r3, r7, #8
 8010c66:	4619      	mov	r1, r3
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7ff fde3 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c72:	2106      	movs	r1, #6
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f000 f8cf 	bl	8010e18 <SDMMC_GetCmdResp1>
 8010c7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c7c:	69fb      	ldr	r3, [r7, #28]
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3720      	adds	r7, #32
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b088      	sub	sp, #32
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010c92:	2333      	movs	r3, #51	; 0x33
 8010c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ca4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ca6:	f107 0308 	add.w	r3, r7, #8
 8010caa:	4619      	mov	r1, r3
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7ff fdc1 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cb6:	2133      	movs	r1, #51	; 0x33
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f000 f8ad 	bl	8010e18 <SDMMC_GetCmdResp1>
 8010cbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cc0:	69fb      	ldr	r3, [r7, #28]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3720      	adds	r7, #32
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}

08010cca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010cca:	b580      	push	{r7, lr}
 8010ccc:	b088      	sub	sp, #32
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010cd6:	2302      	movs	r3, #2
 8010cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010cda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ce8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cea:	f107 0308 	add.w	r3, r7, #8
 8010cee:	4619      	mov	r1, r3
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f7ff fd9f 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f000 f980 	bl	8010ffc <SDMMC_GetCmdResp2>
 8010cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cfe:	69fb      	ldr	r3, [r7, #28]
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3720      	adds	r7, #32
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}

08010d08 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b088      	sub	sp, #32
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010d16:	2309      	movs	r3, #9
 8010d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d20:	2300      	movs	r3, #0
 8010d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d2a:	f107 0308 	add.w	r3, r7, #8
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f7ff fd7f 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f000 f960 	bl	8010ffc <SDMMC_GetCmdResp2>
 8010d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d3e:	69fb      	ldr	r3, [r7, #28]
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3720      	adds	r7, #32
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b088      	sub	sp, #32
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010d52:	2300      	movs	r3, #0
 8010d54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010d56:	2303      	movs	r3, #3
 8010d58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d60:	2300      	movs	r3, #0
 8010d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d6a:	f107 0308 	add.w	r3, r7, #8
 8010d6e:	4619      	mov	r1, r3
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7ff fd5f 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010d76:	683a      	ldr	r2, [r7, #0]
 8010d78:	2103      	movs	r1, #3
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 f9c8 	bl	8011110 <SDMMC_GetCmdResp6>
 8010d80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d82:	69fb      	ldr	r3, [r7, #28]
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3720      	adds	r7, #32
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b088      	sub	sp, #32
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010d9a:	230d      	movs	r3, #13
 8010d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010da4:	2300      	movs	r3, #0
 8010da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010dac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dae:	f107 0308 	add.w	r3, r7, #8
 8010db2:	4619      	mov	r1, r3
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7ff fd3d 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dbe:	210d      	movs	r1, #13
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f000 f829 	bl	8010e18 <SDMMC_GetCmdResp1>
 8010dc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dc8:	69fb      	ldr	r3, [r7, #28]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3720      	adds	r7, #32
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b088      	sub	sp, #32
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010dde:	230d      	movs	r3, #13
 8010de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010de6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010de8:	2300      	movs	r3, #0
 8010dea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010df0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010df2:	f107 0308 	add.w	r3, r7, #8
 8010df6:	4619      	mov	r1, r3
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f7ff fd1b 	bl	8010834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e02:	210d      	movs	r1, #13
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f000 f807 	bl	8010e18 <SDMMC_GetCmdResp1>
 8010e0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e0c:	69fb      	ldr	r3, [r7, #28]
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3720      	adds	r7, #32
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
	...

08010e18 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b088      	sub	sp, #32
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	460b      	mov	r3, r1
 8010e22:	607a      	str	r2, [r7, #4]
 8010e24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010e26:	4b70      	ldr	r3, [pc, #448]	; (8010fe8 <SDMMC_GetCmdResp1+0x1d0>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4a70      	ldr	r2, [pc, #448]	; (8010fec <SDMMC_GetCmdResp1+0x1d4>)
 8010e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8010e30:	0a5a      	lsrs	r2, r3, #9
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	fb02 f303 	mul.w	r3, r2, r3
 8010e38:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010e3a:	69fb      	ldr	r3, [r7, #28]
 8010e3c:	1e5a      	subs	r2, r3, #1
 8010e3e:	61fa      	str	r2, [r7, #28]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d102      	bne.n	8010e4a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e48:	e0c9      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010e50:	69ba      	ldr	r2, [r7, #24]
 8010e52:	4b67      	ldr	r3, [pc, #412]	; (8010ff0 <SDMMC_GetCmdResp1+0x1d8>)
 8010e54:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d0ef      	beq.n	8010e3a <SDMMC_GetCmdResp1+0x22>
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d1ea      	bne.n	8010e3a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e68:	f003 0304 	and.w	r3, r3, #4
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d004      	beq.n	8010e7a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	2204      	movs	r2, #4
 8010e74:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e76:	2304      	movs	r3, #4
 8010e78:	e0b1      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e7e:	f003 0301 	and.w	r3, r3, #1
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d004      	beq.n	8010e90 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2201      	movs	r2, #1
 8010e8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	e0a6      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	4a58      	ldr	r2, [pc, #352]	; (8010ff4 <SDMMC_GetCmdResp1+0x1dc>)
 8010e94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010e96:	68f8      	ldr	r0, [r7, #12]
 8010e98:	f7ff fcf6 	bl	8010888 <SDMMC_GetCommandResponse>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	7afb      	ldrb	r3, [r7, #11]
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d001      	beq.n	8010eaa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	e099      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010eaa:	2100      	movs	r1, #0
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	f7ff fcf8 	bl	80108a2 <SDMMC_GetResponse>
 8010eb2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010eb4:	697a      	ldr	r2, [r7, #20]
 8010eb6:	4b50      	ldr	r3, [pc, #320]	; (8010ff8 <SDMMC_GetCmdResp1+0x1e0>)
 8010eb8:	4013      	ands	r3, r2
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d101      	bne.n	8010ec2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	e08d      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	da02      	bge.n	8010ece <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010ecc:	e087      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d001      	beq.n	8010edc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010ed8:	2340      	movs	r3, #64	; 0x40
 8010eda:	e080      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d001      	beq.n	8010eea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010ee6:	2380      	movs	r3, #128	; 0x80
 8010ee8:	e079      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d002      	beq.n	8010efa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ef8:	e071      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f08:	e069      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d002      	beq.n	8010f1a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f18:	e061      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d002      	beq.n	8010f2a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f28:	e059      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d002      	beq.n	8010f3a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f38:	e051      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d002      	beq.n	8010f4a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010f48:	e049      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d002      	beq.n	8010f5a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010f54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010f58:	e041      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d002      	beq.n	8010f6a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f68:	e039      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d002      	beq.n	8010f7a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010f78:	e031      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d002      	beq.n	8010f8a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010f84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010f88:	e029      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d002      	beq.n	8010f9a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010f94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010f98:	e021      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d002      	beq.n	8010faa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010fa4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010fa8:	e019      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d002      	beq.n	8010fba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010fb8:	e011      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010fc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010fc8:	e009      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	f003 0308 	and.w	r3, r3, #8
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d002      	beq.n	8010fda <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010fd4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010fd8:	e001      	b.n	8010fde <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3720      	adds	r7, #32
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	24000008 	.word	0x24000008
 8010fec:	10624dd3 	.word	0x10624dd3
 8010ff0:	00200045 	.word	0x00200045
 8010ff4:	002000c5 	.word	0x002000c5
 8010ff8:	fdffe008 	.word	0xfdffe008

08010ffc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b085      	sub	sp, #20
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011004:	4b1f      	ldr	r3, [pc, #124]	; (8011084 <SDMMC_GetCmdResp2+0x88>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	4a1f      	ldr	r2, [pc, #124]	; (8011088 <SDMMC_GetCmdResp2+0x8c>)
 801100a:	fba2 2303 	umull	r2, r3, r2, r3
 801100e:	0a5b      	lsrs	r3, r3, #9
 8011010:	f241 3288 	movw	r2, #5000	; 0x1388
 8011014:	fb02 f303 	mul.w	r3, r2, r3
 8011018:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	1e5a      	subs	r2, r3, #1
 801101e:	60fa      	str	r2, [r7, #12]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d102      	bne.n	801102a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011028:	e026      	b.n	8011078 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801102e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011036:	2b00      	cmp	r3, #0
 8011038:	d0ef      	beq.n	801101a <SDMMC_GetCmdResp2+0x1e>
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011040:	2b00      	cmp	r3, #0
 8011042:	d1ea      	bne.n	801101a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011048:	f003 0304 	and.w	r3, r3, #4
 801104c:	2b00      	cmp	r3, #0
 801104e:	d004      	beq.n	801105a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2204      	movs	r2, #4
 8011054:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011056:	2304      	movs	r3, #4
 8011058:	e00e      	b.n	8011078 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801105e:	f003 0301 	and.w	r3, r3, #1
 8011062:	2b00      	cmp	r3, #0
 8011064:	d004      	beq.n	8011070 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2201      	movs	r2, #1
 801106a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801106c:	2301      	movs	r3, #1
 801106e:	e003      	b.n	8011078 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	4a06      	ldr	r2, [pc, #24]	; (801108c <SDMMC_GetCmdResp2+0x90>)
 8011074:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3714      	adds	r7, #20
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr
 8011084:	24000008 	.word	0x24000008
 8011088:	10624dd3 	.word	0x10624dd3
 801108c:	002000c5 	.word	0x002000c5

08011090 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011090:	b480      	push	{r7}
 8011092:	b085      	sub	sp, #20
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011098:	4b1a      	ldr	r3, [pc, #104]	; (8011104 <SDMMC_GetCmdResp3+0x74>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	4a1a      	ldr	r2, [pc, #104]	; (8011108 <SDMMC_GetCmdResp3+0x78>)
 801109e:	fba2 2303 	umull	r2, r3, r2, r3
 80110a2:	0a5b      	lsrs	r3, r3, #9
 80110a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80110a8:	fb02 f303 	mul.w	r3, r2, r3
 80110ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	1e5a      	subs	r2, r3, #1
 80110b2:	60fa      	str	r2, [r7, #12]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d102      	bne.n	80110be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110bc:	e01b      	b.n	80110f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110c2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d0ef      	beq.n	80110ae <SDMMC_GetCmdResp3+0x1e>
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d1ea      	bne.n	80110ae <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110dc:	f003 0304 	and.w	r3, r3, #4
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d004      	beq.n	80110ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2204      	movs	r2, #4
 80110e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110ea:	2304      	movs	r3, #4
 80110ec:	e003      	b.n	80110f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	4a06      	ldr	r2, [pc, #24]	; (801110c <SDMMC_GetCmdResp3+0x7c>)
 80110f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80110f4:	2300      	movs	r3, #0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3714      	adds	r7, #20
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr
 8011102:	bf00      	nop
 8011104:	24000008 	.word	0x24000008
 8011108:	10624dd3 	.word	0x10624dd3
 801110c:	002000c5 	.word	0x002000c5

08011110 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b088      	sub	sp, #32
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	460b      	mov	r3, r1
 801111a:	607a      	str	r2, [r7, #4]
 801111c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801111e:	4b35      	ldr	r3, [pc, #212]	; (80111f4 <SDMMC_GetCmdResp6+0xe4>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4a35      	ldr	r2, [pc, #212]	; (80111f8 <SDMMC_GetCmdResp6+0xe8>)
 8011124:	fba2 2303 	umull	r2, r3, r2, r3
 8011128:	0a5b      	lsrs	r3, r3, #9
 801112a:	f241 3288 	movw	r2, #5000	; 0x1388
 801112e:	fb02 f303 	mul.w	r3, r2, r3
 8011132:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	1e5a      	subs	r2, r3, #1
 8011138:	61fa      	str	r2, [r7, #28]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d102      	bne.n	8011144 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801113e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011142:	e052      	b.n	80111ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011148:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801114a:	69bb      	ldr	r3, [r7, #24]
 801114c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011150:	2b00      	cmp	r3, #0
 8011152:	d0ef      	beq.n	8011134 <SDMMC_GetCmdResp6+0x24>
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801115a:	2b00      	cmp	r3, #0
 801115c:	d1ea      	bne.n	8011134 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011162:	f003 0304 	and.w	r3, r3, #4
 8011166:	2b00      	cmp	r3, #0
 8011168:	d004      	beq.n	8011174 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2204      	movs	r2, #4
 801116e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011170:	2304      	movs	r3, #4
 8011172:	e03a      	b.n	80111ea <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011178:	f003 0301 	and.w	r3, r3, #1
 801117c:	2b00      	cmp	r3, #0
 801117e:	d004      	beq.n	801118a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2201      	movs	r2, #1
 8011184:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011186:	2301      	movs	r3, #1
 8011188:	e02f      	b.n	80111ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801118a:	68f8      	ldr	r0, [r7, #12]
 801118c:	f7ff fb7c 	bl	8010888 <SDMMC_GetCommandResponse>
 8011190:	4603      	mov	r3, r0
 8011192:	461a      	mov	r2, r3
 8011194:	7afb      	ldrb	r3, [r7, #11]
 8011196:	4293      	cmp	r3, r2
 8011198:	d001      	beq.n	801119e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801119a:	2301      	movs	r3, #1
 801119c:	e025      	b.n	80111ea <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	4a16      	ldr	r2, [pc, #88]	; (80111fc <SDMMC_GetCmdResp6+0xec>)
 80111a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80111a4:	2100      	movs	r1, #0
 80111a6:	68f8      	ldr	r0, [r7, #12]
 80111a8:	f7ff fb7b 	bl	80108a2 <SDMMC_GetResponse>
 80111ac:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d106      	bne.n	80111c6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	0c1b      	lsrs	r3, r3, #16
 80111bc:	b29a      	uxth	r2, r3
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80111c2:	2300      	movs	r3, #0
 80111c4:	e011      	b.n	80111ea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d002      	beq.n	80111d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80111d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80111d4:	e009      	b.n	80111ea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d002      	beq.n	80111e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80111e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111e4:	e001      	b.n	80111ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80111e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3720      	adds	r7, #32
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	24000008 	.word	0x24000008
 80111f8:	10624dd3 	.word	0x10624dd3
 80111fc:	002000c5 	.word	0x002000c5

08011200 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011200:	b480      	push	{r7}
 8011202:	b085      	sub	sp, #20
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011208:	4b22      	ldr	r3, [pc, #136]	; (8011294 <SDMMC_GetCmdResp7+0x94>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	4a22      	ldr	r2, [pc, #136]	; (8011298 <SDMMC_GetCmdResp7+0x98>)
 801120e:	fba2 2303 	umull	r2, r3, r2, r3
 8011212:	0a5b      	lsrs	r3, r3, #9
 8011214:	f241 3288 	movw	r2, #5000	; 0x1388
 8011218:	fb02 f303 	mul.w	r3, r2, r3
 801121c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	1e5a      	subs	r2, r3, #1
 8011222:	60fa      	str	r2, [r7, #12]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d102      	bne.n	801122e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011228:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801122c:	e02c      	b.n	8011288 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011232:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801123a:	2b00      	cmp	r3, #0
 801123c:	d0ef      	beq.n	801121e <SDMMC_GetCmdResp7+0x1e>
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011244:	2b00      	cmp	r3, #0
 8011246:	d1ea      	bne.n	801121e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801124c:	f003 0304 	and.w	r3, r3, #4
 8011250:	2b00      	cmp	r3, #0
 8011252:	d004      	beq.n	801125e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2204      	movs	r2, #4
 8011258:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801125a:	2304      	movs	r3, #4
 801125c:	e014      	b.n	8011288 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011262:	f003 0301 	and.w	r3, r3, #1
 8011266:	2b00      	cmp	r3, #0
 8011268:	d004      	beq.n	8011274 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2201      	movs	r2, #1
 801126e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011270:	2301      	movs	r3, #1
 8011272:	e009      	b.n	8011288 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801127c:	2b00      	cmp	r3, #0
 801127e:	d002      	beq.n	8011286 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2240      	movs	r2, #64	; 0x40
 8011284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011286:	2300      	movs	r3, #0

}
 8011288:	4618      	mov	r0, r3
 801128a:	3714      	adds	r7, #20
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr
 8011294:	24000008 	.word	0x24000008
 8011298:	10624dd3 	.word	0x10624dd3

0801129c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801129c:	b480      	push	{r7}
 801129e:	b085      	sub	sp, #20
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80112a4:	4b11      	ldr	r3, [pc, #68]	; (80112ec <SDMMC_GetCmdError+0x50>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4a11      	ldr	r2, [pc, #68]	; (80112f0 <SDMMC_GetCmdError+0x54>)
 80112aa:	fba2 2303 	umull	r2, r3, r2, r3
 80112ae:	0a5b      	lsrs	r3, r3, #9
 80112b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80112b4:	fb02 f303 	mul.w	r3, r2, r3
 80112b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	1e5a      	subs	r2, r3, #1
 80112be:	60fa      	str	r2, [r7, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d102      	bne.n	80112ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80112c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80112c8:	e009      	b.n	80112de <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d0f1      	beq.n	80112ba <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a06      	ldr	r2, [pc, #24]	; (80112f4 <SDMMC_GetCmdError+0x58>)
 80112da:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80112dc:	2300      	movs	r3, #0
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3714      	adds	r7, #20
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	24000008 	.word	0x24000008
 80112f0:	10624dd3 	.word	0x10624dd3
 80112f4:	002000c5 	.word	0x002000c5

080112f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80112fc:	4904      	ldr	r1, [pc, #16]	; (8011310 <MX_FATFS_Init+0x18>)
 80112fe:	4805      	ldr	r0, [pc, #20]	; (8011314 <MX_FATFS_Init+0x1c>)
 8011300:	f002 fbda 	bl	8013ab8 <FATFS_LinkDriver>
 8011304:	4603      	mov	r3, r0
 8011306:	461a      	mov	r2, r3
 8011308:	4b03      	ldr	r3, [pc, #12]	; (8011318 <MX_FATFS_Init+0x20>)
 801130a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801130c:	bf00      	nop
 801130e:	bd80      	pop	{r7, pc}
 8011310:	240087f0 	.word	0x240087f0
 8011314:	08014528 	.word	0x08014528
 8011318:	240087ec 	.word	0x240087ec

0801131c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801131c:	b480      	push	{r7}
 801131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011320:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011322:	4618      	mov	r0, r3
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr

0801132c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011332:	2300      	movs	r3, #0
 8011334:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011336:	f000 f885 	bl	8011444 <BSP_SD_IsDetected>
 801133a:	4603      	mov	r3, r0
 801133c:	2b01      	cmp	r3, #1
 801133e:	d001      	beq.n	8011344 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011340:	2302      	movs	r3, #2
 8011342:	e012      	b.n	801136a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011344:	480b      	ldr	r0, [pc, #44]	; (8011374 <BSP_SD_Init+0x48>)
 8011346:	f7f8 fa21 	bl	800978c <HAL_SD_Init>
 801134a:	4603      	mov	r3, r0
 801134c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801134e:	79fb      	ldrb	r3, [r7, #7]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d109      	bne.n	8011368 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011354:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011358:	4806      	ldr	r0, [pc, #24]	; (8011374 <BSP_SD_Init+0x48>)
 801135a:	f7f9 f8d1 	bl	800a500 <HAL_SD_ConfigWideBusOperation>
 801135e:	4603      	mov	r3, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d001      	beq.n	8011368 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011364:	2301      	movs	r3, #1
 8011366:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011368:	79fb      	ldrb	r3, [r7, #7]
}
 801136a:	4618      	mov	r0, r3
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	240080a0 	.word	0x240080a0

08011378 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b086      	sub	sp, #24
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	68ba      	ldr	r2, [r7, #8]
 801138c:	68f9      	ldr	r1, [r7, #12]
 801138e:	4806      	ldr	r0, [pc, #24]	; (80113a8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011390:	f7f8 fb16 	bl	80099c0 <HAL_SD_ReadBlocks_DMA>
 8011394:	4603      	mov	r3, r0
 8011396:	2b00      	cmp	r3, #0
 8011398:	d001      	beq.n	801139e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801139a:	2301      	movs	r3, #1
 801139c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801139e:	7dfb      	ldrb	r3, [r7, #23]
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3718      	adds	r7, #24
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	240080a0 	.word	0x240080a0

080113ac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b086      	sub	sp, #24
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60f8      	str	r0, [r7, #12]
 80113b4:	60b9      	str	r1, [r7, #8]
 80113b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80113b8:	2300      	movs	r3, #0
 80113ba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	68ba      	ldr	r2, [r7, #8]
 80113c0:	68f9      	ldr	r1, [r7, #12]
 80113c2:	4806      	ldr	r0, [pc, #24]	; (80113dc <BSP_SD_WriteBlocks_DMA+0x30>)
 80113c4:	f7f8 fba4 	bl	8009b10 <HAL_SD_WriteBlocks_DMA>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d001      	beq.n	80113d2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80113ce:	2301      	movs	r3, #1
 80113d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80113d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3718      	adds	r7, #24
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	240080a0 	.word	0x240080a0

080113e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80113e4:	4805      	ldr	r0, [pc, #20]	; (80113fc <BSP_SD_GetCardState+0x1c>)
 80113e6:	f7f9 f99d 	bl	800a724 <HAL_SD_GetCardState>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b04      	cmp	r3, #4
 80113ee:	bf14      	ite	ne
 80113f0:	2301      	movne	r3, #1
 80113f2:	2300      	moveq	r3, #0
 80113f4:	b2db      	uxtb	r3, r3
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	240080a0 	.word	0x240080a0

08011400 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011408:	6879      	ldr	r1, [r7, #4]
 801140a:	4803      	ldr	r0, [pc, #12]	; (8011418 <BSP_SD_GetCardInfo+0x18>)
 801140c:	f7f9 f84c 	bl	800a4a8 <HAL_SD_GetCardInfo>
}
 8011410:	bf00      	nop
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	240080a0 	.word	0x240080a0

0801141c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011424:	f000 f984 	bl	8011730 <BSP_SD_WriteCpltCallback>
}
 8011428:	bf00      	nop
 801142a:	3708      	adds	r7, #8
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011438:	f000 f986 	bl	8011748 <BSP_SD_ReadCpltCallback>
}
 801143c:	bf00      	nop
 801143e:	3708      	adds	r7, #8
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011444:	b480      	push	{r7}
 8011446:	b083      	sub	sp, #12
 8011448:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801144a:	2301      	movs	r3, #1
 801144c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 801144e:	79fb      	ldrb	r3, [r7, #7]
 8011450:	b2db      	uxtb	r3, r3
}
 8011452:	4618      	mov	r0, r3
 8011454:	370c      	adds	r7, #12
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr

0801145e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801145e:	b580      	push	{r7, lr}
 8011460:	b084      	sub	sp, #16
 8011462:	af00      	add	r7, sp, #0
 8011464:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011466:	f7f1 febb 	bl	80031e0 <HAL_GetTick>
 801146a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801146c:	e006      	b.n	801147c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801146e:	f7ff ffb7 	bl	80113e0 <BSP_SD_GetCardState>
 8011472:	4603      	mov	r3, r0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d101      	bne.n	801147c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011478:	2300      	movs	r3, #0
 801147a:	e009      	b.n	8011490 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801147c:	f7f1 feb0 	bl	80031e0 <HAL_GetTick>
 8011480:	4602      	mov	r2, r0
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	1ad3      	subs	r3, r2, r3
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	429a      	cmp	r2, r3
 801148a:	d8f0      	bhi.n	801146e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801148c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011490:	4618      	mov	r0, r3
 8011492:	3710      	adds	r7, #16
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
 801149e:	4603      	mov	r3, r0
 80114a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80114a2:	4b0b      	ldr	r3, [pc, #44]	; (80114d0 <SD_CheckStatus+0x38>)
 80114a4:	2201      	movs	r2, #1
 80114a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80114a8:	f7ff ff9a 	bl	80113e0 <BSP_SD_GetCardState>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d107      	bne.n	80114c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80114b2:	4b07      	ldr	r3, [pc, #28]	; (80114d0 <SD_CheckStatus+0x38>)
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	f023 0301 	bic.w	r3, r3, #1
 80114bc:	b2da      	uxtb	r2, r3
 80114be:	4b04      	ldr	r3, [pc, #16]	; (80114d0 <SD_CheckStatus+0x38>)
 80114c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80114c2:	4b03      	ldr	r3, [pc, #12]	; (80114d0 <SD_CheckStatus+0x38>)
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	b2db      	uxtb	r3, r3
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	24000015 	.word	0x24000015

080114d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b082      	sub	sp, #8
 80114d8:	af00      	add	r7, sp, #0
 80114da:	4603      	mov	r3, r0
 80114dc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80114de:	f7ff ff25 	bl	801132c <BSP_SD_Init>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d107      	bne.n	80114f8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80114e8:	79fb      	ldrb	r3, [r7, #7]
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7ff ffd4 	bl	8011498 <SD_CheckStatus>
 80114f0:	4603      	mov	r3, r0
 80114f2:	461a      	mov	r2, r3
 80114f4:	4b04      	ldr	r3, [pc, #16]	; (8011508 <SD_initialize+0x34>)
 80114f6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80114f8:	4b03      	ldr	r3, [pc, #12]	; (8011508 <SD_initialize+0x34>)
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	b2db      	uxtb	r3, r3
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3708      	adds	r7, #8
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	24000015 	.word	0x24000015

0801150c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	4603      	mov	r3, r0
 8011514:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011516:	79fb      	ldrb	r3, [r7, #7]
 8011518:	4618      	mov	r0, r3
 801151a:	f7ff ffbd 	bl	8011498 <SD_CheckStatus>
 801151e:	4603      	mov	r3, r0
}
 8011520:	4618      	mov	r0, r3
 8011522:	3708      	adds	r7, #8
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}

08011528 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b086      	sub	sp, #24
 801152c:	af00      	add	r7, sp, #0
 801152e:	60b9      	str	r1, [r7, #8]
 8011530:	607a      	str	r2, [r7, #4]
 8011532:	603b      	str	r3, [r7, #0]
 8011534:	4603      	mov	r3, r0
 8011536:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011538:	2301      	movs	r3, #1
 801153a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801153c:	f247 5030 	movw	r0, #30000	; 0x7530
 8011540:	f7ff ff8d 	bl	801145e <SD_CheckStatusWithTimeout>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	da01      	bge.n	801154e <SD_read+0x26>
  {
    return res;
 801154a:	7dfb      	ldrb	r3, [r7, #23]
 801154c:	e03b      	b.n	80115c6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801154e:	683a      	ldr	r2, [r7, #0]
 8011550:	6879      	ldr	r1, [r7, #4]
 8011552:	68b8      	ldr	r0, [r7, #8]
 8011554:	f7ff ff10 	bl	8011378 <BSP_SD_ReadBlocks_DMA>
 8011558:	4603      	mov	r3, r0
 801155a:	2b00      	cmp	r3, #0
 801155c:	d132      	bne.n	80115c4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801155e:	4b1c      	ldr	r3, [pc, #112]	; (80115d0 <SD_read+0xa8>)
 8011560:	2200      	movs	r2, #0
 8011562:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011564:	f7f1 fe3c 	bl	80031e0 <HAL_GetTick>
 8011568:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801156a:	bf00      	nop
 801156c:	4b18      	ldr	r3, [pc, #96]	; (80115d0 <SD_read+0xa8>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d108      	bne.n	8011586 <SD_read+0x5e>
 8011574:	f7f1 fe34 	bl	80031e0 <HAL_GetTick>
 8011578:	4602      	mov	r2, r0
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	1ad3      	subs	r3, r2, r3
 801157e:	f247 522f 	movw	r2, #29999	; 0x752f
 8011582:	4293      	cmp	r3, r2
 8011584:	d9f2      	bls.n	801156c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8011586:	4b12      	ldr	r3, [pc, #72]	; (80115d0 <SD_read+0xa8>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d102      	bne.n	8011594 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801158e:	2301      	movs	r3, #1
 8011590:	75fb      	strb	r3, [r7, #23]
 8011592:	e017      	b.n	80115c4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011594:	4b0e      	ldr	r3, [pc, #56]	; (80115d0 <SD_read+0xa8>)
 8011596:	2200      	movs	r2, #0
 8011598:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801159a:	f7f1 fe21 	bl	80031e0 <HAL_GetTick>
 801159e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80115a0:	e007      	b.n	80115b2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80115a2:	f7ff ff1d 	bl	80113e0 <BSP_SD_GetCardState>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d102      	bne.n	80115b2 <SD_read+0x8a>
          {
            res = RES_OK;
 80115ac:	2300      	movs	r3, #0
 80115ae:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80115b0:	e008      	b.n	80115c4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80115b2:	f7f1 fe15 	bl	80031e0 <HAL_GetTick>
 80115b6:	4602      	mov	r2, r0
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	1ad3      	subs	r3, r2, r3
 80115bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d9ee      	bls.n	80115a2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80115c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3718      	adds	r7, #24
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	24008c58 	.word	0x24008c58

080115d4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b086      	sub	sp, #24
 80115d8:	af00      	add	r7, sp, #0
 80115da:	60b9      	str	r1, [r7, #8]
 80115dc:	607a      	str	r2, [r7, #4]
 80115de:	603b      	str	r3, [r7, #0]
 80115e0:	4603      	mov	r3, r0
 80115e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80115e4:	2301      	movs	r3, #1
 80115e6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80115e8:	4b24      	ldr	r3, [pc, #144]	; (801167c <SD_write+0xa8>)
 80115ea:	2200      	movs	r2, #0
 80115ec:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80115ee:	f247 5030 	movw	r0, #30000	; 0x7530
 80115f2:	f7ff ff34 	bl	801145e <SD_CheckStatusWithTimeout>
 80115f6:	4603      	mov	r3, r0
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	da01      	bge.n	8011600 <SD_write+0x2c>
  {
    return res;
 80115fc:	7dfb      	ldrb	r3, [r7, #23]
 80115fe:	e038      	b.n	8011672 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011600:	683a      	ldr	r2, [r7, #0]
 8011602:	6879      	ldr	r1, [r7, #4]
 8011604:	68b8      	ldr	r0, [r7, #8]
 8011606:	f7ff fed1 	bl	80113ac <BSP_SD_WriteBlocks_DMA>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d12f      	bne.n	8011670 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011610:	f7f1 fde6 	bl	80031e0 <HAL_GetTick>
 8011614:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011616:	bf00      	nop
 8011618:	4b18      	ldr	r3, [pc, #96]	; (801167c <SD_write+0xa8>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d108      	bne.n	8011632 <SD_write+0x5e>
 8011620:	f7f1 fdde 	bl	80031e0 <HAL_GetTick>
 8011624:	4602      	mov	r2, r0
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	1ad3      	subs	r3, r2, r3
 801162a:	f247 522f 	movw	r2, #29999	; 0x752f
 801162e:	4293      	cmp	r3, r2
 8011630:	d9f2      	bls.n	8011618 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8011632:	4b12      	ldr	r3, [pc, #72]	; (801167c <SD_write+0xa8>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d102      	bne.n	8011640 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801163a:	2301      	movs	r3, #1
 801163c:	75fb      	strb	r3, [r7, #23]
 801163e:	e017      	b.n	8011670 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011640:	4b0e      	ldr	r3, [pc, #56]	; (801167c <SD_write+0xa8>)
 8011642:	2200      	movs	r2, #0
 8011644:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011646:	f7f1 fdcb 	bl	80031e0 <HAL_GetTick>
 801164a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801164c:	e007      	b.n	801165e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801164e:	f7ff fec7 	bl	80113e0 <BSP_SD_GetCardState>
 8011652:	4603      	mov	r3, r0
 8011654:	2b00      	cmp	r3, #0
 8011656:	d102      	bne.n	801165e <SD_write+0x8a>
          {
            res = RES_OK;
 8011658:	2300      	movs	r3, #0
 801165a:	75fb      	strb	r3, [r7, #23]
            break;
 801165c:	e008      	b.n	8011670 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801165e:	f7f1 fdbf 	bl	80031e0 <HAL_GetTick>
 8011662:	4602      	mov	r2, r0
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	1ad3      	subs	r3, r2, r3
 8011668:	f247 522f 	movw	r2, #29999	; 0x752f
 801166c:	4293      	cmp	r3, r2
 801166e:	d9ee      	bls.n	801164e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011670:	7dfb      	ldrb	r3, [r7, #23]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3718      	adds	r7, #24
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}
 801167a:	bf00      	nop
 801167c:	24008c54 	.word	0x24008c54

08011680 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b08c      	sub	sp, #48	; 0x30
 8011684:	af00      	add	r7, sp, #0
 8011686:	4603      	mov	r3, r0
 8011688:	603a      	str	r2, [r7, #0]
 801168a:	71fb      	strb	r3, [r7, #7]
 801168c:	460b      	mov	r3, r1
 801168e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011690:	2301      	movs	r3, #1
 8011692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011696:	4b25      	ldr	r3, [pc, #148]	; (801172c <SD_ioctl+0xac>)
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	b2db      	uxtb	r3, r3
 801169c:	f003 0301 	and.w	r3, r3, #1
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d001      	beq.n	80116a8 <SD_ioctl+0x28>
 80116a4:	2303      	movs	r3, #3
 80116a6:	e03c      	b.n	8011722 <SD_ioctl+0xa2>

  switch (cmd)
 80116a8:	79bb      	ldrb	r3, [r7, #6]
 80116aa:	2b03      	cmp	r3, #3
 80116ac:	d834      	bhi.n	8011718 <SD_ioctl+0x98>
 80116ae:	a201      	add	r2, pc, #4	; (adr r2, 80116b4 <SD_ioctl+0x34>)
 80116b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b4:	080116c5 	.word	0x080116c5
 80116b8:	080116cd 	.word	0x080116cd
 80116bc:	080116e5 	.word	0x080116e5
 80116c0:	080116ff 	.word	0x080116ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80116c4:	2300      	movs	r3, #0
 80116c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80116ca:	e028      	b.n	801171e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80116cc:	f107 0308 	add.w	r3, r7, #8
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7ff fe95 	bl	8011400 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80116d6:	6a3a      	ldr	r2, [r7, #32]
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80116dc:	2300      	movs	r3, #0
 80116de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80116e2:	e01c      	b.n	801171e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80116e4:	f107 0308 	add.w	r3, r7, #8
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7ff fe89 	bl	8011400 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80116ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80116f6:	2300      	movs	r3, #0
 80116f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80116fc:	e00f      	b.n	801171e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80116fe:	f107 0308 	add.w	r3, r7, #8
 8011702:	4618      	mov	r0, r3
 8011704:	f7ff fe7c 	bl	8011400 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170a:	0a5a      	lsrs	r2, r3, #9
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011710:	2300      	movs	r3, #0
 8011712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011716:	e002      	b.n	801171e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011718:	2304      	movs	r3, #4
 801171a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801171e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011722:	4618      	mov	r0, r3
 8011724:	3730      	adds	r7, #48	; 0x30
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	24000015 	.word	0x24000015

08011730 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011730:	b480      	push	{r7}
 8011732:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011734:	4b03      	ldr	r3, [pc, #12]	; (8011744 <BSP_SD_WriteCpltCallback+0x14>)
 8011736:	2201      	movs	r2, #1
 8011738:	601a      	str	r2, [r3, #0]
}
 801173a:	bf00      	nop
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr
 8011744:	24008c54 	.word	0x24008c54

08011748 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011748:	b480      	push	{r7}
 801174a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801174c:	4b03      	ldr	r3, [pc, #12]	; (801175c <BSP_SD_ReadCpltCallback+0x14>)
 801174e:	2201      	movs	r2, #1
 8011750:	601a      	str	r2, [r3, #0]
}
 8011752:	bf00      	nop
 8011754:	46bd      	mov	sp, r7
 8011756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175a:	4770      	bx	lr
 801175c:	24008c58 	.word	0x24008c58

08011760 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b084      	sub	sp, #16
 8011764:	af00      	add	r7, sp, #0
 8011766:	4603      	mov	r3, r0
 8011768:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801176a:	79fb      	ldrb	r3, [r7, #7]
 801176c:	4a08      	ldr	r2, [pc, #32]	; (8011790 <disk_status+0x30>)
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	4413      	add	r3, r2
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	79fa      	ldrb	r2, [r7, #7]
 8011778:	4905      	ldr	r1, [pc, #20]	; (8011790 <disk_status+0x30>)
 801177a:	440a      	add	r2, r1
 801177c:	7a12      	ldrb	r2, [r2, #8]
 801177e:	4610      	mov	r0, r2
 8011780:	4798      	blx	r3
 8011782:	4603      	mov	r3, r0
 8011784:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011786:	7bfb      	ldrb	r3, [r7, #15]
}
 8011788:	4618      	mov	r0, r3
 801178a:	3710      	adds	r7, #16
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	24008c84 	.word	0x24008c84

08011794 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	af00      	add	r7, sp, #0
 801179a:	4603      	mov	r3, r0
 801179c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801179e:	2300      	movs	r3, #0
 80117a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80117a2:	79fb      	ldrb	r3, [r7, #7]
 80117a4:	4a0d      	ldr	r2, [pc, #52]	; (80117dc <disk_initialize+0x48>)
 80117a6:	5cd3      	ldrb	r3, [r2, r3]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d111      	bne.n	80117d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80117ac:	79fb      	ldrb	r3, [r7, #7]
 80117ae:	4a0b      	ldr	r2, [pc, #44]	; (80117dc <disk_initialize+0x48>)
 80117b0:	2101      	movs	r1, #1
 80117b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80117b4:	79fb      	ldrb	r3, [r7, #7]
 80117b6:	4a09      	ldr	r2, [pc, #36]	; (80117dc <disk_initialize+0x48>)
 80117b8:	009b      	lsls	r3, r3, #2
 80117ba:	4413      	add	r3, r2
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	79fa      	ldrb	r2, [r7, #7]
 80117c2:	4906      	ldr	r1, [pc, #24]	; (80117dc <disk_initialize+0x48>)
 80117c4:	440a      	add	r2, r1
 80117c6:	7a12      	ldrb	r2, [r2, #8]
 80117c8:	4610      	mov	r0, r2
 80117ca:	4798      	blx	r3
 80117cc:	4603      	mov	r3, r0
 80117ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80117d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3710      	adds	r7, #16
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	24008c84 	.word	0x24008c84

080117e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80117e0:	b590      	push	{r4, r7, lr}
 80117e2:	b087      	sub	sp, #28
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	60b9      	str	r1, [r7, #8]
 80117e8:	607a      	str	r2, [r7, #4]
 80117ea:	603b      	str	r3, [r7, #0]
 80117ec:	4603      	mov	r3, r0
 80117ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80117f0:	7bfb      	ldrb	r3, [r7, #15]
 80117f2:	4a0a      	ldr	r2, [pc, #40]	; (801181c <disk_read+0x3c>)
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	4413      	add	r3, r2
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	689c      	ldr	r4, [r3, #8]
 80117fc:	7bfb      	ldrb	r3, [r7, #15]
 80117fe:	4a07      	ldr	r2, [pc, #28]	; (801181c <disk_read+0x3c>)
 8011800:	4413      	add	r3, r2
 8011802:	7a18      	ldrb	r0, [r3, #8]
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	68b9      	ldr	r1, [r7, #8]
 801180a:	47a0      	blx	r4
 801180c:	4603      	mov	r3, r0
 801180e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011810:	7dfb      	ldrb	r3, [r7, #23]
}
 8011812:	4618      	mov	r0, r3
 8011814:	371c      	adds	r7, #28
 8011816:	46bd      	mov	sp, r7
 8011818:	bd90      	pop	{r4, r7, pc}
 801181a:	bf00      	nop
 801181c:	24008c84 	.word	0x24008c84

08011820 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011820:	b590      	push	{r4, r7, lr}
 8011822:	b087      	sub	sp, #28
 8011824:	af00      	add	r7, sp, #0
 8011826:	60b9      	str	r1, [r7, #8]
 8011828:	607a      	str	r2, [r7, #4]
 801182a:	603b      	str	r3, [r7, #0]
 801182c:	4603      	mov	r3, r0
 801182e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011830:	7bfb      	ldrb	r3, [r7, #15]
 8011832:	4a0a      	ldr	r2, [pc, #40]	; (801185c <disk_write+0x3c>)
 8011834:	009b      	lsls	r3, r3, #2
 8011836:	4413      	add	r3, r2
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	68dc      	ldr	r4, [r3, #12]
 801183c:	7bfb      	ldrb	r3, [r7, #15]
 801183e:	4a07      	ldr	r2, [pc, #28]	; (801185c <disk_write+0x3c>)
 8011840:	4413      	add	r3, r2
 8011842:	7a18      	ldrb	r0, [r3, #8]
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	68b9      	ldr	r1, [r7, #8]
 801184a:	47a0      	blx	r4
 801184c:	4603      	mov	r3, r0
 801184e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011850:	7dfb      	ldrb	r3, [r7, #23]
}
 8011852:	4618      	mov	r0, r3
 8011854:	371c      	adds	r7, #28
 8011856:	46bd      	mov	sp, r7
 8011858:	bd90      	pop	{r4, r7, pc}
 801185a:	bf00      	nop
 801185c:	24008c84 	.word	0x24008c84

08011860 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b084      	sub	sp, #16
 8011864:	af00      	add	r7, sp, #0
 8011866:	4603      	mov	r3, r0
 8011868:	603a      	str	r2, [r7, #0]
 801186a:	71fb      	strb	r3, [r7, #7]
 801186c:	460b      	mov	r3, r1
 801186e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011870:	79fb      	ldrb	r3, [r7, #7]
 8011872:	4a09      	ldr	r2, [pc, #36]	; (8011898 <disk_ioctl+0x38>)
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	4413      	add	r3, r2
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	691b      	ldr	r3, [r3, #16]
 801187c:	79fa      	ldrb	r2, [r7, #7]
 801187e:	4906      	ldr	r1, [pc, #24]	; (8011898 <disk_ioctl+0x38>)
 8011880:	440a      	add	r2, r1
 8011882:	7a10      	ldrb	r0, [r2, #8]
 8011884:	79b9      	ldrb	r1, [r7, #6]
 8011886:	683a      	ldr	r2, [r7, #0]
 8011888:	4798      	blx	r3
 801188a:	4603      	mov	r3, r0
 801188c:	73fb      	strb	r3, [r7, #15]
  return res;
 801188e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011890:	4618      	mov	r0, r3
 8011892:	3710      	adds	r7, #16
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}
 8011898:	24008c84 	.word	0x24008c84

0801189c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801189c:	b480      	push	{r7}
 801189e:	b085      	sub	sp, #20
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3301      	adds	r3, #1
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80118ac:	89fb      	ldrh	r3, [r7, #14]
 80118ae:	021b      	lsls	r3, r3, #8
 80118b0:	b21a      	sxth	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	b21b      	sxth	r3, r3
 80118b8:	4313      	orrs	r3, r2
 80118ba:	b21b      	sxth	r3, r3
 80118bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80118be:	89fb      	ldrh	r3, [r7, #14]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3714      	adds	r7, #20
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80118cc:	b480      	push	{r7}
 80118ce:	b085      	sub	sp, #20
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	3303      	adds	r3, #3
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	021b      	lsls	r3, r3, #8
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	3202      	adds	r2, #2
 80118e4:	7812      	ldrb	r2, [r2, #0]
 80118e6:	4313      	orrs	r3, r2
 80118e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	021b      	lsls	r3, r3, #8
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	3201      	adds	r2, #1
 80118f2:	7812      	ldrb	r2, [r2, #0]
 80118f4:	4313      	orrs	r3, r2
 80118f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	021b      	lsls	r3, r3, #8
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	7812      	ldrb	r2, [r2, #0]
 8011900:	4313      	orrs	r3, r2
 8011902:	60fb      	str	r3, [r7, #12]
	return rv;
 8011904:	68fb      	ldr	r3, [r7, #12]
}
 8011906:	4618      	mov	r0, r3
 8011908:	3714      	adds	r7, #20
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr

08011912 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011912:	b480      	push	{r7}
 8011914:	b083      	sub	sp, #12
 8011916:	af00      	add	r7, sp, #0
 8011918:	6078      	str	r0, [r7, #4]
 801191a:	460b      	mov	r3, r1
 801191c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	1c5a      	adds	r2, r3, #1
 8011922:	607a      	str	r2, [r7, #4]
 8011924:	887a      	ldrh	r2, [r7, #2]
 8011926:	b2d2      	uxtb	r2, r2
 8011928:	701a      	strb	r2, [r3, #0]
 801192a:	887b      	ldrh	r3, [r7, #2]
 801192c:	0a1b      	lsrs	r3, r3, #8
 801192e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	1c5a      	adds	r2, r3, #1
 8011934:	607a      	str	r2, [r7, #4]
 8011936:	887a      	ldrh	r2, [r7, #2]
 8011938:	b2d2      	uxtb	r2, r2
 801193a:	701a      	strb	r2, [r3, #0]
}
 801193c:	bf00      	nop
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	1c5a      	adds	r2, r3, #1
 8011956:	607a      	str	r2, [r7, #4]
 8011958:	683a      	ldr	r2, [r7, #0]
 801195a:	b2d2      	uxtb	r2, r2
 801195c:	701a      	strb	r2, [r3, #0]
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	0a1b      	lsrs	r3, r3, #8
 8011962:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	1c5a      	adds	r2, r3, #1
 8011968:	607a      	str	r2, [r7, #4]
 801196a:	683a      	ldr	r2, [r7, #0]
 801196c:	b2d2      	uxtb	r2, r2
 801196e:	701a      	strb	r2, [r3, #0]
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	0a1b      	lsrs	r3, r3, #8
 8011974:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	1c5a      	adds	r2, r3, #1
 801197a:	607a      	str	r2, [r7, #4]
 801197c:	683a      	ldr	r2, [r7, #0]
 801197e:	b2d2      	uxtb	r2, r2
 8011980:	701a      	strb	r2, [r3, #0]
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	0a1b      	lsrs	r3, r3, #8
 8011986:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	1c5a      	adds	r2, r3, #1
 801198c:	607a      	str	r2, [r7, #4]
 801198e:	683a      	ldr	r2, [r7, #0]
 8011990:	b2d2      	uxtb	r2, r2
 8011992:	701a      	strb	r2, [r3, #0]
}
 8011994:	bf00      	nop
 8011996:	370c      	adds	r7, #12
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr

080119a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80119a0:	b480      	push	{r7}
 80119a2:	b087      	sub	sp, #28
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	60f8      	str	r0, [r7, #12]
 80119a8:	60b9      	str	r1, [r7, #8]
 80119aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d00d      	beq.n	80119d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80119ba:	693a      	ldr	r2, [r7, #16]
 80119bc:	1c53      	adds	r3, r2, #1
 80119be:	613b      	str	r3, [r7, #16]
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	1c59      	adds	r1, r3, #1
 80119c4:	6179      	str	r1, [r7, #20]
 80119c6:	7812      	ldrb	r2, [r2, #0]
 80119c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	3b01      	subs	r3, #1
 80119ce:	607b      	str	r3, [r7, #4]
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d1f1      	bne.n	80119ba <mem_cpy+0x1a>
	}
}
 80119d6:	bf00      	nop
 80119d8:	371c      	adds	r7, #28
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr

080119e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80119e2:	b480      	push	{r7}
 80119e4:	b087      	sub	sp, #28
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	60f8      	str	r0, [r7, #12]
 80119ea:	60b9      	str	r1, [r7, #8]
 80119ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	1c5a      	adds	r2, r3, #1
 80119f6:	617a      	str	r2, [r7, #20]
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	b2d2      	uxtb	r2, r2
 80119fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	3b01      	subs	r3, #1
 8011a02:	607b      	str	r3, [r7, #4]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d1f3      	bne.n	80119f2 <mem_set+0x10>
}
 8011a0a:	bf00      	nop
 8011a0c:	bf00      	nop
 8011a0e:	371c      	adds	r7, #28
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr

08011a18 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011a18:	b480      	push	{r7}
 8011a1a:	b089      	sub	sp, #36	; 0x24
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	60f8      	str	r0, [r7, #12]
 8011a20:	60b9      	str	r1, [r7, #8]
 8011a22:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	61fb      	str	r3, [r7, #28]
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	1c5a      	adds	r2, r3, #1
 8011a34:	61fa      	str	r2, [r7, #28]
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	4619      	mov	r1, r3
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	1c5a      	adds	r2, r3, #1
 8011a3e:	61ba      	str	r2, [r7, #24]
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	1acb      	subs	r3, r1, r3
 8011a44:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	3b01      	subs	r3, #1
 8011a4a:	607b      	str	r3, [r7, #4]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d002      	beq.n	8011a58 <mem_cmp+0x40>
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d0eb      	beq.n	8011a30 <mem_cmp+0x18>

	return r;
 8011a58:	697b      	ldr	r3, [r7, #20]
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3724      	adds	r7, #36	; 0x24
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a64:	4770      	bx	lr

08011a66 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011a66:	b480      	push	{r7}
 8011a68:	b083      	sub	sp, #12
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
 8011a6e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011a70:	e002      	b.n	8011a78 <chk_chr+0x12>
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	3301      	adds	r3, #1
 8011a76:	607b      	str	r3, [r7, #4]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d005      	beq.n	8011a8c <chk_chr+0x26>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	461a      	mov	r2, r3
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	d1f2      	bne.n	8011a72 <chk_chr+0xc>
	return *str;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	781b      	ldrb	r3, [r3, #0]
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	370c      	adds	r7, #12
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr

08011a9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b085      	sub	sp, #20
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	60bb      	str	r3, [r7, #8]
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	60fb      	str	r3, [r7, #12]
 8011aae:	e029      	b.n	8011b04 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011ab0:	4a27      	ldr	r2, [pc, #156]	; (8011b50 <chk_lock+0xb4>)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	011b      	lsls	r3, r3, #4
 8011ab6:	4413      	add	r3, r2
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d01d      	beq.n	8011afa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011abe:	4a24      	ldr	r2, [pc, #144]	; (8011b50 <chk_lock+0xb4>)
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	011b      	lsls	r3, r3, #4
 8011ac4:	4413      	add	r3, r2
 8011ac6:	681a      	ldr	r2, [r3, #0]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d116      	bne.n	8011afe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011ad0:	4a1f      	ldr	r2, [pc, #124]	; (8011b50 <chk_lock+0xb4>)
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	011b      	lsls	r3, r3, #4
 8011ad6:	4413      	add	r3, r2
 8011ad8:	3304      	adds	r3, #4
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d10c      	bne.n	8011afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011ae4:	4a1a      	ldr	r2, [pc, #104]	; (8011b50 <chk_lock+0xb4>)
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	011b      	lsls	r3, r3, #4
 8011aea:	4413      	add	r3, r2
 8011aec:	3308      	adds	r3, #8
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d102      	bne.n	8011afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011af8:	e007      	b.n	8011b0a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011afa:	2301      	movs	r3, #1
 8011afc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	3301      	adds	r3, #1
 8011b02:	60fb      	str	r3, [r7, #12]
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d9d2      	bls.n	8011ab0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2b02      	cmp	r3, #2
 8011b0e:	d109      	bne.n	8011b24 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d102      	bne.n	8011b1c <chk_lock+0x80>
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	2b02      	cmp	r3, #2
 8011b1a:	d101      	bne.n	8011b20 <chk_lock+0x84>
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	e010      	b.n	8011b42 <chk_lock+0xa6>
 8011b20:	2312      	movs	r3, #18
 8011b22:	e00e      	b.n	8011b42 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d108      	bne.n	8011b3c <chk_lock+0xa0>
 8011b2a:	4a09      	ldr	r2, [pc, #36]	; (8011b50 <chk_lock+0xb4>)
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	011b      	lsls	r3, r3, #4
 8011b30:	4413      	add	r3, r2
 8011b32:	330c      	adds	r3, #12
 8011b34:	881b      	ldrh	r3, [r3, #0]
 8011b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b3a:	d101      	bne.n	8011b40 <chk_lock+0xa4>
 8011b3c:	2310      	movs	r3, #16
 8011b3e:	e000      	b.n	8011b42 <chk_lock+0xa6>
 8011b40:	2300      	movs	r3, #0
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3714      	adds	r7, #20
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr
 8011b4e:	bf00      	nop
 8011b50:	24008c64 	.word	0x24008c64

08011b54 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	607b      	str	r3, [r7, #4]
 8011b5e:	e002      	b.n	8011b66 <enq_lock+0x12>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	3301      	adds	r3, #1
 8011b64:	607b      	str	r3, [r7, #4]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d806      	bhi.n	8011b7a <enq_lock+0x26>
 8011b6c:	4a09      	ldr	r2, [pc, #36]	; (8011b94 <enq_lock+0x40>)
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	011b      	lsls	r3, r3, #4
 8011b72:	4413      	add	r3, r2
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d1f2      	bne.n	8011b60 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2b02      	cmp	r3, #2
 8011b7e:	bf14      	ite	ne
 8011b80:	2301      	movne	r3, #1
 8011b82:	2300      	moveq	r3, #0
 8011b84:	b2db      	uxtb	r3, r3
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	370c      	adds	r7, #12
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop
 8011b94:	24008c64 	.word	0x24008c64

08011b98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b085      	sub	sp, #20
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	60fb      	str	r3, [r7, #12]
 8011ba6:	e01f      	b.n	8011be8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011ba8:	4a41      	ldr	r2, [pc, #260]	; (8011cb0 <inc_lock+0x118>)
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	011b      	lsls	r3, r3, #4
 8011bae:	4413      	add	r3, r2
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d113      	bne.n	8011be2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011bba:	4a3d      	ldr	r2, [pc, #244]	; (8011cb0 <inc_lock+0x118>)
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	011b      	lsls	r3, r3, #4
 8011bc0:	4413      	add	r3, r2
 8011bc2:	3304      	adds	r3, #4
 8011bc4:	681a      	ldr	r2, [r3, #0]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d109      	bne.n	8011be2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011bce:	4a38      	ldr	r2, [pc, #224]	; (8011cb0 <inc_lock+0x118>)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	011b      	lsls	r3, r3, #4
 8011bd4:	4413      	add	r3, r2
 8011bd6:	3308      	adds	r3, #8
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d006      	beq.n	8011bf0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	3301      	adds	r3, #1
 8011be6:	60fb      	str	r3, [r7, #12]
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d9dc      	bls.n	8011ba8 <inc_lock+0x10>
 8011bee:	e000      	b.n	8011bf2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011bf0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	2b02      	cmp	r3, #2
 8011bf6:	d132      	bne.n	8011c5e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	60fb      	str	r3, [r7, #12]
 8011bfc:	e002      	b.n	8011c04 <inc_lock+0x6c>
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	3301      	adds	r3, #1
 8011c02:	60fb      	str	r3, [r7, #12]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2b01      	cmp	r3, #1
 8011c08:	d806      	bhi.n	8011c18 <inc_lock+0x80>
 8011c0a:	4a29      	ldr	r2, [pc, #164]	; (8011cb0 <inc_lock+0x118>)
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	011b      	lsls	r3, r3, #4
 8011c10:	4413      	add	r3, r2
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d1f2      	bne.n	8011bfe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2b02      	cmp	r3, #2
 8011c1c:	d101      	bne.n	8011c22 <inc_lock+0x8a>
 8011c1e:	2300      	movs	r3, #0
 8011c20:	e040      	b.n	8011ca4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681a      	ldr	r2, [r3, #0]
 8011c26:	4922      	ldr	r1, [pc, #136]	; (8011cb0 <inc_lock+0x118>)
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	011b      	lsls	r3, r3, #4
 8011c2c:	440b      	add	r3, r1
 8011c2e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	689a      	ldr	r2, [r3, #8]
 8011c34:	491e      	ldr	r1, [pc, #120]	; (8011cb0 <inc_lock+0x118>)
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	011b      	lsls	r3, r3, #4
 8011c3a:	440b      	add	r3, r1
 8011c3c:	3304      	adds	r3, #4
 8011c3e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	695a      	ldr	r2, [r3, #20]
 8011c44:	491a      	ldr	r1, [pc, #104]	; (8011cb0 <inc_lock+0x118>)
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	011b      	lsls	r3, r3, #4
 8011c4a:	440b      	add	r3, r1
 8011c4c:	3308      	adds	r3, #8
 8011c4e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011c50:	4a17      	ldr	r2, [pc, #92]	; (8011cb0 <inc_lock+0x118>)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	011b      	lsls	r3, r3, #4
 8011c56:	4413      	add	r3, r2
 8011c58:	330c      	adds	r3, #12
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d009      	beq.n	8011c78 <inc_lock+0xe0>
 8011c64:	4a12      	ldr	r2, [pc, #72]	; (8011cb0 <inc_lock+0x118>)
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	011b      	lsls	r3, r3, #4
 8011c6a:	4413      	add	r3, r2
 8011c6c:	330c      	adds	r3, #12
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d001      	beq.n	8011c78 <inc_lock+0xe0>
 8011c74:	2300      	movs	r3, #0
 8011c76:	e015      	b.n	8011ca4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d108      	bne.n	8011c90 <inc_lock+0xf8>
 8011c7e:	4a0c      	ldr	r2, [pc, #48]	; (8011cb0 <inc_lock+0x118>)
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	011b      	lsls	r3, r3, #4
 8011c84:	4413      	add	r3, r2
 8011c86:	330c      	adds	r3, #12
 8011c88:	881b      	ldrh	r3, [r3, #0]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	e001      	b.n	8011c94 <inc_lock+0xfc>
 8011c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011c94:	4906      	ldr	r1, [pc, #24]	; (8011cb0 <inc_lock+0x118>)
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	011b      	lsls	r3, r3, #4
 8011c9a:	440b      	add	r3, r1
 8011c9c:	330c      	adds	r3, #12
 8011c9e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	3301      	adds	r3, #1
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3714      	adds	r7, #20
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cae:	4770      	bx	lr
 8011cb0:	24008c64 	.word	0x24008c64

08011cb4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b085      	sub	sp, #20
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	3b01      	subs	r3, #1
 8011cc0:	607b      	str	r3, [r7, #4]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d825      	bhi.n	8011d14 <dec_lock+0x60>
		n = Files[i].ctr;
 8011cc8:	4a17      	ldr	r2, [pc, #92]	; (8011d28 <dec_lock+0x74>)
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	011b      	lsls	r3, r3, #4
 8011cce:	4413      	add	r3, r2
 8011cd0:	330c      	adds	r3, #12
 8011cd2:	881b      	ldrh	r3, [r3, #0]
 8011cd4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011cd6:	89fb      	ldrh	r3, [r7, #14]
 8011cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cdc:	d101      	bne.n	8011ce2 <dec_lock+0x2e>
 8011cde:	2300      	movs	r3, #0
 8011ce0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011ce2:	89fb      	ldrh	r3, [r7, #14]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d002      	beq.n	8011cee <dec_lock+0x3a>
 8011ce8:	89fb      	ldrh	r3, [r7, #14]
 8011cea:	3b01      	subs	r3, #1
 8011cec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011cee:	4a0e      	ldr	r2, [pc, #56]	; (8011d28 <dec_lock+0x74>)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	011b      	lsls	r3, r3, #4
 8011cf4:	4413      	add	r3, r2
 8011cf6:	330c      	adds	r3, #12
 8011cf8:	89fa      	ldrh	r2, [r7, #14]
 8011cfa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011cfc:	89fb      	ldrh	r3, [r7, #14]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d105      	bne.n	8011d0e <dec_lock+0x5a>
 8011d02:	4a09      	ldr	r2, [pc, #36]	; (8011d28 <dec_lock+0x74>)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	011b      	lsls	r3, r3, #4
 8011d08:	4413      	add	r3, r2
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	737b      	strb	r3, [r7, #13]
 8011d12:	e001      	b.n	8011d18 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011d14:	2302      	movs	r3, #2
 8011d16:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011d18:	7b7b      	ldrb	r3, [r7, #13]
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3714      	adds	r7, #20
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d24:	4770      	bx	lr
 8011d26:	bf00      	nop
 8011d28:	24008c64 	.word	0x24008c64

08011d2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b085      	sub	sp, #20
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011d34:	2300      	movs	r3, #0
 8011d36:	60fb      	str	r3, [r7, #12]
 8011d38:	e010      	b.n	8011d5c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011d3a:	4a0d      	ldr	r2, [pc, #52]	; (8011d70 <clear_lock+0x44>)
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	011b      	lsls	r3, r3, #4
 8011d40:	4413      	add	r3, r2
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d105      	bne.n	8011d56 <clear_lock+0x2a>
 8011d4a:	4a09      	ldr	r2, [pc, #36]	; (8011d70 <clear_lock+0x44>)
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	011b      	lsls	r3, r3, #4
 8011d50:	4413      	add	r3, r2
 8011d52:	2200      	movs	r2, #0
 8011d54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	3301      	adds	r3, #1
 8011d5a:	60fb      	str	r3, [r7, #12]
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	2b01      	cmp	r3, #1
 8011d60:	d9eb      	bls.n	8011d3a <clear_lock+0xe>
	}
}
 8011d62:	bf00      	nop
 8011d64:	bf00      	nop
 8011d66:	3714      	adds	r7, #20
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr
 8011d70:	24008c64 	.word	0x24008c64

08011d74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b086      	sub	sp, #24
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	78db      	ldrb	r3, [r3, #3]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d034      	beq.n	8011df2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	7858      	ldrb	r0, [r3, #1]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d98:	2301      	movs	r3, #1
 8011d9a:	697a      	ldr	r2, [r7, #20]
 8011d9c:	f7ff fd40 	bl	8011820 <disk_write>
 8011da0:	4603      	mov	r3, r0
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d002      	beq.n	8011dac <sync_window+0x38>
			res = FR_DISK_ERR;
 8011da6:	2301      	movs	r3, #1
 8011da8:	73fb      	strb	r3, [r7, #15]
 8011daa:	e022      	b.n	8011df2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2200      	movs	r2, #0
 8011db0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6a1b      	ldr	r3, [r3, #32]
 8011db6:	697a      	ldr	r2, [r7, #20]
 8011db8:	1ad2      	subs	r2, r2, r3
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	699b      	ldr	r3, [r3, #24]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d217      	bcs.n	8011df2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	789b      	ldrb	r3, [r3, #2]
 8011dc6:	613b      	str	r3, [r7, #16]
 8011dc8:	e010      	b.n	8011dec <sync_window+0x78>
					wsect += fs->fsize;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	699b      	ldr	r3, [r3, #24]
 8011dce:	697a      	ldr	r2, [r7, #20]
 8011dd0:	4413      	add	r3, r2
 8011dd2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	7858      	ldrb	r0, [r3, #1]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011dde:	2301      	movs	r3, #1
 8011de0:	697a      	ldr	r2, [r7, #20]
 8011de2:	f7ff fd1d 	bl	8011820 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	3b01      	subs	r3, #1
 8011dea:	613b      	str	r3, [r7, #16]
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d8eb      	bhi.n	8011dca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3718      	adds	r7, #24
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011e06:	2300      	movs	r3, #0
 8011e08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e0e:	683a      	ldr	r2, [r7, #0]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d01b      	beq.n	8011e4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f7ff ffad 	bl	8011d74 <sync_window>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011e1e:	7bfb      	ldrb	r3, [r7, #15]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d113      	bne.n	8011e4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	7858      	ldrb	r0, [r3, #1]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e2e:	2301      	movs	r3, #1
 8011e30:	683a      	ldr	r2, [r7, #0]
 8011e32:	f7ff fcd5 	bl	80117e0 <disk_read>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d004      	beq.n	8011e46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011e42:	2301      	movs	r3, #1
 8011e44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	683a      	ldr	r2, [r7, #0]
 8011e4a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8011e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3710      	adds	r7, #16
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
	...

08011e58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b084      	sub	sp, #16
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7ff ff87 	bl	8011d74 <sync_window>
 8011e66:	4603      	mov	r3, r0
 8011e68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011e6a:	7bfb      	ldrb	r3, [r7, #15]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d158      	bne.n	8011f22 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	2b03      	cmp	r3, #3
 8011e76:	d148      	bne.n	8011f0a <sync_fs+0xb2>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	791b      	ldrb	r3, [r3, #4]
 8011e7c:	2b01      	cmp	r3, #1
 8011e7e:	d144      	bne.n	8011f0a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	3330      	adds	r3, #48	; 0x30
 8011e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e88:	2100      	movs	r1, #0
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7ff fda9 	bl	80119e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	3330      	adds	r3, #48	; 0x30
 8011e94:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011e98:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7ff fd38 	bl	8011912 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	3330      	adds	r3, #48	; 0x30
 8011ea6:	4921      	ldr	r1, [pc, #132]	; (8011f2c <sync_fs+0xd4>)
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7ff fd4d 	bl	8011948 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	3330      	adds	r3, #48	; 0x30
 8011eb2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011eb6:	491e      	ldr	r1, [pc, #120]	; (8011f30 <sync_fs+0xd8>)
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7ff fd45 	bl	8011948 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	3330      	adds	r3, #48	; 0x30
 8011ec2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	691b      	ldr	r3, [r3, #16]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	4610      	mov	r0, r2
 8011ece:	f7ff fd3b 	bl	8011948 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	3330      	adds	r3, #48	; 0x30
 8011ed6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	68db      	ldr	r3, [r3, #12]
 8011ede:	4619      	mov	r1, r3
 8011ee0:	4610      	mov	r0, r2
 8011ee2:	f7ff fd31 	bl	8011948 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	69db      	ldr	r3, [r3, #28]
 8011eea:	1c5a      	adds	r2, r3, #1
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	7858      	ldrb	r0, [r3, #1]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011efe:	2301      	movs	r3, #1
 8011f00:	f7ff fc8e 	bl	8011820 <disk_write>
			fs->fsi_flag = 0;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2200      	movs	r2, #0
 8011f08:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	785b      	ldrb	r3, [r3, #1]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	2100      	movs	r1, #0
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7ff fca4 	bl	8011860 <disk_ioctl>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d001      	beq.n	8011f22 <sync_fs+0xca>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3710      	adds	r7, #16
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	41615252 	.word	0x41615252
 8011f30:	61417272 	.word	0x61417272

08011f34 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011f34:	b480      	push	{r7}
 8011f36:	b083      	sub	sp, #12
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	3b02      	subs	r3, #2
 8011f42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	695b      	ldr	r3, [r3, #20]
 8011f48:	3b02      	subs	r3, #2
 8011f4a:	683a      	ldr	r2, [r7, #0]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d301      	bcc.n	8011f54 <clust2sect+0x20>
 8011f50:	2300      	movs	r3, #0
 8011f52:	e008      	b.n	8011f66 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	895b      	ldrh	r3, [r3, #10]
 8011f58:	461a      	mov	r2, r3
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	fb03 f202 	mul.w	r2, r3, r2
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f64:	4413      	add	r3, r2
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	370c      	adds	r7, #12
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr

08011f72 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b086      	sub	sp, #24
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
 8011f7a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d904      	bls.n	8011f92 <get_fat+0x20>
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	695b      	ldr	r3, [r3, #20]
 8011f8c:	683a      	ldr	r2, [r7, #0]
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d302      	bcc.n	8011f98 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011f92:	2301      	movs	r3, #1
 8011f94:	617b      	str	r3, [r7, #20]
 8011f96:	e08f      	b.n	80120b8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011f98:	f04f 33ff 	mov.w	r3, #4294967295
 8011f9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	2b03      	cmp	r3, #3
 8011fa4:	d062      	beq.n	801206c <get_fat+0xfa>
 8011fa6:	2b03      	cmp	r3, #3
 8011fa8:	dc7c      	bgt.n	80120a4 <get_fat+0x132>
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d002      	beq.n	8011fb4 <get_fat+0x42>
 8011fae:	2b02      	cmp	r3, #2
 8011fb0:	d042      	beq.n	8012038 <get_fat+0xc6>
 8011fb2:	e077      	b.n	80120a4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	60fb      	str	r3, [r7, #12]
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	085b      	lsrs	r3, r3, #1
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	4413      	add	r3, r2
 8011fc0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	6a1a      	ldr	r2, [r3, #32]
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	0a5b      	lsrs	r3, r3, #9
 8011fca:	4413      	add	r3, r2
 8011fcc:	4619      	mov	r1, r3
 8011fce:	6938      	ldr	r0, [r7, #16]
 8011fd0:	f7ff ff14 	bl	8011dfc <move_window>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d167      	bne.n	80120aa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	1c5a      	adds	r2, r3, #1
 8011fde:	60fa      	str	r2, [r7, #12]
 8011fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011fe4:	693a      	ldr	r2, [r7, #16]
 8011fe6:	4413      	add	r3, r2
 8011fe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011fec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	6a1a      	ldr	r2, [r3, #32]
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	0a5b      	lsrs	r3, r3, #9
 8011ff6:	4413      	add	r3, r2
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	6938      	ldr	r0, [r7, #16]
 8011ffc:	f7ff fefe 	bl	8011dfc <move_window>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d153      	bne.n	80120ae <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801200c:	693a      	ldr	r2, [r7, #16]
 801200e:	4413      	add	r3, r2
 8012010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012014:	021b      	lsls	r3, r3, #8
 8012016:	461a      	mov	r2, r3
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	4313      	orrs	r3, r2
 801201c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	f003 0301 	and.w	r3, r3, #1
 8012024:	2b00      	cmp	r3, #0
 8012026:	d002      	beq.n	801202e <get_fat+0xbc>
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	091b      	lsrs	r3, r3, #4
 801202c:	e002      	b.n	8012034 <get_fat+0xc2>
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012034:	617b      	str	r3, [r7, #20]
			break;
 8012036:	e03f      	b.n	80120b8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	6a1a      	ldr	r2, [r3, #32]
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	0a1b      	lsrs	r3, r3, #8
 8012040:	4413      	add	r3, r2
 8012042:	4619      	mov	r1, r3
 8012044:	6938      	ldr	r0, [r7, #16]
 8012046:	f7ff fed9 	bl	8011dfc <move_window>
 801204a:	4603      	mov	r3, r0
 801204c:	2b00      	cmp	r3, #0
 801204e:	d130      	bne.n	80120b2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	005b      	lsls	r3, r3, #1
 801205a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801205e:	4413      	add	r3, r2
 8012060:	4618      	mov	r0, r3
 8012062:	f7ff fc1b 	bl	801189c <ld_word>
 8012066:	4603      	mov	r3, r0
 8012068:	617b      	str	r3, [r7, #20]
			break;
 801206a:	e025      	b.n	80120b8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	6a1a      	ldr	r2, [r3, #32]
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	09db      	lsrs	r3, r3, #7
 8012074:	4413      	add	r3, r2
 8012076:	4619      	mov	r1, r3
 8012078:	6938      	ldr	r0, [r7, #16]
 801207a:	f7ff febf 	bl	8011dfc <move_window>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d118      	bne.n	80120b6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012092:	4413      	add	r3, r2
 8012094:	4618      	mov	r0, r3
 8012096:	f7ff fc19 	bl	80118cc <ld_dword>
 801209a:	4603      	mov	r3, r0
 801209c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80120a0:	617b      	str	r3, [r7, #20]
			break;
 80120a2:	e009      	b.n	80120b8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80120a4:	2301      	movs	r3, #1
 80120a6:	617b      	str	r3, [r7, #20]
 80120a8:	e006      	b.n	80120b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80120aa:	bf00      	nop
 80120ac:	e004      	b.n	80120b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80120ae:	bf00      	nop
 80120b0:	e002      	b.n	80120b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80120b2:	bf00      	nop
 80120b4:	e000      	b.n	80120b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80120b6:	bf00      	nop
		}
	}

	return val;
 80120b8:	697b      	ldr	r3, [r7, #20]
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3718      	adds	r7, #24
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80120c2:	b590      	push	{r4, r7, lr}
 80120c4:	b089      	sub	sp, #36	; 0x24
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	60f8      	str	r0, [r7, #12]
 80120ca:	60b9      	str	r1, [r7, #8]
 80120cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80120ce:	2302      	movs	r3, #2
 80120d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	f240 80d2 	bls.w	801227e <put_fat+0x1bc>
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	695b      	ldr	r3, [r3, #20]
 80120de:	68ba      	ldr	r2, [r7, #8]
 80120e0:	429a      	cmp	r2, r3
 80120e2:	f080 80cc 	bcs.w	801227e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	2b03      	cmp	r3, #3
 80120ec:	f000 8096 	beq.w	801221c <put_fat+0x15a>
 80120f0:	2b03      	cmp	r3, #3
 80120f2:	f300 80cd 	bgt.w	8012290 <put_fat+0x1ce>
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d002      	beq.n	8012100 <put_fat+0x3e>
 80120fa:	2b02      	cmp	r3, #2
 80120fc:	d06e      	beq.n	80121dc <put_fat+0x11a>
 80120fe:	e0c7      	b.n	8012290 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	61bb      	str	r3, [r7, #24]
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	085b      	lsrs	r3, r3, #1
 8012108:	69ba      	ldr	r2, [r7, #24]
 801210a:	4413      	add	r3, r2
 801210c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	6a1a      	ldr	r2, [r3, #32]
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	0a5b      	lsrs	r3, r3, #9
 8012116:	4413      	add	r3, r2
 8012118:	4619      	mov	r1, r3
 801211a:	68f8      	ldr	r0, [r7, #12]
 801211c:	f7ff fe6e 	bl	8011dfc <move_window>
 8012120:	4603      	mov	r3, r0
 8012122:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012124:	7ffb      	ldrb	r3, [r7, #31]
 8012126:	2b00      	cmp	r3, #0
 8012128:	f040 80ab 	bne.w	8012282 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	1c59      	adds	r1, r3, #1
 8012136:	61b9      	str	r1, [r7, #24]
 8012138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801213c:	4413      	add	r3, r2
 801213e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	f003 0301 	and.w	r3, r3, #1
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00d      	beq.n	8012166 <put_fat+0xa4>
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	b25b      	sxtb	r3, r3
 8012150:	f003 030f 	and.w	r3, r3, #15
 8012154:	b25a      	sxtb	r2, r3
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	b2db      	uxtb	r3, r3
 801215a:	011b      	lsls	r3, r3, #4
 801215c:	b25b      	sxtb	r3, r3
 801215e:	4313      	orrs	r3, r2
 8012160:	b25b      	sxtb	r3, r3
 8012162:	b2db      	uxtb	r3, r3
 8012164:	e001      	b.n	801216a <put_fat+0xa8>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	b2db      	uxtb	r3, r3
 801216a:	697a      	ldr	r2, [r7, #20]
 801216c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	2201      	movs	r2, #1
 8012172:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	6a1a      	ldr	r2, [r3, #32]
 8012178:	69bb      	ldr	r3, [r7, #24]
 801217a:	0a5b      	lsrs	r3, r3, #9
 801217c:	4413      	add	r3, r2
 801217e:	4619      	mov	r1, r3
 8012180:	68f8      	ldr	r0, [r7, #12]
 8012182:	f7ff fe3b 	bl	8011dfc <move_window>
 8012186:	4603      	mov	r3, r0
 8012188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801218a:	7ffb      	ldrb	r3, [r7, #31]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d17a      	bne.n	8012286 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012196:	69bb      	ldr	r3, [r7, #24]
 8012198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801219c:	4413      	add	r3, r2
 801219e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	f003 0301 	and.w	r3, r3, #1
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d003      	beq.n	80121b2 <put_fat+0xf0>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	091b      	lsrs	r3, r3, #4
 80121ae:	b2db      	uxtb	r3, r3
 80121b0:	e00e      	b.n	80121d0 <put_fat+0x10e>
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	b25b      	sxtb	r3, r3
 80121b8:	f023 030f 	bic.w	r3, r3, #15
 80121bc:	b25a      	sxtb	r2, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	0a1b      	lsrs	r3, r3, #8
 80121c2:	b25b      	sxtb	r3, r3
 80121c4:	f003 030f 	and.w	r3, r3, #15
 80121c8:	b25b      	sxtb	r3, r3
 80121ca:	4313      	orrs	r3, r2
 80121cc:	b25b      	sxtb	r3, r3
 80121ce:	b2db      	uxtb	r3, r3
 80121d0:	697a      	ldr	r2, [r7, #20]
 80121d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2201      	movs	r2, #1
 80121d8:	70da      	strb	r2, [r3, #3]
			break;
 80121da:	e059      	b.n	8012290 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	6a1a      	ldr	r2, [r3, #32]
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	0a1b      	lsrs	r3, r3, #8
 80121e4:	4413      	add	r3, r2
 80121e6:	4619      	mov	r1, r3
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f7ff fe07 	bl	8011dfc <move_window>
 80121ee:	4603      	mov	r3, r0
 80121f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80121f2:	7ffb      	ldrb	r3, [r7, #31]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d148      	bne.n	801228a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	005b      	lsls	r3, r3, #1
 8012202:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012206:	4413      	add	r3, r2
 8012208:	687a      	ldr	r2, [r7, #4]
 801220a:	b292      	uxth	r2, r2
 801220c:	4611      	mov	r1, r2
 801220e:	4618      	mov	r0, r3
 8012210:	f7ff fb7f 	bl	8011912 <st_word>
			fs->wflag = 1;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	2201      	movs	r2, #1
 8012218:	70da      	strb	r2, [r3, #3]
			break;
 801221a:	e039      	b.n	8012290 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	6a1a      	ldr	r2, [r3, #32]
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	09db      	lsrs	r3, r3, #7
 8012224:	4413      	add	r3, r2
 8012226:	4619      	mov	r1, r3
 8012228:	68f8      	ldr	r0, [r7, #12]
 801222a:	f7ff fde7 	bl	8011dfc <move_window>
 801222e:	4603      	mov	r3, r0
 8012230:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012232:	7ffb      	ldrb	r3, [r7, #31]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d12a      	bne.n	801228e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801224c:	4413      	add	r3, r2
 801224e:	4618      	mov	r0, r3
 8012250:	f7ff fb3c 	bl	80118cc <ld_dword>
 8012254:	4603      	mov	r3, r0
 8012256:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801225a:	4323      	orrs	r3, r4
 801225c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801226c:	4413      	add	r3, r2
 801226e:	6879      	ldr	r1, [r7, #4]
 8012270:	4618      	mov	r0, r3
 8012272:	f7ff fb69 	bl	8011948 <st_dword>
			fs->wflag = 1;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2201      	movs	r2, #1
 801227a:	70da      	strb	r2, [r3, #3]
			break;
 801227c:	e008      	b.n	8012290 <put_fat+0x1ce>
		}
	}
 801227e:	bf00      	nop
 8012280:	e006      	b.n	8012290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012282:	bf00      	nop
 8012284:	e004      	b.n	8012290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012286:	bf00      	nop
 8012288:	e002      	b.n	8012290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801228a:	bf00      	nop
 801228c:	e000      	b.n	8012290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801228e:	bf00      	nop
	return res;
 8012290:	7ffb      	ldrb	r3, [r7, #31]
}
 8012292:	4618      	mov	r0, r3
 8012294:	3724      	adds	r7, #36	; 0x24
 8012296:	46bd      	mov	sp, r7
 8012298:	bd90      	pop	{r4, r7, pc}

0801229a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801229a:	b580      	push	{r7, lr}
 801229c:	b088      	sub	sp, #32
 801229e:	af00      	add	r7, sp, #0
 80122a0:	60f8      	str	r0, [r7, #12]
 80122a2:	60b9      	str	r1, [r7, #8]
 80122a4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80122a6:	2300      	movs	r3, #0
 80122a8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	d904      	bls.n	80122c0 <remove_chain+0x26>
 80122b6:	69bb      	ldr	r3, [r7, #24]
 80122b8:	695b      	ldr	r3, [r3, #20]
 80122ba:	68ba      	ldr	r2, [r7, #8]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d301      	bcc.n	80122c4 <remove_chain+0x2a>
 80122c0:	2302      	movs	r3, #2
 80122c2:	e04b      	b.n	801235c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d00c      	beq.n	80122e4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80122ca:	f04f 32ff 	mov.w	r2, #4294967295
 80122ce:	6879      	ldr	r1, [r7, #4]
 80122d0:	69b8      	ldr	r0, [r7, #24]
 80122d2:	f7ff fef6 	bl	80120c2 <put_fat>
 80122d6:	4603      	mov	r3, r0
 80122d8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80122da:	7ffb      	ldrb	r3, [r7, #31]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d001      	beq.n	80122e4 <remove_chain+0x4a>
 80122e0:	7ffb      	ldrb	r3, [r7, #31]
 80122e2:	e03b      	b.n	801235c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80122e4:	68b9      	ldr	r1, [r7, #8]
 80122e6:	68f8      	ldr	r0, [r7, #12]
 80122e8:	f7ff fe43 	bl	8011f72 <get_fat>
 80122ec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d031      	beq.n	8012358 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	2b01      	cmp	r3, #1
 80122f8:	d101      	bne.n	80122fe <remove_chain+0x64>
 80122fa:	2302      	movs	r3, #2
 80122fc:	e02e      	b.n	801235c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012304:	d101      	bne.n	801230a <remove_chain+0x70>
 8012306:	2301      	movs	r3, #1
 8012308:	e028      	b.n	801235c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801230a:	2200      	movs	r2, #0
 801230c:	68b9      	ldr	r1, [r7, #8]
 801230e:	69b8      	ldr	r0, [r7, #24]
 8012310:	f7ff fed7 	bl	80120c2 <put_fat>
 8012314:	4603      	mov	r3, r0
 8012316:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012318:	7ffb      	ldrb	r3, [r7, #31]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d001      	beq.n	8012322 <remove_chain+0x88>
 801231e:	7ffb      	ldrb	r3, [r7, #31]
 8012320:	e01c      	b.n	801235c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012322:	69bb      	ldr	r3, [r7, #24]
 8012324:	691a      	ldr	r2, [r3, #16]
 8012326:	69bb      	ldr	r3, [r7, #24]
 8012328:	695b      	ldr	r3, [r3, #20]
 801232a:	3b02      	subs	r3, #2
 801232c:	429a      	cmp	r2, r3
 801232e:	d20b      	bcs.n	8012348 <remove_chain+0xae>
			fs->free_clst++;
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	691b      	ldr	r3, [r3, #16]
 8012334:	1c5a      	adds	r2, r3, #1
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801233a:	69bb      	ldr	r3, [r7, #24]
 801233c:	791b      	ldrb	r3, [r3, #4]
 801233e:	f043 0301 	orr.w	r3, r3, #1
 8012342:	b2da      	uxtb	r2, r3
 8012344:	69bb      	ldr	r3, [r7, #24]
 8012346:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	695b      	ldr	r3, [r3, #20]
 8012350:	68ba      	ldr	r2, [r7, #8]
 8012352:	429a      	cmp	r2, r3
 8012354:	d3c6      	bcc.n	80122e4 <remove_chain+0x4a>
 8012356:	e000      	b.n	801235a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012358:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801235a:	2300      	movs	r3, #0
}
 801235c:	4618      	mov	r0, r3
 801235e:	3720      	adds	r7, #32
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b088      	sub	sp, #32
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d10d      	bne.n	8012396 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	68db      	ldr	r3, [r3, #12]
 801237e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012380:	69bb      	ldr	r3, [r7, #24]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d004      	beq.n	8012390 <create_chain+0x2c>
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	695b      	ldr	r3, [r3, #20]
 801238a:	69ba      	ldr	r2, [r7, #24]
 801238c:	429a      	cmp	r2, r3
 801238e:	d31b      	bcc.n	80123c8 <create_chain+0x64>
 8012390:	2301      	movs	r3, #1
 8012392:	61bb      	str	r3, [r7, #24]
 8012394:	e018      	b.n	80123c8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012396:	6839      	ldr	r1, [r7, #0]
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f7ff fdea 	bl	8011f72 <get_fat>
 801239e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2b01      	cmp	r3, #1
 80123a4:	d801      	bhi.n	80123aa <create_chain+0x46>
 80123a6:	2301      	movs	r3, #1
 80123a8:	e070      	b.n	801248c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123b0:	d101      	bne.n	80123b6 <create_chain+0x52>
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	e06a      	b.n	801248c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	695b      	ldr	r3, [r3, #20]
 80123ba:	68fa      	ldr	r2, [r7, #12]
 80123bc:	429a      	cmp	r2, r3
 80123be:	d201      	bcs.n	80123c4 <create_chain+0x60>
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	e063      	b.n	801248c <create_chain+0x128>
		scl = clst;
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80123c8:	69bb      	ldr	r3, [r7, #24]
 80123ca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	3301      	adds	r3, #1
 80123d0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	695b      	ldr	r3, [r3, #20]
 80123d6:	69fa      	ldr	r2, [r7, #28]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d307      	bcc.n	80123ec <create_chain+0x88>
				ncl = 2;
 80123dc:	2302      	movs	r3, #2
 80123de:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80123e0:	69fa      	ldr	r2, [r7, #28]
 80123e2:	69bb      	ldr	r3, [r7, #24]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d901      	bls.n	80123ec <create_chain+0x88>
 80123e8:	2300      	movs	r3, #0
 80123ea:	e04f      	b.n	801248c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80123ec:	69f9      	ldr	r1, [r7, #28]
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f7ff fdbf 	bl	8011f72 <get_fat>
 80123f4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d00e      	beq.n	801241a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	2b01      	cmp	r3, #1
 8012400:	d003      	beq.n	801240a <create_chain+0xa6>
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012408:	d101      	bne.n	801240e <create_chain+0xaa>
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	e03e      	b.n	801248c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801240e:	69fa      	ldr	r2, [r7, #28]
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	429a      	cmp	r2, r3
 8012414:	d1da      	bne.n	80123cc <create_chain+0x68>
 8012416:	2300      	movs	r3, #0
 8012418:	e038      	b.n	801248c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801241a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801241c:	f04f 32ff 	mov.w	r2, #4294967295
 8012420:	69f9      	ldr	r1, [r7, #28]
 8012422:	6938      	ldr	r0, [r7, #16]
 8012424:	f7ff fe4d 	bl	80120c2 <put_fat>
 8012428:	4603      	mov	r3, r0
 801242a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801242c:	7dfb      	ldrb	r3, [r7, #23]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d109      	bne.n	8012446 <create_chain+0xe2>
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d006      	beq.n	8012446 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012438:	69fa      	ldr	r2, [r7, #28]
 801243a:	6839      	ldr	r1, [r7, #0]
 801243c:	6938      	ldr	r0, [r7, #16]
 801243e:	f7ff fe40 	bl	80120c2 <put_fat>
 8012442:	4603      	mov	r3, r0
 8012444:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012446:	7dfb      	ldrb	r3, [r7, #23]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d116      	bne.n	801247a <create_chain+0x116>
		fs->last_clst = ncl;
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	69fa      	ldr	r2, [r7, #28]
 8012450:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	691a      	ldr	r2, [r3, #16]
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	695b      	ldr	r3, [r3, #20]
 801245a:	3b02      	subs	r3, #2
 801245c:	429a      	cmp	r2, r3
 801245e:	d804      	bhi.n	801246a <create_chain+0x106>
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	691b      	ldr	r3, [r3, #16]
 8012464:	1e5a      	subs	r2, r3, #1
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	791b      	ldrb	r3, [r3, #4]
 801246e:	f043 0301 	orr.w	r3, r3, #1
 8012472:	b2da      	uxtb	r2, r3
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	711a      	strb	r2, [r3, #4]
 8012478:	e007      	b.n	801248a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801247a:	7dfb      	ldrb	r3, [r7, #23]
 801247c:	2b01      	cmp	r3, #1
 801247e:	d102      	bne.n	8012486 <create_chain+0x122>
 8012480:	f04f 33ff 	mov.w	r3, #4294967295
 8012484:	e000      	b.n	8012488 <create_chain+0x124>
 8012486:	2301      	movs	r3, #1
 8012488:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801248a:	69fb      	ldr	r3, [r7, #28]
}
 801248c:	4618      	mov	r0, r3
 801248e:	3720      	adds	r7, #32
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}

08012494 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012494:	b480      	push	{r7}
 8012496:	b087      	sub	sp, #28
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124a8:	3304      	adds	r3, #4
 80124aa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	0a5b      	lsrs	r3, r3, #9
 80124b0:	68fa      	ldr	r2, [r7, #12]
 80124b2:	8952      	ldrh	r2, [r2, #10]
 80124b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80124b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	1d1a      	adds	r2, r3, #4
 80124be:	613a      	str	r2, [r7, #16]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d101      	bne.n	80124ce <clmt_clust+0x3a>
 80124ca:	2300      	movs	r3, #0
 80124cc:	e010      	b.n	80124f0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80124ce:	697a      	ldr	r2, [r7, #20]
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d307      	bcc.n	80124e6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80124d6:	697a      	ldr	r2, [r7, #20]
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	617b      	str	r3, [r7, #20]
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	3304      	adds	r3, #4
 80124e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80124e4:	e7e9      	b.n	80124ba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80124e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	4413      	add	r3, r2
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	371c      	adds	r7, #28
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b086      	sub	sp, #24
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012512:	d204      	bcs.n	801251e <dir_sdi+0x22>
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	f003 031f 	and.w	r3, r3, #31
 801251a:	2b00      	cmp	r3, #0
 801251c:	d001      	beq.n	8012522 <dir_sdi+0x26>
		return FR_INT_ERR;
 801251e:	2302      	movs	r3, #2
 8012520:	e063      	b.n	80125ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	683a      	ldr	r2, [r7, #0]
 8012526:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	689b      	ldr	r3, [r3, #8]
 801252c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d106      	bne.n	8012542 <dir_sdi+0x46>
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	2b02      	cmp	r3, #2
 801253a:	d902      	bls.n	8012542 <dir_sdi+0x46>
		clst = fs->dirbase;
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012540:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d10c      	bne.n	8012562 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	095b      	lsrs	r3, r3, #5
 801254c:	693a      	ldr	r2, [r7, #16]
 801254e:	8912      	ldrh	r2, [r2, #8]
 8012550:	4293      	cmp	r3, r2
 8012552:	d301      	bcc.n	8012558 <dir_sdi+0x5c>
 8012554:	2302      	movs	r3, #2
 8012556:	e048      	b.n	80125ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	61da      	str	r2, [r3, #28]
 8012560:	e029      	b.n	80125b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	895b      	ldrh	r3, [r3, #10]
 8012566:	025b      	lsls	r3, r3, #9
 8012568:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801256a:	e019      	b.n	80125a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6979      	ldr	r1, [r7, #20]
 8012570:	4618      	mov	r0, r3
 8012572:	f7ff fcfe 	bl	8011f72 <get_fat>
 8012576:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801257e:	d101      	bne.n	8012584 <dir_sdi+0x88>
 8012580:	2301      	movs	r3, #1
 8012582:	e032      	b.n	80125ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	2b01      	cmp	r3, #1
 8012588:	d904      	bls.n	8012594 <dir_sdi+0x98>
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	695b      	ldr	r3, [r3, #20]
 801258e:	697a      	ldr	r2, [r7, #20]
 8012590:	429a      	cmp	r2, r3
 8012592:	d301      	bcc.n	8012598 <dir_sdi+0x9c>
 8012594:	2302      	movs	r3, #2
 8012596:	e028      	b.n	80125ea <dir_sdi+0xee>
			ofs -= csz;
 8012598:	683a      	ldr	r2, [r7, #0]
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	1ad3      	subs	r3, r2, r3
 801259e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80125a0:	683a      	ldr	r2, [r7, #0]
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d2e1      	bcs.n	801256c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80125a8:	6979      	ldr	r1, [r7, #20]
 80125aa:	6938      	ldr	r0, [r7, #16]
 80125ac:	f7ff fcc2 	bl	8011f34 <clust2sect>
 80125b0:	4602      	mov	r2, r0
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	697a      	ldr	r2, [r7, #20]
 80125ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	69db      	ldr	r3, [r3, #28]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d101      	bne.n	80125c8 <dir_sdi+0xcc>
 80125c4:	2302      	movs	r3, #2
 80125c6:	e010      	b.n	80125ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	69da      	ldr	r2, [r3, #28]
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	0a5b      	lsrs	r3, r3, #9
 80125d0:	441a      	add	r2, r3
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125e2:	441a      	add	r2, r3
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80125e8:	2300      	movs	r3, #0
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3718      	adds	r7, #24
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b086      	sub	sp, #24
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
 80125fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	695b      	ldr	r3, [r3, #20]
 8012606:	3320      	adds	r3, #32
 8012608:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	69db      	ldr	r3, [r3, #28]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d003      	beq.n	801261a <dir_next+0x28>
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012618:	d301      	bcc.n	801261e <dir_next+0x2c>
 801261a:	2304      	movs	r3, #4
 801261c:	e0aa      	b.n	8012774 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012624:	2b00      	cmp	r3, #0
 8012626:	f040 8098 	bne.w	801275a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	69db      	ldr	r3, [r3, #28]
 801262e:	1c5a      	adds	r2, r3, #1
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	699b      	ldr	r3, [r3, #24]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d10b      	bne.n	8012654 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	095b      	lsrs	r3, r3, #5
 8012640:	68fa      	ldr	r2, [r7, #12]
 8012642:	8912      	ldrh	r2, [r2, #8]
 8012644:	4293      	cmp	r3, r2
 8012646:	f0c0 8088 	bcc.w	801275a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2200      	movs	r2, #0
 801264e:	61da      	str	r2, [r3, #28]
 8012650:	2304      	movs	r3, #4
 8012652:	e08f      	b.n	8012774 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	0a5b      	lsrs	r3, r3, #9
 8012658:	68fa      	ldr	r2, [r7, #12]
 801265a:	8952      	ldrh	r2, [r2, #10]
 801265c:	3a01      	subs	r2, #1
 801265e:	4013      	ands	r3, r2
 8012660:	2b00      	cmp	r3, #0
 8012662:	d17a      	bne.n	801275a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012664:	687a      	ldr	r2, [r7, #4]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	699b      	ldr	r3, [r3, #24]
 801266a:	4619      	mov	r1, r3
 801266c:	4610      	mov	r0, r2
 801266e:	f7ff fc80 	bl	8011f72 <get_fat>
 8012672:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	2b01      	cmp	r3, #1
 8012678:	d801      	bhi.n	801267e <dir_next+0x8c>
 801267a:	2302      	movs	r3, #2
 801267c:	e07a      	b.n	8012774 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012684:	d101      	bne.n	801268a <dir_next+0x98>
 8012686:	2301      	movs	r3, #1
 8012688:	e074      	b.n	8012774 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	695b      	ldr	r3, [r3, #20]
 801268e:	697a      	ldr	r2, [r7, #20]
 8012690:	429a      	cmp	r2, r3
 8012692:	d358      	bcc.n	8012746 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d104      	bne.n	80126a4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2200      	movs	r2, #0
 801269e:	61da      	str	r2, [r3, #28]
 80126a0:	2304      	movs	r3, #4
 80126a2:	e067      	b.n	8012774 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	699b      	ldr	r3, [r3, #24]
 80126aa:	4619      	mov	r1, r3
 80126ac:	4610      	mov	r0, r2
 80126ae:	f7ff fe59 	bl	8012364 <create_chain>
 80126b2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d101      	bne.n	80126be <dir_next+0xcc>
 80126ba:	2307      	movs	r3, #7
 80126bc:	e05a      	b.n	8012774 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	2b01      	cmp	r3, #1
 80126c2:	d101      	bne.n	80126c8 <dir_next+0xd6>
 80126c4:	2302      	movs	r3, #2
 80126c6:	e055      	b.n	8012774 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ce:	d101      	bne.n	80126d4 <dir_next+0xe2>
 80126d0:	2301      	movs	r3, #1
 80126d2:	e04f      	b.n	8012774 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80126d4:	68f8      	ldr	r0, [r7, #12]
 80126d6:	f7ff fb4d 	bl	8011d74 <sync_window>
 80126da:	4603      	mov	r3, r0
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d001      	beq.n	80126e4 <dir_next+0xf2>
 80126e0:	2301      	movs	r3, #1
 80126e2:	e047      	b.n	8012774 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	3330      	adds	r3, #48	; 0x30
 80126e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80126ec:	2100      	movs	r1, #0
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7ff f977 	bl	80119e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126f4:	2300      	movs	r3, #0
 80126f6:	613b      	str	r3, [r7, #16]
 80126f8:	6979      	ldr	r1, [r7, #20]
 80126fa:	68f8      	ldr	r0, [r7, #12]
 80126fc:	f7ff fc1a 	bl	8011f34 <clust2sect>
 8012700:	4602      	mov	r2, r0
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	62da      	str	r2, [r3, #44]	; 0x2c
 8012706:	e012      	b.n	801272e <dir_next+0x13c>
						fs->wflag = 1;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2201      	movs	r2, #1
 801270c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801270e:	68f8      	ldr	r0, [r7, #12]
 8012710:	f7ff fb30 	bl	8011d74 <sync_window>
 8012714:	4603      	mov	r3, r0
 8012716:	2b00      	cmp	r3, #0
 8012718:	d001      	beq.n	801271e <dir_next+0x12c>
 801271a:	2301      	movs	r3, #1
 801271c:	e02a      	b.n	8012774 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	3301      	adds	r3, #1
 8012722:	613b      	str	r3, [r7, #16]
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012728:	1c5a      	adds	r2, r3, #1
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	62da      	str	r2, [r3, #44]	; 0x2c
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	895b      	ldrh	r3, [r3, #10]
 8012732:	461a      	mov	r2, r3
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	4293      	cmp	r3, r2
 8012738:	d3e6      	bcc.n	8012708 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	1ad2      	subs	r2, r2, r3
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	697a      	ldr	r2, [r7, #20]
 801274a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801274c:	6979      	ldr	r1, [r7, #20]
 801274e:	68f8      	ldr	r0, [r7, #12]
 8012750:	f7ff fbf0 	bl	8011f34 <clust2sect>
 8012754:	4602      	mov	r2, r0
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	68ba      	ldr	r2, [r7, #8]
 801275e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801276c:	441a      	add	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012772:	2300      	movs	r3, #0
}
 8012774:	4618      	mov	r0, r3
 8012776:	3718      	adds	r7, #24
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b086      	sub	sp, #24
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801278c:	2100      	movs	r1, #0
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7ff feb4 	bl	80124fc <dir_sdi>
 8012794:	4603      	mov	r3, r0
 8012796:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012798:	7dfb      	ldrb	r3, [r7, #23]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d12b      	bne.n	80127f6 <dir_alloc+0x7a>
		n = 0;
 801279e:	2300      	movs	r3, #0
 80127a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	69db      	ldr	r3, [r3, #28]
 80127a6:	4619      	mov	r1, r3
 80127a8:	68f8      	ldr	r0, [r7, #12]
 80127aa:	f7ff fb27 	bl	8011dfc <move_window>
 80127ae:	4603      	mov	r3, r0
 80127b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80127b2:	7dfb      	ldrb	r3, [r7, #23]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d11d      	bne.n	80127f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6a1b      	ldr	r3, [r3, #32]
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	2be5      	cmp	r3, #229	; 0xe5
 80127c0:	d004      	beq.n	80127cc <dir_alloc+0x50>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	6a1b      	ldr	r3, [r3, #32]
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d107      	bne.n	80127dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	3301      	adds	r3, #1
 80127d0:	613b      	str	r3, [r7, #16]
 80127d2:	693a      	ldr	r2, [r7, #16]
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d102      	bne.n	80127e0 <dir_alloc+0x64>
 80127da:	e00c      	b.n	80127f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80127dc:	2300      	movs	r3, #0
 80127de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80127e0:	2101      	movs	r1, #1
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f7ff ff05 	bl	80125f2 <dir_next>
 80127e8:	4603      	mov	r3, r0
 80127ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80127ec:	7dfb      	ldrb	r3, [r7, #23]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d0d7      	beq.n	80127a2 <dir_alloc+0x26>
 80127f2:	e000      	b.n	80127f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80127f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80127f6:	7dfb      	ldrb	r3, [r7, #23]
 80127f8:	2b04      	cmp	r3, #4
 80127fa:	d101      	bne.n	8012800 <dir_alloc+0x84>
 80127fc:	2307      	movs	r3, #7
 80127fe:	75fb      	strb	r3, [r7, #23]
	return res;
 8012800:	7dfb      	ldrb	r3, [r7, #23]
}
 8012802:	4618      	mov	r0, r3
 8012804:	3718      	adds	r7, #24
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}

0801280a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801280a:	b580      	push	{r7, lr}
 801280c:	b084      	sub	sp, #16
 801280e:	af00      	add	r7, sp, #0
 8012810:	6078      	str	r0, [r7, #4]
 8012812:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	331a      	adds	r3, #26
 8012818:	4618      	mov	r0, r3
 801281a:	f7ff f83f 	bl	801189c <ld_word>
 801281e:	4603      	mov	r3, r0
 8012820:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	2b03      	cmp	r3, #3
 8012828:	d109      	bne.n	801283e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	3314      	adds	r3, #20
 801282e:	4618      	mov	r0, r3
 8012830:	f7ff f834 	bl	801189c <ld_word>
 8012834:	4603      	mov	r3, r0
 8012836:	041b      	lsls	r3, r3, #16
 8012838:	68fa      	ldr	r2, [r7, #12]
 801283a:	4313      	orrs	r3, r2
 801283c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801283e:	68fb      	ldr	r3, [r7, #12]
}
 8012840:	4618      	mov	r0, r3
 8012842:	3710      	adds	r7, #16
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af00      	add	r7, sp, #0
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	331a      	adds	r3, #26
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	b292      	uxth	r2, r2
 801285c:	4611      	mov	r1, r2
 801285e:	4618      	mov	r0, r3
 8012860:	f7ff f857 	bl	8011912 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	2b03      	cmp	r3, #3
 801286a:	d109      	bne.n	8012880 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	f103 0214 	add.w	r2, r3, #20
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	0c1b      	lsrs	r3, r3, #16
 8012876:	b29b      	uxth	r3, r3
 8012878:	4619      	mov	r1, r3
 801287a:	4610      	mov	r0, r2
 801287c:	f7ff f849 	bl	8011912 <st_word>
	}
}
 8012880:	bf00      	nop
 8012882:	3710      	adds	r7, #16
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b086      	sub	sp, #24
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012896:	2100      	movs	r1, #0
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f7ff fe2f 	bl	80124fc <dir_sdi>
 801289e:	4603      	mov	r3, r0
 80128a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80128a2:	7dfb      	ldrb	r3, [r7, #23]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d001      	beq.n	80128ac <dir_find+0x24>
 80128a8:	7dfb      	ldrb	r3, [r7, #23]
 80128aa:	e03e      	b.n	801292a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	69db      	ldr	r3, [r3, #28]
 80128b0:	4619      	mov	r1, r3
 80128b2:	6938      	ldr	r0, [r7, #16]
 80128b4:	f7ff faa2 	bl	8011dfc <move_window>
 80128b8:	4603      	mov	r3, r0
 80128ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80128bc:	7dfb      	ldrb	r3, [r7, #23]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d12f      	bne.n	8012922 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6a1b      	ldr	r3, [r3, #32]
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80128ca:	7bfb      	ldrb	r3, [r7, #15]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d102      	bne.n	80128d6 <dir_find+0x4e>
 80128d0:	2304      	movs	r3, #4
 80128d2:	75fb      	strb	r3, [r7, #23]
 80128d4:	e028      	b.n	8012928 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	6a1b      	ldr	r3, [r3, #32]
 80128da:	330b      	adds	r3, #11
 80128dc:	781b      	ldrb	r3, [r3, #0]
 80128de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128e2:	b2da      	uxtb	r2, r3
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6a1b      	ldr	r3, [r3, #32]
 80128ec:	330b      	adds	r3, #11
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	f003 0308 	and.w	r3, r3, #8
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d10a      	bne.n	801290e <dir_find+0x86>
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6a18      	ldr	r0, [r3, #32]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	3324      	adds	r3, #36	; 0x24
 8012900:	220b      	movs	r2, #11
 8012902:	4619      	mov	r1, r3
 8012904:	f7ff f888 	bl	8011a18 <mem_cmp>
 8012908:	4603      	mov	r3, r0
 801290a:	2b00      	cmp	r3, #0
 801290c:	d00b      	beq.n	8012926 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801290e:	2100      	movs	r1, #0
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7ff fe6e 	bl	80125f2 <dir_next>
 8012916:	4603      	mov	r3, r0
 8012918:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801291a:	7dfb      	ldrb	r3, [r7, #23]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d0c5      	beq.n	80128ac <dir_find+0x24>
 8012920:	e002      	b.n	8012928 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012922:	bf00      	nop
 8012924:	e000      	b.n	8012928 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012926:	bf00      	nop

	return res;
 8012928:	7dfb      	ldrb	r3, [r7, #23]
}
 801292a:	4618      	mov	r0, r3
 801292c:	3718      	adds	r7, #24
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}

08012932 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012932:	b580      	push	{r7, lr}
 8012934:	b084      	sub	sp, #16
 8012936:	af00      	add	r7, sp, #0
 8012938:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012940:	2101      	movs	r1, #1
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f7ff ff1a 	bl	801277c <dir_alloc>
 8012948:	4603      	mov	r3, r0
 801294a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801294c:	7bfb      	ldrb	r3, [r7, #15]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d11c      	bne.n	801298c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	69db      	ldr	r3, [r3, #28]
 8012956:	4619      	mov	r1, r3
 8012958:	68b8      	ldr	r0, [r7, #8]
 801295a:	f7ff fa4f 	bl	8011dfc <move_window>
 801295e:	4603      	mov	r3, r0
 8012960:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012962:	7bfb      	ldrb	r3, [r7, #15]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d111      	bne.n	801298c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6a1b      	ldr	r3, [r3, #32]
 801296c:	2220      	movs	r2, #32
 801296e:	2100      	movs	r1, #0
 8012970:	4618      	mov	r0, r3
 8012972:	f7ff f836 	bl	80119e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	6a18      	ldr	r0, [r3, #32]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	3324      	adds	r3, #36	; 0x24
 801297e:	220b      	movs	r2, #11
 8012980:	4619      	mov	r1, r3
 8012982:	f7ff f80d 	bl	80119a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	2201      	movs	r2, #1
 801298a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801298c:	7bfb      	ldrb	r3, [r7, #15]
}
 801298e:	4618      	mov	r0, r3
 8012990:	3710      	adds	r7, #16
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
	...

08012998 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b088      	sub	sp, #32
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	60fb      	str	r3, [r7, #12]
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	3324      	adds	r3, #36	; 0x24
 80129ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80129ae:	220b      	movs	r2, #11
 80129b0:	2120      	movs	r1, #32
 80129b2:	68b8      	ldr	r0, [r7, #8]
 80129b4:	f7ff f815 	bl	80119e2 <mem_set>
	si = i = 0; ni = 8;
 80129b8:	2300      	movs	r3, #0
 80129ba:	613b      	str	r3, [r7, #16]
 80129bc:	693b      	ldr	r3, [r7, #16]
 80129be:	61fb      	str	r3, [r7, #28]
 80129c0:	2308      	movs	r3, #8
 80129c2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	1c5a      	adds	r2, r3, #1
 80129c8:	61fa      	str	r2, [r7, #28]
 80129ca:	68fa      	ldr	r2, [r7, #12]
 80129cc:	4413      	add	r3, r2
 80129ce:	781b      	ldrb	r3, [r3, #0]
 80129d0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80129d2:	7efb      	ldrb	r3, [r7, #27]
 80129d4:	2b20      	cmp	r3, #32
 80129d6:	d94e      	bls.n	8012a76 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80129d8:	7efb      	ldrb	r3, [r7, #27]
 80129da:	2b2f      	cmp	r3, #47	; 0x2f
 80129dc:	d006      	beq.n	80129ec <create_name+0x54>
 80129de:	7efb      	ldrb	r3, [r7, #27]
 80129e0:	2b5c      	cmp	r3, #92	; 0x5c
 80129e2:	d110      	bne.n	8012a06 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80129e4:	e002      	b.n	80129ec <create_name+0x54>
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	3301      	adds	r3, #1
 80129ea:	61fb      	str	r3, [r7, #28]
 80129ec:	68fa      	ldr	r2, [r7, #12]
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	4413      	add	r3, r2
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	2b2f      	cmp	r3, #47	; 0x2f
 80129f6:	d0f6      	beq.n	80129e6 <create_name+0x4e>
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	4413      	add	r3, r2
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	2b5c      	cmp	r3, #92	; 0x5c
 8012a02:	d0f0      	beq.n	80129e6 <create_name+0x4e>
			break;
 8012a04:	e038      	b.n	8012a78 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012a06:	7efb      	ldrb	r3, [r7, #27]
 8012a08:	2b2e      	cmp	r3, #46	; 0x2e
 8012a0a:	d003      	beq.n	8012a14 <create_name+0x7c>
 8012a0c:	693a      	ldr	r2, [r7, #16]
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d30c      	bcc.n	8012a2e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	2b0b      	cmp	r3, #11
 8012a18:	d002      	beq.n	8012a20 <create_name+0x88>
 8012a1a:	7efb      	ldrb	r3, [r7, #27]
 8012a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8012a1e:	d001      	beq.n	8012a24 <create_name+0x8c>
 8012a20:	2306      	movs	r3, #6
 8012a22:	e044      	b.n	8012aae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012a24:	2308      	movs	r3, #8
 8012a26:	613b      	str	r3, [r7, #16]
 8012a28:	230b      	movs	r3, #11
 8012a2a:	617b      	str	r3, [r7, #20]
			continue;
 8012a2c:	e022      	b.n	8012a74 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012a2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	da04      	bge.n	8012a40 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012a36:	7efb      	ldrb	r3, [r7, #27]
 8012a38:	3b80      	subs	r3, #128	; 0x80
 8012a3a:	4a1f      	ldr	r2, [pc, #124]	; (8012ab8 <create_name+0x120>)
 8012a3c:	5cd3      	ldrb	r3, [r2, r3]
 8012a3e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012a40:	7efb      	ldrb	r3, [r7, #27]
 8012a42:	4619      	mov	r1, r3
 8012a44:	481d      	ldr	r0, [pc, #116]	; (8012abc <create_name+0x124>)
 8012a46:	f7ff f80e 	bl	8011a66 <chk_chr>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d001      	beq.n	8012a54 <create_name+0xbc>
 8012a50:	2306      	movs	r3, #6
 8012a52:	e02c      	b.n	8012aae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012a54:	7efb      	ldrb	r3, [r7, #27]
 8012a56:	2b60      	cmp	r3, #96	; 0x60
 8012a58:	d905      	bls.n	8012a66 <create_name+0xce>
 8012a5a:	7efb      	ldrb	r3, [r7, #27]
 8012a5c:	2b7a      	cmp	r3, #122	; 0x7a
 8012a5e:	d802      	bhi.n	8012a66 <create_name+0xce>
 8012a60:	7efb      	ldrb	r3, [r7, #27]
 8012a62:	3b20      	subs	r3, #32
 8012a64:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012a66:	693b      	ldr	r3, [r7, #16]
 8012a68:	1c5a      	adds	r2, r3, #1
 8012a6a:	613a      	str	r2, [r7, #16]
 8012a6c:	68ba      	ldr	r2, [r7, #8]
 8012a6e:	4413      	add	r3, r2
 8012a70:	7efa      	ldrb	r2, [r7, #27]
 8012a72:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012a74:	e7a6      	b.n	80129c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012a76:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012a78:	68fa      	ldr	r2, [r7, #12]
 8012a7a:	69fb      	ldr	r3, [r7, #28]
 8012a7c:	441a      	add	r2, r3
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d101      	bne.n	8012a8c <create_name+0xf4>
 8012a88:	2306      	movs	r3, #6
 8012a8a:	e010      	b.n	8012aae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	2be5      	cmp	r3, #229	; 0xe5
 8012a92:	d102      	bne.n	8012a9a <create_name+0x102>
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	2205      	movs	r2, #5
 8012a98:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012a9a:	7efb      	ldrb	r3, [r7, #27]
 8012a9c:	2b20      	cmp	r3, #32
 8012a9e:	d801      	bhi.n	8012aa4 <create_name+0x10c>
 8012aa0:	2204      	movs	r2, #4
 8012aa2:	e000      	b.n	8012aa6 <create_name+0x10e>
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	330b      	adds	r3, #11
 8012aaa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012aac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3720      	adds	r7, #32
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	0801453c 	.word	0x0801453c
 8012abc:	080144a4 	.word	0x080144a4

08012ac0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b086      	sub	sp, #24
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012ad4:	e002      	b.n	8012adc <follow_path+0x1c>
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	3301      	adds	r3, #1
 8012ada:	603b      	str	r3, [r7, #0]
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	2b2f      	cmp	r3, #47	; 0x2f
 8012ae2:	d0f8      	beq.n	8012ad6 <follow_path+0x16>
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	2b5c      	cmp	r3, #92	; 0x5c
 8012aea:	d0f4      	beq.n	8012ad6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	2200      	movs	r2, #0
 8012af0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	2b1f      	cmp	r3, #31
 8012af8:	d80a      	bhi.n	8012b10 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2280      	movs	r2, #128	; 0x80
 8012afe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012b02:	2100      	movs	r1, #0
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff fcf9 	bl	80124fc <dir_sdi>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	75fb      	strb	r3, [r7, #23]
 8012b0e:	e043      	b.n	8012b98 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012b10:	463b      	mov	r3, r7
 8012b12:	4619      	mov	r1, r3
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7ff ff3f 	bl	8012998 <create_name>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012b1e:	7dfb      	ldrb	r3, [r7, #23]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d134      	bne.n	8012b8e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f7ff feaf 	bl	8012888 <dir_find>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012b34:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012b36:	7dfb      	ldrb	r3, [r7, #23]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d00a      	beq.n	8012b52 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012b3c:	7dfb      	ldrb	r3, [r7, #23]
 8012b3e:	2b04      	cmp	r3, #4
 8012b40:	d127      	bne.n	8012b92 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012b42:	7afb      	ldrb	r3, [r7, #11]
 8012b44:	f003 0304 	and.w	r3, r3, #4
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d122      	bne.n	8012b92 <follow_path+0xd2>
 8012b4c:	2305      	movs	r3, #5
 8012b4e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012b50:	e01f      	b.n	8012b92 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012b52:	7afb      	ldrb	r3, [r7, #11]
 8012b54:	f003 0304 	and.w	r3, r3, #4
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d11c      	bne.n	8012b96 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	799b      	ldrb	r3, [r3, #6]
 8012b60:	f003 0310 	and.w	r3, r3, #16
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d102      	bne.n	8012b6e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012b68:	2305      	movs	r3, #5
 8012b6a:	75fb      	strb	r3, [r7, #23]
 8012b6c:	e014      	b.n	8012b98 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	695b      	ldr	r3, [r3, #20]
 8012b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b7c:	4413      	add	r3, r2
 8012b7e:	4619      	mov	r1, r3
 8012b80:	68f8      	ldr	r0, [r7, #12]
 8012b82:	f7ff fe42 	bl	801280a <ld_clust>
 8012b86:	4602      	mov	r2, r0
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012b8c:	e7c0      	b.n	8012b10 <follow_path+0x50>
			if (res != FR_OK) break;
 8012b8e:	bf00      	nop
 8012b90:	e002      	b.n	8012b98 <follow_path+0xd8>
				break;
 8012b92:	bf00      	nop
 8012b94:	e000      	b.n	8012b98 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012b96:	bf00      	nop
			}
		}
	}

	return res;
 8012b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3718      	adds	r7, #24
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}

08012ba2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012ba2:	b480      	push	{r7}
 8012ba4:	b087      	sub	sp, #28
 8012ba6:	af00      	add	r7, sp, #0
 8012ba8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012baa:	f04f 33ff 	mov.w	r3, #4294967295
 8012bae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d031      	beq.n	8012c1c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	617b      	str	r3, [r7, #20]
 8012bbe:	e002      	b.n	8012bc6 <get_ldnumber+0x24>
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	617b      	str	r3, [r7, #20]
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	2b20      	cmp	r3, #32
 8012bcc:	d903      	bls.n	8012bd6 <get_ldnumber+0x34>
 8012bce:	697b      	ldr	r3, [r7, #20]
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	2b3a      	cmp	r3, #58	; 0x3a
 8012bd4:	d1f4      	bne.n	8012bc0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	2b3a      	cmp	r3, #58	; 0x3a
 8012bdc:	d11c      	bne.n	8012c18 <get_ldnumber+0x76>
			tp = *path;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	1c5a      	adds	r2, r3, #1
 8012be8:	60fa      	str	r2, [r7, #12]
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	3b30      	subs	r3, #48	; 0x30
 8012bee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	2b09      	cmp	r3, #9
 8012bf4:	d80e      	bhi.n	8012c14 <get_ldnumber+0x72>
 8012bf6:	68fa      	ldr	r2, [r7, #12]
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d10a      	bne.n	8012c14 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d107      	bne.n	8012c14 <get_ldnumber+0x72>
					vol = (int)i;
 8012c04:	68bb      	ldr	r3, [r7, #8]
 8012c06:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	617b      	str	r3, [r7, #20]
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	697a      	ldr	r2, [r7, #20]
 8012c12:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	e002      	b.n	8012c1e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012c18:	2300      	movs	r3, #0
 8012c1a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012c1c:	693b      	ldr	r3, [r7, #16]
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	371c      	adds	r7, #28
 8012c22:	46bd      	mov	sp, r7
 8012c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c28:	4770      	bx	lr
	...

08012c2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	70da      	strb	r2, [r3, #3]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c42:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012c44:	6839      	ldr	r1, [r7, #0]
 8012c46:	6878      	ldr	r0, [r7, #4]
 8012c48:	f7ff f8d8 	bl	8011dfc <move_window>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d001      	beq.n	8012c56 <check_fs+0x2a>
 8012c52:	2304      	movs	r3, #4
 8012c54:	e038      	b.n	8012cc8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	3330      	adds	r3, #48	; 0x30
 8012c5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7fe fe1c 	bl	801189c <ld_word>
 8012c64:	4603      	mov	r3, r0
 8012c66:	461a      	mov	r2, r3
 8012c68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	d001      	beq.n	8012c74 <check_fs+0x48>
 8012c70:	2303      	movs	r3, #3
 8012c72:	e029      	b.n	8012cc8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c7a:	2be9      	cmp	r3, #233	; 0xe9
 8012c7c:	d009      	beq.n	8012c92 <check_fs+0x66>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c84:	2beb      	cmp	r3, #235	; 0xeb
 8012c86:	d11e      	bne.n	8012cc6 <check_fs+0x9a>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012c8e:	2b90      	cmp	r3, #144	; 0x90
 8012c90:	d119      	bne.n	8012cc6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	3330      	adds	r3, #48	; 0x30
 8012c96:	3336      	adds	r3, #54	; 0x36
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7fe fe17 	bl	80118cc <ld_dword>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012ca4:	4a0a      	ldr	r2, [pc, #40]	; (8012cd0 <check_fs+0xa4>)
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	d101      	bne.n	8012cae <check_fs+0x82>
 8012caa:	2300      	movs	r3, #0
 8012cac:	e00c      	b.n	8012cc8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	3330      	adds	r3, #48	; 0x30
 8012cb2:	3352      	adds	r3, #82	; 0x52
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7fe fe09 	bl	80118cc <ld_dword>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	4a05      	ldr	r2, [pc, #20]	; (8012cd4 <check_fs+0xa8>)
 8012cbe:	4293      	cmp	r3, r2
 8012cc0:	d101      	bne.n	8012cc6 <check_fs+0x9a>
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	e000      	b.n	8012cc8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012cc6:	2302      	movs	r3, #2
}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	3708      	adds	r7, #8
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}
 8012cd0:	00544146 	.word	0x00544146
 8012cd4:	33544146 	.word	0x33544146

08012cd8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b096      	sub	sp, #88	; 0x58
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	60b9      	str	r1, [r7, #8]
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	2200      	movs	r2, #0
 8012cea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012cec:	68f8      	ldr	r0, [r7, #12]
 8012cee:	f7ff ff58 	bl	8012ba2 <get_ldnumber>
 8012cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	da01      	bge.n	8012cfe <find_volume+0x26>
 8012cfa:	230b      	movs	r3, #11
 8012cfc:	e22d      	b.n	801315a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012cfe:	4aa1      	ldr	r2, [pc, #644]	; (8012f84 <find_volume+0x2ac>)
 8012d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d101      	bne.n	8012d12 <find_volume+0x3a>
 8012d0e:	230c      	movs	r3, #12
 8012d10:	e223      	b.n	801315a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012d18:	79fb      	ldrb	r3, [r7, #7]
 8012d1a:	f023 0301 	bic.w	r3, r3, #1
 8012d1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d01a      	beq.n	8012d5e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2a:	785b      	ldrb	r3, [r3, #1]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7fe fd17 	bl	8011760 <disk_status>
 8012d32:	4603      	mov	r3, r0
 8012d34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012d38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d3c:	f003 0301 	and.w	r3, r3, #1
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d10c      	bne.n	8012d5e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012d44:	79fb      	ldrb	r3, [r7, #7]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d007      	beq.n	8012d5a <find_volume+0x82>
 8012d4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d4e:	f003 0304 	and.w	r3, r3, #4
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d001      	beq.n	8012d5a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012d56:	230a      	movs	r3, #10
 8012d58:	e1ff      	b.n	801315a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	e1fd      	b.n	801315a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d60:	2200      	movs	r2, #0
 8012d62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d66:	b2da      	uxtb	r2, r3
 8012d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6e:	785b      	ldrb	r3, [r3, #1]
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7fe fd0f 	bl	8011794 <disk_initialize>
 8012d76:	4603      	mov	r3, r0
 8012d78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012d7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d80:	f003 0301 	and.w	r3, r3, #1
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d001      	beq.n	8012d8c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012d88:	2303      	movs	r3, #3
 8012d8a:	e1e6      	b.n	801315a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012d8c:	79fb      	ldrb	r3, [r7, #7]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d007      	beq.n	8012da2 <find_volume+0xca>
 8012d92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d96:	f003 0304 	and.w	r3, r3, #4
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d001      	beq.n	8012da2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012d9e:	230a      	movs	r3, #10
 8012da0:	e1db      	b.n	801315a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012da2:	2300      	movs	r3, #0
 8012da4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012da6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012da8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012daa:	f7ff ff3f 	bl	8012c2c <check_fs>
 8012dae:	4603      	mov	r3, r0
 8012db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012db8:	2b02      	cmp	r3, #2
 8012dba:	d149      	bne.n	8012e50 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	643b      	str	r3, [r7, #64]	; 0x40
 8012dc0:	e01e      	b.n	8012e00 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dca:	011b      	lsls	r3, r3, #4
 8012dcc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012dd0:	4413      	add	r3, r2
 8012dd2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd6:	3304      	adds	r3, #4
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d006      	beq.n	8012dec <find_volume+0x114>
 8012dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de0:	3308      	adds	r3, #8
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7fe fd72 	bl	80118cc <ld_dword>
 8012de8:	4602      	mov	r2, r0
 8012dea:	e000      	b.n	8012dee <find_volume+0x116>
 8012dec:	2200      	movs	r2, #0
 8012dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012df0:	009b      	lsls	r3, r3, #2
 8012df2:	3358      	adds	r3, #88	; 0x58
 8012df4:	443b      	add	r3, r7
 8012df6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8012e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e02:	2b03      	cmp	r3, #3
 8012e04:	d9dd      	bls.n	8012dc2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012e06:	2300      	movs	r3, #0
 8012e08:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d002      	beq.n	8012e16 <find_volume+0x13e>
 8012e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e12:	3b01      	subs	r3, #1
 8012e14:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e18:	009b      	lsls	r3, r3, #2
 8012e1a:	3358      	adds	r3, #88	; 0x58
 8012e1c:	443b      	add	r3, r7
 8012e1e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012e22:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d005      	beq.n	8012e36 <find_volume+0x15e>
 8012e2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e2e:	f7ff fefd 	bl	8012c2c <check_fs>
 8012e32:	4603      	mov	r3, r0
 8012e34:	e000      	b.n	8012e38 <find_volume+0x160>
 8012e36:	2303      	movs	r3, #3
 8012e38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	d905      	bls.n	8012e50 <find_volume+0x178>
 8012e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e46:	3301      	adds	r3, #1
 8012e48:	643b      	str	r3, [r7, #64]	; 0x40
 8012e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e4c:	2b03      	cmp	r3, #3
 8012e4e:	d9e2      	bls.n	8012e16 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e54:	2b04      	cmp	r3, #4
 8012e56:	d101      	bne.n	8012e5c <find_volume+0x184>
 8012e58:	2301      	movs	r3, #1
 8012e5a:	e17e      	b.n	801315a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012e5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d901      	bls.n	8012e68 <find_volume+0x190>
 8012e64:	230d      	movs	r3, #13
 8012e66:	e178      	b.n	801315a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6a:	3330      	adds	r3, #48	; 0x30
 8012e6c:	330b      	adds	r3, #11
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7fe fd14 	bl	801189c <ld_word>
 8012e74:	4603      	mov	r3, r0
 8012e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e7a:	d001      	beq.n	8012e80 <find_volume+0x1a8>
 8012e7c:	230d      	movs	r3, #13
 8012e7e:	e16c      	b.n	801315a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e82:	3330      	adds	r3, #48	; 0x30
 8012e84:	3316      	adds	r3, #22
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7fe fd08 	bl	801189c <ld_word>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d106      	bne.n	8012ea4 <find_volume+0x1cc>
 8012e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e98:	3330      	adds	r3, #48	; 0x30
 8012e9a:	3324      	adds	r3, #36	; 0x24
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7fe fd15 	bl	80118cc <ld_dword>
 8012ea2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012ea8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8012eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb6:	789b      	ldrb	r3, [r3, #2]
 8012eb8:	2b01      	cmp	r3, #1
 8012eba:	d005      	beq.n	8012ec8 <find_volume+0x1f0>
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebe:	789b      	ldrb	r3, [r3, #2]
 8012ec0:	2b02      	cmp	r3, #2
 8012ec2:	d001      	beq.n	8012ec8 <find_volume+0x1f0>
 8012ec4:	230d      	movs	r3, #13
 8012ec6:	e148      	b.n	801315a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eca:	789b      	ldrb	r3, [r3, #2]
 8012ecc:	461a      	mov	r2, r3
 8012ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ed0:	fb02 f303 	mul.w	r3, r2, r3
 8012ed4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012edc:	b29a      	uxth	r2, r3
 8012ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee4:	895b      	ldrh	r3, [r3, #10]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d008      	beq.n	8012efc <find_volume+0x224>
 8012eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eec:	895b      	ldrh	r3, [r3, #10]
 8012eee:	461a      	mov	r2, r3
 8012ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef2:	895b      	ldrh	r3, [r3, #10]
 8012ef4:	3b01      	subs	r3, #1
 8012ef6:	4013      	ands	r3, r2
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d001      	beq.n	8012f00 <find_volume+0x228>
 8012efc:	230d      	movs	r3, #13
 8012efe:	e12c      	b.n	801315a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f02:	3330      	adds	r3, #48	; 0x30
 8012f04:	3311      	adds	r3, #17
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7fe fcc8 	bl	801189c <ld_word>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	461a      	mov	r2, r3
 8012f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f12:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f16:	891b      	ldrh	r3, [r3, #8]
 8012f18:	f003 030f 	and.w	r3, r3, #15
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d001      	beq.n	8012f26 <find_volume+0x24e>
 8012f22:	230d      	movs	r3, #13
 8012f24:	e119      	b.n	801315a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f28:	3330      	adds	r3, #48	; 0x30
 8012f2a:	3313      	adds	r3, #19
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7fe fcb5 	bl	801189c <ld_word>
 8012f32:	4603      	mov	r3, r0
 8012f34:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d106      	bne.n	8012f4a <find_volume+0x272>
 8012f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3e:	3330      	adds	r3, #48	; 0x30
 8012f40:	3320      	adds	r3, #32
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7fe fcc2 	bl	80118cc <ld_dword>
 8012f48:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4c:	3330      	adds	r3, #48	; 0x30
 8012f4e:	330e      	adds	r3, #14
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7fe fca3 	bl	801189c <ld_word>
 8012f56:	4603      	mov	r3, r0
 8012f58:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012f5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d101      	bne.n	8012f64 <find_volume+0x28c>
 8012f60:	230d      	movs	r3, #13
 8012f62:	e0fa      	b.n	801315a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012f64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f68:	4413      	add	r3, r2
 8012f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f6c:	8912      	ldrh	r2, [r2, #8]
 8012f6e:	0912      	lsrs	r2, r2, #4
 8012f70:	b292      	uxth	r2, r2
 8012f72:	4413      	add	r3, r2
 8012f74:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d204      	bcs.n	8012f88 <find_volume+0x2b0>
 8012f7e:	230d      	movs	r3, #13
 8012f80:	e0eb      	b.n	801315a <find_volume+0x482>
 8012f82:	bf00      	nop
 8012f84:	24008c5c 	.word	0x24008c5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8c:	1ad3      	subs	r3, r2, r3
 8012f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f90:	8952      	ldrh	r2, [r2, #10]
 8012f92:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f96:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d101      	bne.n	8012fa2 <find_volume+0x2ca>
 8012f9e:	230d      	movs	r3, #13
 8012fa0:	e0db      	b.n	801315a <find_volume+0x482>
		fmt = FS_FAT32;
 8012fa2:	2303      	movs	r3, #3
 8012fa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012faa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012fae:	4293      	cmp	r3, r2
 8012fb0:	d802      	bhi.n	8012fb8 <find_volume+0x2e0>
 8012fb2:	2302      	movs	r3, #2
 8012fb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fba:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d802      	bhi.n	8012fc8 <find_volume+0x2f0>
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fca:	1c9a      	adds	r2, r3, #2
 8012fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fce:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012fd4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012fd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fda:	441a      	add	r2, r3
 8012fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fde:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012fe0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe4:	441a      	add	r2, r3
 8012fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8012fea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fee:	2b03      	cmp	r3, #3
 8012ff0:	d11e      	bne.n	8013030 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff4:	3330      	adds	r3, #48	; 0x30
 8012ff6:	332a      	adds	r3, #42	; 0x2a
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7fe fc4f 	bl	801189c <ld_word>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d001      	beq.n	8013008 <find_volume+0x330>
 8013004:	230d      	movs	r3, #13
 8013006:	e0a8      	b.n	801315a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300a:	891b      	ldrh	r3, [r3, #8]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d001      	beq.n	8013014 <find_volume+0x33c>
 8013010:	230d      	movs	r3, #13
 8013012:	e0a2      	b.n	801315a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013016:	3330      	adds	r3, #48	; 0x30
 8013018:	332c      	adds	r3, #44	; 0x2c
 801301a:	4618      	mov	r0, r3
 801301c:	f7fe fc56 	bl	80118cc <ld_dword>
 8013020:	4602      	mov	r2, r0
 8013022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013024:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013028:	695b      	ldr	r3, [r3, #20]
 801302a:	009b      	lsls	r3, r3, #2
 801302c:	647b      	str	r3, [r7, #68]	; 0x44
 801302e:	e01f      	b.n	8013070 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013032:	891b      	ldrh	r3, [r3, #8]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d101      	bne.n	801303c <find_volume+0x364>
 8013038:	230d      	movs	r3, #13
 801303a:	e08e      	b.n	801315a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303e:	6a1a      	ldr	r2, [r3, #32]
 8013040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013042:	441a      	add	r2, r3
 8013044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013046:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801304c:	2b02      	cmp	r3, #2
 801304e:	d103      	bne.n	8013058 <find_volume+0x380>
 8013050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013052:	695b      	ldr	r3, [r3, #20]
 8013054:	005b      	lsls	r3, r3, #1
 8013056:	e00a      	b.n	801306e <find_volume+0x396>
 8013058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305a:	695a      	ldr	r2, [r3, #20]
 801305c:	4613      	mov	r3, r2
 801305e:	005b      	lsls	r3, r3, #1
 8013060:	4413      	add	r3, r2
 8013062:	085a      	lsrs	r2, r3, #1
 8013064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013066:	695b      	ldr	r3, [r3, #20]
 8013068:	f003 0301 	and.w	r3, r3, #1
 801306c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801306e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013072:	699a      	ldr	r2, [r3, #24]
 8013074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013076:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801307a:	0a5b      	lsrs	r3, r3, #9
 801307c:	429a      	cmp	r2, r3
 801307e:	d201      	bcs.n	8013084 <find_volume+0x3ac>
 8013080:	230d      	movs	r3, #13
 8013082:	e06a      	b.n	801315a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013086:	f04f 32ff 	mov.w	r2, #4294967295
 801308a:	611a      	str	r2, [r3, #16]
 801308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801308e:	691a      	ldr	r2, [r3, #16]
 8013090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013092:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013096:	2280      	movs	r2, #128	; 0x80
 8013098:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801309a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801309e:	2b03      	cmp	r3, #3
 80130a0:	d149      	bne.n	8013136 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80130a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a4:	3330      	adds	r3, #48	; 0x30
 80130a6:	3330      	adds	r3, #48	; 0x30
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7fe fbf7 	bl	801189c <ld_word>
 80130ae:	4603      	mov	r3, r0
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d140      	bne.n	8013136 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80130b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130b6:	3301      	adds	r3, #1
 80130b8:	4619      	mov	r1, r3
 80130ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80130bc:	f7fe fe9e 	bl	8011dfc <move_window>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d137      	bne.n	8013136 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80130c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c8:	2200      	movs	r2, #0
 80130ca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80130cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ce:	3330      	adds	r3, #48	; 0x30
 80130d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7fe fbe1 	bl	801189c <ld_word>
 80130da:	4603      	mov	r3, r0
 80130dc:	461a      	mov	r2, r3
 80130de:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80130e2:	429a      	cmp	r2, r3
 80130e4:	d127      	bne.n	8013136 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80130e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e8:	3330      	adds	r3, #48	; 0x30
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7fe fbee 	bl	80118cc <ld_dword>
 80130f0:	4603      	mov	r3, r0
 80130f2:	4a1c      	ldr	r2, [pc, #112]	; (8013164 <find_volume+0x48c>)
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d11e      	bne.n	8013136 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80130f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fa:	3330      	adds	r3, #48	; 0x30
 80130fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013100:	4618      	mov	r0, r3
 8013102:	f7fe fbe3 	bl	80118cc <ld_dword>
 8013106:	4603      	mov	r3, r0
 8013108:	4a17      	ldr	r2, [pc, #92]	; (8013168 <find_volume+0x490>)
 801310a:	4293      	cmp	r3, r2
 801310c:	d113      	bne.n	8013136 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013110:	3330      	adds	r3, #48	; 0x30
 8013112:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013116:	4618      	mov	r0, r3
 8013118:	f7fe fbd8 	bl	80118cc <ld_dword>
 801311c:	4602      	mov	r2, r0
 801311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013120:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013124:	3330      	adds	r3, #48	; 0x30
 8013126:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801312a:	4618      	mov	r0, r3
 801312c:	f7fe fbce 	bl	80118cc <ld_dword>
 8013130:	4602      	mov	r2, r0
 8013132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013134:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013138:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801313c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801313e:	4b0b      	ldr	r3, [pc, #44]	; (801316c <find_volume+0x494>)
 8013140:	881b      	ldrh	r3, [r3, #0]
 8013142:	3301      	adds	r3, #1
 8013144:	b29a      	uxth	r2, r3
 8013146:	4b09      	ldr	r3, [pc, #36]	; (801316c <find_volume+0x494>)
 8013148:	801a      	strh	r2, [r3, #0]
 801314a:	4b08      	ldr	r3, [pc, #32]	; (801316c <find_volume+0x494>)
 801314c:	881a      	ldrh	r2, [r3, #0]
 801314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013150:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013152:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013154:	f7fe fdea 	bl	8011d2c <clear_lock>
#endif
	return FR_OK;
 8013158:	2300      	movs	r3, #0
}
 801315a:	4618      	mov	r0, r3
 801315c:	3758      	adds	r7, #88	; 0x58
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	41615252 	.word	0x41615252
 8013168:	61417272 	.word	0x61417272
 801316c:	24008c60 	.word	0x24008c60

08013170 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801317a:	2309      	movs	r3, #9
 801317c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d01c      	beq.n	80131be <validate+0x4e>
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d018      	beq.n	80131be <validate+0x4e>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d013      	beq.n	80131be <validate+0x4e>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	889a      	ldrh	r2, [r3, #4]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	88db      	ldrh	r3, [r3, #6]
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d10c      	bne.n	80131be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	785b      	ldrb	r3, [r3, #1]
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fe fad8 	bl	8011760 <disk_status>
 80131b0:	4603      	mov	r3, r0
 80131b2:	f003 0301 	and.w	r3, r3, #1
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d101      	bne.n	80131be <validate+0x4e>
			res = FR_OK;
 80131ba:	2300      	movs	r3, #0
 80131bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80131be:	7bfb      	ldrb	r3, [r7, #15]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d102      	bne.n	80131ca <validate+0x5a>
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	e000      	b.n	80131cc <validate+0x5c>
 80131ca:	2300      	movs	r3, #0
 80131cc:	683a      	ldr	r2, [r7, #0]
 80131ce:	6013      	str	r3, [r2, #0]
	return res;
 80131d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3710      	adds	r7, #16
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
	...

080131dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b088      	sub	sp, #32
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	60f8      	str	r0, [r7, #12]
 80131e4:	60b9      	str	r1, [r7, #8]
 80131e6:	4613      	mov	r3, r2
 80131e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80131ee:	f107 0310 	add.w	r3, r7, #16
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7ff fcd5 	bl	8012ba2 <get_ldnumber>
 80131f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80131fa:	69fb      	ldr	r3, [r7, #28]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	da01      	bge.n	8013204 <f_mount+0x28>
 8013200:	230b      	movs	r3, #11
 8013202:	e02b      	b.n	801325c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013204:	4a17      	ldr	r2, [pc, #92]	; (8013264 <f_mount+0x88>)
 8013206:	69fb      	ldr	r3, [r7, #28]
 8013208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801320c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d005      	beq.n	8013220 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013214:	69b8      	ldr	r0, [r7, #24]
 8013216:	f7fe fd89 	bl	8011d2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801321a:	69bb      	ldr	r3, [r7, #24]
 801321c:	2200      	movs	r2, #0
 801321e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d002      	beq.n	801322c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2200      	movs	r2, #0
 801322a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801322c:	68fa      	ldr	r2, [r7, #12]
 801322e:	490d      	ldr	r1, [pc, #52]	; (8013264 <f_mount+0x88>)
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d002      	beq.n	8013242 <f_mount+0x66>
 801323c:	79fb      	ldrb	r3, [r7, #7]
 801323e:	2b01      	cmp	r3, #1
 8013240:	d001      	beq.n	8013246 <f_mount+0x6a>
 8013242:	2300      	movs	r3, #0
 8013244:	e00a      	b.n	801325c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013246:	f107 010c 	add.w	r1, r7, #12
 801324a:	f107 0308 	add.w	r3, r7, #8
 801324e:	2200      	movs	r2, #0
 8013250:	4618      	mov	r0, r3
 8013252:	f7ff fd41 	bl	8012cd8 <find_volume>
 8013256:	4603      	mov	r3, r0
 8013258:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801325a:	7dfb      	ldrb	r3, [r7, #23]
}
 801325c:	4618      	mov	r0, r3
 801325e:	3720      	adds	r7, #32
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}
 8013264:	24008c5c 	.word	0x24008c5c

08013268 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b098      	sub	sp, #96	; 0x60
 801326c:	af00      	add	r7, sp, #0
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	4613      	mov	r3, r2
 8013274:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d101      	bne.n	8013280 <f_open+0x18>
 801327c:	2309      	movs	r3, #9
 801327e:	e1ad      	b.n	80135dc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013280:	79fb      	ldrb	r3, [r7, #7]
 8013282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013286:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013288:	79fa      	ldrb	r2, [r7, #7]
 801328a:	f107 0110 	add.w	r1, r7, #16
 801328e:	f107 0308 	add.w	r3, r7, #8
 8013292:	4618      	mov	r0, r3
 8013294:	f7ff fd20 	bl	8012cd8 <find_volume>
 8013298:	4603      	mov	r3, r0
 801329a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801329e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f040 8191 	bne.w	80135ca <f_open+0x362>
		dj.obj.fs = fs;
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80132ac:	68ba      	ldr	r2, [r7, #8]
 80132ae:	f107 0314 	add.w	r3, r7, #20
 80132b2:	4611      	mov	r1, r2
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7ff fc03 	bl	8012ac0 <follow_path>
 80132ba:	4603      	mov	r3, r0
 80132bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80132c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d11a      	bne.n	80132fe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80132c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80132cc:	b25b      	sxtb	r3, r3
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	da03      	bge.n	80132da <f_open+0x72>
				res = FR_INVALID_NAME;
 80132d2:	2306      	movs	r3, #6
 80132d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80132d8:	e011      	b.n	80132fe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80132da:	79fb      	ldrb	r3, [r7, #7]
 80132dc:	f023 0301 	bic.w	r3, r3, #1
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	bf14      	ite	ne
 80132e4:	2301      	movne	r3, #1
 80132e6:	2300      	moveq	r3, #0
 80132e8:	b2db      	uxtb	r3, r3
 80132ea:	461a      	mov	r2, r3
 80132ec:	f107 0314 	add.w	r3, r7, #20
 80132f0:	4611      	mov	r1, r2
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fe fbd2 	bl	8011a9c <chk_lock>
 80132f8:	4603      	mov	r3, r0
 80132fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80132fe:	79fb      	ldrb	r3, [r7, #7]
 8013300:	f003 031c 	and.w	r3, r3, #28
 8013304:	2b00      	cmp	r3, #0
 8013306:	d07f      	beq.n	8013408 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801330c:	2b00      	cmp	r3, #0
 801330e:	d017      	beq.n	8013340 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013314:	2b04      	cmp	r3, #4
 8013316:	d10e      	bne.n	8013336 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013318:	f7fe fc1c 	bl	8011b54 <enq_lock>
 801331c:	4603      	mov	r3, r0
 801331e:	2b00      	cmp	r3, #0
 8013320:	d006      	beq.n	8013330 <f_open+0xc8>
 8013322:	f107 0314 	add.w	r3, r7, #20
 8013326:	4618      	mov	r0, r3
 8013328:	f7ff fb03 	bl	8012932 <dir_register>
 801332c:	4603      	mov	r3, r0
 801332e:	e000      	b.n	8013332 <f_open+0xca>
 8013330:	2312      	movs	r3, #18
 8013332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013336:	79fb      	ldrb	r3, [r7, #7]
 8013338:	f043 0308 	orr.w	r3, r3, #8
 801333c:	71fb      	strb	r3, [r7, #7]
 801333e:	e010      	b.n	8013362 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013340:	7ebb      	ldrb	r3, [r7, #26]
 8013342:	f003 0311 	and.w	r3, r3, #17
 8013346:	2b00      	cmp	r3, #0
 8013348:	d003      	beq.n	8013352 <f_open+0xea>
					res = FR_DENIED;
 801334a:	2307      	movs	r3, #7
 801334c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013350:	e007      	b.n	8013362 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013352:	79fb      	ldrb	r3, [r7, #7]
 8013354:	f003 0304 	and.w	r3, r3, #4
 8013358:	2b00      	cmp	r3, #0
 801335a:	d002      	beq.n	8013362 <f_open+0xfa>
 801335c:	2308      	movs	r3, #8
 801335e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013366:	2b00      	cmp	r3, #0
 8013368:	d168      	bne.n	801343c <f_open+0x1d4>
 801336a:	79fb      	ldrb	r3, [r7, #7]
 801336c:	f003 0308 	and.w	r3, r3, #8
 8013370:	2b00      	cmp	r3, #0
 8013372:	d063      	beq.n	801343c <f_open+0x1d4>
				dw = GET_FATTIME();
 8013374:	f7fd ffd2 	bl	801131c <get_fattime>
 8013378:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801337a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801337c:	330e      	adds	r3, #14
 801337e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013380:	4618      	mov	r0, r3
 8013382:	f7fe fae1 	bl	8011948 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013388:	3316      	adds	r3, #22
 801338a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801338c:	4618      	mov	r0, r3
 801338e:	f7fe fadb 	bl	8011948 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013394:	330b      	adds	r3, #11
 8013396:	2220      	movs	r2, #32
 8013398:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801339e:	4611      	mov	r1, r2
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7ff fa32 	bl	801280a <ld_clust>
 80133a6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80133ac:	2200      	movs	r2, #0
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7ff fa4a 	bl	8012848 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80133b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133b6:	331c      	adds	r3, #28
 80133b8:	2100      	movs	r1, #0
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7fe fac4 	bl	8011948 <st_dword>
					fs->wflag = 1;
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	2201      	movs	r2, #1
 80133c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80133c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d037      	beq.n	801343c <f_open+0x1d4>
						dw = fs->winsect;
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80133d2:	f107 0314 	add.w	r3, r7, #20
 80133d6:	2200      	movs	r2, #0
 80133d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80133da:	4618      	mov	r0, r3
 80133dc:	f7fe ff5d 	bl	801229a <remove_chain>
 80133e0:	4603      	mov	r3, r0
 80133e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80133e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d126      	bne.n	801343c <f_open+0x1d4>
							res = move_window(fs, dw);
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7fe fd02 	bl	8011dfc <move_window>
 80133f8:	4603      	mov	r3, r0
 80133fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013402:	3a01      	subs	r2, #1
 8013404:	60da      	str	r2, [r3, #12]
 8013406:	e019      	b.n	801343c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801340c:	2b00      	cmp	r3, #0
 801340e:	d115      	bne.n	801343c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013410:	7ebb      	ldrb	r3, [r7, #26]
 8013412:	f003 0310 	and.w	r3, r3, #16
 8013416:	2b00      	cmp	r3, #0
 8013418:	d003      	beq.n	8013422 <f_open+0x1ba>
					res = FR_NO_FILE;
 801341a:	2304      	movs	r3, #4
 801341c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013420:	e00c      	b.n	801343c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013422:	79fb      	ldrb	r3, [r7, #7]
 8013424:	f003 0302 	and.w	r3, r3, #2
 8013428:	2b00      	cmp	r3, #0
 801342a:	d007      	beq.n	801343c <f_open+0x1d4>
 801342c:	7ebb      	ldrb	r3, [r7, #26]
 801342e:	f003 0301 	and.w	r3, r3, #1
 8013432:	2b00      	cmp	r3, #0
 8013434:	d002      	beq.n	801343c <f_open+0x1d4>
						res = FR_DENIED;
 8013436:	2307      	movs	r3, #7
 8013438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801343c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013440:	2b00      	cmp	r3, #0
 8013442:	d128      	bne.n	8013496 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	f003 0308 	and.w	r3, r3, #8
 801344a:	2b00      	cmp	r3, #0
 801344c:	d003      	beq.n	8013456 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801344e:	79fb      	ldrb	r3, [r7, #7]
 8013450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013454:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801345e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013464:	79fb      	ldrb	r3, [r7, #7]
 8013466:	f023 0301 	bic.w	r3, r3, #1
 801346a:	2b00      	cmp	r3, #0
 801346c:	bf14      	ite	ne
 801346e:	2301      	movne	r3, #1
 8013470:	2300      	moveq	r3, #0
 8013472:	b2db      	uxtb	r3, r3
 8013474:	461a      	mov	r2, r3
 8013476:	f107 0314 	add.w	r3, r7, #20
 801347a:	4611      	mov	r1, r2
 801347c:	4618      	mov	r0, r3
 801347e:	f7fe fb8b 	bl	8011b98 <inc_lock>
 8013482:	4602      	mov	r2, r0
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	691b      	ldr	r3, [r3, #16]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d102      	bne.n	8013496 <f_open+0x22e>
 8013490:	2302      	movs	r3, #2
 8013492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801349a:	2b00      	cmp	r3, #0
 801349c:	f040 8095 	bne.w	80135ca <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134a4:	4611      	mov	r1, r2
 80134a6:	4618      	mov	r0, r3
 80134a8:	f7ff f9af 	bl	801280a <ld_clust>
 80134ac:	4602      	mov	r2, r0
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80134b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134b4:	331c      	adds	r3, #28
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7fe fa08 	bl	80118cc <ld_dword>
 80134bc:	4602      	mov	r2, r0
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	2200      	movs	r2, #0
 80134c6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80134c8:	693a      	ldr	r2, [r7, #16]
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	88da      	ldrh	r2, [r3, #6]
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	79fa      	ldrb	r2, [r7, #7]
 80134da:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	2200      	movs	r2, #0
 80134e0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2200      	movs	r2, #0
 80134e6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	2200      	movs	r2, #0
 80134ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	3330      	adds	r3, #48	; 0x30
 80134f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80134f6:	2100      	movs	r1, #0
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fe fa72 	bl	80119e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80134fe:	79fb      	ldrb	r3, [r7, #7]
 8013500:	f003 0320 	and.w	r3, r3, #32
 8013504:	2b00      	cmp	r3, #0
 8013506:	d060      	beq.n	80135ca <f_open+0x362>
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	68db      	ldr	r3, [r3, #12]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d05c      	beq.n	80135ca <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	68da      	ldr	r2, [r3, #12]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	895b      	ldrh	r3, [r3, #10]
 801351c:	025b      	lsls	r3, r3, #9
 801351e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	689b      	ldr	r3, [r3, #8]
 8013524:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	68db      	ldr	r3, [r3, #12]
 801352a:	657b      	str	r3, [r7, #84]	; 0x54
 801352c:	e016      	b.n	801355c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013532:	4618      	mov	r0, r3
 8013534:	f7fe fd1d 	bl	8011f72 <get_fat>
 8013538:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801353a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801353c:	2b01      	cmp	r3, #1
 801353e:	d802      	bhi.n	8013546 <f_open+0x2de>
 8013540:	2302      	movs	r3, #2
 8013542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013548:	f1b3 3fff 	cmp.w	r3, #4294967295
 801354c:	d102      	bne.n	8013554 <f_open+0x2ec>
 801354e:	2301      	movs	r3, #1
 8013550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013558:	1ad3      	subs	r3, r2, r3
 801355a:	657b      	str	r3, [r7, #84]	; 0x54
 801355c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013560:	2b00      	cmp	r3, #0
 8013562:	d103      	bne.n	801356c <f_open+0x304>
 8013564:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013568:	429a      	cmp	r2, r3
 801356a:	d8e0      	bhi.n	801352e <f_open+0x2c6>
				}
				fp->clust = clst;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013570:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013576:	2b00      	cmp	r3, #0
 8013578:	d127      	bne.n	80135ca <f_open+0x362>
 801357a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801357c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013580:	2b00      	cmp	r3, #0
 8013582:	d022      	beq.n	80135ca <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013588:	4618      	mov	r0, r3
 801358a:	f7fe fcd3 	bl	8011f34 <clust2sect>
 801358e:	6478      	str	r0, [r7, #68]	; 0x44
 8013590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013592:	2b00      	cmp	r3, #0
 8013594:	d103      	bne.n	801359e <f_open+0x336>
						res = FR_INT_ERR;
 8013596:	2302      	movs	r3, #2
 8013598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801359c:	e015      	b.n	80135ca <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801359e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135a0:	0a5a      	lsrs	r2, r3, #9
 80135a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135a4:	441a      	add	r2, r3
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	7858      	ldrb	r0, [r3, #1]
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	6a1a      	ldr	r2, [r3, #32]
 80135b8:	2301      	movs	r3, #1
 80135ba:	f7fe f911 	bl	80117e0 <disk_read>
 80135be:	4603      	mov	r3, r0
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d002      	beq.n	80135ca <f_open+0x362>
 80135c4:	2301      	movs	r3, #1
 80135c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80135ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d002      	beq.n	80135d8 <f_open+0x370>
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2200      	movs	r2, #0
 80135d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80135d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80135dc:	4618      	mov	r0, r3
 80135de:	3760      	adds	r7, #96	; 0x60
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}

080135e4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b08c      	sub	sp, #48	; 0x30
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	60f8      	str	r0, [r7, #12]
 80135ec:	60b9      	str	r1, [r7, #8]
 80135ee:	607a      	str	r2, [r7, #4]
 80135f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	2200      	movs	r2, #0
 80135fa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	f107 0210 	add.w	r2, r7, #16
 8013602:	4611      	mov	r1, r2
 8013604:	4618      	mov	r0, r3
 8013606:	f7ff fdb3 	bl	8013170 <validate>
 801360a:	4603      	mov	r3, r0
 801360c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013614:	2b00      	cmp	r3, #0
 8013616:	d107      	bne.n	8013628 <f_write+0x44>
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	7d5b      	ldrb	r3, [r3, #21]
 801361c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013624:	2b00      	cmp	r3, #0
 8013626:	d002      	beq.n	801362e <f_write+0x4a>
 8013628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801362c:	e14b      	b.n	80138c6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	7d1b      	ldrb	r3, [r3, #20]
 8013632:	f003 0302 	and.w	r3, r3, #2
 8013636:	2b00      	cmp	r3, #0
 8013638:	d101      	bne.n	801363e <f_write+0x5a>
 801363a:	2307      	movs	r3, #7
 801363c:	e143      	b.n	80138c6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	699a      	ldr	r2, [r3, #24]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	441a      	add	r2, r3
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	699b      	ldr	r3, [r3, #24]
 801364a:	429a      	cmp	r2, r3
 801364c:	f080 812d 	bcs.w	80138aa <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	699b      	ldr	r3, [r3, #24]
 8013654:	43db      	mvns	r3, r3
 8013656:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013658:	e127      	b.n	80138aa <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	699b      	ldr	r3, [r3, #24]
 801365e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013662:	2b00      	cmp	r3, #0
 8013664:	f040 80e3 	bne.w	801382e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	699b      	ldr	r3, [r3, #24]
 801366c:	0a5b      	lsrs	r3, r3, #9
 801366e:	693a      	ldr	r2, [r7, #16]
 8013670:	8952      	ldrh	r2, [r2, #10]
 8013672:	3a01      	subs	r2, #1
 8013674:	4013      	ands	r3, r2
 8013676:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013678:	69bb      	ldr	r3, [r7, #24]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d143      	bne.n	8013706 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	699b      	ldr	r3, [r3, #24]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d10c      	bne.n	80136a0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	689b      	ldr	r3, [r3, #8]
 801368a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368e:	2b00      	cmp	r3, #0
 8013690:	d11a      	bne.n	80136c8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2100      	movs	r1, #0
 8013696:	4618      	mov	r0, r3
 8013698:	f7fe fe64 	bl	8012364 <create_chain>
 801369c:	62b8      	str	r0, [r7, #40]	; 0x28
 801369e:	e013      	b.n	80136c8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d007      	beq.n	80136b8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	699b      	ldr	r3, [r3, #24]
 80136ac:	4619      	mov	r1, r3
 80136ae:	68f8      	ldr	r0, [r7, #12]
 80136b0:	f7fe fef0 	bl	8012494 <clmt_clust>
 80136b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80136b6:	e007      	b.n	80136c8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80136b8:	68fa      	ldr	r2, [r7, #12]
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	69db      	ldr	r3, [r3, #28]
 80136be:	4619      	mov	r1, r3
 80136c0:	4610      	mov	r0, r2
 80136c2:	f7fe fe4f 	bl	8012364 <create_chain>
 80136c6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80136c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	f000 80f2 	beq.w	80138b4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80136d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d2:	2b01      	cmp	r3, #1
 80136d4:	d104      	bne.n	80136e0 <f_write+0xfc>
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2202      	movs	r2, #2
 80136da:	755a      	strb	r2, [r3, #21]
 80136dc:	2302      	movs	r3, #2
 80136de:	e0f2      	b.n	80138c6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80136e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136e6:	d104      	bne.n	80136f2 <f_write+0x10e>
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2201      	movs	r2, #1
 80136ec:	755a      	strb	r2, [r3, #21]
 80136ee:	2301      	movs	r3, #1
 80136f0:	e0e9      	b.n	80138c6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136f6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	689b      	ldr	r3, [r3, #8]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d102      	bne.n	8013706 <f_write+0x122>
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013704:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	7d1b      	ldrb	r3, [r3, #20]
 801370a:	b25b      	sxtb	r3, r3
 801370c:	2b00      	cmp	r3, #0
 801370e:	da18      	bge.n	8013742 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	7858      	ldrb	r0, [r3, #1]
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	6a1a      	ldr	r2, [r3, #32]
 801371e:	2301      	movs	r3, #1
 8013720:	f7fe f87e 	bl	8011820 <disk_write>
 8013724:	4603      	mov	r3, r0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d004      	beq.n	8013734 <f_write+0x150>
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	2201      	movs	r2, #1
 801372e:	755a      	strb	r2, [r3, #21]
 8013730:	2301      	movs	r3, #1
 8013732:	e0c8      	b.n	80138c6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	7d1b      	ldrb	r3, [r3, #20]
 8013738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801373c:	b2da      	uxtb	r2, r3
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013742:	693a      	ldr	r2, [r7, #16]
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	69db      	ldr	r3, [r3, #28]
 8013748:	4619      	mov	r1, r3
 801374a:	4610      	mov	r0, r2
 801374c:	f7fe fbf2 	bl	8011f34 <clust2sect>
 8013750:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d104      	bne.n	8013762 <f_write+0x17e>
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	2202      	movs	r2, #2
 801375c:	755a      	strb	r2, [r3, #21]
 801375e:	2302      	movs	r3, #2
 8013760:	e0b1      	b.n	80138c6 <f_write+0x2e2>
			sect += csect;
 8013762:	697a      	ldr	r2, [r7, #20]
 8013764:	69bb      	ldr	r3, [r7, #24]
 8013766:	4413      	add	r3, r2
 8013768:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	0a5b      	lsrs	r3, r3, #9
 801376e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013770:	6a3b      	ldr	r3, [r7, #32]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d03c      	beq.n	80137f0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013776:	69ba      	ldr	r2, [r7, #24]
 8013778:	6a3b      	ldr	r3, [r7, #32]
 801377a:	4413      	add	r3, r2
 801377c:	693a      	ldr	r2, [r7, #16]
 801377e:	8952      	ldrh	r2, [r2, #10]
 8013780:	4293      	cmp	r3, r2
 8013782:	d905      	bls.n	8013790 <f_write+0x1ac>
					cc = fs->csize - csect;
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	895b      	ldrh	r3, [r3, #10]
 8013788:	461a      	mov	r2, r3
 801378a:	69bb      	ldr	r3, [r7, #24]
 801378c:	1ad3      	subs	r3, r2, r3
 801378e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	7858      	ldrb	r0, [r3, #1]
 8013794:	6a3b      	ldr	r3, [r7, #32]
 8013796:	697a      	ldr	r2, [r7, #20]
 8013798:	69f9      	ldr	r1, [r7, #28]
 801379a:	f7fe f841 	bl	8011820 <disk_write>
 801379e:	4603      	mov	r3, r0
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d004      	beq.n	80137ae <f_write+0x1ca>
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2201      	movs	r2, #1
 80137a8:	755a      	strb	r2, [r3, #21]
 80137aa:	2301      	movs	r3, #1
 80137ac:	e08b      	b.n	80138c6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	6a1a      	ldr	r2, [r3, #32]
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	1ad3      	subs	r3, r2, r3
 80137b6:	6a3a      	ldr	r2, [r7, #32]
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d915      	bls.n	80137e8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	6a1a      	ldr	r2, [r3, #32]
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	1ad3      	subs	r3, r2, r3
 80137ca:	025b      	lsls	r3, r3, #9
 80137cc:	69fa      	ldr	r2, [r7, #28]
 80137ce:	4413      	add	r3, r2
 80137d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137d4:	4619      	mov	r1, r3
 80137d6:	f7fe f8e3 	bl	80119a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	7d1b      	ldrb	r3, [r3, #20]
 80137de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137e2:	b2da      	uxtb	r2, r3
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80137e8:	6a3b      	ldr	r3, [r7, #32]
 80137ea:	025b      	lsls	r3, r3, #9
 80137ec:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80137ee:	e03f      	b.n	8013870 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	6a1b      	ldr	r3, [r3, #32]
 80137f4:	697a      	ldr	r2, [r7, #20]
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d016      	beq.n	8013828 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	699a      	ldr	r2, [r3, #24]
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013802:	429a      	cmp	r2, r3
 8013804:	d210      	bcs.n	8013828 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	7858      	ldrb	r0, [r3, #1]
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013810:	2301      	movs	r3, #1
 8013812:	697a      	ldr	r2, [r7, #20]
 8013814:	f7fd ffe4 	bl	80117e0 <disk_read>
 8013818:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801381a:	2b00      	cmp	r3, #0
 801381c:	d004      	beq.n	8013828 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2201      	movs	r2, #1
 8013822:	755a      	strb	r2, [r3, #21]
 8013824:	2301      	movs	r3, #1
 8013826:	e04e      	b.n	80138c6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	697a      	ldr	r2, [r7, #20]
 801382c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	699b      	ldr	r3, [r3, #24]
 8013832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013836:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801383a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	429a      	cmp	r2, r3
 8013842:	d901      	bls.n	8013848 <f_write+0x264>
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	699b      	ldr	r3, [r3, #24]
 8013852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013856:	4413      	add	r3, r2
 8013858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801385a:	69f9      	ldr	r1, [r7, #28]
 801385c:	4618      	mov	r0, r3
 801385e:	f7fe f89f 	bl	80119a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	7d1b      	ldrb	r3, [r3, #20]
 8013866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801386a:	b2da      	uxtb	r2, r3
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013870:	69fa      	ldr	r2, [r7, #28]
 8013872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013874:	4413      	add	r3, r2
 8013876:	61fb      	str	r3, [r7, #28]
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	699a      	ldr	r2, [r3, #24]
 801387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387e:	441a      	add	r2, r3
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	619a      	str	r2, [r3, #24]
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	68da      	ldr	r2, [r3, #12]
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	699b      	ldr	r3, [r3, #24]
 801388c:	429a      	cmp	r2, r3
 801388e:	bf38      	it	cc
 8013890:	461a      	movcc	r2, r3
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	60da      	str	r2, [r3, #12]
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389c:	441a      	add	r2, r3
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	601a      	str	r2, [r3, #0]
 80138a2:	687a      	ldr	r2, [r7, #4]
 80138a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a6:	1ad3      	subs	r3, r2, r3
 80138a8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	f47f aed4 	bne.w	801365a <f_write+0x76>
 80138b2:	e000      	b.n	80138b6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80138b4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	7d1b      	ldrb	r3, [r3, #20]
 80138ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138be:	b2da      	uxtb	r2, r3
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80138c4:	2300      	movs	r3, #0
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3730      	adds	r7, #48	; 0x30
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}

080138ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80138ce:	b580      	push	{r7, lr}
 80138d0:	b086      	sub	sp, #24
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f107 0208 	add.w	r2, r7, #8
 80138dc:	4611      	mov	r1, r2
 80138de:	4618      	mov	r0, r3
 80138e0:	f7ff fc46 	bl	8013170 <validate>
 80138e4:	4603      	mov	r3, r0
 80138e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80138e8:	7dfb      	ldrb	r3, [r7, #23]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d168      	bne.n	80139c0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	7d1b      	ldrb	r3, [r3, #20]
 80138f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d062      	beq.n	80139c0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	7d1b      	ldrb	r3, [r3, #20]
 80138fe:	b25b      	sxtb	r3, r3
 8013900:	2b00      	cmp	r3, #0
 8013902:	da15      	bge.n	8013930 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	7858      	ldrb	r0, [r3, #1]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6a1a      	ldr	r2, [r3, #32]
 8013912:	2301      	movs	r3, #1
 8013914:	f7fd ff84 	bl	8011820 <disk_write>
 8013918:	4603      	mov	r3, r0
 801391a:	2b00      	cmp	r3, #0
 801391c:	d001      	beq.n	8013922 <f_sync+0x54>
 801391e:	2301      	movs	r3, #1
 8013920:	e04f      	b.n	80139c2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	7d1b      	ldrb	r3, [r3, #20]
 8013926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801392a:	b2da      	uxtb	r2, r3
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013930:	f7fd fcf4 	bl	801131c <get_fattime>
 8013934:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013936:	68ba      	ldr	r2, [r7, #8]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801393c:	4619      	mov	r1, r3
 801393e:	4610      	mov	r0, r2
 8013940:	f7fe fa5c 	bl	8011dfc <move_window>
 8013944:	4603      	mov	r3, r0
 8013946:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013948:	7dfb      	ldrb	r3, [r7, #23]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d138      	bne.n	80139c0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013952:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	330b      	adds	r3, #11
 8013958:	781a      	ldrb	r2, [r3, #0]
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	330b      	adds	r3, #11
 801395e:	f042 0220 	orr.w	r2, r2, #32
 8013962:	b2d2      	uxtb	r2, r2
 8013964:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6818      	ldr	r0, [r3, #0]
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	689b      	ldr	r3, [r3, #8]
 801396e:	461a      	mov	r2, r3
 8013970:	68f9      	ldr	r1, [r7, #12]
 8013972:	f7fe ff69 	bl	8012848 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	f103 021c 	add.w	r2, r3, #28
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	4619      	mov	r1, r3
 8013982:	4610      	mov	r0, r2
 8013984:	f7fd ffe0 	bl	8011948 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	3316      	adds	r3, #22
 801398c:	6939      	ldr	r1, [r7, #16]
 801398e:	4618      	mov	r0, r3
 8013990:	f7fd ffda 	bl	8011948 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	3312      	adds	r3, #18
 8013998:	2100      	movs	r1, #0
 801399a:	4618      	mov	r0, r3
 801399c:	f7fd ffb9 	bl	8011912 <st_word>
					fs->wflag = 1;
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	2201      	movs	r2, #1
 80139a4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7fe fa55 	bl	8011e58 <sync_fs>
 80139ae:	4603      	mov	r3, r0
 80139b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	7d1b      	ldrb	r3, [r3, #20]
 80139b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80139ba:	b2da      	uxtb	r2, r3
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80139c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3718      	adds	r7, #24
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}

080139ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80139ca:	b580      	push	{r7, lr}
 80139cc:	b084      	sub	sp, #16
 80139ce:	af00      	add	r7, sp, #0
 80139d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f7ff ff7b 	bl	80138ce <f_sync>
 80139d8:	4603      	mov	r3, r0
 80139da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80139dc:	7bfb      	ldrb	r3, [r7, #15]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d118      	bne.n	8013a14 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f107 0208 	add.w	r2, r7, #8
 80139e8:	4611      	mov	r1, r2
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7ff fbc0 	bl	8013170 <validate>
 80139f0:	4603      	mov	r3, r0
 80139f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80139f4:	7bfb      	ldrb	r3, [r7, #15]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d10c      	bne.n	8013a14 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	691b      	ldr	r3, [r3, #16]
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7fe f958 	bl	8011cb4 <dec_lock>
 8013a04:	4603      	mov	r3, r0
 8013a06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013a08:	7bfb      	ldrb	r3, [r7, #15]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d102      	bne.n	8013a14 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2200      	movs	r2, #0
 8013a12:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3710      	adds	r7, #16
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
	...

08013a20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013a20:	b480      	push	{r7}
 8013a22:	b087      	sub	sp, #28
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	4613      	mov	r3, r2
 8013a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013a2e:	2301      	movs	r3, #1
 8013a30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013a32:	2300      	movs	r3, #0
 8013a34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013a36:	4b1f      	ldr	r3, [pc, #124]	; (8013ab4 <FATFS_LinkDriverEx+0x94>)
 8013a38:	7a5b      	ldrb	r3, [r3, #9]
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d131      	bne.n	8013aa4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013a40:	4b1c      	ldr	r3, [pc, #112]	; (8013ab4 <FATFS_LinkDriverEx+0x94>)
 8013a42:	7a5b      	ldrb	r3, [r3, #9]
 8013a44:	b2db      	uxtb	r3, r3
 8013a46:	461a      	mov	r2, r3
 8013a48:	4b1a      	ldr	r3, [pc, #104]	; (8013ab4 <FATFS_LinkDriverEx+0x94>)
 8013a4a:	2100      	movs	r1, #0
 8013a4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013a4e:	4b19      	ldr	r3, [pc, #100]	; (8013ab4 <FATFS_LinkDriverEx+0x94>)
 8013a50:	7a5b      	ldrb	r3, [r3, #9]
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	4a17      	ldr	r2, [pc, #92]	; (8013ab4 <FATFS_LinkDriverEx+0x94>)
 8013a56:	009b      	lsls	r3, r3, #2
 8013a58:	4413      	add	r3, r2
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013a5e:	4b15      	ldr	r3, [pc, #84]	; (8013ab4 <FATFS_LinkDriverEx+0x94>)
 8013a60:	7a5b      	ldrb	r3, [r3, #9]
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	461a      	mov	r2, r3
 8013a66:	4b13      	ldr	r3, [pc, #76]	; (8013ab4 <FATFS_LinkDriverEx+0x94>)
 8013a68:	4413      	add	r3, r2
 8013a6a:	79fa      	ldrb	r2, [r7, #7]
 8013a6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013a6e:	4b11      	ldr	r3, [pc, #68]	; (8013ab4 <FATFS_LinkDriverEx+0x94>)
 8013a70:	7a5b      	ldrb	r3, [r3, #9]
 8013a72:	b2db      	uxtb	r3, r3
 8013a74:	1c5a      	adds	r2, r3, #1
 8013a76:	b2d1      	uxtb	r1, r2
 8013a78:	4a0e      	ldr	r2, [pc, #56]	; (8013ab4 <FATFS_LinkDriverEx+0x94>)
 8013a7a:	7251      	strb	r1, [r2, #9]
 8013a7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013a7e:	7dbb      	ldrb	r3, [r7, #22]
 8013a80:	3330      	adds	r3, #48	; 0x30
 8013a82:	b2da      	uxtb	r2, r3
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	3301      	adds	r3, #1
 8013a8c:	223a      	movs	r2, #58	; 0x3a
 8013a8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	3302      	adds	r3, #2
 8013a94:	222f      	movs	r2, #47	; 0x2f
 8013a96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	3303      	adds	r3, #3
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	371c      	adds	r7, #28
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr
 8013ab2:	bf00      	nop
 8013ab4:	24008c84 	.word	0x24008c84

08013ab8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
 8013ac0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	6839      	ldr	r1, [r7, #0]
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f7ff ffaa 	bl	8013a20 <FATFS_LinkDriverEx>
 8013acc:	4603      	mov	r3, r0
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3708      	adds	r7, #8
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}
	...

08013ad8 <__errno>:
 8013ad8:	4b01      	ldr	r3, [pc, #4]	; (8013ae0 <__errno+0x8>)
 8013ada:	6818      	ldr	r0, [r3, #0]
 8013adc:	4770      	bx	lr
 8013ade:	bf00      	nop
 8013ae0:	24000018 	.word	0x24000018

08013ae4 <__libc_init_array>:
 8013ae4:	b570      	push	{r4, r5, r6, lr}
 8013ae6:	4d0d      	ldr	r5, [pc, #52]	; (8013b1c <__libc_init_array+0x38>)
 8013ae8:	4c0d      	ldr	r4, [pc, #52]	; (8013b20 <__libc_init_array+0x3c>)
 8013aea:	1b64      	subs	r4, r4, r5
 8013aec:	10a4      	asrs	r4, r4, #2
 8013aee:	2600      	movs	r6, #0
 8013af0:	42a6      	cmp	r6, r4
 8013af2:	d109      	bne.n	8013b08 <__libc_init_array+0x24>
 8013af4:	4d0b      	ldr	r5, [pc, #44]	; (8013b24 <__libc_init_array+0x40>)
 8013af6:	4c0c      	ldr	r4, [pc, #48]	; (8013b28 <__libc_init_array+0x44>)
 8013af8:	f000 fc8e 	bl	8014418 <_init>
 8013afc:	1b64      	subs	r4, r4, r5
 8013afe:	10a4      	asrs	r4, r4, #2
 8013b00:	2600      	movs	r6, #0
 8013b02:	42a6      	cmp	r6, r4
 8013b04:	d105      	bne.n	8013b12 <__libc_init_array+0x2e>
 8013b06:	bd70      	pop	{r4, r5, r6, pc}
 8013b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b0c:	4798      	blx	r3
 8013b0e:	3601      	adds	r6, #1
 8013b10:	e7ee      	b.n	8013af0 <__libc_init_array+0xc>
 8013b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b16:	4798      	blx	r3
 8013b18:	3601      	adds	r6, #1
 8013b1a:	e7f2      	b.n	8013b02 <__libc_init_array+0x1e>
 8013b1c:	080145f8 	.word	0x080145f8
 8013b20:	080145f8 	.word	0x080145f8
 8013b24:	080145f8 	.word	0x080145f8
 8013b28:	080145fc 	.word	0x080145fc

08013b2c <memset>:
 8013b2c:	4402      	add	r2, r0
 8013b2e:	4603      	mov	r3, r0
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d100      	bne.n	8013b36 <memset+0xa>
 8013b34:	4770      	bx	lr
 8013b36:	f803 1b01 	strb.w	r1, [r3], #1
 8013b3a:	e7f9      	b.n	8013b30 <memset+0x4>

08013b3c <siprintf>:
 8013b3c:	b40e      	push	{r1, r2, r3}
 8013b3e:	b500      	push	{lr}
 8013b40:	b09c      	sub	sp, #112	; 0x70
 8013b42:	ab1d      	add	r3, sp, #116	; 0x74
 8013b44:	9002      	str	r0, [sp, #8]
 8013b46:	9006      	str	r0, [sp, #24]
 8013b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b4c:	4809      	ldr	r0, [pc, #36]	; (8013b74 <siprintf+0x38>)
 8013b4e:	9107      	str	r1, [sp, #28]
 8013b50:	9104      	str	r1, [sp, #16]
 8013b52:	4909      	ldr	r1, [pc, #36]	; (8013b78 <siprintf+0x3c>)
 8013b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b58:	9105      	str	r1, [sp, #20]
 8013b5a:	6800      	ldr	r0, [r0, #0]
 8013b5c:	9301      	str	r3, [sp, #4]
 8013b5e:	a902      	add	r1, sp, #8
 8013b60:	f000 f868 	bl	8013c34 <_svfiprintf_r>
 8013b64:	9b02      	ldr	r3, [sp, #8]
 8013b66:	2200      	movs	r2, #0
 8013b68:	701a      	strb	r2, [r3, #0]
 8013b6a:	b01c      	add	sp, #112	; 0x70
 8013b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b70:	b003      	add	sp, #12
 8013b72:	4770      	bx	lr
 8013b74:	24000018 	.word	0x24000018
 8013b78:	ffff0208 	.word	0xffff0208

08013b7c <__ssputs_r>:
 8013b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b80:	688e      	ldr	r6, [r1, #8]
 8013b82:	429e      	cmp	r6, r3
 8013b84:	4682      	mov	sl, r0
 8013b86:	460c      	mov	r4, r1
 8013b88:	4690      	mov	r8, r2
 8013b8a:	461f      	mov	r7, r3
 8013b8c:	d838      	bhi.n	8013c00 <__ssputs_r+0x84>
 8013b8e:	898a      	ldrh	r2, [r1, #12]
 8013b90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013b94:	d032      	beq.n	8013bfc <__ssputs_r+0x80>
 8013b96:	6825      	ldr	r5, [r4, #0]
 8013b98:	6909      	ldr	r1, [r1, #16]
 8013b9a:	eba5 0901 	sub.w	r9, r5, r1
 8013b9e:	6965      	ldr	r5, [r4, #20]
 8013ba0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ba4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013ba8:	3301      	adds	r3, #1
 8013baa:	444b      	add	r3, r9
 8013bac:	106d      	asrs	r5, r5, #1
 8013bae:	429d      	cmp	r5, r3
 8013bb0:	bf38      	it	cc
 8013bb2:	461d      	movcc	r5, r3
 8013bb4:	0553      	lsls	r3, r2, #21
 8013bb6:	d531      	bpl.n	8013c1c <__ssputs_r+0xa0>
 8013bb8:	4629      	mov	r1, r5
 8013bba:	f000 fb63 	bl	8014284 <_malloc_r>
 8013bbe:	4606      	mov	r6, r0
 8013bc0:	b950      	cbnz	r0, 8013bd8 <__ssputs_r+0x5c>
 8013bc2:	230c      	movs	r3, #12
 8013bc4:	f8ca 3000 	str.w	r3, [sl]
 8013bc8:	89a3      	ldrh	r3, [r4, #12]
 8013bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bce:	81a3      	strh	r3, [r4, #12]
 8013bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bd8:	6921      	ldr	r1, [r4, #16]
 8013bda:	464a      	mov	r2, r9
 8013bdc:	f000 fabe 	bl	801415c <memcpy>
 8013be0:	89a3      	ldrh	r3, [r4, #12]
 8013be2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bea:	81a3      	strh	r3, [r4, #12]
 8013bec:	6126      	str	r6, [r4, #16]
 8013bee:	6165      	str	r5, [r4, #20]
 8013bf0:	444e      	add	r6, r9
 8013bf2:	eba5 0509 	sub.w	r5, r5, r9
 8013bf6:	6026      	str	r6, [r4, #0]
 8013bf8:	60a5      	str	r5, [r4, #8]
 8013bfa:	463e      	mov	r6, r7
 8013bfc:	42be      	cmp	r6, r7
 8013bfe:	d900      	bls.n	8013c02 <__ssputs_r+0x86>
 8013c00:	463e      	mov	r6, r7
 8013c02:	6820      	ldr	r0, [r4, #0]
 8013c04:	4632      	mov	r2, r6
 8013c06:	4641      	mov	r1, r8
 8013c08:	f000 fab6 	bl	8014178 <memmove>
 8013c0c:	68a3      	ldr	r3, [r4, #8]
 8013c0e:	1b9b      	subs	r3, r3, r6
 8013c10:	60a3      	str	r3, [r4, #8]
 8013c12:	6823      	ldr	r3, [r4, #0]
 8013c14:	4433      	add	r3, r6
 8013c16:	6023      	str	r3, [r4, #0]
 8013c18:	2000      	movs	r0, #0
 8013c1a:	e7db      	b.n	8013bd4 <__ssputs_r+0x58>
 8013c1c:	462a      	mov	r2, r5
 8013c1e:	f000 fba5 	bl	801436c <_realloc_r>
 8013c22:	4606      	mov	r6, r0
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d1e1      	bne.n	8013bec <__ssputs_r+0x70>
 8013c28:	6921      	ldr	r1, [r4, #16]
 8013c2a:	4650      	mov	r0, sl
 8013c2c:	f000 fabe 	bl	80141ac <_free_r>
 8013c30:	e7c7      	b.n	8013bc2 <__ssputs_r+0x46>
	...

08013c34 <_svfiprintf_r>:
 8013c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c38:	4698      	mov	r8, r3
 8013c3a:	898b      	ldrh	r3, [r1, #12]
 8013c3c:	061b      	lsls	r3, r3, #24
 8013c3e:	b09d      	sub	sp, #116	; 0x74
 8013c40:	4607      	mov	r7, r0
 8013c42:	460d      	mov	r5, r1
 8013c44:	4614      	mov	r4, r2
 8013c46:	d50e      	bpl.n	8013c66 <_svfiprintf_r+0x32>
 8013c48:	690b      	ldr	r3, [r1, #16]
 8013c4a:	b963      	cbnz	r3, 8013c66 <_svfiprintf_r+0x32>
 8013c4c:	2140      	movs	r1, #64	; 0x40
 8013c4e:	f000 fb19 	bl	8014284 <_malloc_r>
 8013c52:	6028      	str	r0, [r5, #0]
 8013c54:	6128      	str	r0, [r5, #16]
 8013c56:	b920      	cbnz	r0, 8013c62 <_svfiprintf_r+0x2e>
 8013c58:	230c      	movs	r3, #12
 8013c5a:	603b      	str	r3, [r7, #0]
 8013c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c60:	e0d1      	b.n	8013e06 <_svfiprintf_r+0x1d2>
 8013c62:	2340      	movs	r3, #64	; 0x40
 8013c64:	616b      	str	r3, [r5, #20]
 8013c66:	2300      	movs	r3, #0
 8013c68:	9309      	str	r3, [sp, #36]	; 0x24
 8013c6a:	2320      	movs	r3, #32
 8013c6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c70:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c74:	2330      	movs	r3, #48	; 0x30
 8013c76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013e20 <_svfiprintf_r+0x1ec>
 8013c7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c7e:	f04f 0901 	mov.w	r9, #1
 8013c82:	4623      	mov	r3, r4
 8013c84:	469a      	mov	sl, r3
 8013c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c8a:	b10a      	cbz	r2, 8013c90 <_svfiprintf_r+0x5c>
 8013c8c:	2a25      	cmp	r2, #37	; 0x25
 8013c8e:	d1f9      	bne.n	8013c84 <_svfiprintf_r+0x50>
 8013c90:	ebba 0b04 	subs.w	fp, sl, r4
 8013c94:	d00b      	beq.n	8013cae <_svfiprintf_r+0x7a>
 8013c96:	465b      	mov	r3, fp
 8013c98:	4622      	mov	r2, r4
 8013c9a:	4629      	mov	r1, r5
 8013c9c:	4638      	mov	r0, r7
 8013c9e:	f7ff ff6d 	bl	8013b7c <__ssputs_r>
 8013ca2:	3001      	adds	r0, #1
 8013ca4:	f000 80aa 	beq.w	8013dfc <_svfiprintf_r+0x1c8>
 8013ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013caa:	445a      	add	r2, fp
 8013cac:	9209      	str	r2, [sp, #36]	; 0x24
 8013cae:	f89a 3000 	ldrb.w	r3, [sl]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	f000 80a2 	beq.w	8013dfc <_svfiprintf_r+0x1c8>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	f04f 32ff 	mov.w	r2, #4294967295
 8013cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cc2:	f10a 0a01 	add.w	sl, sl, #1
 8013cc6:	9304      	str	r3, [sp, #16]
 8013cc8:	9307      	str	r3, [sp, #28]
 8013cca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013cce:	931a      	str	r3, [sp, #104]	; 0x68
 8013cd0:	4654      	mov	r4, sl
 8013cd2:	2205      	movs	r2, #5
 8013cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cd8:	4851      	ldr	r0, [pc, #324]	; (8013e20 <_svfiprintf_r+0x1ec>)
 8013cda:	f7ec fb11 	bl	8000300 <memchr>
 8013cde:	9a04      	ldr	r2, [sp, #16]
 8013ce0:	b9d8      	cbnz	r0, 8013d1a <_svfiprintf_r+0xe6>
 8013ce2:	06d0      	lsls	r0, r2, #27
 8013ce4:	bf44      	itt	mi
 8013ce6:	2320      	movmi	r3, #32
 8013ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cec:	0711      	lsls	r1, r2, #28
 8013cee:	bf44      	itt	mi
 8013cf0:	232b      	movmi	r3, #43	; 0x2b
 8013cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8013cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8013cfc:	d015      	beq.n	8013d2a <_svfiprintf_r+0xf6>
 8013cfe:	9a07      	ldr	r2, [sp, #28]
 8013d00:	4654      	mov	r4, sl
 8013d02:	2000      	movs	r0, #0
 8013d04:	f04f 0c0a 	mov.w	ip, #10
 8013d08:	4621      	mov	r1, r4
 8013d0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d0e:	3b30      	subs	r3, #48	; 0x30
 8013d10:	2b09      	cmp	r3, #9
 8013d12:	d94e      	bls.n	8013db2 <_svfiprintf_r+0x17e>
 8013d14:	b1b0      	cbz	r0, 8013d44 <_svfiprintf_r+0x110>
 8013d16:	9207      	str	r2, [sp, #28]
 8013d18:	e014      	b.n	8013d44 <_svfiprintf_r+0x110>
 8013d1a:	eba0 0308 	sub.w	r3, r0, r8
 8013d1e:	fa09 f303 	lsl.w	r3, r9, r3
 8013d22:	4313      	orrs	r3, r2
 8013d24:	9304      	str	r3, [sp, #16]
 8013d26:	46a2      	mov	sl, r4
 8013d28:	e7d2      	b.n	8013cd0 <_svfiprintf_r+0x9c>
 8013d2a:	9b03      	ldr	r3, [sp, #12]
 8013d2c:	1d19      	adds	r1, r3, #4
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	9103      	str	r1, [sp, #12]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	bfbb      	ittet	lt
 8013d36:	425b      	neglt	r3, r3
 8013d38:	f042 0202 	orrlt.w	r2, r2, #2
 8013d3c:	9307      	strge	r3, [sp, #28]
 8013d3e:	9307      	strlt	r3, [sp, #28]
 8013d40:	bfb8      	it	lt
 8013d42:	9204      	strlt	r2, [sp, #16]
 8013d44:	7823      	ldrb	r3, [r4, #0]
 8013d46:	2b2e      	cmp	r3, #46	; 0x2e
 8013d48:	d10c      	bne.n	8013d64 <_svfiprintf_r+0x130>
 8013d4a:	7863      	ldrb	r3, [r4, #1]
 8013d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8013d4e:	d135      	bne.n	8013dbc <_svfiprintf_r+0x188>
 8013d50:	9b03      	ldr	r3, [sp, #12]
 8013d52:	1d1a      	adds	r2, r3, #4
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	9203      	str	r2, [sp, #12]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	bfb8      	it	lt
 8013d5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d60:	3402      	adds	r4, #2
 8013d62:	9305      	str	r3, [sp, #20]
 8013d64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013e30 <_svfiprintf_r+0x1fc>
 8013d68:	7821      	ldrb	r1, [r4, #0]
 8013d6a:	2203      	movs	r2, #3
 8013d6c:	4650      	mov	r0, sl
 8013d6e:	f7ec fac7 	bl	8000300 <memchr>
 8013d72:	b140      	cbz	r0, 8013d86 <_svfiprintf_r+0x152>
 8013d74:	2340      	movs	r3, #64	; 0x40
 8013d76:	eba0 000a 	sub.w	r0, r0, sl
 8013d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8013d7e:	9b04      	ldr	r3, [sp, #16]
 8013d80:	4303      	orrs	r3, r0
 8013d82:	3401      	adds	r4, #1
 8013d84:	9304      	str	r3, [sp, #16]
 8013d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d8a:	4826      	ldr	r0, [pc, #152]	; (8013e24 <_svfiprintf_r+0x1f0>)
 8013d8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d90:	2206      	movs	r2, #6
 8013d92:	f7ec fab5 	bl	8000300 <memchr>
 8013d96:	2800      	cmp	r0, #0
 8013d98:	d038      	beq.n	8013e0c <_svfiprintf_r+0x1d8>
 8013d9a:	4b23      	ldr	r3, [pc, #140]	; (8013e28 <_svfiprintf_r+0x1f4>)
 8013d9c:	bb1b      	cbnz	r3, 8013de6 <_svfiprintf_r+0x1b2>
 8013d9e:	9b03      	ldr	r3, [sp, #12]
 8013da0:	3307      	adds	r3, #7
 8013da2:	f023 0307 	bic.w	r3, r3, #7
 8013da6:	3308      	adds	r3, #8
 8013da8:	9303      	str	r3, [sp, #12]
 8013daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dac:	4433      	add	r3, r6
 8013dae:	9309      	str	r3, [sp, #36]	; 0x24
 8013db0:	e767      	b.n	8013c82 <_svfiprintf_r+0x4e>
 8013db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8013db6:	460c      	mov	r4, r1
 8013db8:	2001      	movs	r0, #1
 8013dba:	e7a5      	b.n	8013d08 <_svfiprintf_r+0xd4>
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	3401      	adds	r4, #1
 8013dc0:	9305      	str	r3, [sp, #20]
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	f04f 0c0a 	mov.w	ip, #10
 8013dc8:	4620      	mov	r0, r4
 8013dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013dce:	3a30      	subs	r2, #48	; 0x30
 8013dd0:	2a09      	cmp	r2, #9
 8013dd2:	d903      	bls.n	8013ddc <_svfiprintf_r+0x1a8>
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d0c5      	beq.n	8013d64 <_svfiprintf_r+0x130>
 8013dd8:	9105      	str	r1, [sp, #20]
 8013dda:	e7c3      	b.n	8013d64 <_svfiprintf_r+0x130>
 8013ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8013de0:	4604      	mov	r4, r0
 8013de2:	2301      	movs	r3, #1
 8013de4:	e7f0      	b.n	8013dc8 <_svfiprintf_r+0x194>
 8013de6:	ab03      	add	r3, sp, #12
 8013de8:	9300      	str	r3, [sp, #0]
 8013dea:	462a      	mov	r2, r5
 8013dec:	4b0f      	ldr	r3, [pc, #60]	; (8013e2c <_svfiprintf_r+0x1f8>)
 8013dee:	a904      	add	r1, sp, #16
 8013df0:	4638      	mov	r0, r7
 8013df2:	f3af 8000 	nop.w
 8013df6:	1c42      	adds	r2, r0, #1
 8013df8:	4606      	mov	r6, r0
 8013dfa:	d1d6      	bne.n	8013daa <_svfiprintf_r+0x176>
 8013dfc:	89ab      	ldrh	r3, [r5, #12]
 8013dfe:	065b      	lsls	r3, r3, #25
 8013e00:	f53f af2c 	bmi.w	8013c5c <_svfiprintf_r+0x28>
 8013e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e06:	b01d      	add	sp, #116	; 0x74
 8013e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e0c:	ab03      	add	r3, sp, #12
 8013e0e:	9300      	str	r3, [sp, #0]
 8013e10:	462a      	mov	r2, r5
 8013e12:	4b06      	ldr	r3, [pc, #24]	; (8013e2c <_svfiprintf_r+0x1f8>)
 8013e14:	a904      	add	r1, sp, #16
 8013e16:	4638      	mov	r0, r7
 8013e18:	f000 f87a 	bl	8013f10 <_printf_i>
 8013e1c:	e7eb      	b.n	8013df6 <_svfiprintf_r+0x1c2>
 8013e1e:	bf00      	nop
 8013e20:	080145bc 	.word	0x080145bc
 8013e24:	080145c6 	.word	0x080145c6
 8013e28:	00000000 	.word	0x00000000
 8013e2c:	08013b7d 	.word	0x08013b7d
 8013e30:	080145c2 	.word	0x080145c2

08013e34 <_printf_common>:
 8013e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e38:	4616      	mov	r6, r2
 8013e3a:	4699      	mov	r9, r3
 8013e3c:	688a      	ldr	r2, [r1, #8]
 8013e3e:	690b      	ldr	r3, [r1, #16]
 8013e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013e44:	4293      	cmp	r3, r2
 8013e46:	bfb8      	it	lt
 8013e48:	4613      	movlt	r3, r2
 8013e4a:	6033      	str	r3, [r6, #0]
 8013e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013e50:	4607      	mov	r7, r0
 8013e52:	460c      	mov	r4, r1
 8013e54:	b10a      	cbz	r2, 8013e5a <_printf_common+0x26>
 8013e56:	3301      	adds	r3, #1
 8013e58:	6033      	str	r3, [r6, #0]
 8013e5a:	6823      	ldr	r3, [r4, #0]
 8013e5c:	0699      	lsls	r1, r3, #26
 8013e5e:	bf42      	ittt	mi
 8013e60:	6833      	ldrmi	r3, [r6, #0]
 8013e62:	3302      	addmi	r3, #2
 8013e64:	6033      	strmi	r3, [r6, #0]
 8013e66:	6825      	ldr	r5, [r4, #0]
 8013e68:	f015 0506 	ands.w	r5, r5, #6
 8013e6c:	d106      	bne.n	8013e7c <_printf_common+0x48>
 8013e6e:	f104 0a19 	add.w	sl, r4, #25
 8013e72:	68e3      	ldr	r3, [r4, #12]
 8013e74:	6832      	ldr	r2, [r6, #0]
 8013e76:	1a9b      	subs	r3, r3, r2
 8013e78:	42ab      	cmp	r3, r5
 8013e7a:	dc26      	bgt.n	8013eca <_printf_common+0x96>
 8013e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013e80:	1e13      	subs	r3, r2, #0
 8013e82:	6822      	ldr	r2, [r4, #0]
 8013e84:	bf18      	it	ne
 8013e86:	2301      	movne	r3, #1
 8013e88:	0692      	lsls	r2, r2, #26
 8013e8a:	d42b      	bmi.n	8013ee4 <_printf_common+0xb0>
 8013e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013e90:	4649      	mov	r1, r9
 8013e92:	4638      	mov	r0, r7
 8013e94:	47c0      	blx	r8
 8013e96:	3001      	adds	r0, #1
 8013e98:	d01e      	beq.n	8013ed8 <_printf_common+0xa4>
 8013e9a:	6823      	ldr	r3, [r4, #0]
 8013e9c:	68e5      	ldr	r5, [r4, #12]
 8013e9e:	6832      	ldr	r2, [r6, #0]
 8013ea0:	f003 0306 	and.w	r3, r3, #6
 8013ea4:	2b04      	cmp	r3, #4
 8013ea6:	bf08      	it	eq
 8013ea8:	1aad      	subeq	r5, r5, r2
 8013eaa:	68a3      	ldr	r3, [r4, #8]
 8013eac:	6922      	ldr	r2, [r4, #16]
 8013eae:	bf0c      	ite	eq
 8013eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013eb4:	2500      	movne	r5, #0
 8013eb6:	4293      	cmp	r3, r2
 8013eb8:	bfc4      	itt	gt
 8013eba:	1a9b      	subgt	r3, r3, r2
 8013ebc:	18ed      	addgt	r5, r5, r3
 8013ebe:	2600      	movs	r6, #0
 8013ec0:	341a      	adds	r4, #26
 8013ec2:	42b5      	cmp	r5, r6
 8013ec4:	d11a      	bne.n	8013efc <_printf_common+0xc8>
 8013ec6:	2000      	movs	r0, #0
 8013ec8:	e008      	b.n	8013edc <_printf_common+0xa8>
 8013eca:	2301      	movs	r3, #1
 8013ecc:	4652      	mov	r2, sl
 8013ece:	4649      	mov	r1, r9
 8013ed0:	4638      	mov	r0, r7
 8013ed2:	47c0      	blx	r8
 8013ed4:	3001      	adds	r0, #1
 8013ed6:	d103      	bne.n	8013ee0 <_printf_common+0xac>
 8013ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8013edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ee0:	3501      	adds	r5, #1
 8013ee2:	e7c6      	b.n	8013e72 <_printf_common+0x3e>
 8013ee4:	18e1      	adds	r1, r4, r3
 8013ee6:	1c5a      	adds	r2, r3, #1
 8013ee8:	2030      	movs	r0, #48	; 0x30
 8013eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013eee:	4422      	add	r2, r4
 8013ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ef8:	3302      	adds	r3, #2
 8013efa:	e7c7      	b.n	8013e8c <_printf_common+0x58>
 8013efc:	2301      	movs	r3, #1
 8013efe:	4622      	mov	r2, r4
 8013f00:	4649      	mov	r1, r9
 8013f02:	4638      	mov	r0, r7
 8013f04:	47c0      	blx	r8
 8013f06:	3001      	adds	r0, #1
 8013f08:	d0e6      	beq.n	8013ed8 <_printf_common+0xa4>
 8013f0a:	3601      	adds	r6, #1
 8013f0c:	e7d9      	b.n	8013ec2 <_printf_common+0x8e>
	...

08013f10 <_printf_i>:
 8013f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f14:	7e0f      	ldrb	r7, [r1, #24]
 8013f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013f18:	2f78      	cmp	r7, #120	; 0x78
 8013f1a:	4691      	mov	r9, r2
 8013f1c:	4680      	mov	r8, r0
 8013f1e:	460c      	mov	r4, r1
 8013f20:	469a      	mov	sl, r3
 8013f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013f26:	d807      	bhi.n	8013f38 <_printf_i+0x28>
 8013f28:	2f62      	cmp	r7, #98	; 0x62
 8013f2a:	d80a      	bhi.n	8013f42 <_printf_i+0x32>
 8013f2c:	2f00      	cmp	r7, #0
 8013f2e:	f000 80d8 	beq.w	80140e2 <_printf_i+0x1d2>
 8013f32:	2f58      	cmp	r7, #88	; 0x58
 8013f34:	f000 80a3 	beq.w	801407e <_printf_i+0x16e>
 8013f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013f40:	e03a      	b.n	8013fb8 <_printf_i+0xa8>
 8013f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013f46:	2b15      	cmp	r3, #21
 8013f48:	d8f6      	bhi.n	8013f38 <_printf_i+0x28>
 8013f4a:	a101      	add	r1, pc, #4	; (adr r1, 8013f50 <_printf_i+0x40>)
 8013f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f50:	08013fa9 	.word	0x08013fa9
 8013f54:	08013fbd 	.word	0x08013fbd
 8013f58:	08013f39 	.word	0x08013f39
 8013f5c:	08013f39 	.word	0x08013f39
 8013f60:	08013f39 	.word	0x08013f39
 8013f64:	08013f39 	.word	0x08013f39
 8013f68:	08013fbd 	.word	0x08013fbd
 8013f6c:	08013f39 	.word	0x08013f39
 8013f70:	08013f39 	.word	0x08013f39
 8013f74:	08013f39 	.word	0x08013f39
 8013f78:	08013f39 	.word	0x08013f39
 8013f7c:	080140c9 	.word	0x080140c9
 8013f80:	08013fed 	.word	0x08013fed
 8013f84:	080140ab 	.word	0x080140ab
 8013f88:	08013f39 	.word	0x08013f39
 8013f8c:	08013f39 	.word	0x08013f39
 8013f90:	080140eb 	.word	0x080140eb
 8013f94:	08013f39 	.word	0x08013f39
 8013f98:	08013fed 	.word	0x08013fed
 8013f9c:	08013f39 	.word	0x08013f39
 8013fa0:	08013f39 	.word	0x08013f39
 8013fa4:	080140b3 	.word	0x080140b3
 8013fa8:	682b      	ldr	r3, [r5, #0]
 8013faa:	1d1a      	adds	r2, r3, #4
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	602a      	str	r2, [r5, #0]
 8013fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013fb8:	2301      	movs	r3, #1
 8013fba:	e0a3      	b.n	8014104 <_printf_i+0x1f4>
 8013fbc:	6820      	ldr	r0, [r4, #0]
 8013fbe:	6829      	ldr	r1, [r5, #0]
 8013fc0:	0606      	lsls	r6, r0, #24
 8013fc2:	f101 0304 	add.w	r3, r1, #4
 8013fc6:	d50a      	bpl.n	8013fde <_printf_i+0xce>
 8013fc8:	680e      	ldr	r6, [r1, #0]
 8013fca:	602b      	str	r3, [r5, #0]
 8013fcc:	2e00      	cmp	r6, #0
 8013fce:	da03      	bge.n	8013fd8 <_printf_i+0xc8>
 8013fd0:	232d      	movs	r3, #45	; 0x2d
 8013fd2:	4276      	negs	r6, r6
 8013fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fd8:	485e      	ldr	r0, [pc, #376]	; (8014154 <_printf_i+0x244>)
 8013fda:	230a      	movs	r3, #10
 8013fdc:	e019      	b.n	8014012 <_printf_i+0x102>
 8013fde:	680e      	ldr	r6, [r1, #0]
 8013fe0:	602b      	str	r3, [r5, #0]
 8013fe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013fe6:	bf18      	it	ne
 8013fe8:	b236      	sxthne	r6, r6
 8013fea:	e7ef      	b.n	8013fcc <_printf_i+0xbc>
 8013fec:	682b      	ldr	r3, [r5, #0]
 8013fee:	6820      	ldr	r0, [r4, #0]
 8013ff0:	1d19      	adds	r1, r3, #4
 8013ff2:	6029      	str	r1, [r5, #0]
 8013ff4:	0601      	lsls	r1, r0, #24
 8013ff6:	d501      	bpl.n	8013ffc <_printf_i+0xec>
 8013ff8:	681e      	ldr	r6, [r3, #0]
 8013ffa:	e002      	b.n	8014002 <_printf_i+0xf2>
 8013ffc:	0646      	lsls	r6, r0, #25
 8013ffe:	d5fb      	bpl.n	8013ff8 <_printf_i+0xe8>
 8014000:	881e      	ldrh	r6, [r3, #0]
 8014002:	4854      	ldr	r0, [pc, #336]	; (8014154 <_printf_i+0x244>)
 8014004:	2f6f      	cmp	r7, #111	; 0x6f
 8014006:	bf0c      	ite	eq
 8014008:	2308      	moveq	r3, #8
 801400a:	230a      	movne	r3, #10
 801400c:	2100      	movs	r1, #0
 801400e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014012:	6865      	ldr	r5, [r4, #4]
 8014014:	60a5      	str	r5, [r4, #8]
 8014016:	2d00      	cmp	r5, #0
 8014018:	bfa2      	ittt	ge
 801401a:	6821      	ldrge	r1, [r4, #0]
 801401c:	f021 0104 	bicge.w	r1, r1, #4
 8014020:	6021      	strge	r1, [r4, #0]
 8014022:	b90e      	cbnz	r6, 8014028 <_printf_i+0x118>
 8014024:	2d00      	cmp	r5, #0
 8014026:	d04d      	beq.n	80140c4 <_printf_i+0x1b4>
 8014028:	4615      	mov	r5, r2
 801402a:	fbb6 f1f3 	udiv	r1, r6, r3
 801402e:	fb03 6711 	mls	r7, r3, r1, r6
 8014032:	5dc7      	ldrb	r7, [r0, r7]
 8014034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014038:	4637      	mov	r7, r6
 801403a:	42bb      	cmp	r3, r7
 801403c:	460e      	mov	r6, r1
 801403e:	d9f4      	bls.n	801402a <_printf_i+0x11a>
 8014040:	2b08      	cmp	r3, #8
 8014042:	d10b      	bne.n	801405c <_printf_i+0x14c>
 8014044:	6823      	ldr	r3, [r4, #0]
 8014046:	07de      	lsls	r6, r3, #31
 8014048:	d508      	bpl.n	801405c <_printf_i+0x14c>
 801404a:	6923      	ldr	r3, [r4, #16]
 801404c:	6861      	ldr	r1, [r4, #4]
 801404e:	4299      	cmp	r1, r3
 8014050:	bfde      	ittt	le
 8014052:	2330      	movle	r3, #48	; 0x30
 8014054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014058:	f105 35ff 	addle.w	r5, r5, #4294967295
 801405c:	1b52      	subs	r2, r2, r5
 801405e:	6122      	str	r2, [r4, #16]
 8014060:	f8cd a000 	str.w	sl, [sp]
 8014064:	464b      	mov	r3, r9
 8014066:	aa03      	add	r2, sp, #12
 8014068:	4621      	mov	r1, r4
 801406a:	4640      	mov	r0, r8
 801406c:	f7ff fee2 	bl	8013e34 <_printf_common>
 8014070:	3001      	adds	r0, #1
 8014072:	d14c      	bne.n	801410e <_printf_i+0x1fe>
 8014074:	f04f 30ff 	mov.w	r0, #4294967295
 8014078:	b004      	add	sp, #16
 801407a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801407e:	4835      	ldr	r0, [pc, #212]	; (8014154 <_printf_i+0x244>)
 8014080:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014084:	6829      	ldr	r1, [r5, #0]
 8014086:	6823      	ldr	r3, [r4, #0]
 8014088:	f851 6b04 	ldr.w	r6, [r1], #4
 801408c:	6029      	str	r1, [r5, #0]
 801408e:	061d      	lsls	r5, r3, #24
 8014090:	d514      	bpl.n	80140bc <_printf_i+0x1ac>
 8014092:	07df      	lsls	r7, r3, #31
 8014094:	bf44      	itt	mi
 8014096:	f043 0320 	orrmi.w	r3, r3, #32
 801409a:	6023      	strmi	r3, [r4, #0]
 801409c:	b91e      	cbnz	r6, 80140a6 <_printf_i+0x196>
 801409e:	6823      	ldr	r3, [r4, #0]
 80140a0:	f023 0320 	bic.w	r3, r3, #32
 80140a4:	6023      	str	r3, [r4, #0]
 80140a6:	2310      	movs	r3, #16
 80140a8:	e7b0      	b.n	801400c <_printf_i+0xfc>
 80140aa:	6823      	ldr	r3, [r4, #0]
 80140ac:	f043 0320 	orr.w	r3, r3, #32
 80140b0:	6023      	str	r3, [r4, #0]
 80140b2:	2378      	movs	r3, #120	; 0x78
 80140b4:	4828      	ldr	r0, [pc, #160]	; (8014158 <_printf_i+0x248>)
 80140b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80140ba:	e7e3      	b.n	8014084 <_printf_i+0x174>
 80140bc:	0659      	lsls	r1, r3, #25
 80140be:	bf48      	it	mi
 80140c0:	b2b6      	uxthmi	r6, r6
 80140c2:	e7e6      	b.n	8014092 <_printf_i+0x182>
 80140c4:	4615      	mov	r5, r2
 80140c6:	e7bb      	b.n	8014040 <_printf_i+0x130>
 80140c8:	682b      	ldr	r3, [r5, #0]
 80140ca:	6826      	ldr	r6, [r4, #0]
 80140cc:	6961      	ldr	r1, [r4, #20]
 80140ce:	1d18      	adds	r0, r3, #4
 80140d0:	6028      	str	r0, [r5, #0]
 80140d2:	0635      	lsls	r5, r6, #24
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	d501      	bpl.n	80140dc <_printf_i+0x1cc>
 80140d8:	6019      	str	r1, [r3, #0]
 80140da:	e002      	b.n	80140e2 <_printf_i+0x1d2>
 80140dc:	0670      	lsls	r0, r6, #25
 80140de:	d5fb      	bpl.n	80140d8 <_printf_i+0x1c8>
 80140e0:	8019      	strh	r1, [r3, #0]
 80140e2:	2300      	movs	r3, #0
 80140e4:	6123      	str	r3, [r4, #16]
 80140e6:	4615      	mov	r5, r2
 80140e8:	e7ba      	b.n	8014060 <_printf_i+0x150>
 80140ea:	682b      	ldr	r3, [r5, #0]
 80140ec:	1d1a      	adds	r2, r3, #4
 80140ee:	602a      	str	r2, [r5, #0]
 80140f0:	681d      	ldr	r5, [r3, #0]
 80140f2:	6862      	ldr	r2, [r4, #4]
 80140f4:	2100      	movs	r1, #0
 80140f6:	4628      	mov	r0, r5
 80140f8:	f7ec f902 	bl	8000300 <memchr>
 80140fc:	b108      	cbz	r0, 8014102 <_printf_i+0x1f2>
 80140fe:	1b40      	subs	r0, r0, r5
 8014100:	6060      	str	r0, [r4, #4]
 8014102:	6863      	ldr	r3, [r4, #4]
 8014104:	6123      	str	r3, [r4, #16]
 8014106:	2300      	movs	r3, #0
 8014108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801410c:	e7a8      	b.n	8014060 <_printf_i+0x150>
 801410e:	6923      	ldr	r3, [r4, #16]
 8014110:	462a      	mov	r2, r5
 8014112:	4649      	mov	r1, r9
 8014114:	4640      	mov	r0, r8
 8014116:	47d0      	blx	sl
 8014118:	3001      	adds	r0, #1
 801411a:	d0ab      	beq.n	8014074 <_printf_i+0x164>
 801411c:	6823      	ldr	r3, [r4, #0]
 801411e:	079b      	lsls	r3, r3, #30
 8014120:	d413      	bmi.n	801414a <_printf_i+0x23a>
 8014122:	68e0      	ldr	r0, [r4, #12]
 8014124:	9b03      	ldr	r3, [sp, #12]
 8014126:	4298      	cmp	r0, r3
 8014128:	bfb8      	it	lt
 801412a:	4618      	movlt	r0, r3
 801412c:	e7a4      	b.n	8014078 <_printf_i+0x168>
 801412e:	2301      	movs	r3, #1
 8014130:	4632      	mov	r2, r6
 8014132:	4649      	mov	r1, r9
 8014134:	4640      	mov	r0, r8
 8014136:	47d0      	blx	sl
 8014138:	3001      	adds	r0, #1
 801413a:	d09b      	beq.n	8014074 <_printf_i+0x164>
 801413c:	3501      	adds	r5, #1
 801413e:	68e3      	ldr	r3, [r4, #12]
 8014140:	9903      	ldr	r1, [sp, #12]
 8014142:	1a5b      	subs	r3, r3, r1
 8014144:	42ab      	cmp	r3, r5
 8014146:	dcf2      	bgt.n	801412e <_printf_i+0x21e>
 8014148:	e7eb      	b.n	8014122 <_printf_i+0x212>
 801414a:	2500      	movs	r5, #0
 801414c:	f104 0619 	add.w	r6, r4, #25
 8014150:	e7f5      	b.n	801413e <_printf_i+0x22e>
 8014152:	bf00      	nop
 8014154:	080145cd 	.word	0x080145cd
 8014158:	080145de 	.word	0x080145de

0801415c <memcpy>:
 801415c:	440a      	add	r2, r1
 801415e:	4291      	cmp	r1, r2
 8014160:	f100 33ff 	add.w	r3, r0, #4294967295
 8014164:	d100      	bne.n	8014168 <memcpy+0xc>
 8014166:	4770      	bx	lr
 8014168:	b510      	push	{r4, lr}
 801416a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801416e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014172:	4291      	cmp	r1, r2
 8014174:	d1f9      	bne.n	801416a <memcpy+0xe>
 8014176:	bd10      	pop	{r4, pc}

08014178 <memmove>:
 8014178:	4288      	cmp	r0, r1
 801417a:	b510      	push	{r4, lr}
 801417c:	eb01 0402 	add.w	r4, r1, r2
 8014180:	d902      	bls.n	8014188 <memmove+0x10>
 8014182:	4284      	cmp	r4, r0
 8014184:	4623      	mov	r3, r4
 8014186:	d807      	bhi.n	8014198 <memmove+0x20>
 8014188:	1e43      	subs	r3, r0, #1
 801418a:	42a1      	cmp	r1, r4
 801418c:	d008      	beq.n	80141a0 <memmove+0x28>
 801418e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014196:	e7f8      	b.n	801418a <memmove+0x12>
 8014198:	4402      	add	r2, r0
 801419a:	4601      	mov	r1, r0
 801419c:	428a      	cmp	r2, r1
 801419e:	d100      	bne.n	80141a2 <memmove+0x2a>
 80141a0:	bd10      	pop	{r4, pc}
 80141a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80141aa:	e7f7      	b.n	801419c <memmove+0x24>

080141ac <_free_r>:
 80141ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141ae:	2900      	cmp	r1, #0
 80141b0:	d044      	beq.n	801423c <_free_r+0x90>
 80141b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141b6:	9001      	str	r0, [sp, #4]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	f1a1 0404 	sub.w	r4, r1, #4
 80141be:	bfb8      	it	lt
 80141c0:	18e4      	addlt	r4, r4, r3
 80141c2:	f000 f913 	bl	80143ec <__malloc_lock>
 80141c6:	4a1e      	ldr	r2, [pc, #120]	; (8014240 <_free_r+0x94>)
 80141c8:	9801      	ldr	r0, [sp, #4]
 80141ca:	6813      	ldr	r3, [r2, #0]
 80141cc:	b933      	cbnz	r3, 80141dc <_free_r+0x30>
 80141ce:	6063      	str	r3, [r4, #4]
 80141d0:	6014      	str	r4, [r2, #0]
 80141d2:	b003      	add	sp, #12
 80141d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141d8:	f000 b90e 	b.w	80143f8 <__malloc_unlock>
 80141dc:	42a3      	cmp	r3, r4
 80141de:	d908      	bls.n	80141f2 <_free_r+0x46>
 80141e0:	6825      	ldr	r5, [r4, #0]
 80141e2:	1961      	adds	r1, r4, r5
 80141e4:	428b      	cmp	r3, r1
 80141e6:	bf01      	itttt	eq
 80141e8:	6819      	ldreq	r1, [r3, #0]
 80141ea:	685b      	ldreq	r3, [r3, #4]
 80141ec:	1949      	addeq	r1, r1, r5
 80141ee:	6021      	streq	r1, [r4, #0]
 80141f0:	e7ed      	b.n	80141ce <_free_r+0x22>
 80141f2:	461a      	mov	r2, r3
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	b10b      	cbz	r3, 80141fc <_free_r+0x50>
 80141f8:	42a3      	cmp	r3, r4
 80141fa:	d9fa      	bls.n	80141f2 <_free_r+0x46>
 80141fc:	6811      	ldr	r1, [r2, #0]
 80141fe:	1855      	adds	r5, r2, r1
 8014200:	42a5      	cmp	r5, r4
 8014202:	d10b      	bne.n	801421c <_free_r+0x70>
 8014204:	6824      	ldr	r4, [r4, #0]
 8014206:	4421      	add	r1, r4
 8014208:	1854      	adds	r4, r2, r1
 801420a:	42a3      	cmp	r3, r4
 801420c:	6011      	str	r1, [r2, #0]
 801420e:	d1e0      	bne.n	80141d2 <_free_r+0x26>
 8014210:	681c      	ldr	r4, [r3, #0]
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	6053      	str	r3, [r2, #4]
 8014216:	4421      	add	r1, r4
 8014218:	6011      	str	r1, [r2, #0]
 801421a:	e7da      	b.n	80141d2 <_free_r+0x26>
 801421c:	d902      	bls.n	8014224 <_free_r+0x78>
 801421e:	230c      	movs	r3, #12
 8014220:	6003      	str	r3, [r0, #0]
 8014222:	e7d6      	b.n	80141d2 <_free_r+0x26>
 8014224:	6825      	ldr	r5, [r4, #0]
 8014226:	1961      	adds	r1, r4, r5
 8014228:	428b      	cmp	r3, r1
 801422a:	bf04      	itt	eq
 801422c:	6819      	ldreq	r1, [r3, #0]
 801422e:	685b      	ldreq	r3, [r3, #4]
 8014230:	6063      	str	r3, [r4, #4]
 8014232:	bf04      	itt	eq
 8014234:	1949      	addeq	r1, r1, r5
 8014236:	6021      	streq	r1, [r4, #0]
 8014238:	6054      	str	r4, [r2, #4]
 801423a:	e7ca      	b.n	80141d2 <_free_r+0x26>
 801423c:	b003      	add	sp, #12
 801423e:	bd30      	pop	{r4, r5, pc}
 8014240:	24008c90 	.word	0x24008c90

08014244 <sbrk_aligned>:
 8014244:	b570      	push	{r4, r5, r6, lr}
 8014246:	4e0e      	ldr	r6, [pc, #56]	; (8014280 <sbrk_aligned+0x3c>)
 8014248:	460c      	mov	r4, r1
 801424a:	6831      	ldr	r1, [r6, #0]
 801424c:	4605      	mov	r5, r0
 801424e:	b911      	cbnz	r1, 8014256 <sbrk_aligned+0x12>
 8014250:	f000 f8bc 	bl	80143cc <_sbrk_r>
 8014254:	6030      	str	r0, [r6, #0]
 8014256:	4621      	mov	r1, r4
 8014258:	4628      	mov	r0, r5
 801425a:	f000 f8b7 	bl	80143cc <_sbrk_r>
 801425e:	1c43      	adds	r3, r0, #1
 8014260:	d00a      	beq.n	8014278 <sbrk_aligned+0x34>
 8014262:	1cc4      	adds	r4, r0, #3
 8014264:	f024 0403 	bic.w	r4, r4, #3
 8014268:	42a0      	cmp	r0, r4
 801426a:	d007      	beq.n	801427c <sbrk_aligned+0x38>
 801426c:	1a21      	subs	r1, r4, r0
 801426e:	4628      	mov	r0, r5
 8014270:	f000 f8ac 	bl	80143cc <_sbrk_r>
 8014274:	3001      	adds	r0, #1
 8014276:	d101      	bne.n	801427c <sbrk_aligned+0x38>
 8014278:	f04f 34ff 	mov.w	r4, #4294967295
 801427c:	4620      	mov	r0, r4
 801427e:	bd70      	pop	{r4, r5, r6, pc}
 8014280:	24008c94 	.word	0x24008c94

08014284 <_malloc_r>:
 8014284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014288:	1ccd      	adds	r5, r1, #3
 801428a:	f025 0503 	bic.w	r5, r5, #3
 801428e:	3508      	adds	r5, #8
 8014290:	2d0c      	cmp	r5, #12
 8014292:	bf38      	it	cc
 8014294:	250c      	movcc	r5, #12
 8014296:	2d00      	cmp	r5, #0
 8014298:	4607      	mov	r7, r0
 801429a:	db01      	blt.n	80142a0 <_malloc_r+0x1c>
 801429c:	42a9      	cmp	r1, r5
 801429e:	d905      	bls.n	80142ac <_malloc_r+0x28>
 80142a0:	230c      	movs	r3, #12
 80142a2:	603b      	str	r3, [r7, #0]
 80142a4:	2600      	movs	r6, #0
 80142a6:	4630      	mov	r0, r6
 80142a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142ac:	4e2e      	ldr	r6, [pc, #184]	; (8014368 <_malloc_r+0xe4>)
 80142ae:	f000 f89d 	bl	80143ec <__malloc_lock>
 80142b2:	6833      	ldr	r3, [r6, #0]
 80142b4:	461c      	mov	r4, r3
 80142b6:	bb34      	cbnz	r4, 8014306 <_malloc_r+0x82>
 80142b8:	4629      	mov	r1, r5
 80142ba:	4638      	mov	r0, r7
 80142bc:	f7ff ffc2 	bl	8014244 <sbrk_aligned>
 80142c0:	1c43      	adds	r3, r0, #1
 80142c2:	4604      	mov	r4, r0
 80142c4:	d14d      	bne.n	8014362 <_malloc_r+0xde>
 80142c6:	6834      	ldr	r4, [r6, #0]
 80142c8:	4626      	mov	r6, r4
 80142ca:	2e00      	cmp	r6, #0
 80142cc:	d140      	bne.n	8014350 <_malloc_r+0xcc>
 80142ce:	6823      	ldr	r3, [r4, #0]
 80142d0:	4631      	mov	r1, r6
 80142d2:	4638      	mov	r0, r7
 80142d4:	eb04 0803 	add.w	r8, r4, r3
 80142d8:	f000 f878 	bl	80143cc <_sbrk_r>
 80142dc:	4580      	cmp	r8, r0
 80142de:	d13a      	bne.n	8014356 <_malloc_r+0xd2>
 80142e0:	6821      	ldr	r1, [r4, #0]
 80142e2:	3503      	adds	r5, #3
 80142e4:	1a6d      	subs	r5, r5, r1
 80142e6:	f025 0503 	bic.w	r5, r5, #3
 80142ea:	3508      	adds	r5, #8
 80142ec:	2d0c      	cmp	r5, #12
 80142ee:	bf38      	it	cc
 80142f0:	250c      	movcc	r5, #12
 80142f2:	4629      	mov	r1, r5
 80142f4:	4638      	mov	r0, r7
 80142f6:	f7ff ffa5 	bl	8014244 <sbrk_aligned>
 80142fa:	3001      	adds	r0, #1
 80142fc:	d02b      	beq.n	8014356 <_malloc_r+0xd2>
 80142fe:	6823      	ldr	r3, [r4, #0]
 8014300:	442b      	add	r3, r5
 8014302:	6023      	str	r3, [r4, #0]
 8014304:	e00e      	b.n	8014324 <_malloc_r+0xa0>
 8014306:	6822      	ldr	r2, [r4, #0]
 8014308:	1b52      	subs	r2, r2, r5
 801430a:	d41e      	bmi.n	801434a <_malloc_r+0xc6>
 801430c:	2a0b      	cmp	r2, #11
 801430e:	d916      	bls.n	801433e <_malloc_r+0xba>
 8014310:	1961      	adds	r1, r4, r5
 8014312:	42a3      	cmp	r3, r4
 8014314:	6025      	str	r5, [r4, #0]
 8014316:	bf18      	it	ne
 8014318:	6059      	strne	r1, [r3, #4]
 801431a:	6863      	ldr	r3, [r4, #4]
 801431c:	bf08      	it	eq
 801431e:	6031      	streq	r1, [r6, #0]
 8014320:	5162      	str	r2, [r4, r5]
 8014322:	604b      	str	r3, [r1, #4]
 8014324:	4638      	mov	r0, r7
 8014326:	f104 060b 	add.w	r6, r4, #11
 801432a:	f000 f865 	bl	80143f8 <__malloc_unlock>
 801432e:	f026 0607 	bic.w	r6, r6, #7
 8014332:	1d23      	adds	r3, r4, #4
 8014334:	1af2      	subs	r2, r6, r3
 8014336:	d0b6      	beq.n	80142a6 <_malloc_r+0x22>
 8014338:	1b9b      	subs	r3, r3, r6
 801433a:	50a3      	str	r3, [r4, r2]
 801433c:	e7b3      	b.n	80142a6 <_malloc_r+0x22>
 801433e:	6862      	ldr	r2, [r4, #4]
 8014340:	42a3      	cmp	r3, r4
 8014342:	bf0c      	ite	eq
 8014344:	6032      	streq	r2, [r6, #0]
 8014346:	605a      	strne	r2, [r3, #4]
 8014348:	e7ec      	b.n	8014324 <_malloc_r+0xa0>
 801434a:	4623      	mov	r3, r4
 801434c:	6864      	ldr	r4, [r4, #4]
 801434e:	e7b2      	b.n	80142b6 <_malloc_r+0x32>
 8014350:	4634      	mov	r4, r6
 8014352:	6876      	ldr	r6, [r6, #4]
 8014354:	e7b9      	b.n	80142ca <_malloc_r+0x46>
 8014356:	230c      	movs	r3, #12
 8014358:	603b      	str	r3, [r7, #0]
 801435a:	4638      	mov	r0, r7
 801435c:	f000 f84c 	bl	80143f8 <__malloc_unlock>
 8014360:	e7a1      	b.n	80142a6 <_malloc_r+0x22>
 8014362:	6025      	str	r5, [r4, #0]
 8014364:	e7de      	b.n	8014324 <_malloc_r+0xa0>
 8014366:	bf00      	nop
 8014368:	24008c90 	.word	0x24008c90

0801436c <_realloc_r>:
 801436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014370:	4680      	mov	r8, r0
 8014372:	4614      	mov	r4, r2
 8014374:	460e      	mov	r6, r1
 8014376:	b921      	cbnz	r1, 8014382 <_realloc_r+0x16>
 8014378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801437c:	4611      	mov	r1, r2
 801437e:	f7ff bf81 	b.w	8014284 <_malloc_r>
 8014382:	b92a      	cbnz	r2, 8014390 <_realloc_r+0x24>
 8014384:	f7ff ff12 	bl	80141ac <_free_r>
 8014388:	4625      	mov	r5, r4
 801438a:	4628      	mov	r0, r5
 801438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014390:	f000 f838 	bl	8014404 <_malloc_usable_size_r>
 8014394:	4284      	cmp	r4, r0
 8014396:	4607      	mov	r7, r0
 8014398:	d802      	bhi.n	80143a0 <_realloc_r+0x34>
 801439a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801439e:	d812      	bhi.n	80143c6 <_realloc_r+0x5a>
 80143a0:	4621      	mov	r1, r4
 80143a2:	4640      	mov	r0, r8
 80143a4:	f7ff ff6e 	bl	8014284 <_malloc_r>
 80143a8:	4605      	mov	r5, r0
 80143aa:	2800      	cmp	r0, #0
 80143ac:	d0ed      	beq.n	801438a <_realloc_r+0x1e>
 80143ae:	42bc      	cmp	r4, r7
 80143b0:	4622      	mov	r2, r4
 80143b2:	4631      	mov	r1, r6
 80143b4:	bf28      	it	cs
 80143b6:	463a      	movcs	r2, r7
 80143b8:	f7ff fed0 	bl	801415c <memcpy>
 80143bc:	4631      	mov	r1, r6
 80143be:	4640      	mov	r0, r8
 80143c0:	f7ff fef4 	bl	80141ac <_free_r>
 80143c4:	e7e1      	b.n	801438a <_realloc_r+0x1e>
 80143c6:	4635      	mov	r5, r6
 80143c8:	e7df      	b.n	801438a <_realloc_r+0x1e>
	...

080143cc <_sbrk_r>:
 80143cc:	b538      	push	{r3, r4, r5, lr}
 80143ce:	4d06      	ldr	r5, [pc, #24]	; (80143e8 <_sbrk_r+0x1c>)
 80143d0:	2300      	movs	r3, #0
 80143d2:	4604      	mov	r4, r0
 80143d4:	4608      	mov	r0, r1
 80143d6:	602b      	str	r3, [r5, #0]
 80143d8:	f7ee fda4 	bl	8002f24 <_sbrk>
 80143dc:	1c43      	adds	r3, r0, #1
 80143de:	d102      	bne.n	80143e6 <_sbrk_r+0x1a>
 80143e0:	682b      	ldr	r3, [r5, #0]
 80143e2:	b103      	cbz	r3, 80143e6 <_sbrk_r+0x1a>
 80143e4:	6023      	str	r3, [r4, #0]
 80143e6:	bd38      	pop	{r3, r4, r5, pc}
 80143e8:	24008c98 	.word	0x24008c98

080143ec <__malloc_lock>:
 80143ec:	4801      	ldr	r0, [pc, #4]	; (80143f4 <__malloc_lock+0x8>)
 80143ee:	f000 b811 	b.w	8014414 <__retarget_lock_acquire_recursive>
 80143f2:	bf00      	nop
 80143f4:	24008c9c 	.word	0x24008c9c

080143f8 <__malloc_unlock>:
 80143f8:	4801      	ldr	r0, [pc, #4]	; (8014400 <__malloc_unlock+0x8>)
 80143fa:	f000 b80c 	b.w	8014416 <__retarget_lock_release_recursive>
 80143fe:	bf00      	nop
 8014400:	24008c9c 	.word	0x24008c9c

08014404 <_malloc_usable_size_r>:
 8014404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014408:	1f18      	subs	r0, r3, #4
 801440a:	2b00      	cmp	r3, #0
 801440c:	bfbc      	itt	lt
 801440e:	580b      	ldrlt	r3, [r1, r0]
 8014410:	18c0      	addlt	r0, r0, r3
 8014412:	4770      	bx	lr

08014414 <__retarget_lock_acquire_recursive>:
 8014414:	4770      	bx	lr

08014416 <__retarget_lock_release_recursive>:
 8014416:	4770      	bx	lr

08014418 <_init>:
 8014418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801441a:	bf00      	nop
 801441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801441e:	bc08      	pop	{r3}
 8014420:	469e      	mov	lr, r3
 8014422:	4770      	bx	lr

08014424 <_fini>:
 8014424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014426:	bf00      	nop
 8014428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801442a:	bc08      	pop	{r3}
 801442c:	469e      	mov	lr, r3
 801442e:	4770      	bx	lr
