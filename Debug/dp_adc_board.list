
dp_adc_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012174  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08012424  08012424  00022424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080124fc  080124fc  000224fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012504  08012504  00022504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012508  08012508  00022508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0801250c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000089a8  2400007c  08012588  0003007c  2**2
                  ALLOC
  8 .sdram_section 00000000  c0000000  c0000000  0003007c  2**0
                  CONTENTS
  9 ._user_heap_stack 00000c04  24008a24  24008a24  00038a24  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000264d4  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000041fb  00000000  00000000  0005657e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001cd0  00000000  00000000  0005a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001b18  00000000  00000000  0005c450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036080  00000000  00000000  0005df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028426  00000000  00000000  00093fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00150802  00000000  00000000  000bc40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0020cc10  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007e0c  00000000  00000000  0020cc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801240c 	.word	0x0801240c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	0801240c 	.word	0x0801240c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SDRAM_Startup_Sequence>:
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];
uint32_t uwIndex = 0;
__IO uint32_t uwWriteReadStatus = 0;

void SDRAM_Startup_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  /* Program the SDRAM external device */
  SDRAM_Initialization_Sequence(hsdram, Command);
 800069e:	6839      	ldr	r1, [r7, #0]
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f875 	bl	8000790 <SDRAM_Initialization_Sequence>

  /*##-2- SDRAM memory read/write access #####################################*/
  //*(__IO uint32_t*) (TEST_WRITE) = 0x1;

  /* Fill the buffer to write */
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0xA244250F);
 80006a6:	4a34      	ldr	r2, [pc, #208]	; (8000778 <SDRAM_Startup_Sequence+0xe4>)
 80006a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ac:	4833      	ldr	r0, [pc, #204]	; (800077c <SDRAM_Startup_Sequence+0xe8>)
 80006ae:	f000 f8cc 	bl	800084a <Fill_Buffer>

    /* Fill the Read buffer */
  Fill_Buffer(aRxBuffer, BUFFER_SIZE, 0xBBBBBBBB);
 80006b2:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	4831      	ldr	r0, [pc, #196]	; (8000780 <SDRAM_Startup_Sequence+0xec>)
 80006bc:	f000 f8c5 	bl	800084a <Fill_Buffer>

  /* Write data to the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e010      	b.n	80006ea <SDRAM_Startup_Sequence+0x56>
  {
    *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex) = aTxBuffer[uwIndex];
 80006c8:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006ce:	6819      	ldr	r1, [r3, #0]
 80006d0:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SDRAM_Startup_Sequence+0xf4>)
 80006d2:	440b      	add	r3, r1
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4619      	mov	r1, r3
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <SDRAM_Startup_Sequence+0xe8>)
 80006da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006de:	600b      	str	r3, [r1, #0]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a27      	ldr	r2, [pc, #156]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f2:	d3e9      	bcc.n	80006c8 <SDRAM_Startup_Sequence+0x34>
  }

  /* Read back data from the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e010      	b.n	800071e <SDRAM_Startup_Sequence+0x8a>
  {
    aRxBuffer[uwIndex] = *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex);
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SDRAM_Startup_Sequence+0xf4>)
 8000702:	4413      	add	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	461a      	mov	r2, r3
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	491c      	ldr	r1, [pc, #112]	; (8000780 <SDRAM_Startup_Sequence+0xec>)
 8000710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000726:	d3e9      	bcc.n	80006fc <SDRAM_Startup_Sequence+0x68>
  }

  /*##-3- Checking data integrity ############################################*/

  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	e015      	b.n	800075c <SDRAM_Startup_Sequence+0xc8>
  {
    if (aRxBuffer[uwIndex] != aTxBuffer[uwIndex])
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <SDRAM_Startup_Sequence+0xec>)
 8000736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	490f      	ldr	r1, [pc, #60]	; (800077c <SDRAM_Startup_Sequence+0xe8>)
 8000740:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000744:	429a      	cmp	r2, r3
 8000746:	d004      	beq.n	8000752 <SDRAM_Startup_Sequence+0xbe>
    {
      uwWriteReadStatus++;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <SDRAM_Startup_Sequence+0xf8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <SDRAM_Startup_Sequence+0xf8>)
 8000750:	6013      	str	r3, [r2, #0]
  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000764:	d203      	bcs.n	800076e <SDRAM_Startup_Sequence+0xda>
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <SDRAM_Startup_Sequence+0xf8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0e0      	beq.n	8000730 <SDRAM_Startup_Sequence+0x9c>
    }
  }
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	a244250f 	.word	0xa244250f
 800077c:	24000098 	.word	0x24000098
 8000780:	24004098 	.word	0x24004098
 8000784:	24008098 	.word	0x24008098
 8000788:	30000200 	.word	0x30000200
 800078c:	2400809c 	.word	0x2400809c

08000790 <SDRAM_Initialization_Sequence>:



void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2210      	movs	r2, #16
 80007a8:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2201      	movs	r2, #1
 80007ae:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80007b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ba:	6839      	ldr	r1, [r7, #0]
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f00a fb41 	bl	800ae44 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f002 fbf4 	bl	8002fb0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2202      	movs	r2, #2
 80007cc:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	2210      	movs	r2, #16
 80007d2:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2201      	movs	r2, #1
 80007d8:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80007e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e4:	6839      	ldr	r1, [r7, #0]
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f00a fb2c 	bl	800ae44 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2203      	movs	r2, #3
 80007f0:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2210      	movs	r2, #16
 80007f6:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2208      	movs	r2, #8
 80007fc:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000808:	6839      	ldr	r1, [r7, #0]
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f00a fb1a 	bl	800ae44 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000810:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000814:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2204      	movs	r2, #4
 800081a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	2210      	movs	r2, #16
 8000820:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	2201      	movs	r2, #1
 8000826:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	6839      	ldr	r1, [r7, #0]
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f00a fb05 	bl	800ae44 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, 230);
 800083a:	21e6      	movs	r1, #230	; 0xe6
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f00a fb36 	bl	800aeae <HAL_SDRAM_ProgramRefreshRate>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <Fill_Buffer>:

void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 800084a:	b480      	push	{r7}
 800084c:	b087      	sub	sp, #28
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e00a      	b.n	8000876 <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	6979      	ldr	r1, [r7, #20]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	440a      	add	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	3301      	adds	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3f0      	bcc.n	8000860 <Fill_Buffer+0x16>
  }
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	371c      	adds	r7, #28
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f002 fafc 	bl	8002e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 fa02 	bl	8000c9c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000898:	f000 fa7c 	bl	8000d94 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
//TODO: need to move DMA init everytime up after GPIO init!!
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f000 fdf0 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a0:	f000 fd3c 	bl	800131c <MX_DMA_Init>
  MX_SPI1_Init();
 80008a4:	f000 fac6 	bl	8000e34 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008a8:	f000 fbcc 	bl	8001044 <MX_TIM1_Init>
  MX_UART4_Init();
 80008ac:	f000 fce8 	bl	8001280 <MX_UART4_Init>
  MX_FMC_Init();
 80008b0:	f000 fd94 	bl	80013dc <MX_FMC_Init>
  MX_SPI2_Init();
 80008b4:	f000 fb16 	bl	8000ee4 <MX_SPI2_Init>
  MX_SPI4_Init();
 80008b8:	f000 fb6c 	bl	8000f94 <MX_SPI4_Init>
  MX_TIM2_Init();
 80008bc:	f000 fc6e 	bl	800119c <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 80008c0:	f000 fa9a 	bl	8000df8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008c4:	f010 f9fc 	bl	8010cc0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //spi1_set_exti();
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80008c8:	4bd0      	ldr	r3, [pc, #832]	; (8000c0c <main+0x380>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	4acf      	ldr	r2, [pc, #828]	; (8000c0c <main+0x380>)
 80008ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008d2:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80008d4:	4bce      	ldr	r3, [pc, #824]	; (8000c10 <main+0x384>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80008da:	4bcd      	ldr	r3, [pc, #820]	; (8000c10 <main+0x384>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4acc      	ldr	r2, [pc, #816]	; (8000c10 <main+0x384>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 80008e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ea:	f002 fb61 	bl	8002fb0 <HAL_Delay>
//  // Disable the 'rising edge' trigger (button release).
//  EXTI->RTSR1 &= ~(1 << 5);
//  // Enable the 'falling edge' trigger (button press).
//  EXTI->FTSR1 |=  (1 << 5);

  SDRAM_Startup_Sequence(&hsdram1, &fmc_command);
 80008ee:	49c9      	ldr	r1, [pc, #804]	; (8000c14 <main+0x388>)
 80008f0:	48c9      	ldr	r0, [pc, #804]	; (8000c18 <main+0x38c>)
 80008f2:	f7ff fecf 	bl	8000694 <SDRAM_Startup_Sequence>
  sd_card_init();
 80008f6:	f000 ffab 	bl	8001850 <sd_card_init>
  HAL_Delay(1000);
 80008fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fe:	f002 fb57 	bl	8002fb0 <HAL_Delay>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 4);
 8000902:	2204      	movs	r2, #4
 8000904:	2104      	movs	r1, #4
 8000906:	2017      	movs	r0, #23
 8000908:	f002 fc75 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 800090c:	2201      	movs	r2, #1
 800090e:	2101      	movs	r1, #1
 8000910:	2028      	movs	r0, #40	; 0x28
 8000912:	f002 fc70 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000916:	2017      	movs	r0, #23
 8000918:	f002 fc95 	bl	8003246 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800091c:	2028      	movs	r0, #40	; 0x28
 800091e:	f002 fc92 	bl	8003246 <HAL_NVIC_DisableIRQ>

  spi1_soft_reset();
 8000922:	f001 fa45 	bl	8001db0 <spi1_soft_reset>
  spi2_soft_reset();
 8000926:	f001 fa69 	bl	8001dfc <spi2_soft_reset>
  spi4_soft_reset();
 800092a:	f001 fa8d 	bl	8001e48 <spi4_soft_reset>
  spi1_adc_init(SPS_VALUE_5);
 800092e:	4bbb      	ldr	r3, [pc, #748]	; (8000c1c <main+0x390>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f000 ffa4 	bl	8001880 <spi1_adc_init>
  spi2_adc_init(SPS_VALUE_5);
 8000938:	4bb8      	ldr	r3, [pc, #736]	; (8000c1c <main+0x390>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f001 f877 	bl	8001a30 <spi2_adc_init>
  spi4_adc_init(SPS_VALUE_5);
 8000942:	4bb6      	ldr	r3, [pc, #728]	; (8000c1c <main+0x390>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f001 f94a 	bl	8001be0 <spi4_adc_init>
//  readRegister();
//  t1 = DWT->CYCCNT;
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 800094c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000950:	2220      	movs	r2, #32
 8000952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8000956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095a:	2240      	movs	r2, #64	; 0x40
 800095c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8000960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800096c:	2017      	movs	r0, #23
 800096e:	f002 fc5c 	bl	800322a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000972:	2028      	movs	r0, #40	; 0x28
 8000974:	f002 fc59 	bl	800322a <HAL_NVIC_EnableIRQ>

  // uart IT enable
  HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8000978:	2201      	movs	r2, #1
 800097a:	49a9      	ldr	r1, [pc, #676]	; (8000c20 <main+0x394>)
 800097c:	48a9      	ldr	r0, [pc, #676]	; (8000c24 <main+0x398>)
 800097e:	f00c ff4d 	bl	800d81c <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT (&huart5, rxUart4Buffer, 1);
  // FIXME main
  //sd_card_test_script();

  //initial setup:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2120      	movs	r1, #32
 8000986:	48a8      	ldr	r0, [pc, #672]	; (8000c28 <main+0x39c>)
 8000988:	f005 fd14 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2110      	movs	r1, #16
 8000990:	48a6      	ldr	r0, [pc, #664]	; (8000c2c <main+0x3a0>)
 8000992:	f005 fd0f 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2101      	movs	r1, #1
 800099a:	48a5      	ldr	r0, [pc, #660]	; (8000c30 <main+0x3a4>)
 800099c:	f005 fd0a 	bl	80063b4 <HAL_GPIO_WritePin>

  //run all before main loop
  run_all_adc();
 80009a0:	f001 f9ea 	bl	8001d78 <run_all_adc>
//        flagReset_spi2 = true;
//      }



      if (uartNewCommand == true){
 80009a4:	4ba3      	ldr	r3, [pc, #652]	; (8000c34 <main+0x3a8>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 815c 	beq.w	8000c68 <main+0x3dc>
        switch (uartCommand) {
 80009b0:	4ba1      	ldr	r3, [pc, #644]	; (8000c38 <main+0x3ac>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	3b30      	subs	r3, #48	; 0x30
 80009b8:	2b47      	cmp	r3, #71	; 0x47
 80009ba:	f200 8151 	bhi.w	8000c60 <main+0x3d4>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <main+0x138>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	08000bcf 	.word	0x08000bcf
 80009c8:	08000bdb 	.word	0x08000bdb
 80009cc:	08000be7 	.word	0x08000be7
 80009d0:	08000bf3 	.word	0x08000bf3
 80009d4:	08000bff 	.word	0x08000bff
 80009d8:	08000c61 	.word	0x08000c61
 80009dc:	08000c61 	.word	0x08000c61
 80009e0:	08000c61 	.word	0x08000c61
 80009e4:	08000c61 	.word	0x08000c61
 80009e8:	08000c61 	.word	0x08000c61
 80009ec:	08000c61 	.word	0x08000c61
 80009f0:	08000c61 	.word	0x08000c61
 80009f4:	08000c61 	.word	0x08000c61
 80009f8:	08000c61 	.word	0x08000c61
 80009fc:	08000c61 	.word	0x08000c61
 8000a00:	08000c61 	.word	0x08000c61
 8000a04:	08000c61 	.word	0x08000c61
 8000a08:	08000c61 	.word	0x08000c61
 8000a0c:	08000c61 	.word	0x08000c61
 8000a10:	08000c61 	.word	0x08000c61
 8000a14:	08000c61 	.word	0x08000c61
 8000a18:	08000c61 	.word	0x08000c61
 8000a1c:	08000c61 	.word	0x08000c61
 8000a20:	08000c61 	.word	0x08000c61
 8000a24:	08000c61 	.word	0x08000c61
 8000a28:	08000c61 	.word	0x08000c61
 8000a2c:	08000c61 	.word	0x08000c61
 8000a30:	08000c61 	.word	0x08000c61
 8000a34:	08000c61 	.word	0x08000c61
 8000a38:	08000c61 	.word	0x08000c61
 8000a3c:	08000c61 	.word	0x08000c61
 8000a40:	08000c61 	.word	0x08000c61
 8000a44:	08000c61 	.word	0x08000c61
 8000a48:	08000c61 	.word	0x08000c61
 8000a4c:	08000c61 	.word	0x08000c61
 8000a50:	08000c61 	.word	0x08000c61
 8000a54:	08000c61 	.word	0x08000c61
 8000a58:	08000c61 	.word	0x08000c61
 8000a5c:	08000c61 	.word	0x08000c61
 8000a60:	08000c61 	.word	0x08000c61
 8000a64:	08000c61 	.word	0x08000c61
 8000a68:	08000c61 	.word	0x08000c61
 8000a6c:	08000c61 	.word	0x08000c61
 8000a70:	08000c61 	.word	0x08000c61
 8000a74:	08000c61 	.word	0x08000c61
 8000a78:	08000c61 	.word	0x08000c61
 8000a7c:	08000c61 	.word	0x08000c61
 8000a80:	08000c61 	.word	0x08000c61
 8000a84:	08000c61 	.word	0x08000c61
 8000a88:	08000ae5 	.word	0x08000ae5
 8000a8c:	08000afd 	.word	0x08000afd
 8000a90:	08000b15 	.word	0x08000b15
 8000a94:	08000b2d 	.word	0x08000b2d
 8000a98:	08000b45 	.word	0x08000b45
 8000a9c:	08000b5d 	.word	0x08000b5d
 8000aa0:	08000b75 	.word	0x08000b75
 8000aa4:	08000b8f 	.word	0x08000b8f
 8000aa8:	08000b97 	.word	0x08000b97
 8000aac:	08000baf 	.word	0x08000baf
 8000ab0:	08000c61 	.word	0x08000c61
 8000ab4:	08000c61 	.word	0x08000c61
 8000ab8:	08000c61 	.word	0x08000c61
 8000abc:	08000c61 	.word	0x08000c61
 8000ac0:	08000c61 	.word	0x08000c61
 8000ac4:	08000bb7 	.word	0x08000bb7
 8000ac8:	08000bbf 	.word	0x08000bbf
 8000acc:	08000c61 	.word	0x08000c61
 8000ad0:	08000c61 	.word	0x08000c61
 8000ad4:	08000c61 	.word	0x08000c61
 8000ad8:	08000c61 	.word	0x08000c61
 8000adc:	08000c61 	.word	0x08000c61
 8000ae0:	08000bc7 	.word	0x08000bc7
          case 'a': // multiplexer X -> 0
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	484f      	ldr	r0, [pc, #316]	; (8000c28 <main+0x39c>)
 8000aea:	f005 fc63 	bl	80063b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af4:	484c      	ldr	r0, [pc, #304]	; (8000c28 <main+0x39c>)
 8000af6:	f005 fc5d 	bl	80063b4 <HAL_GPIO_WritePin>
            break;
 8000afa:	e0b2      	b.n	8000c62 <main+0x3d6>
          case 'b': // multiplexer X -> 1
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2120      	movs	r1, #32
 8000b00:	4849      	ldr	r0, [pc, #292]	; (8000c28 <main+0x39c>)
 8000b02:	f005 fc57 	bl	80063b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0c:	4846      	ldr	r0, [pc, #280]	; (8000c28 <main+0x39c>)
 8000b0e:	f005 fc51 	bl	80063b4 <HAL_GPIO_WritePin>
            break;
 8000b12:	e0a6      	b.n	8000c62 <main+0x3d6>

          case 'c': // multiplexer Y -> 0
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	4844      	ldr	r0, [pc, #272]	; (8000c2c <main+0x3a0>)
 8000b1a:	f005 fc4b 	bl	80063b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b24:	4840      	ldr	r0, [pc, #256]	; (8000c28 <main+0x39c>)
 8000b26:	f005 fc45 	bl	80063b4 <HAL_GPIO_WritePin>
            break;
 8000b2a:	e09a      	b.n	8000c62 <main+0x3d6>

          case 'd': // multiplexer Y -> 1
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2110      	movs	r1, #16
 8000b30:	483e      	ldr	r0, [pc, #248]	; (8000c2c <main+0x3a0>)
 8000b32:	f005 fc3f 	bl	80063b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	483a      	ldr	r0, [pc, #232]	; (8000c28 <main+0x39c>)
 8000b3e:	f005 fc39 	bl	80063b4 <HAL_GPIO_WritePin>
            break;
 8000b42:	e08e      	b.n	8000c62 <main+0x3d6>

          case 'e': // multiplexer Z -> 0
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2101      	movs	r1, #1
 8000b48:	4839      	ldr	r0, [pc, #228]	; (8000c30 <main+0x3a4>)
 8000b4a:	f005 fc33 	bl	80063b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b54:	4834      	ldr	r0, [pc, #208]	; (8000c28 <main+0x39c>)
 8000b56:	f005 fc2d 	bl	80063b4 <HAL_GPIO_WritePin>
            break;
 8000b5a:	e082      	b.n	8000c62 <main+0x3d6>

          case 'f': // multiplexer Z -> 1
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4833      	ldr	r0, [pc, #204]	; (8000c30 <main+0x3a4>)
 8000b62:	f005 fc27 	bl	80063b4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b6c:	482e      	ldr	r0, [pc, #184]	; (8000c28 <main+0x39c>)
 8000b6e:	f005 fc21 	bl	80063b4 <HAL_GPIO_WritePin>
            break;
 8000b72:	e076      	b.n	8000c62 <main+0x3d6>

          //setting of SPi running or not
          case 'g':
            __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            counterSPI2_EXTI = 0;
 8000b80:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <main+0x3b0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
            enableSPI2Interrupt = true;
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <main+0x3b4>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
//            HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
            break;
 8000b8c:	e069      	b.n	8000c62 <main+0x3d6>

          case 'h':
            enableSPI2Interrupt = false;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <main+0x3b4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
            //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
            break;
 8000b94:	e065      	b.n	8000c62 <main+0x3d6>

          case 'i':
            __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8000b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            counterSPI1_EXTI = 0;
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <main+0x3b8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
            enableSPI1Interrupt = true;
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <main+0x3bc>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
//            HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
            break;
 8000bac:	e059      	b.n	8000c62 <main+0x3d6>

          case 'j':
            enableSPI1Interrupt = false;
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <main+0x3bc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
            //HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
            break;
 8000bb4:	e055      	b.n	8000c62 <main+0x3d6>

          case 'p':
            sd_card_write_values_enable = true;
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <main+0x3c0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]
            break;
 8000bbc:	e051      	b.n	8000c62 <main+0x3d6>

          case 'q':
            sd_card_write_values_enable = false;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <main+0x3c0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
            break;
 8000bc4:	e04d      	b.n	8000c62 <main+0x3d6>
          case 'w':
            HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bc6:	2017      	movs	r0, #23
 8000bc8:	f002 fb2f 	bl	800322a <HAL_NVIC_EnableIRQ>
            break;
 8000bcc:	e049      	b.n	8000c62 <main+0x3d6>

         // Numbers reserved for SPS values
          case '0':
            //set SPS to 5
            setNewSPStoAllADCs(SPS_VALUE_5);
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <main+0x390>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fa22 	bl	800201c <setNewSPStoAllADCs>
            break;
 8000bd8:	e043      	b.n	8000c62 <main+0x3d6>
          case '1':
            //set SPS to 20
            setNewSPStoAllADCs(SPS_VALUE_20);
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <main+0x3c4>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 fa1c 	bl	800201c <setNewSPStoAllADCs>
            break;
 8000be4:	e03d      	b.n	8000c62 <main+0x3d6>
          case '2':
            //set SPS to 100
            setNewSPStoAllADCs(SPS_VALUE_100);
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <main+0x3c8>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 fa16 	bl	800201c <setNewSPStoAllADCs>
            break;
 8000bf0:	e037      	b.n	8000c62 <main+0x3d6>
          case '3':
            //set SPS to 500
            setNewSPStoAllADCs(SPS_VALUE_500);
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <main+0x3cc>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fa10 	bl	800201c <setNewSPStoAllADCs>
            break;
 8000bfc:	e031      	b.n	8000c62 <main+0x3d6>
          case '4':
            //set SPS to 1000
            setNewSPStoAllADCs(SPS_VALUE_1000);
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <main+0x3d0>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fa0a 	bl	800201c <setNewSPStoAllADCs>
            break;
 8000c08:	e02b      	b.n	8000c62 <main+0x3d6>
 8000c0a:	bf00      	nop
 8000c0c:	e000edf0 	.word	0xe000edf0
 8000c10:	e0001000 	.word	0xe0001000
 8000c14:	24008758 	.word	0x24008758
 8000c18:	24008724 	.word	0x24008724
 8000c1c:	24000000 	.word	0x24000000
 8000c20:	2400878c 	.word	0x2400878c
 8000c24:	2400861c 	.word	0x2400861c
 8000c28:	58020000 	.word	0x58020000
 8000c2c:	58020800 	.word	0x58020800
 8000c30:	58020400 	.word	0x58020400
 8000c34:	2400878e 	.word	0x2400878e
 8000c38:	2400878d 	.word	0x2400878d
 8000c3c:	2400876c 	.word	0x2400876c
 8000c40:	24008790 	.word	0x24008790
 8000c44:	24008768 	.word	0x24008768
 8000c48:	2400878f 	.word	0x2400878f
 8000c4c:	24008771 	.word	0x24008771
 8000c50:	24000001 	.word	0x24000001
 8000c54:	24000002 	.word	0x24000002
 8000c58:	24000003 	.word	0x24000003
 8000c5c:	24000004 	.word	0x24000004
//FIXME
          default:
            break;
 8000c60:	bf00      	nop
        }
        uartNewCommand = false;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <main+0x408>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
      }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6e:	480a      	ldr	r0, [pc, #40]	; (8000c98 <main+0x40c>)
 8000c70:	f005 fba0 	bl	80063b4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c78:	f002 f99a 	bl	8002fb0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <main+0x40c>)
 8000c84:	f005 fb96 	bl	80063b4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c8c:	f002 f990 	bl	8002fb0 <HAL_Delay>
      if (uartNewCommand == true){
 8000c90:	e688      	b.n	80009a4 <main+0x118>
 8000c92:	bf00      	nop
 8000c94:	2400878e 	.word	0x2400878e
 8000c98:	58020000 	.word	0x58020000

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09c      	sub	sp, #112	; 0x70
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	224c      	movs	r2, #76	; 0x4c
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f010 ff38 	bl	8011b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f010 ff32 	bl	8011b20 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <SystemClock_Config+0xf0>)
 8000cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f005 fba8 	bl	800641c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <SystemClock_Config+0xf4>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a2e      	ldr	r2, [pc, #184]	; (8000d90 <SystemClock_Config+0xf4>)
 8000cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <SystemClock_Config+0xf4>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce8:	bf00      	nop
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <SystemClock_Config+0xf4>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf6:	d1f8      	bne.n	8000cea <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <SystemClock_Config+0xf0>)
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	4a23      	ldr	r2, [pc, #140]	; (8000d8c <SystemClock_Config+0xf0>)
 8000cfe:	f023 0303 	bic.w	r3, r3, #3
 8000d02:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d04:	2302      	movs	r3, #2
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0c:	2340      	movs	r3, #64	; 0x40
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d10:	2302      	movs	r3, #2
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d14:	2300      	movs	r3, #0
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000d1c:	2323      	movs	r3, #35	; 0x23
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 fba7 	bl	8006490 <HAL_RCC_OscConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d48:	f000 fd7c 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4c:	233f      	movs	r3, #63	; 0x3f
 8000d4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d50:	2303      	movs	r3, #3
 8000d52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d5c:	2340      	movs	r3, #64	; 0x40
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d6a:	2340      	movs	r3, #64	; 0x40
 8000d6c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2107      	movs	r1, #7
 8000d72:	4618      	mov	r0, r3
 8000d74:	f005 ff92 	bl	8006c9c <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d7e:	f000 fd61 	bl	8001844 <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3770      	adds	r7, #112	; 0x70
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	58024800 	.word	0x58024800

08000d94 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0ae      	sub	sp, #184	; 0xb8
 8000d98:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	22b8      	movs	r2, #184	; 0xb8
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f010 febd 	bl	8011b20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <PeriphCommonClock_Config+0x60>)
 8000da8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000daa:	2304      	movs	r3, #4
 8000dac:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000dae:	2308      	movs	r3, #8
 8000db0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dbe:	23c0      	movs	r3, #192	; 0xc0
 8000dc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f006 faea 	bl	80073b4 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000de6:	f000 fd2d 	bl	8001844 <Error_Handler>
  }
}
 8000dea:	bf00      	nop
 8000dec:	37b8      	adds	r7, #184	; 0xb8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	81010000 	.word	0x81010000

08000df8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_SDMMC1_SD_Init+0x34>)
 8000dfe:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <MX_SDMMC1_SD_Init+0x38>)
 8000e00:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_SDMMC1_SD_Init+0x34>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_SDMMC1_SD_Init+0x34>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_SDMMC1_SD_Init+0x34>)
 8000e10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e14:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <MX_SDMMC1_SD_Init+0x34>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 64;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <MX_SDMMC1_SD_Init+0x34>)
 8000e1e:	2240      	movs	r2, #64	; 0x40
 8000e20:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	240080a0 	.word	0x240080a0
 8000e30:	52007000 	.word	0x52007000

08000e34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e3a:	4a29      	ldr	r2, [pc, #164]	; (8000ee0 <MX_SPI1_Init+0xac>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_SPI1_Init+0xa8>)
 8000ec8:	f00a f81a 	bl	800af00 <HAL_SPI_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000ed2:	f000 fcb7 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2400811c 	.word	0x2400811c
 8000ee0:	40013000 	.word	0x40013000

08000ee4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000eea:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <MX_SPI2_Init+0xac>)
 8000eec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eee:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000ef0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ef4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000efe:	2207      	movs	r2, #7
 8000f00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_SPI2_Init+0xa8>)
 8000f78:	f009 ffc2 	bl	800af00 <HAL_SPI_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000f82:	f000 fc5f 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	240081a4 	.word	0x240081a4
 8000f90:	40003800 	.word	0x40003800

08000f94 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_SPI4_Init+0xa8>)
 8000f9a:	4a29      	ldr	r2, [pc, #164]	; (8001040 <MX_SPI4_Init+0xac>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fa0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fae:	2207      	movs	r2, #7
 8000fb0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fb8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fc0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fc8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_SPI4_Init+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_SPI4_Init+0xa8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_SPI4_Init+0xa8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_SPI4_Init+0xa8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_SPI4_Init+0xa8>)
 8001004:	2200      	movs	r2, #0
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_SPI4_Init+0xa8>)
 800100a:	2200      	movs	r2, #0
 800100c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_SPI4_Init+0xa8>)
 8001010:	2200      	movs	r2, #0
 8001012:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_SPI4_Init+0xa8>)
 8001016:	2200      	movs	r2, #0
 8001018:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_SPI4_Init+0xa8>)
 800101c:	2200      	movs	r2, #0
 800101e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_SPI4_Init+0xa8>)
 8001022:	2200      	movs	r2, #0
 8001024:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_SPI4_Init+0xa8>)
 8001028:	f009 ff6a 	bl	800af00 <HAL_SPI_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8001032:	f000 fc07 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2400822c 	.word	0x2400822c
 8001040:	40013400 	.word	0x40013400

08001044 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09c      	sub	sp, #112	; 0x70
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001064:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2234      	movs	r2, #52	; 0x34
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f010 fd4e 	bl	8011b20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <MX_TIM1_Init+0x150>)
 8001086:	4a44      	ldr	r2, [pc, #272]	; (8001198 <MX_TIM1_Init+0x154>)
 8001088:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <MX_TIM1_Init+0x150>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b40      	ldr	r3, [pc, #256]	; (8001194 <MX_TIM1_Init+0x150>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <MX_TIM1_Init+0x150>)
 8001098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <MX_TIM1_Init+0x150>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010a4:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <MX_TIM1_Init+0x150>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <MX_TIM1_Init+0x150>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010b0:	4838      	ldr	r0, [pc, #224]	; (8001194 <MX_TIM1_Init+0x150>)
 80010b2:	f00a ff7a 	bl	800bfaa <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010bc:	f000 fbc2 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010ca:	4619      	mov	r1, r3
 80010cc:	4831      	ldr	r0, [pc, #196]	; (8001194 <MX_TIM1_Init+0x150>)
 80010ce:	f00b fa35 	bl	800c53c <HAL_TIM_ConfigClockSource>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010d8:	f000 fbb4 	bl	8001844 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010dc:	482d      	ldr	r0, [pc, #180]	; (8001194 <MX_TIM1_Init+0x150>)
 80010de:	f00a ffbb 	bl	800c058 <HAL_TIM_PWM_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010e8:	f000 fbac 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010fc:	4619      	mov	r1, r3
 80010fe:	4825      	ldr	r0, [pc, #148]	; (8001194 <MX_TIM1_Init+0x150>)
 8001100:	f00c f978 	bl	800d3f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800110a:	f000 fb9b 	bl	8001844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110e:	2360      	movs	r3, #96	; 0x60
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001116:	2300      	movs	r3, #0
 8001118:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	4818      	ldr	r0, [pc, #96]	; (8001194 <MX_TIM1_Init+0x150>)
 8001134:	f00b f8ee 	bl	800c314 <HAL_TIM_PWM_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800113e:	f000 fb81 	bl	8001844 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001164:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <MX_TIM1_Init+0x150>)
 8001178:	f00c f9ca 	bl	800d510 <HAL_TIMEx_ConfigBreakDeadTime>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001182:	f000 fb5f 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001186:	4803      	ldr	r0, [pc, #12]	; (8001194 <MX_TIM1_Init+0x150>)
 8001188:	f001 fb86 	bl	8002898 <HAL_TIM_MspPostInit>

}
 800118c:	bf00      	nop
 800118e:	3770      	adds	r7, #112	; 0x70
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24008584 	.word	0x24008584
 8001198:	40010000 	.word	0x40010000

0800119c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <MX_TIM2_Init+0xe0>)
 80011cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <MX_TIM2_Init+0xe0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <MX_TIM2_Init+0xe0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <MX_TIM2_Init+0xe0>)
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <MX_TIM2_Init+0xe0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_TIM2_Init+0xe0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f2:	4822      	ldr	r0, [pc, #136]	; (800127c <MX_TIM2_Init+0xe0>)
 80011f4:	f00a fed9 	bl	800bfaa <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80011fe:	f000 fb21 	bl	8001844 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001202:	481e      	ldr	r0, [pc, #120]	; (800127c <MX_TIM2_Init+0xe0>)
 8001204:	f00a ff89 	bl	800c11a <HAL_TIM_IC_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800120e:	f000 fb19 	bl	8001844 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001212:	2307      	movs	r3, #7
 8001214:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4816      	ldr	r0, [pc, #88]	; (800127c <MX_TIM2_Init+0xe0>)
 8001222:	f00b fa83 	bl	800c72c <HAL_TIM_SlaveConfigSynchro>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800122c:	f000 fb0a 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <MX_TIM2_Init+0xe0>)
 8001240:	f00c f8d8 	bl	800d3f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800124a:	f000 fafb 	bl	8001844 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001252:	2301      	movs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_TIM2_Init+0xe0>)
 8001266:	f00a ffb9 	bl	800c1dc <HAL_TIM_IC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001270:	f000 fae8 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3730      	adds	r7, #48	; 0x30
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	240085d0 	.word	0x240085d0

08001280 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <MX_UART4_Init+0x90>)
 8001286:	4a23      	ldr	r2, [pc, #140]	; (8001314 <MX_UART4_Init+0x94>)
 8001288:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 3000000;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_UART4_Init+0x90>)
 800128c:	4a22      	ldr	r2, [pc, #136]	; (8001318 <MX_UART4_Init+0x98>)
 800128e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_UART4_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_UART4_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_UART4_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_UART4_Init+0x90>)
 80012a4:	220c      	movs	r2, #12
 80012a6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_UART4_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_UART4_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_UART4_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_UART4_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_UART4_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_UART4_Init+0x90>)
 80012c8:	f00c f9c2 	bl	800d650 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 80012d2:	f000 fab7 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_UART4_Init+0x90>)
 80012da:	f00e fd5a 	bl	800fd92 <HAL_UARTEx_SetTxFifoThreshold>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 80012e4:	f000 faae 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e8:	2100      	movs	r1, #0
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <MX_UART4_Init+0x90>)
 80012ec:	f00e fd8f 	bl	800fe0e <HAL_UARTEx_SetRxFifoThreshold>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 80012f6:	f000 faa5 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_UART4_Init+0x90>)
 80012fc:	f00e fd10 	bl	800fd20 <HAL_UARTEx_DisableFifoMode>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8001306:	f000 fa9d 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2400861c 	.word	0x2400861c
 8001314:	40004c00 	.word	0x40004c00
 8001318:	002dc6c0 	.word	0x002dc6c0

0800131c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <MX_DMA_Init+0xbc>)
 8001324:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001328:	4a2b      	ldr	r2, [pc, #172]	; (80013d8 <MX_DMA_Init+0xbc>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <MX_DMA_Init+0xbc>)
 8001334:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <MX_DMA_Init+0xbc>)
 8001342:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001346:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <MX_DMA_Init+0xbc>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <MX_DMA_Init+0xbc>)
 8001352:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	200b      	movs	r0, #11
 8001364:	f001 ff47 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001368:	200b      	movs	r0, #11
 800136a:	f001 ff5e 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	200c      	movs	r0, #12
 8001374:	f001 ff3f 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001378:	200c      	movs	r0, #12
 800137a:	f001 ff56 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	200d      	movs	r0, #13
 8001384:	f001 ff37 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001388:	200d      	movs	r0, #13
 800138a:	f001 ff4e 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	200e      	movs	r0, #14
 8001394:	f001 ff2f 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001398:	200e      	movs	r0, #14
 800139a:	f001 ff46 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	200f      	movs	r0, #15
 80013a4:	f001 ff27 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80013a8:	200f      	movs	r0, #15
 80013aa:	f001 ff3e 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	202f      	movs	r0, #47	; 0x2f
 80013b4:	f001 ff1f 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80013b8:	202f      	movs	r0, #47	; 0x2f
 80013ba:	f001 ff36 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2038      	movs	r0, #56	; 0x38
 80013c4:	f001 ff17 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013c8:	2038      	movs	r0, #56	; 0x38
 80013ca:	f001 ff2e 	bl	800322a <HAL_NVIC_EnableIRQ>

}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	58024400 	.word	0x58024400

080013dc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80013f4:	4b20      	ldr	r3, [pc, #128]	; (8001478 <MX_FMC_Init+0x9c>)
 80013f6:	4a21      	ldr	r2, [pc, #132]	; (800147c <MX_FMC_Init+0xa0>)
 80013f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <MX_FMC_Init+0x9c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_FMC_Init+0x9c>)
 8001402:	2201      	movs	r2, #1
 8001404:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <MX_FMC_Init+0x9c>)
 8001408:	2208      	movs	r2, #8
 800140a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_FMC_Init+0x9c>)
 800140e:	2210      	movs	r2, #16
 8001410:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <MX_FMC_Init+0x9c>)
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_FMC_Init+0x9c>)
 800141a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800141e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_FMC_Init+0x9c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_FMC_Init+0x9c>)
 8001428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800142c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_FMC_Init+0x9c>)
 8001430:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_FMC_Init+0x9c>)
 8001438:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800143e:	2302      	movs	r3, #2
 8001440:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 8001442:	2309      	movs	r3, #9
 8001444:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8001446:	2306      	movs	r3, #6
 8001448:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 800144a:	2309      	movs	r3, #9
 800144c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 800144e:	2304      	movs	r3, #4
 8001450:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 8001452:	2303      	movs	r3, #3
 8001454:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 8001456:	2303      	movs	r3, #3
 8001458:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <MX_FMC_Init+0x9c>)
 8001460:	f009 fcb4 	bl	800adcc <HAL_SDRAM_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 800146a:	f000 f9eb 	bl	8001844 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800146e:	bf00      	nop
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24008724 	.word	0x24008724
 800147c:	52004140 	.word	0x52004140

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	; 0x38
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	4b7d      	ldr	r3, [pc, #500]	; (800168c <MX_GPIO_Init+0x20c>)
 8001498:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800149c:	4a7b      	ldr	r2, [pc, #492]	; (800168c <MX_GPIO_Init+0x20c>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014a6:	4b79      	ldr	r3, [pc, #484]	; (800168c <MX_GPIO_Init+0x20c>)
 80014a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	623b      	str	r3, [r7, #32]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b4:	4b75      	ldr	r3, [pc, #468]	; (800168c <MX_GPIO_Init+0x20c>)
 80014b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ba:	4a74      	ldr	r2, [pc, #464]	; (800168c <MX_GPIO_Init+0x20c>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014c4:	4b71      	ldr	r3, [pc, #452]	; (800168c <MX_GPIO_Init+0x20c>)
 80014c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d2:	4b6e      	ldr	r3, [pc, #440]	; (800168c <MX_GPIO_Init+0x20c>)
 80014d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014d8:	4a6c      	ldr	r2, [pc, #432]	; (800168c <MX_GPIO_Init+0x20c>)
 80014da:	f043 0320 	orr.w	r3, r3, #32
 80014de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014e2:	4b6a      	ldr	r3, [pc, #424]	; (800168c <MX_GPIO_Init+0x20c>)
 80014e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f0:	4b66      	ldr	r3, [pc, #408]	; (800168c <MX_GPIO_Init+0x20c>)
 80014f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014f6:	4a65      	ldr	r2, [pc, #404]	; (800168c <MX_GPIO_Init+0x20c>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001500:	4b62      	ldr	r3, [pc, #392]	; (800168c <MX_GPIO_Init+0x20c>)
 8001502:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <MX_GPIO_Init+0x20c>)
 8001510:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001514:	4a5d      	ldr	r2, [pc, #372]	; (800168c <MX_GPIO_Init+0x20c>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800151e:	4b5b      	ldr	r3, [pc, #364]	; (800168c <MX_GPIO_Init+0x20c>)
 8001520:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b57      	ldr	r3, [pc, #348]	; (800168c <MX_GPIO_Init+0x20c>)
 800152e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001532:	4a56      	ldr	r2, [pc, #344]	; (800168c <MX_GPIO_Init+0x20c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <MX_GPIO_Init+0x20c>)
 800153e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800154a:	4b50      	ldr	r3, [pc, #320]	; (800168c <MX_GPIO_Init+0x20c>)
 800154c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001550:	4a4e      	ldr	r2, [pc, #312]	; (800168c <MX_GPIO_Init+0x20c>)
 8001552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001556:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800155a:	4b4c      	ldr	r3, [pc, #304]	; (800168c <MX_GPIO_Init+0x20c>)
 800155c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <MX_GPIO_Init+0x20c>)
 800156a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800156e:	4a47      	ldr	r2, [pc, #284]	; (800168c <MX_GPIO_Init+0x20c>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001578:	4b44      	ldr	r3, [pc, #272]	; (800168c <MX_GPIO_Init+0x20c>)
 800157a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	2110      	movs	r1, #16
 800158a:	4841      	ldr	r0, [pc, #260]	; (8001690 <MX_GPIO_Init+0x210>)
 800158c:	f004 ff12 	bl	80063b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 8001596:	483f      	ldr	r0, [pc, #252]	; (8001694 <MX_GPIO_Init+0x214>)
 8001598:	f004 ff0c 	bl	80063b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MULT_IN_Y_GPIO_Port, MULT_IN_Y_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2110      	movs	r1, #16
 80015a0:	483d      	ldr	r0, [pc, #244]	; (8001698 <MX_GPIO_Init+0x218>)
 80015a2:	f004 ff07 	bl	80063b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MULT_IN_Z_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f241 0101 	movw	r1, #4097	; 0x1001
 80015ac:	483b      	ldr	r0, [pc, #236]	; (800169c <MX_GPIO_Init+0x21c>)
 80015ae:	f004 ff01 	bl	80063b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 80015b8:	4839      	ldr	r0, [pc, #228]	; (80016a0 <MX_GPIO_Init+0x220>)
 80015ba:	f004 fefb 	bl	80063b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015be:	2310      	movs	r3, #16
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	482e      	ldr	r0, [pc, #184]	; (8001690 <MX_GPIO_Init+0x210>)
 80015d6:	f004 fd3d 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80015da:	f44f 7320 	mov.w	r3, #640	; 0x280
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	482c      	ldr	r0, [pc, #176]	; (80016a4 <MX_GPIO_Init+0x224>)
 80015f2:	f004 fd2f 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_X_Pin PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015f6:	f44f 53f1 	mov.w	r3, #7712	; 0x1e20
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4821      	ldr	r0, [pc, #132]	; (8001694 <MX_GPIO_Init+0x214>)
 8001610:	f004 fd20 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pin : MULT_IN_Y_Pin */
  GPIO_InitStruct.Pin = MULT_IN_Y_Pin;
 8001614:	2310      	movs	r3, #16
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MULT_IN_Y_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	481b      	ldr	r0, [pc, #108]	; (8001698 <MX_GPIO_Init+0x218>)
 800162c:	f004 fd12 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_Z_Pin PB12 */
  GPIO_InitStruct.Pin = MULT_IN_Z_Pin|GPIO_PIN_12;
 8001630:	f241 0301 	movw	r3, #4097	; 0x1001
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001646:	4619      	mov	r1, r3
 8001648:	4814      	ldr	r0, [pc, #80]	; (800169c <MX_GPIO_Init+0x21c>)
 800164a:	f004 fd03 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	4619      	mov	r1, r3
 8001660:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MX_GPIO_Init+0x228>)
 8001662:	f004 fcf7 	bl	8006054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 USB_C_Reset_Pin USB_C_Alert_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin;
 8001666:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4808      	ldr	r0, [pc, #32]	; (80016a0 <MX_GPIO_Init+0x220>)
 8001680:	f004 fce8 	bl	8006054 <HAL_GPIO_Init>

}
 8001684:	bf00      	nop
 8001686:	3738      	adds	r7, #56	; 0x38
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	58024400 	.word	0x58024400
 8001690:	58021000 	.word	0x58021000
 8001694:	58020000 	.word	0x58020000
 8001698:	58020800 	.word	0x58020800
 800169c:	58020400 	.word	0x58020400
 80016a0:	58021800 	.word	0x58021800
 80016a4:	58021400 	.word	0x58021400
 80016a8:	58020c00 	.word	0x58020c00

080016ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// TODO:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]

  //SPI1 MISO
//  if ((GPIO_Pin == GPIO_PIN_6) && (enableSPI1Interrupt == true)){
  if (GPIO_Pin == GPIO_PIN_6){
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	2b40      	cmp	r3, #64	; 0x40
 80016ba:	d109      	bne.n	80016d0 <HAL_GPIO_EXTI_Callback+0x24>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80016bc:	2017      	movs	r0, #23
 80016be:	f001 fdc2 	bl	8003246 <HAL_NVIC_DisableIRQ>
//    enableSPI1Interrupt = false;
    HAL_SPI_TransmitReceive_DMA(&hspi1, pTxData, spi1Buffer, 4);
 80016c2:	2304      	movs	r3, #4
 80016c4:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <HAL_GPIO_EXTI_Callback+0x84>)
 80016c6:	491b      	ldr	r1, [pc, #108]	; (8001734 <HAL_GPIO_EXTI_Callback+0x88>)
 80016c8:	481b      	ldr	r0, [pc, #108]	; (8001738 <HAL_GPIO_EXTI_Callback+0x8c>)
 80016ca:	f009 ff11 	bl	800b4f0 <HAL_SPI_TransmitReceive_DMA>
  }
  else if (GPIO_Pin == GPIO_PIN_9){
    __NOP();
    sendToSDcard = true;
  }
}
 80016ce:	e02b      	b.n	8001728 <HAL_GPIO_EXTI_Callback+0x7c>
  else if (GPIO_Pin == GPIO_PIN_14){
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016d6:	d109      	bne.n	80016ec <HAL_GPIO_EXTI_Callback+0x40>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80016d8:	2028      	movs	r0, #40	; 0x28
 80016da:	f001 fdb4 	bl	8003246 <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi2, pTxData, spi2Buffer, 4);
 80016de:	2304      	movs	r3, #4
 80016e0:	4a16      	ldr	r2, [pc, #88]	; (800173c <HAL_GPIO_EXTI_Callback+0x90>)
 80016e2:	4914      	ldr	r1, [pc, #80]	; (8001734 <HAL_GPIO_EXTI_Callback+0x88>)
 80016e4:	4816      	ldr	r0, [pc, #88]	; (8001740 <HAL_GPIO_EXTI_Callback+0x94>)
 80016e6:	f009 ff03 	bl	800b4f0 <HAL_SPI_TransmitReceive_DMA>
}
 80016ea:	e01d      	b.n	8001728 <HAL_GPIO_EXTI_Callback+0x7c>
  else if (GPIO_Pin == GPIO_PIN_5){
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	2b20      	cmp	r3, #32
 80016f0:	d10d      	bne.n	800170e <HAL_GPIO_EXTI_Callback+0x62>
    t1 = DWT->CYCCNT;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_GPIO_EXTI_Callback+0x98>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_GPIO_EXTI_Callback+0x9c>)
 80016f8:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80016fa:	2017      	movs	r0, #23
 80016fc:	f001 fda3 	bl	8003246 <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi4, pTxData, spi4Buffer, 4);
 8001700:	2304      	movs	r3, #4
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001704:	490b      	ldr	r1, [pc, #44]	; (8001734 <HAL_GPIO_EXTI_Callback+0x88>)
 8001706:	4812      	ldr	r0, [pc, #72]	; (8001750 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001708:	f009 fef2 	bl	800b4f0 <HAL_SPI_TransmitReceive_DMA>
}
 800170c:	e00c      	b.n	8001728 <HAL_GPIO_EXTI_Callback+0x7c>
  else if (GPIO_Pin == GPIO_PIN_7){
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	2b80      	cmp	r3, #128	; 0x80
 8001712:	d101      	bne.n	8001718 <HAL_GPIO_EXTI_Callback+0x6c>
    __NOP();
 8001714:	bf00      	nop
}
 8001716:	e007      	b.n	8001728 <HAL_GPIO_EXTI_Callback+0x7c>
  else if (GPIO_Pin == GPIO_PIN_9){
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800171e:	d103      	bne.n	8001728 <HAL_GPIO_EXTI_Callback+0x7c>
    __NOP();
 8001720:	bf00      	nop
    sendToSDcard = true;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	24008778 	.word	0x24008778
 8001734:	24008774 	.word	0x24008774
 8001738:	2400811c 	.word	0x2400811c
 800173c:	2400877c 	.word	0x2400877c
 8001740:	240081a4 	.word	0x240081a4
 8001744:	e0001000 	.word	0xe0001000
 8001748:	24008784 	.word	0x24008784
 800174c:	24008780 	.word	0x24008780
 8001750:	2400822c 	.word	0x2400822c
 8001754:	24008770 	.word	0x24008770

08001758 <HAL_SPI_TxRxCpltCallback>:

//FIXME: changed here from TxRx to Rx
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi1){
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_SPI_TxRxCpltCallback+0x80>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d10c      	bne.n	8001782 <HAL_SPI_TxRxCpltCallback+0x2a>
    spi_send_all_three_values(spi1Buffer, spi2Buffer, spi4Buffer);
 8001768:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <HAL_SPI_TxRxCpltCallback+0x84>)
 800176a:	491d      	ldr	r1, [pc, #116]	; (80017e0 <HAL_SPI_TxRxCpltCallback+0x88>)
 800176c:	481d      	ldr	r0, [pc, #116]	; (80017e4 <HAL_SPI_TxRxCpltCallback+0x8c>)
 800176e:	f000 fb8f 	bl	8001e90 <spi_send_all_three_values>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001776:	2240      	movs	r2, #64	; 0x40
 8001778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800177c:	2017      	movs	r0, #23
 800177e:	f001 fd54 	bl	800322a <HAL_NVIC_EnableIRQ>
  }

  if (hspi == &hspi2){
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_SPI_TxRxCpltCallback+0x90>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d108      	bne.n	800179c <HAL_SPI_TxRxCpltCallback+0x44>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001796:	2028      	movs	r0, #40	; 0x28
 8001798:	f001 fd47 	bl	800322a <HAL_NVIC_EnableIRQ>
  }

  if (hspi == &hspi4){
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <HAL_SPI_TxRxCpltCallback+0x94>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d115      	bne.n	80017d0 <HAL_SPI_TxRxCpltCallback+0x78>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 80017a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a8:	2220      	movs	r2, #32
 80017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017ae:	2017      	movs	r0, #23
 80017b0:	f001 fd3b 	bl	800322a <HAL_NVIC_EnableIRQ>
    enableSPI4Interrupt = true;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_SPI_TxRxCpltCallback+0x98>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
    t2 = DWT->CYCCNT;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_SPI_TxRxCpltCallback+0x9c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_SPI_TxRxCpltCallback+0xa0>)
 80017c0:	6013      	str	r3, [r2, #0]
    unsigned long diff = t2 - t1;
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_SPI_TxRxCpltCallback+0xa0>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_SPI_TxRxCpltCallback+0xa4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	60fb      	str	r3, [r7, #12]
    __NOP();
 80017ce:	bf00      	nop
  }
}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2400811c 	.word	0x2400811c
 80017dc:	24008780 	.word	0x24008780
 80017e0:	2400877c 	.word	0x2400877c
 80017e4:	24008778 	.word	0x24008778
 80017e8:	240081a4 	.word	0x240081a4
 80017ec:	2400822c 	.word	0x2400822c
 80017f0:	24008791 	.word	0x24008791
 80017f4:	e0001000 	.word	0xe0001000
 80017f8:	24008788 	.word	0x24008788
 80017fc:	24008784 	.word	0x24008784

08001800 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if (huart == &huart4){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_UART_RxCpltCallback+0x34>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d10c      	bne.n	800182a <HAL_UART_RxCpltCallback+0x2a>
    HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8001810:	2201      	movs	r2, #1
 8001812:	4909      	ldr	r1, [pc, #36]	; (8001838 <HAL_UART_RxCpltCallback+0x38>)
 8001814:	4807      	ldr	r0, [pc, #28]	; (8001834 <HAL_UART_RxCpltCallback+0x34>)
 8001816:	f00c f801 	bl	800d81c <HAL_UART_Receive_IT>
    uartCommand = rxUart4Buffer[0];
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <HAL_UART_RxCpltCallback+0x38>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_UART_RxCpltCallback+0x3c>)
 8001822:	701a      	strb	r2, [r3, #0]
    uartNewCommand = true;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_UART_RxCpltCallback+0x40>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
//    uartCommand = rxUart5Buffer[0];
//    uartNewCommand = true;
  }


}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2400861c 	.word	0x2400861c
 8001838:	2400878c 	.word	0x2400878c
 800183c:	2400878d 	.word	0x2400878d
 8001840:	2400878e 	.word	0x2400878e

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <sd_card_init>:
FILINFO fno;
uint8_t nameFileNumber = 1;
bool newMeasurement = false;

void sd_card_init (void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	4907      	ldr	r1, [pc, #28]	; (8001874 <sd_card_init+0x24>)
 8001858:	4807      	ldr	r0, [pc, #28]	; (8001878 <sd_card_init+0x28>)
 800185a:	f010 f895 	bl	8011988 <f_mount>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <sd_card_init+0x2c>)
 8001864:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK){
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <sd_card_init+0x2c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d000      	beq.n	8001870 <sd_card_init+0x20>
    __NOP(); // TODO error handling
 800186e:	bf00      	nop
  }
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	240087a4 	.word	0x240087a4
 8001878:	240087a8 	.word	0x240087a8
 800187c:	24008792 	.word	0x24008792

08001880 <spi1_adc_init>:


uint32_t readIndex=0;
uint8_t adc_values[80];

void spi1_adc_init(uint8_t spsValue){
 8001880:	b580      	push	{r7, lr}
 8001882:	b08e      	sub	sp, #56	; 0x38
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  //GPIOG->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 800188a:	2320      	movs	r3, #32
 800188c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 8001890:	2310      	movs	r3, #16
 8001892:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001894:	2301      	movs	r3, #1
 8001896:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 800189a:	2300      	movs	r3, #0
 800189c:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 800189e:	2310      	movs	r3, #16
 80018a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 80018a4:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80018a8:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 80018aa:	2302      	movs	r3, #2
 80018ac:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 80018ae:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80018b2:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 80018b4:	2328      	movs	r3, #40	; 0x28
 80018b6:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 80018b8:	2305      	movs	r3, #5
 80018ba:	743b      	strb	r3, [r7, #16]
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 80018c0:	2306      	movs	r3, #6
 80018c2:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 80018c4:	2300      	movs	r3, #0
 80018c6:	813b      	strh	r3, [r7, #8]

  /*Start init ADC1*/
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ce:	4856      	ldr	r0, [pc, #344]	; (8001a28 <spi1_adc_init+0x1a8>)
 80018d0:	f004 fd70 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi1, adcChannelRegister, 1, 100);
 80018d4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	4853      	ldr	r0, [pc, #332]	; (8001a2c <spi1_adc_init+0x1ac>)
 80018de:	f009 fc15 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcChannel, 2, 100);
 80018e2:	f107 0120 	add.w	r1, r7, #32
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2202      	movs	r2, #2
 80018ea:	4850      	ldr	r0, [pc, #320]	; (8001a2c <spi1_adc_init+0x1ac>)
 80018ec:	f009 fc0e 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f6:	484c      	ldr	r0, [pc, #304]	; (8001a28 <spi1_adc_init+0x1a8>)
 80018f8:	f004 fd5c 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80018fc:	2001      	movs	r0, #1
 80018fe:	f001 fb57 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001908:	4847      	ldr	r0, [pc, #284]	; (8001a28 <spi1_adc_init+0x1a8>)
 800190a:	f004 fd53 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi1, setupConfigurationRegister, 1, 100);
 800190e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001912:	2364      	movs	r3, #100	; 0x64
 8001914:	2201      	movs	r2, #1
 8001916:	4845      	ldr	r0, [pc, #276]	; (8001a2c <spi1_adc_init+0x1ac>)
 8001918:	f009 fbf8 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, setupConfiguration, 2, 100);
 800191c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001920:	2364      	movs	r3, #100	; 0x64
 8001922:	2202      	movs	r2, #2
 8001924:	4841      	ldr	r0, [pc, #260]	; (8001a2c <spi1_adc_init+0x1ac>)
 8001926:	f009 fbf1 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001930:	483d      	ldr	r0, [pc, #244]	; (8001a28 <spi1_adc_init+0x1a8>)
 8001932:	f004 fd3f 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001936:	2001      	movs	r0, #1
 8001938:	f001 fb3a 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001942:	4839      	ldr	r0, [pc, #228]	; (8001a28 <spi1_adc_init+0x1a8>)
 8001944:	f004 fd36 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi1, adcModeRegister, 1, 100);
 8001948:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800194c:	2364      	movs	r3, #100	; 0x64
 800194e:	2201      	movs	r2, #1
 8001950:	4836      	ldr	r0, [pc, #216]	; (8001a2c <spi1_adc_init+0x1ac>)
 8001952:	f009 fbdb 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcMode, 2, 100);
 8001956:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	2202      	movs	r2, #2
 800195e:	4833      	ldr	r0, [pc, #204]	; (8001a2c <spi1_adc_init+0x1ac>)
 8001960:	f009 fbd4 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800196a:	482f      	ldr	r0, [pc, #188]	; (8001a28 <spi1_adc_init+0x1a8>)
 800196c:	f004 fd22 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001970:	2001      	movs	r0, #1
 8001972:	f001 fb1d 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800197c:	482a      	ldr	r0, [pc, #168]	; (8001a28 <spi1_adc_init+0x1a8>)
 800197e:	f004 fd19 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi1, dataWriteSPS_REGISTER, 1, 100);
 8001982:	f107 0114 	add.w	r1, r7, #20
 8001986:	2364      	movs	r3, #100	; 0x64
 8001988:	2201      	movs	r2, #1
 800198a:	4828      	ldr	r0, [pc, #160]	; (8001a2c <spi1_adc_init+0x1ac>)
 800198c:	f009 fbbe 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSPS, 2, 100);
 8001990:	f107 0110 	add.w	r1, r7, #16
 8001994:	2364      	movs	r3, #100	; 0x64
 8001996:	2202      	movs	r2, #2
 8001998:	4824      	ldr	r0, [pc, #144]	; (8001a2c <spi1_adc_init+0x1ac>)
 800199a:	f009 fbb7 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a4:	4820      	ldr	r0, [pc, #128]	; (8001a28 <spi1_adc_init+0x1a8>)
 80019a6:	f004 fd05 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f001 fb00 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b6:	481c      	ldr	r0, [pc, #112]	; (8001a28 <spi1_adc_init+0x1a8>)
 80019b8:	f004 fcfc 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError_REGISTER, 1, 100);
 80019bc:	f107 010c 	add.w	r1, r7, #12
 80019c0:	2364      	movs	r3, #100	; 0x64
 80019c2:	2201      	movs	r2, #1
 80019c4:	4819      	ldr	r0, [pc, #100]	; (8001a2c <spi1_adc_init+0x1ac>)
 80019c6:	f009 fba1 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError, 2, 100);
 80019ca:	f107 0108 	add.w	r1, r7, #8
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	2202      	movs	r2, #2
 80019d2:	4816      	ldr	r0, [pc, #88]	; (8001a2c <spi1_adc_init+0x1ac>)
 80019d4:	f009 fb9a 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019de:	4812      	ldr	r0, [pc, #72]	; (8001a28 <spi1_adc_init+0x1a8>)
 80019e0:	f004 fce8 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f001 fae3 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f0:	480d      	ldr	r0, [pc, #52]	; (8001a28 <spi1_adc_init+0x1a8>)
 80019f2:	f004 fcdf 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi1, continuousConvEnableRegister, 1, 100);
 80019f6:	f107 011c 	add.w	r1, r7, #28
 80019fa:	2364      	movs	r3, #100	; 0x64
 80019fc:	2201      	movs	r2, #1
 80019fe:	480b      	ldr	r0, [pc, #44]	; (8001a2c <spi1_adc_init+0x1ac>)
 8001a00:	f009 fb84 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, continuousConvEnable, 2, 100);
 8001a04:	f107 0118 	add.w	r1, r7, #24
 8001a08:	2364      	movs	r3, #100	; 0x64
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	4807      	ldr	r0, [pc, #28]	; (8001a2c <spi1_adc_init+0x1ac>)
 8001a0e:	f009 fb7d 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <spi1_adc_init+0x1a8>)
 8001a1a:	f004 fccb 	bl	80063b4 <HAL_GPIO_WritePin>
}
 8001a1e:	bf00      	nop
 8001a20:	3738      	adds	r7, #56	; 0x38
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	58021800 	.word	0x58021800
 8001a2c:	2400811c 	.word	0x2400811c

08001a30 <spi2_adc_init>:

void spi2_adc_init(uint8_t spsValue){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08e      	sub	sp, #56	; 0x38
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 8001a40:	2310      	movs	r3, #16
 8001a42:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 8001a4e:	2310      	movs	r3, #16
 8001a50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001a54:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001a58:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 8001a5e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001a62:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001a64:	2328      	movs	r3, #40	; 0x28
 8001a66:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001a68:	2305      	movs	r3, #5
 8001a6a:	743b      	strb	r3, [r7, #16]
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 8001a70:	2306      	movs	r3, #6
 8001a72:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8001a74:	2300      	movs	r3, #0
 8001a76:	813b      	strh	r3, [r7, #8]

  /*Start init ADC2*/
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7e:	4856      	ldr	r0, [pc, #344]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001a80:	f004 fc98 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi2, adcChannelRegister, 1, 100);
 8001a84:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001a88:	2364      	movs	r3, #100	; 0x64
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4853      	ldr	r0, [pc, #332]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001a8e:	f009 fb3d 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcChannel, 2, 100);
 8001a92:	f107 0120 	add.w	r1, r7, #32
 8001a96:	2364      	movs	r3, #100	; 0x64
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4850      	ldr	r0, [pc, #320]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001a9c:	f009 fb36 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa6:	484c      	ldr	r0, [pc, #304]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001aa8:	f004 fc84 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f001 fa7f 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab8:	4847      	ldr	r0, [pc, #284]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001aba:	f004 fc7b 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi2, setupConfigurationRegister, 1, 100);
 8001abe:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ac2:	2364      	movs	r3, #100	; 0x64
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4845      	ldr	r0, [pc, #276]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001ac8:	f009 fb20 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, setupConfiguration, 2, 100);
 8001acc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001ad0:	2364      	movs	r3, #100	; 0x64
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4841      	ldr	r0, [pc, #260]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001ad6:	f009 fb19 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae0:	483d      	ldr	r0, [pc, #244]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001ae2:	f004 fc67 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f001 fa62 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af2:	4839      	ldr	r0, [pc, #228]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001af4:	f004 fc5e 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi2, adcModeRegister, 1, 100);
 8001af8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001afc:	2364      	movs	r3, #100	; 0x64
 8001afe:	2201      	movs	r2, #1
 8001b00:	4836      	ldr	r0, [pc, #216]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001b02:	f009 fb03 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcMode, 2, 100);
 8001b06:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b0a:	2364      	movs	r3, #100	; 0x64
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	4833      	ldr	r0, [pc, #204]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001b10:	f009 fafc 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1a:	482f      	ldr	r0, [pc, #188]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001b1c:	f004 fc4a 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f001 fa45 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2c:	482a      	ldr	r0, [pc, #168]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001b2e:	f004 fc41 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi2, dataWriteSPS_REGISTER, 1, 100);
 8001b32:	f107 0114 	add.w	r1, r7, #20
 8001b36:	2364      	movs	r3, #100	; 0x64
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4828      	ldr	r0, [pc, #160]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001b3c:	f009 fae6 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSPS, 2, 100);
 8001b40:	f107 0110 	add.w	r1, r7, #16
 8001b44:	2364      	movs	r3, #100	; 0x64
 8001b46:	2202      	movs	r2, #2
 8001b48:	4824      	ldr	r0, [pc, #144]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001b4a:	f009 fadf 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b54:	4820      	ldr	r0, [pc, #128]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001b56:	f004 fc2d 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f001 fa28 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b66:	481c      	ldr	r0, [pc, #112]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001b68:	f004 fc24 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError_REGISTER, 1, 100);
 8001b6c:	f107 010c 	add.w	r1, r7, #12
 8001b70:	2364      	movs	r3, #100	; 0x64
 8001b72:	2201      	movs	r2, #1
 8001b74:	4819      	ldr	r0, [pc, #100]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001b76:	f009 fac9 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError, 2, 100);
 8001b7a:	f107 0108 	add.w	r1, r7, #8
 8001b7e:	2364      	movs	r3, #100	; 0x64
 8001b80:	2202      	movs	r2, #2
 8001b82:	4816      	ldr	r0, [pc, #88]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001b84:	f009 fac2 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8e:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001b90:	f004 fc10 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f001 fa0b 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001ba2:	f004 fc07 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi2, continuousConvEnableRegister, 1, 100);
 8001ba6:	f107 011c 	add.w	r1, r7, #28
 8001baa:	2364      	movs	r3, #100	; 0x64
 8001bac:	2201      	movs	r2, #1
 8001bae:	480b      	ldr	r0, [pc, #44]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001bb0:	f009 faac 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, continuousConvEnable, 2, 100);
 8001bb4:	f107 0118 	add.w	r1, r7, #24
 8001bb8:	2364      	movs	r3, #100	; 0x64
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4807      	ldr	r0, [pc, #28]	; (8001bdc <spi2_adc_init+0x1ac>)
 8001bbe:	f009 faa5 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bc8:	4803      	ldr	r0, [pc, #12]	; (8001bd8 <spi2_adc_init+0x1a8>)
 8001bca:	f004 fbf3 	bl	80063b4 <HAL_GPIO_WritePin>
}
 8001bce:	bf00      	nop
 8001bd0:	3738      	adds	r7, #56	; 0x38
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	58020400 	.word	0x58020400
 8001bdc:	240081a4 	.word	0x240081a4

08001be0 <spi4_adc_init>:

void spi4_adc_init(uint8_t spsValue){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001bea:	2320      	movs	r3, #32
 8001bec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 8001bfe:	2310      	movs	r3, #16
 8001c00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001c04:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001c08:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 8001c0e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001c12:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001c14:	2328      	movs	r3, #40	; 0x28
 8001c16:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001c18:	2305      	movs	r3, #5
 8001c1a:	743b      	strb	r3, [r7, #16]
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 8001c20:	2306      	movs	r3, #6
 8001c22:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8001c24:	2300      	movs	r3, #0
 8001c26:	813b      	strh	r3, [r7, #8]

  /*Start init ADC4*/
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	4850      	ldr	r0, [pc, #320]	; (8001d70 <spi4_adc_init+0x190>)
 8001c2e:	f004 fbc1 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi4, adcChannelRegister, 1, 100);
 8001c32:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	2201      	movs	r2, #1
 8001c3a:	484e      	ldr	r0, [pc, #312]	; (8001d74 <spi4_adc_init+0x194>)
 8001c3c:	f009 fa66 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcChannel, 2, 100);
 8001c40:	f107 0120 	add.w	r1, r7, #32
 8001c44:	2364      	movs	r3, #100	; 0x64
 8001c46:	2202      	movs	r2, #2
 8001c48:	484a      	ldr	r0, [pc, #296]	; (8001d74 <spi4_adc_init+0x194>)
 8001c4a:	f009 fa5f 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2110      	movs	r1, #16
 8001c52:	4847      	ldr	r0, [pc, #284]	; (8001d70 <spi4_adc_init+0x190>)
 8001c54:	f004 fbae 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f001 f9a9 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2110      	movs	r1, #16
 8001c62:	4843      	ldr	r0, [pc, #268]	; (8001d70 <spi4_adc_init+0x190>)
 8001c64:	f004 fba6 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi4, setupConfigurationRegister, 1, 100);
 8001c68:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c6c:	2364      	movs	r3, #100	; 0x64
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4840      	ldr	r0, [pc, #256]	; (8001d74 <spi4_adc_init+0x194>)
 8001c72:	f009 fa4b 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, setupConfiguration, 2, 100);
 8001c76:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001c7a:	2364      	movs	r3, #100	; 0x64
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	483d      	ldr	r0, [pc, #244]	; (8001d74 <spi4_adc_init+0x194>)
 8001c80:	f009 fa44 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2110      	movs	r1, #16
 8001c88:	4839      	ldr	r0, [pc, #228]	; (8001d70 <spi4_adc_init+0x190>)
 8001c8a:	f004 fb93 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f001 f98e 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2110      	movs	r1, #16
 8001c98:	4835      	ldr	r0, [pc, #212]	; (8001d70 <spi4_adc_init+0x190>)
 8001c9a:	f004 fb8b 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi4, adcModeRegister, 1, 100);
 8001c9e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001ca2:	2364      	movs	r3, #100	; 0x64
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4833      	ldr	r0, [pc, #204]	; (8001d74 <spi4_adc_init+0x194>)
 8001ca8:	f009 fa30 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcMode, 2, 100);
 8001cac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001cb0:	2364      	movs	r3, #100	; 0x64
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	482f      	ldr	r0, [pc, #188]	; (8001d74 <spi4_adc_init+0x194>)
 8001cb6:	f009 fa29 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2110      	movs	r1, #16
 8001cbe:	482c      	ldr	r0, [pc, #176]	; (8001d70 <spi4_adc_init+0x190>)
 8001cc0:	f004 fb78 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f001 f973 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2110      	movs	r1, #16
 8001cce:	4828      	ldr	r0, [pc, #160]	; (8001d70 <spi4_adc_init+0x190>)
 8001cd0:	f004 fb70 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi4, dataWriteSPS_REGISTER, 1, 100);
 8001cd4:	f107 0114 	add.w	r1, r7, #20
 8001cd8:	2364      	movs	r3, #100	; 0x64
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4825      	ldr	r0, [pc, #148]	; (8001d74 <spi4_adc_init+0x194>)
 8001cde:	f009 fa15 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSPS, 2, 100);
 8001ce2:	f107 0110 	add.w	r1, r7, #16
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4822      	ldr	r0, [pc, #136]	; (8001d74 <spi4_adc_init+0x194>)
 8001cec:	f009 fa0e 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	481e      	ldr	r0, [pc, #120]	; (8001d70 <spi4_adc_init+0x190>)
 8001cf6:	f004 fb5d 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f001 f958 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2110      	movs	r1, #16
 8001d04:	481a      	ldr	r0, [pc, #104]	; (8001d70 <spi4_adc_init+0x190>)
 8001d06:	f004 fb55 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError_REGISTER, 1, 100);
 8001d0a:	f107 010c 	add.w	r1, r7, #12
 8001d0e:	2364      	movs	r3, #100	; 0x64
 8001d10:	2201      	movs	r2, #1
 8001d12:	4818      	ldr	r0, [pc, #96]	; (8001d74 <spi4_adc_init+0x194>)
 8001d14:	f009 f9fa 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError, 2, 100);
 8001d18:	f107 0108 	add.w	r1, r7, #8
 8001d1c:	2364      	movs	r3, #100	; 0x64
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4814      	ldr	r0, [pc, #80]	; (8001d74 <spi4_adc_init+0x194>)
 8001d22:	f009 f9f3 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001d26:	2201      	movs	r2, #1
 8001d28:	2110      	movs	r1, #16
 8001d2a:	4811      	ldr	r0, [pc, #68]	; (8001d70 <spi4_adc_init+0x190>)
 8001d2c:	f004 fb42 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001d30:	2001      	movs	r0, #1
 8001d32:	f001 f93d 	bl	8002fb0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2110      	movs	r1, #16
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <spi4_adc_init+0x190>)
 8001d3c:	f004 fb3a 	bl	80063b4 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi4, continuousConvEnableRegister, 1, 100);
 8001d40:	f107 011c 	add.w	r1, r7, #28
 8001d44:	2364      	movs	r3, #100	; 0x64
 8001d46:	2201      	movs	r2, #1
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <spi4_adc_init+0x194>)
 8001d4a:	f009 f9df 	bl	800b10c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, continuousConvEnable, 2, 100);
 8001d4e:	f107 0118 	add.w	r1, r7, #24
 8001d52:	2364      	movs	r3, #100	; 0x64
 8001d54:	2202      	movs	r2, #2
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <spi4_adc_init+0x194>)
 8001d58:	f009 f9d8 	bl	800b10c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2110      	movs	r1, #16
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <spi4_adc_init+0x190>)
 8001d62:	f004 fb27 	bl	80063b4 <HAL_GPIO_WritePin>
}
 8001d66:	bf00      	nop
 8001d68:	3738      	adds	r7, #56	; 0x38
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	58021000 	.word	0x58021000
 8001d74:	2400822c 	.word	0x2400822c

08001d78 <run_all_adc>:


void run_all_adc(void){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d82:	4808      	ldr	r0, [pc, #32]	; (8001da4 <run_all_adc+0x2c>)
 8001d84:	f004 fb16 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d8e:	4806      	ldr	r0, [pc, #24]	; (8001da8 <run_all_adc+0x30>)
 8001d90:	f004 fb10 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2110      	movs	r1, #16
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <run_all_adc+0x34>)
 8001d9a:	f004 fb0b 	bl	80063b4 <HAL_GPIO_WritePin>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	58021800 	.word	0x58021800
 8001da8:	58020400 	.word	0x58020400
 8001dac:	58021000 	.word	0x58021000

08001db0 <spi1_soft_reset>:
      HAL_UART_Transmit(&huart5, (uint8_t*)", ", 2, 10);
      HAL_Delay(10);
  }
}

void spi1_soft_reset(void){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8001db6:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <spi1_soft_reset+0x40>)
 8001db8:	463b      	mov	r3, r7
 8001dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dbe:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc8:	480a      	ldr	r0, [pc, #40]	; (8001df4 <spi1_soft_reset+0x44>)
 8001dca:	f004 faf3 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, softResetValue, 8, 100);
 8001dce:	4639      	mov	r1, r7
 8001dd0:	2364      	movs	r3, #100	; 0x64
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	4808      	ldr	r0, [pc, #32]	; (8001df8 <spi1_soft_reset+0x48>)
 8001dd6:	f009 f999 	bl	800b10c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <spi1_soft_reset+0x44>)
 8001de2:	f004 fae7 	bl	80063b4 <HAL_GPIO_WritePin>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	08012430 	.word	0x08012430
 8001df4:	58021800 	.word	0x58021800
 8001df8:	2400811c 	.word	0x2400811c

08001dfc <spi2_soft_reset>:

void spi2_soft_reset(void){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <spi2_soft_reset+0x40>)
 8001e04:	463b      	mov	r3, r7
 8001e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e0a:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e14:	480a      	ldr	r0, [pc, #40]	; (8001e40 <spi2_soft_reset+0x44>)
 8001e16:	f004 facd 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, softResetValue, 8, 100);
 8001e1a:	4639      	mov	r1, r7
 8001e1c:	2364      	movs	r3, #100	; 0x64
 8001e1e:	2208      	movs	r2, #8
 8001e20:	4808      	ldr	r0, [pc, #32]	; (8001e44 <spi2_soft_reset+0x48>)
 8001e22:	f009 f973 	bl	800b10c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001e26:	2201      	movs	r2, #1
 8001e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <spi2_soft_reset+0x44>)
 8001e2e:	f004 fac1 	bl	80063b4 <HAL_GPIO_WritePin>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	08012430 	.word	0x08012430
 8001e40:	58020400 	.word	0x58020400
 8001e44:	240081a4 	.word	0x240081a4

08001e48 <spi4_soft_reset>:

void spi4_soft_reset(void){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8001e4e:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <spi4_soft_reset+0x3c>)
 8001e50:	463b      	mov	r3, r7
 8001e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e56:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	480a      	ldr	r0, [pc, #40]	; (8001e88 <spi4_soft_reset+0x40>)
 8001e60:	f004 faa8 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, softResetValue, 8, 100);
 8001e64:	4639      	mov	r1, r7
 8001e66:	2364      	movs	r3, #100	; 0x64
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4808      	ldr	r0, [pc, #32]	; (8001e8c <spi4_soft_reset+0x44>)
 8001e6c:	f009 f94e 	bl	800b10c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2110      	movs	r1, #16
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <spi4_soft_reset+0x40>)
 8001e76:	f004 fa9d 	bl	80063b4 <HAL_GPIO_WritePin>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	08012430 	.word	0x08012430
 8001e88:	58021000 	.word	0x58021000
 8001e8c:	2400822c 	.word	0x2400822c

08001e90 <spi_send_all_three_values>:
  }
  HAL_UART_Transmit(&huart4, (uint8_t*)"\n\r", 2, 10);
}


void spi_send_all_three_values(uint8_t* adcRawValue_x, uint8_t* adcRawValue_y, uint8_t* adcRawValue_z){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0a4      	sub	sp, #144	; 0x90
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t value_x = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t value_y = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t value_z = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint8_t uartBuffer_x[14];
  uint8_t uartBuffer_y[14];
  uint8_t uartBuffer_z[14];
  uint8_t concatenatedBuffer[39];

  value_x = (uint32_t)adcRawValue_x[0];
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x<<8;
 8001eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x | adcRawValue_x[1];
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x<<8;
 8001ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x | adcRawValue_x[2];
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3302      	adds	r3, #2
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x<<8;
 8001eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x | adcRawValue_x[3];
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3303      	adds	r3, #3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  value_y = (uint32_t)adcRawValue_y[0];
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y<<8;
 8001f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y | adcRawValue_y[1];
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y<<8;
 8001f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y | adcRawValue_y[2];
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3302      	adds	r3, #2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y<<8;
 8001f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y | adcRawValue_y[3];
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3303      	adds	r3, #3
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  value_z = (uint32_t)adcRawValue_z[0];
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z<<8;
 8001f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z | adcRawValue_z[1];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3301      	adds	r3, #1
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z<<8;
 8001f7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z | adcRawValue_z[2];
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3302      	adds	r3, #2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z<<8;
 8001f92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z | adcRawValue_z[3];
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	67fb      	str	r3, [r7, #124]	; 0x7c

  int length_x = sprintf((char *)uartBuffer_x, "%10lu", value_x);
 8001fa6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001faa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fae:	4918      	ldr	r1, [pc, #96]	; (8002010 <spi_send_all_three_values+0x180>)
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00f fdbd 	bl	8011b30 <siprintf>
 8001fb6:	67b8      	str	r0, [r7, #120]	; 0x78
  int length_y = sprintf((char *)uartBuffer_y, "%10lu", value_y);
 8001fb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fc0:	4913      	ldr	r1, [pc, #76]	; (8002010 <spi_send_all_three_values+0x180>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00f fdb4 	bl	8011b30 <siprintf>
 8001fc8:	6778      	str	r0, [r7, #116]	; 0x74
  int length_z = sprintf((char *)uartBuffer_z, "%10lu", value_z);
 8001fca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001fd0:	490f      	ldr	r1, [pc, #60]	; (8002010 <spi_send_all_three_values+0x180>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00f fdac 	bl	8011b30 <siprintf>
 8001fd8:	6738      	str	r0, [r7, #112]	; 0x70

  int lengthConCat = sprintf((char *)concatenatedBuffer, "%s %s %s\n", (char*)uartBuffer_x, (char*)uartBuffer_y, (char*)uartBuffer_z);
 8001fda:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001fde:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fe2:	f107 0014 	add.w	r0, r7, #20
 8001fe6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	4909      	ldr	r1, [pc, #36]	; (8002014 <spi_send_all_three_values+0x184>)
 8001ff0:	f00f fd9e 	bl	8011b30 <siprintf>
 8001ff4:	66f8      	str	r0, [r7, #108]	; 0x6c

  HAL_UART_Transmit(&huart4, concatenatedBuffer, 34,100);
 8001ff6:	f107 0114 	add.w	r1, r7, #20
 8001ffa:	2364      	movs	r3, #100	; 0x64
 8001ffc:	2222      	movs	r2, #34	; 0x22
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <spi_send_all_three_values+0x188>)
 8002000:	f00b fb76 	bl	800d6f0 <HAL_UART_Transmit>
  __NOP();
 8002004:	bf00      	nop
//  HAL_UART_Transmit(&huart4, uartBuffer_y, (uint16_t)length_y, 10);
//  HAL_UART_Transmit(&huart4, ", z: ", 5, 10);
//  HAL_UART_Transmit(&huart4, uartBuffer_z, (uint16_t)length_z, 10);
//  HAL_UART_Transmit(&huart4, "\n", 1, 10);

}
 8002006:	bf00      	nop
 8002008:	3788      	adds	r7, #136	; 0x88
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	08012458 	.word	0x08012458
 8002014:	08012460 	.word	0x08012460
 8002018:	2400861c 	.word	0x2400861c

0800201c <setNewSPStoAllADCs>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}



void setNewSPStoAllADCs(uint8_t spsValue){
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002026:	2017      	movs	r0, #23
 8002028:	f001 f90d 	bl	8003246 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800202c:	2028      	movs	r0, #40	; 0x28
 800202e:	f001 f90a 	bl	8003246 <HAL_NVIC_DisableIRQ>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002038:	481f      	ldr	r0, [pc, #124]	; (80020b8 <setNewSPStoAllADCs+0x9c>)
 800203a:	f004 f9bb 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002044:	481d      	ldr	r0, [pc, #116]	; (80020bc <setNewSPStoAllADCs+0xa0>)
 8002046:	f004 f9b5 	bl	80063b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 800204a:	2201      	movs	r2, #1
 800204c:	2110      	movs	r1, #16
 800204e:	481c      	ldr	r0, [pc, #112]	; (80020c0 <setNewSPStoAllADCs+0xa4>)
 8002050:	f004 f9b0 	bl	80063b4 <HAL_GPIO_WritePin>
  spi1_soft_reset();
 8002054:	f7ff feac 	bl	8001db0 <spi1_soft_reset>
  spi2_soft_reset();
 8002058:	f7ff fed0 	bl	8001dfc <spi2_soft_reset>
  spi4_soft_reset();
 800205c:	f7ff fef4 	bl	8001e48 <spi4_soft_reset>
  spi1_adc_init(spsValue);
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fc0c 	bl	8001880 <spi1_adc_init>
  spi2_adc_init(spsValue);
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fce0 	bl	8001a30 <spi2_adc_init>
  spi4_adc_init(spsValue);
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fdb4 	bl	8001be0 <spi4_adc_init>
  run_all_adc();
 8002078:	f7ff fe7e 	bl	8001d78 <run_all_adc>
  HAL_Delay(1);
 800207c:	2001      	movs	r0, #1
 800207e:	f000 ff97 	bl	8002fb0 <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8002082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002086:	2220      	movs	r2, #32
 8002088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	2240      	movs	r2, #64	; 0x40
 8002092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8002096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800209e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020a2:	2017      	movs	r0, #23
 80020a4:	f001 f8c1 	bl	800322a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020a8:	2028      	movs	r0, #40	; 0x28
 80020aa:	f001 f8be 	bl	800322a <HAL_NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58021800 	.word	0x58021800
 80020bc:	58020400 	.word	0x58020400
 80020c0:	58021000 	.word	0x58021000

080020c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_MspInit+0x30>)
 80020cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80020d0:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <HAL_MspInit+0x30>)
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_MspInit+0x30>)
 80020dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	58024400 	.word	0x58024400

080020f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a3e      	ldr	r2, [pc, #248]	; (8002210 <HAL_SD_MspInit+0x118>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d175      	bne.n	8002206 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800211a:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_SD_MspInit+0x11c>)
 800211c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002120:	4a3c      	ldr	r2, [pc, #240]	; (8002214 <HAL_SD_MspInit+0x11c>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_SD_MspInit+0x11c>)
 800212c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <HAL_SD_MspInit+0x11c>)
 800213a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800213e:	4a35      	ldr	r2, [pc, #212]	; (8002214 <HAL_SD_MspInit+0x11c>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_SD_MspInit+0x11c>)
 800214a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_SD_MspInit+0x11c>)
 8002158:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800215c:	4a2d      	ldr	r2, [pc, #180]	; (8002214 <HAL_SD_MspInit+0x11c>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002166:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_SD_MspInit+0x11c>)
 8002168:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_SD_MspInit+0x11c>)
 8002176:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800217a:	4a26      	ldr	r2, [pc, #152]	; (8002214 <HAL_SD_MspInit+0x11c>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002184:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_SD_MspInit+0x11c>)
 8002186:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021a4:	230c      	movs	r3, #12
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	4619      	mov	r1, r3
 80021ae:	481a      	ldr	r0, [pc, #104]	; (8002218 <HAL_SD_MspInit+0x120>)
 80021b0:	f003 ff50 	bl	8006054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021b4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021c6:	230c      	movs	r3, #12
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	4619      	mov	r1, r3
 80021d0:	4812      	ldr	r0, [pc, #72]	; (800221c <HAL_SD_MspInit+0x124>)
 80021d2:	f003 ff3f 	bl	8006054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d6:	2304      	movs	r3, #4
 80021d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021e6:	230c      	movs	r3, #12
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ea:	f107 031c 	add.w	r3, r7, #28
 80021ee:	4619      	mov	r1, r3
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <HAL_SD_MspInit+0x128>)
 80021f2:	f003 ff2f 	bl	8006054 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2031      	movs	r0, #49	; 0x31
 80021fc:	f000 fffb 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002200:	2031      	movs	r0, #49	; 0x31
 8002202:	f001 f812 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3730      	adds	r7, #48	; 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	52007000 	.word	0x52007000
 8002214:	58024400 	.word	0x58024400
 8002218:	58020400 	.word	0x58020400
 800221c:	58020800 	.word	0x58020800
 8002220:	58020c00 	.word	0x58020c00

08002224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0be      	sub	sp, #248	; 0xf8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800223c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002240:	22b8      	movs	r2, #184	; 0xb8
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f00f fc6b 	bl	8011b20 <memset>
  if(hspi->Instance==SPI1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a72      	ldr	r2, [pc, #456]	; (8002418 <HAL_SPI_MspInit+0x1f4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	f040 80f3 	bne.w	800243c <HAL_SPI_MspInit+0x218>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800225c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002268:	4618      	mov	r0, r3
 800226a:	f005 f8a3 	bl	80073b4 <HAL_RCCEx_PeriphCLKConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002274:	f7ff fae6 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002278:	4b68      	ldr	r3, [pc, #416]	; (800241c <HAL_SPI_MspInit+0x1f8>)
 800227a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800227e:	4a67      	ldr	r2, [pc, #412]	; (800241c <HAL_SPI_MspInit+0x1f8>)
 8002280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002284:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002288:	4b64      	ldr	r3, [pc, #400]	; (800241c <HAL_SPI_MspInit+0x1f8>)
 800228a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800228e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
 8002294:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	4b61      	ldr	r3, [pc, #388]	; (800241c <HAL_SPI_MspInit+0x1f8>)
 8002298:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800229c:	4a5f      	ldr	r2, [pc, #380]	; (800241c <HAL_SPI_MspInit+0x1f8>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80022a6:	4b5d      	ldr	r3, [pc, #372]	; (800241c <HAL_SPI_MspInit+0x1f8>)
 80022a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_SPI_MspInit+0x1f8>)
 80022b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022ba:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_SPI_MspInit+0x1f8>)
 80022bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80022c4:	4b55      	ldr	r3, [pc, #340]	; (800241c <HAL_SPI_MspInit+0x1f8>)
 80022c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	623b      	str	r3, [r7, #32]
 80022d0:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022d2:	23c0      	movs	r3, #192	; 0xc0
 80022d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ea:	2305      	movs	r3, #5
 80022ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022f4:	4619      	mov	r1, r3
 80022f6:	484a      	ldr	r0, [pc, #296]	; (8002420 <HAL_SPI_MspInit+0x1fc>)
 80022f8:	f003 feac 	bl	8006054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002300:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002316:	2305      	movs	r3, #5
 8002318:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800231c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002320:	4619      	mov	r1, r3
 8002322:	4840      	ldr	r0, [pc, #256]	; (8002424 <HAL_SPI_MspInit+0x200>)
 8002324:	f003 fe96 	bl	8006054 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002328:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <HAL_SPI_MspInit+0x204>)
 800232a:	4a40      	ldr	r2, [pc, #256]	; (800242c <HAL_SPI_MspInit+0x208>)
 800232c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800232e:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <HAL_SPI_MspInit+0x204>)
 8002330:	2225      	movs	r2, #37	; 0x25
 8002332:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002334:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <HAL_SPI_MspInit+0x204>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_SPI_MspInit+0x204>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_SPI_MspInit+0x204>)
 8002342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002346:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <HAL_SPI_MspInit+0x204>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_SPI_MspInit+0x204>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002354:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_SPI_MspInit+0x204>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800235a:	4b33      	ldr	r3, [pc, #204]	; (8002428 <HAL_SPI_MspInit+0x204>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_SPI_MspInit+0x204>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002366:	4830      	ldr	r0, [pc, #192]	; (8002428 <HAL_SPI_MspInit+0x204>)
 8002368:	f000 ff88 	bl	800327c <HAL_DMA_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 8002372:	f7ff fa67 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <HAL_SPI_MspInit+0x204>)
 800237a:	67da      	str	r2, [r3, #124]	; 0x7c
 800237c:	4a2a      	ldr	r2, [pc, #168]	; (8002428 <HAL_SPI_MspInit+0x204>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8002382:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 8002384:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <HAL_SPI_MspInit+0x210>)
 8002386:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002388:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 800238a:	2226      	movs	r2, #38	; 0x26
 800238c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800238e:	4b28      	ldr	r3, [pc, #160]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002394:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800239a:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 800239c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a2:	4b23      	ldr	r3, [pc, #140]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80023ae:	4b20      	ldr	r3, [pc, #128]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80023c0:	481b      	ldr	r0, [pc, #108]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 80023c2:	f000 ff5b 	bl	800327c <HAL_DMA_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 80023cc:	f7ff fa3a 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a17      	ldr	r2, [pc, #92]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 80023d4:	679a      	str	r2, [r3, #120]	; 0x78
 80023d6:	4a16      	ldr	r2, [pc, #88]	; (8002430 <HAL_SPI_MspInit+0x20c>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	2023      	movs	r0, #35	; 0x23
 80023e2:	f000 ff08 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80023e6:	2023      	movs	r0, #35	; 0x23
 80023e8:	f000 ff1f 	bl	800322a <HAL_NVIC_EnableIRQ>
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
//    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

    // SPI1 MISO interrupt setting FIXME
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023ec:	2340      	movs	r3, #64	; 0x40
 80023ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING; //GPIO_MODE_AF_PP  | TRIGGER_RISING | TRIGGER_FALLING;
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_SPI_MspInit+0x214>)
 80023f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002404:	2305      	movs	r3, #5
 8002406:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800240e:	4619      	mov	r1, r3
 8002410:	4803      	ldr	r0, [pc, #12]	; (8002420 <HAL_SPI_MspInit+0x1fc>)
 8002412:	f003 fe1f 	bl	8006054 <HAL_GPIO_Init>


  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002416:	e1cb      	b.n	80027b0 <HAL_SPI_MspInit+0x58c>
 8002418:	40013000 	.word	0x40013000
 800241c:	58024400 	.word	0x58024400
 8002420:	58020000 	.word	0x58020000
 8002424:	58021800 	.word	0x58021800
 8002428:	240082b4 	.word	0x240082b4
 800242c:	40020010 	.word	0x40020010
 8002430:	2400832c 	.word	0x2400832c
 8002434:	40020028 	.word	0x40020028
 8002438:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a72      	ldr	r2, [pc, #456]	; (800260c <HAL_SPI_MspInit+0x3e8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	f040 80f4 	bne.w	8002630 <HAL_SPI_MspInit+0x40c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800244e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245a:	4618      	mov	r0, r3
 800245c:	f004 ffaa 	bl	80073b4 <HAL_RCCEx_PeriphCLKConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_SPI_MspInit+0x246>
      Error_Handler();
 8002466:	f7ff f9ed 	bl	8001844 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800246a:	4b69      	ldr	r3, [pc, #420]	; (8002610 <HAL_SPI_MspInit+0x3ec>)
 800246c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002470:	4a67      	ldr	r2, [pc, #412]	; (8002610 <HAL_SPI_MspInit+0x3ec>)
 8002472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002476:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800247a:	4b65      	ldr	r3, [pc, #404]	; (8002610 <HAL_SPI_MspInit+0x3ec>)
 800247c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002488:	4b61      	ldr	r3, [pc, #388]	; (8002610 <HAL_SPI_MspInit+0x3ec>)
 800248a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800248e:	4a60      	ldr	r2, [pc, #384]	; (8002610 <HAL_SPI_MspInit+0x3ec>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002498:	4b5d      	ldr	r3, [pc, #372]	; (8002610 <HAL_SPI_MspInit+0x3ec>)
 800249a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	4b5a      	ldr	r3, [pc, #360]	; (8002610 <HAL_SPI_MspInit+0x3ec>)
 80024a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_SPI_MspInit+0x3ec>)
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80024b6:	4b56      	ldr	r3, [pc, #344]	; (8002610 <HAL_SPI_MspInit+0x3ec>)
 80024b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024c4:	2302      	movs	r3, #2
 80024c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024dc:	2305      	movs	r3, #5
 80024de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024e6:	4619      	mov	r1, r3
 80024e8:	484a      	ldr	r0, [pc, #296]	; (8002614 <HAL_SPI_MspInit+0x3f0>)
 80024ea:	f003 fdb3 	bl	8006054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 80024ee:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80024f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002508:	2305      	movs	r3, #5
 800250a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002512:	4619      	mov	r1, r3
 8002514:	4840      	ldr	r0, [pc, #256]	; (8002618 <HAL_SPI_MspInit+0x3f4>)
 8002516:	f003 fd9d 	bl	8006054 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream7;
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 800251c:	4a40      	ldr	r2, [pc, #256]	; (8002620 <HAL_SPI_MspInit+0x3fc>)
 800251e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002520:	4b3e      	ldr	r3, [pc, #248]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 8002522:	2227      	movs	r2, #39	; 0x27
 8002524:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800252c:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002532:	4b3a      	ldr	r3, [pc, #232]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 8002534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002538:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800253a:	4b38      	ldr	r3, [pc, #224]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002540:	4b36      	ldr	r3, [pc, #216]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002546:	4b35      	ldr	r3, [pc, #212]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 8002548:	2200      	movs	r2, #0
 800254a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800254c:	4b33      	ldr	r3, [pc, #204]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 800254e:	2200      	movs	r2, #0
 8002550:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002552:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 8002554:	2200      	movs	r2, #0
 8002556:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002558:	4830      	ldr	r0, [pc, #192]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 800255a:	f000 fe8f 	bl	800327c <HAL_DMA_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_SPI_MspInit+0x344>
      Error_Handler();
 8002564:	f7ff f96e 	bl	8001844 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a2c      	ldr	r2, [pc, #176]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 800256c:	67da      	str	r2, [r3, #124]	; 0x7c
 800256e:	4a2b      	ldr	r2, [pc, #172]	; (800261c <HAL_SPI_MspInit+0x3f8>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA2_Stream0;
 8002574:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <HAL_SPI_MspInit+0x400>)
 8002576:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <HAL_SPI_MspInit+0x404>)
 8002578:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_SPI_MspInit+0x400>)
 800257c:	2228      	movs	r2, #40	; 0x28
 800257e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <HAL_SPI_MspInit+0x400>)
 8002582:	2240      	movs	r2, #64	; 0x40
 8002584:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002586:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_SPI_MspInit+0x400>)
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_SPI_MspInit+0x400>)
 800258e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002592:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_SPI_MspInit+0x400>)
 8002596:	2200      	movs	r2, #0
 8002598:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_SPI_MspInit+0x400>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80025a0:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_SPI_MspInit+0x400>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_SPI_MspInit+0x400>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_SPI_MspInit+0x400>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80025b2:	481c      	ldr	r0, [pc, #112]	; (8002624 <HAL_SPI_MspInit+0x400>)
 80025b4:	f000 fe62 	bl	800327c <HAL_DMA_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_SPI_MspInit+0x39e>
      Error_Handler();
 80025be:	f7ff f941 	bl	8001844 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_SPI_MspInit+0x400>)
 80025c6:	679a      	str	r2, [r3, #120]	; 0x78
 80025c8:	4a16      	ldr	r2, [pc, #88]	; (8002624 <HAL_SPI_MspInit+0x400>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	2024      	movs	r0, #36	; 0x24
 80025d4:	f000 fe0f 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80025d8:	2024      	movs	r0, #36	; 0x24
 80025da:	f000 fe26 	bl	800322a <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_SPI_MspInit+0x408>)
 80025e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025f8:	2305      	movs	r3, #5
 80025fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002602:	4619      	mov	r1, r3
 8002604:	4804      	ldr	r0, [pc, #16]	; (8002618 <HAL_SPI_MspInit+0x3f4>)
 8002606:	f003 fd25 	bl	8006054 <HAL_GPIO_Init>
}
 800260a:	e0d1      	b.n	80027b0 <HAL_SPI_MspInit+0x58c>
 800260c:	40003800 	.word	0x40003800
 8002610:	58024400 	.word	0x58024400
 8002614:	58020800 	.word	0x58020800
 8002618:	58020400 	.word	0x58020400
 800261c:	240083a4 	.word	0x240083a4
 8002620:	400200b8 	.word	0x400200b8
 8002624:	2400841c 	.word	0x2400841c
 8002628:	40020410 	.word	0x40020410
 800262c:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI4)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a60      	ldr	r2, [pc, #384]	; (80027b8 <HAL_SPI_MspInit+0x594>)
 8002636:	4293      	cmp	r3, r2
 8002638:	f040 80ba 	bne.w	80027b0 <HAL_SPI_MspInit+0x58c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800263c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264c:	4618      	mov	r0, r3
 800264e:	f004 feb1 	bl	80073b4 <HAL_RCCEx_PeriphCLKConfig>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_SPI_MspInit+0x438>
      Error_Handler();
 8002658:	f7ff f8f4 	bl	8001844 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800265c:	4b57      	ldr	r3, [pc, #348]	; (80027bc <HAL_SPI_MspInit+0x598>)
 800265e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002662:	4a56      	ldr	r2, [pc, #344]	; (80027bc <HAL_SPI_MspInit+0x598>)
 8002664:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002668:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800266c:	4b53      	ldr	r3, [pc, #332]	; (80027bc <HAL_SPI_MspInit+0x598>)
 800266e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800267a:	4b50      	ldr	r3, [pc, #320]	; (80027bc <HAL_SPI_MspInit+0x598>)
 800267c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002680:	4a4e      	ldr	r2, [pc, #312]	; (80027bc <HAL_SPI_MspInit+0x598>)
 8002682:	f043 0310 	orr.w	r3, r3, #16
 8002686:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800268a:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <HAL_SPI_MspInit+0x598>)
 800268c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002698:	2364      	movs	r3, #100	; 0x64
 800269a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80026b0:	2305      	movs	r3, #5
 80026b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4840      	ldr	r0, [pc, #256]	; (80027c0 <HAL_SPI_MspInit+0x59c>)
 80026be:	f003 fcc9 	bl	8006054 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream2;
 80026c2:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 80026c4:	4a40      	ldr	r2, [pc, #256]	; (80027c8 <HAL_SPI_MspInit+0x5a4>)
 80026c6:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80026c8:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 80026ca:	2253      	movs	r2, #83	; 0x53
 80026cc:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d4:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026da:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 80026dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e0:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026fa:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002700:	4830      	ldr	r0, [pc, #192]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 8002702:	f000 fdbb 	bl	800327c <HAL_DMA_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_SPI_MspInit+0x4ec>
      Error_Handler();
 800270c:	f7ff f89a 	bl	8001844 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a2c      	ldr	r2, [pc, #176]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 8002714:	67da      	str	r2, [r3, #124]	; 0x7c
 8002716:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <HAL_SPI_MspInit+0x5a0>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream3;
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 800271e:	4a2c      	ldr	r2, [pc, #176]	; (80027d0 <HAL_SPI_MspInit+0x5ac>)
 8002720:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 8002724:	2254      	movs	r2, #84	; 0x54
 8002726:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272e:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 8002736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800273a:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002748:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002754:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800275a:	481c      	ldr	r0, [pc, #112]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 800275c:	f000 fd8e 	bl	800327c <HAL_DMA_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_SPI_MspInit+0x546>
      Error_Handler();
 8002766:	f7ff f86d 	bl	8001844 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 800276e:	679a      	str	r2, [r3, #120]	; 0x78
 8002770:	4a16      	ldr	r2, [pc, #88]	; (80027cc <HAL_SPI_MspInit+0x5a8>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	2054      	movs	r0, #84	; 0x54
 800277c:	f000 fd3b 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002780:	2054      	movs	r0, #84	; 0x54
 8002782:	f000 fd52 	bl	800322a <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002786:	2320      	movs	r3, #32
 8002788:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_SPI_MspInit+0x5b0>)
 800278e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800279e:	2305      	movs	r3, #5
 80027a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4805      	ldr	r0, [pc, #20]	; (80027c0 <HAL_SPI_MspInit+0x59c>)
 80027ac:	f003 fc52 	bl	8006054 <HAL_GPIO_Init>
}
 80027b0:	bf00      	nop
 80027b2:	37f8      	adds	r7, #248	; 0xf8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40013400 	.word	0x40013400
 80027bc:	58024400 	.word	0x58024400
 80027c0:	58021000 	.word	0x58021000
 80027c4:	24008494 	.word	0x24008494
 80027c8:	40020040 	.word	0x40020040
 80027cc:	2400850c 	.word	0x2400850c
 80027d0:	40020058 	.word	0x40020058
 80027d4:	00210002 	.word	0x00210002

080027d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a25      	ldr	r2, [pc, #148]	; (800288c <HAL_TIM_Base_MspInit+0xb4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10f      	bne.n	800281a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_TIM_Base_MspInit+0xb8>)
 80027fc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002800:	4a23      	ldr	r2, [pc, #140]	; (8002890 <HAL_TIM_Base_MspInit+0xb8>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_TIM_Base_MspInit+0xb8>)
 800280c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002818:	e033      	b.n	8002882 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d12e      	bne.n	8002882 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_TIM_Base_MspInit+0xb8>)
 8002826:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800282a:	4a19      	ldr	r2, [pc, #100]	; (8002890 <HAL_TIM_Base_MspInit+0xb8>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_TIM_Base_MspInit+0xb8>)
 8002836:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_TIM_Base_MspInit+0xb8>)
 8002844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_TIM_Base_MspInit+0xb8>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <HAL_TIM_Base_MspInit+0xb8>)
 8002854:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002872:	2301      	movs	r3, #1
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	4619      	mov	r1, r3
 800287c:	4805      	ldr	r0, [pc, #20]	; (8002894 <HAL_TIM_Base_MspInit+0xbc>)
 800287e:	f003 fbe9 	bl	8006054 <HAL_GPIO_Init>
}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	; 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40010000 	.word	0x40010000
 8002890:	58024400 	.word	0x58024400
 8002894:	58020000 	.word	0x58020000

08002898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <HAL_TIM_MspPostInit+0x6c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d11f      	bne.n	80028fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_TIM_MspPostInit+0x70>)
 80028bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028c0:	4a11      	ldr	r2, [pc, #68]	; (8002908 <HAL_TIM_MspPostInit+0x70>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <HAL_TIM_MspPostInit+0x70>)
 80028cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	4619      	mov	r1, r3
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <HAL_TIM_MspPostInit+0x74>)
 80028f6:	f003 fbad 	bl	8006054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028fa:	bf00      	nop
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40010000 	.word	0x40010000
 8002908:	58024400 	.word	0x58024400
 800290c:	58020000 	.word	0x58020000

08002910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0b8      	sub	sp, #224	; 0xe0
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	22b8      	movs	r2, #184	; 0xb8
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f00f f8f5 	bl	8011b20 <memset>
  if(huart->Instance==UART4)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a3f      	ldr	r2, [pc, #252]	; (8002a38 <HAL_UART_MspInit+0x128>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d176      	bne.n	8002a2e <HAL_UART_MspInit+0x11e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002940:	2302      	movs	r3, #2
 8002942:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4618      	mov	r0, r3
 8002950:	f004 fd30 	bl	80073b4 <HAL_RCCEx_PeriphCLKConfig>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800295a:	f7fe ff73 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800295e:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_UART_MspInit+0x12c>)
 8002960:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002964:	4a35      	ldr	r2, [pc, #212]	; (8002a3c <HAL_UART_MspInit+0x12c>)
 8002966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800296a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800296e:	4b33      	ldr	r3, [pc, #204]	; (8002a3c <HAL_UART_MspInit+0x12c>)
 8002970:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297c:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <HAL_UART_MspInit+0x12c>)
 800297e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002982:	4a2e      	ldr	r2, [pc, #184]	; (8002a3c <HAL_UART_MspInit+0x12c>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_UART_MspInit+0x12c>)
 800298e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800299a:	2303      	movs	r3, #3
 800299c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029b2:	2308      	movs	r3, #8
 80029b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029bc:	4619      	mov	r1, r3
 80029be:	4820      	ldr	r0, [pc, #128]	; (8002a40 <HAL_UART_MspInit+0x130>)
 80029c0:	f003 fb48 	bl	8006054 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_UART_MspInit+0x134>)
 80029c6:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <HAL_UART_MspInit+0x138>)
 80029c8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80029ca:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <HAL_UART_MspInit+0x134>)
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d0:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <HAL_UART_MspInit+0x134>)
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_UART_MspInit+0x134>)
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_UART_MspInit+0x134>)
 80029de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e4:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_UART_MspInit+0x134>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_UART_MspInit+0x134>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_UART_MspInit+0x134>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <HAL_UART_MspInit+0x134>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_UART_MspInit+0x134>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002a02:	4810      	ldr	r0, [pc, #64]	; (8002a44 <HAL_UART_MspInit+0x134>)
 8002a04:	f000 fc3a 	bl	800327c <HAL_DMA_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8002a0e:	f7fe ff19 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <HAL_UART_MspInit+0x134>)
 8002a16:	679a      	str	r2, [r3, #120]	; 0x78
 8002a18:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_UART_MspInit+0x134>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	2034      	movs	r0, #52	; 0x34
 8002a24:	f000 fbe7 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a28:	2034      	movs	r0, #52	; 0x34
 8002a2a:	f000 fbfe 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002a2e:	bf00      	nop
 8002a30:	37e0      	adds	r7, #224	; 0xe0
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40004c00 	.word	0x40004c00
 8002a3c:	58024400 	.word	0x58024400
 8002a40:	58020000 	.word	0x58020000
 8002a44:	240086ac 	.word	0x240086ac
 8002a48:	40020070 	.word	0x40020070

08002a4c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a60:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <HAL_FMC_MspInit+0xe8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d161      	bne.n	8002b2c <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 8002a68:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <HAL_FMC_MspInit+0xe8>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a6e:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <HAL_FMC_MspInit+0xec>)
 8002a70:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002a74:	4a30      	ldr	r2, [pc, #192]	; (8002b38 <HAL_FMC_MspInit+0xec>)
 8002a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a7a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <HAL_FMC_MspInit+0xec>)
 8002a80:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a8c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a9e:	230c      	movs	r3, #12
 8002aa0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4825      	ldr	r0, [pc, #148]	; (8002b3c <HAL_FMC_MspInit+0xf0>)
 8002aa8:	f003 fad4 	bl	8006054 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002aac:	230d      	movs	r3, #13
 8002aae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002abc:	230c      	movs	r3, #12
 8002abe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	481e      	ldr	r0, [pc, #120]	; (8002b40 <HAL_FMC_MspInit+0xf4>)
 8002ac6:	f003 fac5 	bl	8006054 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002aca:	f248 1337 	movw	r3, #33079	; 0x8137
 8002ace:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002adc:	230c      	movs	r3, #12
 8002ade:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4817      	ldr	r0, [pc, #92]	; (8002b44 <HAL_FMC_MspInit+0xf8>)
 8002ae6:	f003 fab5 	bl	8006054 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002aea:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002aee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002afc:	230c      	movs	r3, #12
 8002afe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4810      	ldr	r0, [pc, #64]	; (8002b48 <HAL_FMC_MspInit+0xfc>)
 8002b06:	f003 faa5 	bl	8006054 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002b0a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	4619      	mov	r1, r3
 8002b24:	4809      	ldr	r0, [pc, #36]	; (8002b4c <HAL_FMC_MspInit+0x100>)
 8002b26:	f003 fa95 	bl	8006054 <HAL_GPIO_Init>
 8002b2a:	e000      	b.n	8002b2e <HAL_FMC_MspInit+0xe2>
    return;
 8002b2c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	24008794 	.word	0x24008794
 8002b38:	58024400 	.word	0x58024400
 8002b3c:	58021400 	.word	0x58021400
 8002b40:	58020800 	.word	0x58020800
 8002b44:	58021800 	.word	0x58021800
 8002b48:	58021000 	.word	0x58021000
 8002b4c:	58020c00 	.word	0x58020c00

08002b50 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b58:	f7ff ff78 	bl	8002a4c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <NMI_Handler+0x4>

08002b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b6e:	e7fe      	b.n	8002b6e <HardFault_Handler+0x4>

08002b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <MemManage_Handler+0x4>

08002b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <BusFault_Handler+0x4>

08002b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <UsageFault_Handler+0x4>

08002b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb0:	f000 f9de 	bl	8002f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <DMA1_Stream0_IRQHandler+0x10>)
 8002bbe:	f001 febb 	bl	8004938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	240082b4 	.word	0x240082b4

08002bcc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <DMA1_Stream1_IRQHandler+0x10>)
 8002bd2:	f001 feb1 	bl	8004938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2400832c 	.word	0x2400832c

08002be0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <DMA1_Stream2_IRQHandler+0x10>)
 8002be6:	f001 fea7 	bl	8004938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	24008494 	.word	0x24008494

08002bf4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <DMA1_Stream3_IRQHandler+0x10>)
 8002bfa:	f001 fe9d 	bl	8004938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2400850c 	.word	0x2400850c

08002c08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <DMA1_Stream4_IRQHandler+0x10>)
 8002c0e:	f001 fe93 	bl	8004938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	240086ac 	.word	0x240086ac

08002c1c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <SPI1_IRQHandler+0x10>)
 8002c22:	f008 fe3b 	bl	800b89c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2400811c 	.word	0x2400811c

08002c30 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <SPI2_IRQHandler+0x10>)
 8002c36:	f008 fe31 	bl	800b89c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	240081a4 	.word	0x240081a4

08002c44 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <DMA1_Stream7_IRQHandler+0x10>)
 8002c4a:	f001 fe75 	bl	8004938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	240083a4 	.word	0x240083a4

08002c58 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <SDMMC1_IRQHandler+0x10>)
 8002c5e:	f006 fec1 	bl	80099e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	240080a0 	.word	0x240080a0

08002c6c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <UART4_IRQHandler+0x10>)
 8002c72:	f00a fe29 	bl	800d8c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2400861c 	.word	0x2400861c

08002c80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <DMA2_Stream0_IRQHandler+0x10>)
 8002c86:	f001 fe57 	bl	8004938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2400841c 	.word	0x2400841c

08002c94 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <SPI4_IRQHandler+0x10>)
 8002c9a:	f008 fdff 	bl	800b89c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2400822c 	.word	0x2400822c

08002ca8 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002cac:	2020      	movs	r0, #32
 8002cae:	f003 fb9a 	bl	80063e6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002cb2:	2040      	movs	r0, #64	; 0x40
 8002cb4:	f003 fb97 	bl	80063e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002cb8:	2080      	movs	r0, #128	; 0x80
 8002cba:	f003 fb94 	bl	80063e6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002cbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002cc2:	f003 fb90 	bl	80063e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002cce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cd2:	f003 fb88 	bl	80063e6 <HAL_GPIO_EXTI_IRQHandler>

}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce4:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <_sbrk+0x5c>)
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <_sbrk+0x60>)
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <_sbrk+0x64>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <_sbrk+0x64>)
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <_sbrk+0x68>)
 8002cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <_sbrk+0x64>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d207      	bcs.n	8002d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d0c:	f00e fede 	bl	8011acc <__errno>
 8002d10:	4603      	mov	r3, r0
 8002d12:	220c      	movs	r2, #12
 8002d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	e009      	b.n	8002d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <_sbrk+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <_sbrk+0x64>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <_sbrk+0x64>)
 8002d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	24100000 	.word	0x24100000
 8002d3c:	00000800 	.word	0x00000800
 8002d40:	24008798 	.word	0x24008798
 8002d44:	24008a28 	.word	0x24008a28

08002d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <SystemInit+0xd0>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <SystemInit+0xd0>)
 8002d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d5c:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <SystemInit+0xd4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d807      	bhi.n	8002d78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d68:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <SystemInit+0xd4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 030f 	bic.w	r3, r3, #15
 8002d70:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <SystemInit+0xd4>)
 8002d72:	f043 0303 	orr.w	r3, r3, #3
 8002d76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <SystemInit+0xd8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a28      	ldr	r2, [pc, #160]	; (8002e20 <SystemInit+0xd8>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <SystemInit+0xd8>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <SystemInit+0xd8>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4924      	ldr	r1, [pc, #144]	; (8002e20 <SystemInit+0xd8>)
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <SystemInit+0xdc>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <SystemInit+0xd4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <SystemInit+0xd4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 030f 	bic.w	r3, r3, #15
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <SystemInit+0xd4>)
 8002dac:	f043 0303 	orr.w	r3, r3, #3
 8002db0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <SystemInit+0xd8>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <SystemInit+0xd8>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002dbe:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <SystemInit+0xd8>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <SystemInit+0xd8>)
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <SystemInit+0xe0>)
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <SystemInit+0xd8>)
 8002dcc:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <SystemInit+0xe4>)
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <SystemInit+0xd8>)
 8002dd2:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <SystemInit+0xe8>)
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <SystemInit+0xd8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <SystemInit+0xd8>)
 8002dde:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <SystemInit+0xe8>)
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <SystemInit+0xd8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <SystemInit+0xd8>)
 8002dea:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <SystemInit+0xe8>)
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <SystemInit+0xd8>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <SystemInit+0xd8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <SystemInit+0xd8>)
 8002dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <SystemInit+0xd8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <SystemInit+0xec>)
 8002e08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000ed00 	.word	0xe000ed00
 8002e1c:	52002000 	.word	0x52002000
 8002e20:	58024400 	.word	0x58024400
 8002e24:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e28:	02020200 	.word	0x02020200
 8002e2c:	01ff0000 	.word	0x01ff0000
 8002e30:	01010280 	.word	0x01010280
 8002e34:	52004000 	.word	0x52004000

08002e38 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8002e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e3c:	f7ff ff84 	bl	8002d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e42:	490d      	ldr	r1, [pc, #52]	; (8002e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e48:	e002      	b.n	8002e50 <LoopCopyDataInit>

08002e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4e:	3304      	adds	r3, #4

08002e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e54:	d3f9      	bcc.n	8002e4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e58:	4c0a      	ldr	r4, [pc, #40]	; (8002e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e5c:	e001      	b.n	8002e62 <LoopFillZerobss>

08002e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e60:	3204      	adds	r2, #4

08002e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e64:	d3fb      	bcc.n	8002e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e66:	f00e fe37 	bl	8011ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e6a:	f7fd fd0f 	bl	800088c <main>
  bx  lr
 8002e6e:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8002e70:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002e74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e78:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002e7c:	0801250c 	.word	0x0801250c
  ldr r2, =_sbss
 8002e80:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002e84:	24008a24 	.word	0x24008a24

08002e88 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e88:	e7fe      	b.n	8002e88 <ADC_IRQHandler>
	...

08002e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e92:	2003      	movs	r0, #3
 8002e94:	f000 f9a4 	bl	80031e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002e98:	f004 f8b6 	bl	8007008 <HAL_RCC_GetSysClockFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_Init+0x68>)
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	4913      	ldr	r1, [pc, #76]	; (8002ef8 <HAL_Init+0x6c>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_Init+0x68>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <HAL_Init+0x6c>)
 8002ec0:	5cd3      	ldrb	r3, [r2, r3]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <HAL_Init+0x70>)
 8002ece:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ed0:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <HAL_Init+0x74>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ed6:	200e      	movs	r0, #14
 8002ed8:	f000 f814 	bl	8002f04 <HAL_InitTick>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e002      	b.n	8002eec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee6:	f7ff f8ed 	bl	80020c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	08012474 	.word	0x08012474
 8002efc:	2400000c 	.word	0x2400000c
 8002f00:	24000008 	.word	0x24000008

08002f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f0c:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_InitTick+0x60>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e021      	b.n	8002f5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_InitTick+0x64>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_InitTick+0x60>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f997 	bl	8003262 <HAL_SYSTICK_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00e      	b.n	8002f5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b0f      	cmp	r3, #15
 8002f42:	d80a      	bhi.n	8002f5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f44:	2200      	movs	r2, #0
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	f000 f953 	bl	80031f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f50:	4a06      	ldr	r2, [pc, #24]	; (8002f6c <HAL_InitTick+0x68>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	24000014 	.word	0x24000014
 8002f68:	24000008 	.word	0x24000008
 8002f6c:	24000010 	.word	0x24000010

08002f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_IncTick+0x20>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x24>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <HAL_IncTick+0x24>)
 8002f82:	6013      	str	r3, [r2, #0]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	24000014 	.word	0x24000014
 8002f94:	2400879c 	.word	0x2400879c

08002f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_GetTick+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	2400879c 	.word	0x2400879c

08002fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff ffee 	bl	8002f98 <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d005      	beq.n	8002fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_Delay+0x44>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fd6:	bf00      	nop
 8002fd8:	f7ff ffde 	bl	8002f98 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d8f7      	bhi.n	8002fd8 <HAL_Delay+0x28>
  {
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	24000014 	.word	0x24000014

08002ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <__NVIC_SetPriorityGrouping+0x40>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003014:	4013      	ands	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <__NVIC_SetPriorityGrouping+0x44>)
 8003022:	4313      	orrs	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <__NVIC_SetPriorityGrouping+0x40>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00
 800303c:	05fa0000 	.word	0x05fa0000

08003040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <__NVIC_GetPriorityGrouping+0x18>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f003 0307 	and.w	r3, r3, #7
}
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	db0b      	blt.n	8003086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	f003 021f 	and.w	r2, r3, #31
 8003074:	4907      	ldr	r1, [pc, #28]	; (8003094 <__NVIC_EnableIRQ+0x38>)
 8003076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	2001      	movs	r0, #1
 800307e:	fa00 f202 	lsl.w	r2, r0, r2
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000e100 	.word	0xe000e100

08003098 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db12      	blt.n	80030d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	490a      	ldr	r1, [pc, #40]	; (80030dc <__NVIC_DisableIRQ+0x44>)
 80030b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	3320      	adds	r3, #32
 80030c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030c4:	f3bf 8f4f 	dsb	sy
}
 80030c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030ca:	f3bf 8f6f 	isb	sy
}
 80030ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100

080030e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	6039      	str	r1, [r7, #0]
 80030ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	db0a      	blt.n	800310a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	490c      	ldr	r1, [pc, #48]	; (800312c <__NVIC_SetPriority+0x4c>)
 80030fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030fe:	0112      	lsls	r2, r2, #4
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	440b      	add	r3, r1
 8003104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003108:	e00a      	b.n	8003120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4908      	ldr	r1, [pc, #32]	; (8003130 <__NVIC_SetPriority+0x50>)
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	3b04      	subs	r3, #4
 8003118:	0112      	lsls	r2, r2, #4
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	440b      	add	r3, r1
 800311e:	761a      	strb	r2, [r3, #24]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000e100 	.word	0xe000e100
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f1c3 0307 	rsb	r3, r3, #7
 800314e:	2b04      	cmp	r3, #4
 8003150:	bf28      	it	cs
 8003152:	2304      	movcs	r3, #4
 8003154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3304      	adds	r3, #4
 800315a:	2b06      	cmp	r3, #6
 800315c:	d902      	bls.n	8003164 <NVIC_EncodePriority+0x30>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3b03      	subs	r3, #3
 8003162:	e000      	b.n	8003166 <NVIC_EncodePriority+0x32>
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	f04f 32ff 	mov.w	r2, #4294967295
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	401a      	ands	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800317c:	f04f 31ff 	mov.w	r1, #4294967295
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43d9      	mvns	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800318c:	4313      	orrs	r3, r2
         );
}
 800318e:	4618      	mov	r0, r3
 8003190:	3724      	adds	r7, #36	; 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031ac:	d301      	bcc.n	80031b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00f      	b.n	80031d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <SysTick_Config+0x40>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ba:	210f      	movs	r1, #15
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	f7ff ff8e 	bl	80030e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <SysTick_Config+0x40>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <SysTick_Config+0x40>)
 80031cc:	2207      	movs	r2, #7
 80031ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	e000e010 	.word	0xe000e010

080031e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff05 	bl	8002ff8 <__NVIC_SetPriorityGrouping>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003204:	f7ff ff1c 	bl	8003040 <__NVIC_GetPriorityGrouping>
 8003208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	6978      	ldr	r0, [r7, #20]
 8003210:	f7ff ff90 	bl	8003134 <NVIC_EncodePriority>
 8003214:	4602      	mov	r2, r0
 8003216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff5f 	bl	80030e0 <__NVIC_SetPriority>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff0f 	bl	800305c <__NVIC_EnableIRQ>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff1f 	bl	8003098 <__NVIC_DisableIRQ>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ff96 	bl	800319c <SysTick_Config>
 8003270:	4603      	mov	r3, r0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff fe88 	bl	8002f98 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e37f      	b.n	8003994 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a66      	ldr	r2, [pc, #408]	; (8003434 <HAL_DMA_Init+0x1b8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d04a      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a65      	ldr	r2, [pc, #404]	; (8003438 <HAL_DMA_Init+0x1bc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d045      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a63      	ldr	r2, [pc, #396]	; (800343c <HAL_DMA_Init+0x1c0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d040      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a62      	ldr	r2, [pc, #392]	; (8003440 <HAL_DMA_Init+0x1c4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d03b      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a60      	ldr	r2, [pc, #384]	; (8003444 <HAL_DMA_Init+0x1c8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d036      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a5f      	ldr	r2, [pc, #380]	; (8003448 <HAL_DMA_Init+0x1cc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d031      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a5d      	ldr	r2, [pc, #372]	; (800344c <HAL_DMA_Init+0x1d0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d02c      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a5c      	ldr	r2, [pc, #368]	; (8003450 <HAL_DMA_Init+0x1d4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d027      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a5a      	ldr	r2, [pc, #360]	; (8003454 <HAL_DMA_Init+0x1d8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d022      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a59      	ldr	r2, [pc, #356]	; (8003458 <HAL_DMA_Init+0x1dc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d01d      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a57      	ldr	r2, [pc, #348]	; (800345c <HAL_DMA_Init+0x1e0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d018      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a56      	ldr	r2, [pc, #344]	; (8003460 <HAL_DMA_Init+0x1e4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d013      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a54      	ldr	r2, [pc, #336]	; (8003464 <HAL_DMA_Init+0x1e8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00e      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a53      	ldr	r2, [pc, #332]	; (8003468 <HAL_DMA_Init+0x1ec>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d009      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a51      	ldr	r2, [pc, #324]	; (800346c <HAL_DMA_Init+0x1f0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <HAL_DMA_Init+0xb8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a50      	ldr	r2, [pc, #320]	; (8003470 <HAL_DMA_Init+0x1f4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d101      	bne.n	8003338 <HAL_DMA_Init+0xbc>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_DMA_Init+0xbe>
 8003338:	2300      	movs	r3, #0
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 813c 	beq.w	80035b8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a37      	ldr	r2, [pc, #220]	; (8003434 <HAL_DMA_Init+0x1b8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d04a      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a36      	ldr	r2, [pc, #216]	; (8003438 <HAL_DMA_Init+0x1bc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d045      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a34      	ldr	r2, [pc, #208]	; (800343c <HAL_DMA_Init+0x1c0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d040      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a33      	ldr	r2, [pc, #204]	; (8003440 <HAL_DMA_Init+0x1c4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d03b      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a31      	ldr	r2, [pc, #196]	; (8003444 <HAL_DMA_Init+0x1c8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d036      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a30      	ldr	r2, [pc, #192]	; (8003448 <HAL_DMA_Init+0x1cc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d031      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2e      	ldr	r2, [pc, #184]	; (800344c <HAL_DMA_Init+0x1d0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d02c      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2d      	ldr	r2, [pc, #180]	; (8003450 <HAL_DMA_Init+0x1d4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d027      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2b      	ldr	r2, [pc, #172]	; (8003454 <HAL_DMA_Init+0x1d8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d022      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a2a      	ldr	r2, [pc, #168]	; (8003458 <HAL_DMA_Init+0x1dc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d01d      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a28      	ldr	r2, [pc, #160]	; (800345c <HAL_DMA_Init+0x1e0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d018      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a27      	ldr	r2, [pc, #156]	; (8003460 <HAL_DMA_Init+0x1e4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a25      	ldr	r2, [pc, #148]	; (8003464 <HAL_DMA_Init+0x1e8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00e      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a24      	ldr	r2, [pc, #144]	; (8003468 <HAL_DMA_Init+0x1ec>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d009      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_DMA_Init+0x1f0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_DMA_Init+0x174>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a21      	ldr	r2, [pc, #132]	; (8003470 <HAL_DMA_Init+0x1f4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <HAL_DMA_Init+0x186>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e007      	b.n	8003412 <HAL_DMA_Init+0x196>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003412:	e02f      	b.n	8003474 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003414:	f7ff fdc0 	bl	8002f98 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b05      	cmp	r3, #5
 8003420:	d928      	bls.n	8003474 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e2af      	b.n	8003994 <HAL_DMA_Init+0x718>
 8003434:	40020010 	.word	0x40020010
 8003438:	40020028 	.word	0x40020028
 800343c:	40020040 	.word	0x40020040
 8003440:	40020058 	.word	0x40020058
 8003444:	40020070 	.word	0x40020070
 8003448:	40020088 	.word	0x40020088
 800344c:	400200a0 	.word	0x400200a0
 8003450:	400200b8 	.word	0x400200b8
 8003454:	40020410 	.word	0x40020410
 8003458:	40020428 	.word	0x40020428
 800345c:	40020440 	.word	0x40020440
 8003460:	40020458 	.word	0x40020458
 8003464:	40020470 	.word	0x40020470
 8003468:	40020488 	.word	0x40020488
 800346c:	400204a0 	.word	0x400204a0
 8003470:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1c8      	bne.n	8003414 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4b73      	ldr	r3, [pc, #460]	; (800365c <HAL_DMA_Init+0x3e0>)
 800348e:	4013      	ands	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800349a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d107      	bne.n	80034d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	4313      	orrs	r3, r2
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b28      	cmp	r3, #40	; 0x28
 80034de:	d903      	bls.n	80034e8 <HAL_DMA_Init+0x26c>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b2e      	cmp	r3, #46	; 0x2e
 80034e6:	d91f      	bls.n	8003528 <HAL_DMA_Init+0x2ac>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b3e      	cmp	r3, #62	; 0x3e
 80034ee:	d903      	bls.n	80034f8 <HAL_DMA_Init+0x27c>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b42      	cmp	r3, #66	; 0x42
 80034f6:	d917      	bls.n	8003528 <HAL_DMA_Init+0x2ac>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b46      	cmp	r3, #70	; 0x46
 80034fe:	d903      	bls.n	8003508 <HAL_DMA_Init+0x28c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b48      	cmp	r3, #72	; 0x48
 8003506:	d90f      	bls.n	8003528 <HAL_DMA_Init+0x2ac>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b4e      	cmp	r3, #78	; 0x4e
 800350e:	d903      	bls.n	8003518 <HAL_DMA_Init+0x29c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b52      	cmp	r3, #82	; 0x52
 8003516:	d907      	bls.n	8003528 <HAL_DMA_Init+0x2ac>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b73      	cmp	r3, #115	; 0x73
 800351e:	d905      	bls.n	800352c <HAL_DMA_Init+0x2b0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b77      	cmp	r3, #119	; 0x77
 8003526:	d801      	bhi.n	800352c <HAL_DMA_Init+0x2b0>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_DMA_Init+0x2b2>
 800352c:	2300      	movs	r3, #0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003538:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f023 0307 	bic.w	r3, r3, #7
 8003550:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	2b04      	cmp	r3, #4
 8003562:	d117      	bne.n	8003594 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f002 fbe2 	bl	8005d40 <DMA_CheckFifoParam>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2240      	movs	r2, #64	; 0x40
 8003586:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e1ff      	b.n	8003994 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f002 fb1d 	bl	8005bdc <DMA_CalcBaseAndBitshift>
 80035a2:	4603      	mov	r3, r0
 80035a4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	223f      	movs	r2, #63	; 0x3f
 80035b0:	409a      	lsls	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	e0fe      	b.n	80037b6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a28      	ldr	r2, [pc, #160]	; (8003660 <HAL_DMA_Init+0x3e4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d04a      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a27      	ldr	r2, [pc, #156]	; (8003664 <HAL_DMA_Init+0x3e8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d045      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <HAL_DMA_Init+0x3ec>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d040      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a24      	ldr	r2, [pc, #144]	; (800366c <HAL_DMA_Init+0x3f0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d03b      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a22      	ldr	r2, [pc, #136]	; (8003670 <HAL_DMA_Init+0x3f4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d036      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a21      	ldr	r2, [pc, #132]	; (8003674 <HAL_DMA_Init+0x3f8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d031      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <HAL_DMA_Init+0x3fc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d02c      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1e      	ldr	r2, [pc, #120]	; (800367c <HAL_DMA_Init+0x400>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d027      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <HAL_DMA_Init+0x404>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d022      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_DMA_Init+0x408>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d01d      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a19      	ldr	r2, [pc, #100]	; (8003688 <HAL_DMA_Init+0x40c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a18      	ldr	r2, [pc, #96]	; (800368c <HAL_DMA_Init+0x410>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d013      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_DMA_Init+0x414>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00e      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_DMA_Init+0x418>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a13      	ldr	r2, [pc, #76]	; (8003698 <HAL_DMA_Init+0x41c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_DMA_Init+0x3dc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <HAL_DMA_Init+0x420>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d123      	bne.n	80036a0 <HAL_DMA_Init+0x424>
 8003658:	2301      	movs	r3, #1
 800365a:	e022      	b.n	80036a2 <HAL_DMA_Init+0x426>
 800365c:	fe10803f 	.word	0xfe10803f
 8003660:	48022c08 	.word	0x48022c08
 8003664:	48022c1c 	.word	0x48022c1c
 8003668:	48022c30 	.word	0x48022c30
 800366c:	48022c44 	.word	0x48022c44
 8003670:	48022c58 	.word	0x48022c58
 8003674:	48022c6c 	.word	0x48022c6c
 8003678:	48022c80 	.word	0x48022c80
 800367c:	48022c94 	.word	0x48022c94
 8003680:	58025408 	.word	0x58025408
 8003684:	5802541c 	.word	0x5802541c
 8003688:	58025430 	.word	0x58025430
 800368c:	58025444 	.word	0x58025444
 8003690:	58025458 	.word	0x58025458
 8003694:	5802546c 	.word	0x5802546c
 8003698:	58025480 	.word	0x58025480
 800369c:	58025494 	.word	0x58025494
 80036a0:	2300      	movs	r3, #0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d07e      	beq.n	80037a4 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a80      	ldr	r2, [pc, #512]	; (80038ac <HAL_DMA_Init+0x630>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d021      	beq.n	80036f4 <HAL_DMA_Init+0x478>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a7e      	ldr	r2, [pc, #504]	; (80038b0 <HAL_DMA_Init+0x634>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01c      	beq.n	80036f4 <HAL_DMA_Init+0x478>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7d      	ldr	r2, [pc, #500]	; (80038b4 <HAL_DMA_Init+0x638>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d017      	beq.n	80036f4 <HAL_DMA_Init+0x478>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a7b      	ldr	r2, [pc, #492]	; (80038b8 <HAL_DMA_Init+0x63c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d012      	beq.n	80036f4 <HAL_DMA_Init+0x478>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a7a      	ldr	r2, [pc, #488]	; (80038bc <HAL_DMA_Init+0x640>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00d      	beq.n	80036f4 <HAL_DMA_Init+0x478>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a78      	ldr	r2, [pc, #480]	; (80038c0 <HAL_DMA_Init+0x644>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d008      	beq.n	80036f4 <HAL_DMA_Init+0x478>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a77      	ldr	r2, [pc, #476]	; (80038c4 <HAL_DMA_Init+0x648>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <HAL_DMA_Init+0x478>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a75      	ldr	r2, [pc, #468]	; (80038c8 <HAL_DMA_Init+0x64c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2202      	movs	r2, #2
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4b6e      	ldr	r3, [pc, #440]	; (80038cc <HAL_DMA_Init+0x650>)
 8003712:	4013      	ands	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d008      	beq.n	8003730 <HAL_DMA_Init+0x4b4>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b80      	cmp	r3, #128	; 0x80
 8003724:	d102      	bne.n	800372c <HAL_DMA_Init+0x4b0>
 8003726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800372a:	e002      	b.n	8003732 <HAL_DMA_Init+0x4b6>
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_DMA_Init+0x4b6>
 8003730:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68d2      	ldr	r2, [r2, #12]
 8003736:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003738:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003740:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003748:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003750:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003758:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003760:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4b56      	ldr	r3, [pc, #344]	; (80038d0 <HAL_DMA_Init+0x654>)
 8003778:	4413      	add	r3, r2
 800377a:	4a56      	ldr	r2, [pc, #344]	; (80038d4 <HAL_DMA_Init+0x658>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	009a      	lsls	r2, r3, #2
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f002 fa27 	bl	8005bdc <DMA_CalcBaseAndBitshift>
 800378e:	4603      	mov	r3, r0
 8003790:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	2201      	movs	r2, #1
 800379c:	409a      	lsls	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	e008      	b.n	80037b6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2203      	movs	r2, #3
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e0ee      	b.n	8003994 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a47      	ldr	r2, [pc, #284]	; (80038d8 <HAL_DMA_Init+0x65c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d072      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a45      	ldr	r2, [pc, #276]	; (80038dc <HAL_DMA_Init+0x660>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d06d      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a44      	ldr	r2, [pc, #272]	; (80038e0 <HAL_DMA_Init+0x664>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d068      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a42      	ldr	r2, [pc, #264]	; (80038e4 <HAL_DMA_Init+0x668>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d063      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a41      	ldr	r2, [pc, #260]	; (80038e8 <HAL_DMA_Init+0x66c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d05e      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a3f      	ldr	r2, [pc, #252]	; (80038ec <HAL_DMA_Init+0x670>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d059      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a3e      	ldr	r2, [pc, #248]	; (80038f0 <HAL_DMA_Init+0x674>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d054      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a3c      	ldr	r2, [pc, #240]	; (80038f4 <HAL_DMA_Init+0x678>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04f      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a3b      	ldr	r2, [pc, #236]	; (80038f8 <HAL_DMA_Init+0x67c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d04a      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a39      	ldr	r2, [pc, #228]	; (80038fc <HAL_DMA_Init+0x680>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d045      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a38      	ldr	r2, [pc, #224]	; (8003900 <HAL_DMA_Init+0x684>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d040      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a36      	ldr	r2, [pc, #216]	; (8003904 <HAL_DMA_Init+0x688>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d03b      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a35      	ldr	r2, [pc, #212]	; (8003908 <HAL_DMA_Init+0x68c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d036      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a33      	ldr	r2, [pc, #204]	; (800390c <HAL_DMA_Init+0x690>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d031      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a32      	ldr	r2, [pc, #200]	; (8003910 <HAL_DMA_Init+0x694>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d02c      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a30      	ldr	r2, [pc, #192]	; (8003914 <HAL_DMA_Init+0x698>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d027      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a14      	ldr	r2, [pc, #80]	; (80038ac <HAL_DMA_Init+0x630>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d022      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <HAL_DMA_Init+0x634>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01d      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a11      	ldr	r2, [pc, #68]	; (80038b4 <HAL_DMA_Init+0x638>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d018      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <HAL_DMA_Init+0x63c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a0e      	ldr	r2, [pc, #56]	; (80038bc <HAL_DMA_Init+0x640>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00e      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0c      	ldr	r2, [pc, #48]	; (80038c0 <HAL_DMA_Init+0x644>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a0b      	ldr	r2, [pc, #44]	; (80038c4 <HAL_DMA_Init+0x648>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_DMA_Init+0x62a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_DMA_Init+0x64c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d138      	bne.n	8003918 <HAL_DMA_Init+0x69c>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e037      	b.n	800391a <HAL_DMA_Init+0x69e>
 80038aa:	bf00      	nop
 80038ac:	58025408 	.word	0x58025408
 80038b0:	5802541c 	.word	0x5802541c
 80038b4:	58025430 	.word	0x58025430
 80038b8:	58025444 	.word	0x58025444
 80038bc:	58025458 	.word	0x58025458
 80038c0:	5802546c 	.word	0x5802546c
 80038c4:	58025480 	.word	0x58025480
 80038c8:	58025494 	.word	0x58025494
 80038cc:	fffe000f 	.word	0xfffe000f
 80038d0:	a7fdabf8 	.word	0xa7fdabf8
 80038d4:	cccccccd 	.word	0xcccccccd
 80038d8:	40020010 	.word	0x40020010
 80038dc:	40020028 	.word	0x40020028
 80038e0:	40020040 	.word	0x40020040
 80038e4:	40020058 	.word	0x40020058
 80038e8:	40020070 	.word	0x40020070
 80038ec:	40020088 	.word	0x40020088
 80038f0:	400200a0 	.word	0x400200a0
 80038f4:	400200b8 	.word	0x400200b8
 80038f8:	40020410 	.word	0x40020410
 80038fc:	40020428 	.word	0x40020428
 8003900:	40020440 	.word	0x40020440
 8003904:	40020458 	.word	0x40020458
 8003908:	40020470 	.word	0x40020470
 800390c:	40020488 	.word	0x40020488
 8003910:	400204a0 	.word	0x400204a0
 8003914:	400204b8 	.word	0x400204b8
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d032      	beq.n	8003984 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f002 fa8a 	bl	8005e38 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d102      	bne.n	8003932 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003946:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d010      	beq.n	8003972 <HAL_DMA_Init+0x6f6>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d80c      	bhi.n	8003972 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f002 fb07 	bl	8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	e008      	b.n	8003984 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e226      	b.n	8003e06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_DMA_Start_IT+0x2a>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e21f      	b.n	8003e06 <HAL_DMA_Start_IT+0x46a>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	f040 820a 	bne.w	8003df0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a68      	ldr	r2, [pc, #416]	; (8003b90 <HAL_DMA_Start_IT+0x1f4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d04a      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a66      	ldr	r2, [pc, #408]	; (8003b94 <HAL_DMA_Start_IT+0x1f8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d045      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a65      	ldr	r2, [pc, #404]	; (8003b98 <HAL_DMA_Start_IT+0x1fc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d040      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a63      	ldr	r2, [pc, #396]	; (8003b9c <HAL_DMA_Start_IT+0x200>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d03b      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a62      	ldr	r2, [pc, #392]	; (8003ba0 <HAL_DMA_Start_IT+0x204>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d036      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a60      	ldr	r2, [pc, #384]	; (8003ba4 <HAL_DMA_Start_IT+0x208>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d031      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5f      	ldr	r2, [pc, #380]	; (8003ba8 <HAL_DMA_Start_IT+0x20c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d02c      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5d      	ldr	r2, [pc, #372]	; (8003bac <HAL_DMA_Start_IT+0x210>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d027      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a5c      	ldr	r2, [pc, #368]	; (8003bb0 <HAL_DMA_Start_IT+0x214>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d022      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5a      	ldr	r2, [pc, #360]	; (8003bb4 <HAL_DMA_Start_IT+0x218>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01d      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a59      	ldr	r2, [pc, #356]	; (8003bb8 <HAL_DMA_Start_IT+0x21c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a57      	ldr	r2, [pc, #348]	; (8003bbc <HAL_DMA_Start_IT+0x220>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a56      	ldr	r2, [pc, #344]	; (8003bc0 <HAL_DMA_Start_IT+0x224>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a54      	ldr	r2, [pc, #336]	; (8003bc4 <HAL_DMA_Start_IT+0x228>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a53      	ldr	r2, [pc, #332]	; (8003bc8 <HAL_DMA_Start_IT+0x22c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_DMA_Start_IT+0xee>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a51      	ldr	r2, [pc, #324]	; (8003bcc <HAL_DMA_Start_IT+0x230>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d108      	bne.n	8003a9c <HAL_DMA_Start_IT+0x100>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	e007      	b.n	8003aac <HAL_DMA_Start_IT+0x110>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f001 feae 	bl	8005814 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <HAL_DMA_Start_IT+0x1f4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d04a      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <HAL_DMA_Start_IT+0x1f8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d045      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <HAL_DMA_Start_IT+0x1fc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d040      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <HAL_DMA_Start_IT+0x200>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d03b      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a2e      	ldr	r2, [pc, #184]	; (8003ba0 <HAL_DMA_Start_IT+0x204>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d036      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a2d      	ldr	r2, [pc, #180]	; (8003ba4 <HAL_DMA_Start_IT+0x208>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d031      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <HAL_DMA_Start_IT+0x20c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02c      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <HAL_DMA_Start_IT+0x210>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d027      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a28      	ldr	r2, [pc, #160]	; (8003bb0 <HAL_DMA_Start_IT+0x214>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d022      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a27      	ldr	r2, [pc, #156]	; (8003bb4 <HAL_DMA_Start_IT+0x218>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d01d      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <HAL_DMA_Start_IT+0x21c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <HAL_DMA_Start_IT+0x220>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <HAL_DMA_Start_IT+0x224>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <HAL_DMA_Start_IT+0x228>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <HAL_DMA_Start_IT+0x22c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_DMA_Start_IT+0x1bc>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_DMA_Start_IT+0x230>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_DMA_Start_IT+0x1c0>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_DMA_Start_IT+0x1c2>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d036      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f023 021e 	bic.w	r2, r3, #30
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0216 	orr.w	r2, r2, #22
 8003b74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d03e      	beq.n	8003bfc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0208 	orr.w	r2, r2, #8
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e035      	b.n	8003bfc <HAL_DMA_Start_IT+0x260>
 8003b90:	40020010 	.word	0x40020010
 8003b94:	40020028 	.word	0x40020028
 8003b98:	40020040 	.word	0x40020040
 8003b9c:	40020058 	.word	0x40020058
 8003ba0:	40020070 	.word	0x40020070
 8003ba4:	40020088 	.word	0x40020088
 8003ba8:	400200a0 	.word	0x400200a0
 8003bac:	400200b8 	.word	0x400200b8
 8003bb0:	40020410 	.word	0x40020410
 8003bb4:	40020428 	.word	0x40020428
 8003bb8:	40020440 	.word	0x40020440
 8003bbc:	40020458 	.word	0x40020458
 8003bc0:	40020470 	.word	0x40020470
 8003bc4:	40020488 	.word	0x40020488
 8003bc8:	400204a0 	.word	0x400204a0
 8003bcc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 020e 	bic.w	r2, r3, #14
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 020a 	orr.w	r2, r2, #10
 8003be2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0204 	orr.w	r2, r2, #4
 8003bfa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a83      	ldr	r2, [pc, #524]	; (8003e10 <HAL_DMA_Start_IT+0x474>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d072      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a82      	ldr	r2, [pc, #520]	; (8003e14 <HAL_DMA_Start_IT+0x478>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d06d      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a80      	ldr	r2, [pc, #512]	; (8003e18 <HAL_DMA_Start_IT+0x47c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d068      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7f      	ldr	r2, [pc, #508]	; (8003e1c <HAL_DMA_Start_IT+0x480>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d063      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a7d      	ldr	r2, [pc, #500]	; (8003e20 <HAL_DMA_Start_IT+0x484>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d05e      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7c      	ldr	r2, [pc, #496]	; (8003e24 <HAL_DMA_Start_IT+0x488>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d059      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a7a      	ldr	r2, [pc, #488]	; (8003e28 <HAL_DMA_Start_IT+0x48c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d054      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a79      	ldr	r2, [pc, #484]	; (8003e2c <HAL_DMA_Start_IT+0x490>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d04f      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a77      	ldr	r2, [pc, #476]	; (8003e30 <HAL_DMA_Start_IT+0x494>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d04a      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a76      	ldr	r2, [pc, #472]	; (8003e34 <HAL_DMA_Start_IT+0x498>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d045      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a74      	ldr	r2, [pc, #464]	; (8003e38 <HAL_DMA_Start_IT+0x49c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d040      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a73      	ldr	r2, [pc, #460]	; (8003e3c <HAL_DMA_Start_IT+0x4a0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d03b      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a71      	ldr	r2, [pc, #452]	; (8003e40 <HAL_DMA_Start_IT+0x4a4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d036      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a70      	ldr	r2, [pc, #448]	; (8003e44 <HAL_DMA_Start_IT+0x4a8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d031      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a6e      	ldr	r2, [pc, #440]	; (8003e48 <HAL_DMA_Start_IT+0x4ac>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02c      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a6d      	ldr	r2, [pc, #436]	; (8003e4c <HAL_DMA_Start_IT+0x4b0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d027      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a6b      	ldr	r2, [pc, #428]	; (8003e50 <HAL_DMA_Start_IT+0x4b4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d022      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6a      	ldr	r2, [pc, #424]	; (8003e54 <HAL_DMA_Start_IT+0x4b8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d01d      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a68      	ldr	r2, [pc, #416]	; (8003e58 <HAL_DMA_Start_IT+0x4bc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d018      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <HAL_DMA_Start_IT+0x4c0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a65      	ldr	r2, [pc, #404]	; (8003e60 <HAL_DMA_Start_IT+0x4c4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a64      	ldr	r2, [pc, #400]	; (8003e64 <HAL_DMA_Start_IT+0x4c8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a62      	ldr	r2, [pc, #392]	; (8003e68 <HAL_DMA_Start_IT+0x4cc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_DMA_Start_IT+0x350>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a61      	ldr	r2, [pc, #388]	; (8003e6c <HAL_DMA_Start_IT+0x4d0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <HAL_DMA_Start_IT+0x354>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_DMA_Start_IT+0x356>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01a      	beq.n	8003d2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a37      	ldr	r2, [pc, #220]	; (8003e10 <HAL_DMA_Start_IT+0x474>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d04a      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a36      	ldr	r2, [pc, #216]	; (8003e14 <HAL_DMA_Start_IT+0x478>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d045      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a34      	ldr	r2, [pc, #208]	; (8003e18 <HAL_DMA_Start_IT+0x47c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d040      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a33      	ldr	r2, [pc, #204]	; (8003e1c <HAL_DMA_Start_IT+0x480>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d03b      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a31      	ldr	r2, [pc, #196]	; (8003e20 <HAL_DMA_Start_IT+0x484>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d036      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a30      	ldr	r2, [pc, #192]	; (8003e24 <HAL_DMA_Start_IT+0x488>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d031      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a2e      	ldr	r2, [pc, #184]	; (8003e28 <HAL_DMA_Start_IT+0x48c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d02c      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2d      	ldr	r2, [pc, #180]	; (8003e2c <HAL_DMA_Start_IT+0x490>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d027      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a2b      	ldr	r2, [pc, #172]	; (8003e30 <HAL_DMA_Start_IT+0x494>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d022      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <HAL_DMA_Start_IT+0x498>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d01d      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a28      	ldr	r2, [pc, #160]	; (8003e38 <HAL_DMA_Start_IT+0x49c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d018      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a27      	ldr	r2, [pc, #156]	; (8003e3c <HAL_DMA_Start_IT+0x4a0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d013      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a25      	ldr	r2, [pc, #148]	; (8003e40 <HAL_DMA_Start_IT+0x4a4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00e      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a24      	ldr	r2, [pc, #144]	; (8003e44 <HAL_DMA_Start_IT+0x4a8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d009      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <HAL_DMA_Start_IT+0x4ac>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <HAL_DMA_Start_IT+0x430>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <HAL_DMA_Start_IT+0x4b0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d108      	bne.n	8003dde <HAL_DMA_Start_IT+0x442>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	e012      	b.n	8003e04 <HAL_DMA_Start_IT+0x468>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e009      	b.n	8003e04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40020010 	.word	0x40020010
 8003e14:	40020028 	.word	0x40020028
 8003e18:	40020040 	.word	0x40020040
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	40020070 	.word	0x40020070
 8003e24:	40020088 	.word	0x40020088
 8003e28:	400200a0 	.word	0x400200a0
 8003e2c:	400200b8 	.word	0x400200b8
 8003e30:	40020410 	.word	0x40020410
 8003e34:	40020428 	.word	0x40020428
 8003e38:	40020440 	.word	0x40020440
 8003e3c:	40020458 	.word	0x40020458
 8003e40:	40020470 	.word	0x40020470
 8003e44:	40020488 	.word	0x40020488
 8003e48:	400204a0 	.word	0x400204a0
 8003e4c:	400204b8 	.word	0x400204b8
 8003e50:	58025408 	.word	0x58025408
 8003e54:	5802541c 	.word	0x5802541c
 8003e58:	58025430 	.word	0x58025430
 8003e5c:	58025444 	.word	0x58025444
 8003e60:	58025458 	.word	0x58025458
 8003e64:	5802546c 	.word	0x5802546c
 8003e68:	58025480 	.word	0x58025480
 8003e6c:	58025494 	.word	0x58025494

08003e70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003e78:	f7ff f88e 	bl	8002f98 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e2dc      	b.n	8004442 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d008      	beq.n	8003ea6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2280      	movs	r2, #128	; 0x80
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e2cd      	b.n	8004442 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a76      	ldr	r2, [pc, #472]	; (8004084 <HAL_DMA_Abort+0x214>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d04a      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a74      	ldr	r2, [pc, #464]	; (8004088 <HAL_DMA_Abort+0x218>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d045      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a73      	ldr	r2, [pc, #460]	; (800408c <HAL_DMA_Abort+0x21c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d040      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a71      	ldr	r2, [pc, #452]	; (8004090 <HAL_DMA_Abort+0x220>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d03b      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a70      	ldr	r2, [pc, #448]	; (8004094 <HAL_DMA_Abort+0x224>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d036      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6e      	ldr	r2, [pc, #440]	; (8004098 <HAL_DMA_Abort+0x228>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d031      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6d      	ldr	r2, [pc, #436]	; (800409c <HAL_DMA_Abort+0x22c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d02c      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6b      	ldr	r2, [pc, #428]	; (80040a0 <HAL_DMA_Abort+0x230>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d027      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a6a      	ldr	r2, [pc, #424]	; (80040a4 <HAL_DMA_Abort+0x234>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d022      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a68      	ldr	r2, [pc, #416]	; (80040a8 <HAL_DMA_Abort+0x238>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01d      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a67      	ldr	r2, [pc, #412]	; (80040ac <HAL_DMA_Abort+0x23c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d018      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a65      	ldr	r2, [pc, #404]	; (80040b0 <HAL_DMA_Abort+0x240>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a64      	ldr	r2, [pc, #400]	; (80040b4 <HAL_DMA_Abort+0x244>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a62      	ldr	r2, [pc, #392]	; (80040b8 <HAL_DMA_Abort+0x248>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a61      	ldr	r2, [pc, #388]	; (80040bc <HAL_DMA_Abort+0x24c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a5f      	ldr	r2, [pc, #380]	; (80040c0 <HAL_DMA_Abort+0x250>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_DMA_Abort+0xda>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_DMA_Abort+0xdc>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 021e 	bic.w	r2, r2, #30
 8003f5e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f6e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e00a      	b.n	8003f8e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020e 	bic.w	r2, r2, #14
 8003f86:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <HAL_DMA_Abort+0x214>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d072      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3a      	ldr	r2, [pc, #232]	; (8004088 <HAL_DMA_Abort+0x218>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d06d      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a39      	ldr	r2, [pc, #228]	; (800408c <HAL_DMA_Abort+0x21c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d068      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a37      	ldr	r2, [pc, #220]	; (8004090 <HAL_DMA_Abort+0x220>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d063      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a36      	ldr	r2, [pc, #216]	; (8004094 <HAL_DMA_Abort+0x224>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d05e      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a34      	ldr	r2, [pc, #208]	; (8004098 <HAL_DMA_Abort+0x228>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d059      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a33      	ldr	r2, [pc, #204]	; (800409c <HAL_DMA_Abort+0x22c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d054      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a31      	ldr	r2, [pc, #196]	; (80040a0 <HAL_DMA_Abort+0x230>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d04f      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a30      	ldr	r2, [pc, #192]	; (80040a4 <HAL_DMA_Abort+0x234>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d04a      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2e      	ldr	r2, [pc, #184]	; (80040a8 <HAL_DMA_Abort+0x238>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d045      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2d      	ldr	r2, [pc, #180]	; (80040ac <HAL_DMA_Abort+0x23c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d040      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a2b      	ldr	r2, [pc, #172]	; (80040b0 <HAL_DMA_Abort+0x240>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d03b      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <HAL_DMA_Abort+0x244>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d036      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a28      	ldr	r2, [pc, #160]	; (80040b8 <HAL_DMA_Abort+0x248>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d031      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a27      	ldr	r2, [pc, #156]	; (80040bc <HAL_DMA_Abort+0x24c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d02c      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a25      	ldr	r2, [pc, #148]	; (80040c0 <HAL_DMA_Abort+0x250>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d027      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a24      	ldr	r2, [pc, #144]	; (80040c4 <HAL_DMA_Abort+0x254>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d022      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <HAL_DMA_Abort+0x258>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01d      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a21      	ldr	r2, [pc, #132]	; (80040cc <HAL_DMA_Abort+0x25c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d018      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <HAL_DMA_Abort+0x260>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <HAL_DMA_Abort+0x264>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00e      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <HAL_DMA_Abort+0x268>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d009      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <HAL_DMA_Abort+0x26c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d004      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <HAL_DMA_Abort+0x270>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d132      	bne.n	80040e4 <HAL_DMA_Abort+0x274>
 800407e:	2301      	movs	r3, #1
 8004080:	e031      	b.n	80040e6 <HAL_DMA_Abort+0x276>
 8004082:	bf00      	nop
 8004084:	40020010 	.word	0x40020010
 8004088:	40020028 	.word	0x40020028
 800408c:	40020040 	.word	0x40020040
 8004090:	40020058 	.word	0x40020058
 8004094:	40020070 	.word	0x40020070
 8004098:	40020088 	.word	0x40020088
 800409c:	400200a0 	.word	0x400200a0
 80040a0:	400200b8 	.word	0x400200b8
 80040a4:	40020410 	.word	0x40020410
 80040a8:	40020428 	.word	0x40020428
 80040ac:	40020440 	.word	0x40020440
 80040b0:	40020458 	.word	0x40020458
 80040b4:	40020470 	.word	0x40020470
 80040b8:	40020488 	.word	0x40020488
 80040bc:	400204a0 	.word	0x400204a0
 80040c0:	400204b8 	.word	0x400204b8
 80040c4:	58025408 	.word	0x58025408
 80040c8:	5802541c 	.word	0x5802541c
 80040cc:	58025430 	.word	0x58025430
 80040d0:	58025444 	.word	0x58025444
 80040d4:	58025458 	.word	0x58025458
 80040d8:	5802546c 	.word	0x5802546c
 80040dc:	58025480 	.word	0x58025480
 80040e0:	58025494 	.word	0x58025494
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6d      	ldr	r2, [pc, #436]	; (80042b4 <HAL_DMA_Abort+0x444>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d04a      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a6b      	ldr	r2, [pc, #428]	; (80042b8 <HAL_DMA_Abort+0x448>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d045      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6a      	ldr	r2, [pc, #424]	; (80042bc <HAL_DMA_Abort+0x44c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d040      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a68      	ldr	r2, [pc, #416]	; (80042c0 <HAL_DMA_Abort+0x450>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d03b      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a67      	ldr	r2, [pc, #412]	; (80042c4 <HAL_DMA_Abort+0x454>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d036      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a65      	ldr	r2, [pc, #404]	; (80042c8 <HAL_DMA_Abort+0x458>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d031      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a64      	ldr	r2, [pc, #400]	; (80042cc <HAL_DMA_Abort+0x45c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d02c      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a62      	ldr	r2, [pc, #392]	; (80042d0 <HAL_DMA_Abort+0x460>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d027      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a61      	ldr	r2, [pc, #388]	; (80042d4 <HAL_DMA_Abort+0x464>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d022      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a5f      	ldr	r2, [pc, #380]	; (80042d8 <HAL_DMA_Abort+0x468>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01d      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5e      	ldr	r2, [pc, #376]	; (80042dc <HAL_DMA_Abort+0x46c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d018      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a5c      	ldr	r2, [pc, #368]	; (80042e0 <HAL_DMA_Abort+0x470>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a5b      	ldr	r2, [pc, #364]	; (80042e4 <HAL_DMA_Abort+0x474>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00e      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a59      	ldr	r2, [pc, #356]	; (80042e8 <HAL_DMA_Abort+0x478>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a58      	ldr	r2, [pc, #352]	; (80042ec <HAL_DMA_Abort+0x47c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a56      	ldr	r2, [pc, #344]	; (80042f0 <HAL_DMA_Abort+0x480>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <HAL_DMA_Abort+0x33c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e007      	b.n	80041bc <HAL_DMA_Abort+0x34c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80041bc:	e013      	b.n	80041e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041be:	f7fe feeb 	bl	8002f98 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b05      	cmp	r3, #5
 80041ca:	d90c      	bls.n	80041e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2203      	movs	r2, #3
 80041d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e12d      	b.n	8004442 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e5      	bne.n	80041be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a2f      	ldr	r2, [pc, #188]	; (80042b4 <HAL_DMA_Abort+0x444>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d04a      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2d      	ldr	r2, [pc, #180]	; (80042b8 <HAL_DMA_Abort+0x448>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d045      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <HAL_DMA_Abort+0x44c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d040      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2a      	ldr	r2, [pc, #168]	; (80042c0 <HAL_DMA_Abort+0x450>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d03b      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a29      	ldr	r2, [pc, #164]	; (80042c4 <HAL_DMA_Abort+0x454>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d036      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a27      	ldr	r2, [pc, #156]	; (80042c8 <HAL_DMA_Abort+0x458>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d031      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a26      	ldr	r2, [pc, #152]	; (80042cc <HAL_DMA_Abort+0x45c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d02c      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <HAL_DMA_Abort+0x460>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d027      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <HAL_DMA_Abort+0x464>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d022      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <HAL_DMA_Abort+0x468>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01d      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a20      	ldr	r2, [pc, #128]	; (80042dc <HAL_DMA_Abort+0x46c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d018      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <HAL_DMA_Abort+0x470>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <HAL_DMA_Abort+0x474>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <HAL_DMA_Abort+0x478>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <HAL_DMA_Abort+0x47c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_DMA_Abort+0x480>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_DMA_Abort+0x426>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_DMA_Abort+0x428>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02b      	beq.n	80042f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	223f      	movs	r2, #63	; 0x3f
 80042ac:	409a      	lsls	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	e02a      	b.n	800430a <HAL_DMA_Abort+0x49a>
 80042b4:	40020010 	.word	0x40020010
 80042b8:	40020028 	.word	0x40020028
 80042bc:	40020040 	.word	0x40020040
 80042c0:	40020058 	.word	0x40020058
 80042c4:	40020070 	.word	0x40020070
 80042c8:	40020088 	.word	0x40020088
 80042cc:	400200a0 	.word	0x400200a0
 80042d0:	400200b8 	.word	0x400200b8
 80042d4:	40020410 	.word	0x40020410
 80042d8:	40020428 	.word	0x40020428
 80042dc:	40020440 	.word	0x40020440
 80042e0:	40020458 	.word	0x40020458
 80042e4:	40020470 	.word	0x40020470
 80042e8:	40020488 	.word	0x40020488
 80042ec:	400204a0 	.word	0x400204a0
 80042f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	2201      	movs	r2, #1
 8004304:	409a      	lsls	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a4f      	ldr	r2, [pc, #316]	; (800444c <HAL_DMA_Abort+0x5dc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d072      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a4d      	ldr	r2, [pc, #308]	; (8004450 <HAL_DMA_Abort+0x5e0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d06d      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a4c      	ldr	r2, [pc, #304]	; (8004454 <HAL_DMA_Abort+0x5e4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d068      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a4a      	ldr	r2, [pc, #296]	; (8004458 <HAL_DMA_Abort+0x5e8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d063      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a49      	ldr	r2, [pc, #292]	; (800445c <HAL_DMA_Abort+0x5ec>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d05e      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a47      	ldr	r2, [pc, #284]	; (8004460 <HAL_DMA_Abort+0x5f0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d059      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a46      	ldr	r2, [pc, #280]	; (8004464 <HAL_DMA_Abort+0x5f4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d054      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a44      	ldr	r2, [pc, #272]	; (8004468 <HAL_DMA_Abort+0x5f8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d04f      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a43      	ldr	r2, [pc, #268]	; (800446c <HAL_DMA_Abort+0x5fc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d04a      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a41      	ldr	r2, [pc, #260]	; (8004470 <HAL_DMA_Abort+0x600>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d045      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a40      	ldr	r2, [pc, #256]	; (8004474 <HAL_DMA_Abort+0x604>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d040      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a3e      	ldr	r2, [pc, #248]	; (8004478 <HAL_DMA_Abort+0x608>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d03b      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3d      	ldr	r2, [pc, #244]	; (800447c <HAL_DMA_Abort+0x60c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d036      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3b      	ldr	r2, [pc, #236]	; (8004480 <HAL_DMA_Abort+0x610>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d031      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a3a      	ldr	r2, [pc, #232]	; (8004484 <HAL_DMA_Abort+0x614>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d02c      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a38      	ldr	r2, [pc, #224]	; (8004488 <HAL_DMA_Abort+0x618>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d027      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a37      	ldr	r2, [pc, #220]	; (800448c <HAL_DMA_Abort+0x61c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d022      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a35      	ldr	r2, [pc, #212]	; (8004490 <HAL_DMA_Abort+0x620>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01d      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a34      	ldr	r2, [pc, #208]	; (8004494 <HAL_DMA_Abort+0x624>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d018      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a32      	ldr	r2, [pc, #200]	; (8004498 <HAL_DMA_Abort+0x628>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a31      	ldr	r2, [pc, #196]	; (800449c <HAL_DMA_Abort+0x62c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00e      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2f      	ldr	r2, [pc, #188]	; (80044a0 <HAL_DMA_Abort+0x630>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2e      	ldr	r2, [pc, #184]	; (80044a4 <HAL_DMA_Abort+0x634>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2c      	ldr	r2, [pc, #176]	; (80044a8 <HAL_DMA_Abort+0x638>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d101      	bne.n	80043fe <HAL_DMA_Abort+0x58e>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_DMA_Abort+0x590>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d015      	beq.n	8004430 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800440c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00c      	beq.n	8004430 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004424:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800442e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40020010 	.word	0x40020010
 8004450:	40020028 	.word	0x40020028
 8004454:	40020040 	.word	0x40020040
 8004458:	40020058 	.word	0x40020058
 800445c:	40020070 	.word	0x40020070
 8004460:	40020088 	.word	0x40020088
 8004464:	400200a0 	.word	0x400200a0
 8004468:	400200b8 	.word	0x400200b8
 800446c:	40020410 	.word	0x40020410
 8004470:	40020428 	.word	0x40020428
 8004474:	40020440 	.word	0x40020440
 8004478:	40020458 	.word	0x40020458
 800447c:	40020470 	.word	0x40020470
 8004480:	40020488 	.word	0x40020488
 8004484:	400204a0 	.word	0x400204a0
 8004488:	400204b8 	.word	0x400204b8
 800448c:	58025408 	.word	0x58025408
 8004490:	5802541c 	.word	0x5802541c
 8004494:	58025430 	.word	0x58025430
 8004498:	58025444 	.word	0x58025444
 800449c:	58025458 	.word	0x58025458
 80044a0:	5802546c 	.word	0x5802546c
 80044a4:	58025480 	.word	0x58025480
 80044a8:	58025494 	.word	0x58025494

080044ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e237      	b.n	800492e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d004      	beq.n	80044d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2280      	movs	r2, #128	; 0x80
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e22c      	b.n	800492e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a5c      	ldr	r2, [pc, #368]	; (800464c <HAL_DMA_Abort_IT+0x1a0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d04a      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a5b      	ldr	r2, [pc, #364]	; (8004650 <HAL_DMA_Abort_IT+0x1a4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d045      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a59      	ldr	r2, [pc, #356]	; (8004654 <HAL_DMA_Abort_IT+0x1a8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d040      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a58      	ldr	r2, [pc, #352]	; (8004658 <HAL_DMA_Abort_IT+0x1ac>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d03b      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a56      	ldr	r2, [pc, #344]	; (800465c <HAL_DMA_Abort_IT+0x1b0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d036      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a55      	ldr	r2, [pc, #340]	; (8004660 <HAL_DMA_Abort_IT+0x1b4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d031      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a53      	ldr	r2, [pc, #332]	; (8004664 <HAL_DMA_Abort_IT+0x1b8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d02c      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a52      	ldr	r2, [pc, #328]	; (8004668 <HAL_DMA_Abort_IT+0x1bc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d027      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a50      	ldr	r2, [pc, #320]	; (800466c <HAL_DMA_Abort_IT+0x1c0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d022      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a4f      	ldr	r2, [pc, #316]	; (8004670 <HAL_DMA_Abort_IT+0x1c4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d01d      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a4d      	ldr	r2, [pc, #308]	; (8004674 <HAL_DMA_Abort_IT+0x1c8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d018      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4c      	ldr	r2, [pc, #304]	; (8004678 <HAL_DMA_Abort_IT+0x1cc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a4a      	ldr	r2, [pc, #296]	; (800467c <HAL_DMA_Abort_IT+0x1d0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a49      	ldr	r2, [pc, #292]	; (8004680 <HAL_DMA_Abort_IT+0x1d4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a47      	ldr	r2, [pc, #284]	; (8004684 <HAL_DMA_Abort_IT+0x1d8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a46      	ldr	r2, [pc, #280]	; (8004688 <HAL_DMA_Abort_IT+0x1dc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_DMA_Abort_IT+0xcc>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_DMA_Abort_IT+0xce>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8086 	beq.w	800468c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2204      	movs	r2, #4
 8004584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a2f      	ldr	r2, [pc, #188]	; (800464c <HAL_DMA_Abort_IT+0x1a0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d04a      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2e      	ldr	r2, [pc, #184]	; (8004650 <HAL_DMA_Abort_IT+0x1a4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d045      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <HAL_DMA_Abort_IT+0x1a8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d040      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <HAL_DMA_Abort_IT+0x1ac>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d03b      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a29      	ldr	r2, [pc, #164]	; (800465c <HAL_DMA_Abort_IT+0x1b0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d036      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a28      	ldr	r2, [pc, #160]	; (8004660 <HAL_DMA_Abort_IT+0x1b4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d031      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a26      	ldr	r2, [pc, #152]	; (8004664 <HAL_DMA_Abort_IT+0x1b8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02c      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a25      	ldr	r2, [pc, #148]	; (8004668 <HAL_DMA_Abort_IT+0x1bc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d027      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_DMA_Abort_IT+0x1c0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d022      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a22      	ldr	r2, [pc, #136]	; (8004670 <HAL_DMA_Abort_IT+0x1c4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d01d      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a20      	ldr	r2, [pc, #128]	; (8004674 <HAL_DMA_Abort_IT+0x1c8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d018      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <HAL_DMA_Abort_IT+0x1cc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <HAL_DMA_Abort_IT+0x1d0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <HAL_DMA_Abort_IT+0x1d4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1a      	ldr	r2, [pc, #104]	; (8004684 <HAL_DMA_Abort_IT+0x1d8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a19      	ldr	r2, [pc, #100]	; (8004688 <HAL_DMA_Abort_IT+0x1dc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d108      	bne.n	800463a <HAL_DMA_Abort_IT+0x18e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e178      	b.n	800492c <HAL_DMA_Abort_IT+0x480>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e16f      	b.n	800492c <HAL_DMA_Abort_IT+0x480>
 800464c:	40020010 	.word	0x40020010
 8004650:	40020028 	.word	0x40020028
 8004654:	40020040 	.word	0x40020040
 8004658:	40020058 	.word	0x40020058
 800465c:	40020070 	.word	0x40020070
 8004660:	40020088 	.word	0x40020088
 8004664:	400200a0 	.word	0x400200a0
 8004668:	400200b8 	.word	0x400200b8
 800466c:	40020410 	.word	0x40020410
 8004670:	40020428 	.word	0x40020428
 8004674:	40020440 	.word	0x40020440
 8004678:	40020458 	.word	0x40020458
 800467c:	40020470 	.word	0x40020470
 8004680:	40020488 	.word	0x40020488
 8004684:	400204a0 	.word	0x400204a0
 8004688:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 020e 	bic.w	r2, r2, #14
 800469a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a6c      	ldr	r2, [pc, #432]	; (8004854 <HAL_DMA_Abort_IT+0x3a8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d04a      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6b      	ldr	r2, [pc, #428]	; (8004858 <HAL_DMA_Abort_IT+0x3ac>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d045      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a69      	ldr	r2, [pc, #420]	; (800485c <HAL_DMA_Abort_IT+0x3b0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d040      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a68      	ldr	r2, [pc, #416]	; (8004860 <HAL_DMA_Abort_IT+0x3b4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d03b      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a66      	ldr	r2, [pc, #408]	; (8004864 <HAL_DMA_Abort_IT+0x3b8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d036      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a65      	ldr	r2, [pc, #404]	; (8004868 <HAL_DMA_Abort_IT+0x3bc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d031      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a63      	ldr	r2, [pc, #396]	; (800486c <HAL_DMA_Abort_IT+0x3c0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d02c      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a62      	ldr	r2, [pc, #392]	; (8004870 <HAL_DMA_Abort_IT+0x3c4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d027      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a60      	ldr	r2, [pc, #384]	; (8004874 <HAL_DMA_Abort_IT+0x3c8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d022      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a5f      	ldr	r2, [pc, #380]	; (8004878 <HAL_DMA_Abort_IT+0x3cc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d01d      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a5d      	ldr	r2, [pc, #372]	; (800487c <HAL_DMA_Abort_IT+0x3d0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d018      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a5c      	ldr	r2, [pc, #368]	; (8004880 <HAL_DMA_Abort_IT+0x3d4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a5a      	ldr	r2, [pc, #360]	; (8004884 <HAL_DMA_Abort_IT+0x3d8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00e      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a59      	ldr	r2, [pc, #356]	; (8004888 <HAL_DMA_Abort_IT+0x3dc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a57      	ldr	r2, [pc, #348]	; (800488c <HAL_DMA_Abort_IT+0x3e0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a56      	ldr	r2, [pc, #344]	; (8004890 <HAL_DMA_Abort_IT+0x3e4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d108      	bne.n	800474e <HAL_DMA_Abort_IT+0x2a2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e007      	b.n	800475e <HAL_DMA_Abort_IT+0x2b2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3c      	ldr	r2, [pc, #240]	; (8004854 <HAL_DMA_Abort_IT+0x3a8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d072      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a3a      	ldr	r2, [pc, #232]	; (8004858 <HAL_DMA_Abort_IT+0x3ac>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d06d      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a39      	ldr	r2, [pc, #228]	; (800485c <HAL_DMA_Abort_IT+0x3b0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d068      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a37      	ldr	r2, [pc, #220]	; (8004860 <HAL_DMA_Abort_IT+0x3b4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d063      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a36      	ldr	r2, [pc, #216]	; (8004864 <HAL_DMA_Abort_IT+0x3b8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d05e      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a34      	ldr	r2, [pc, #208]	; (8004868 <HAL_DMA_Abort_IT+0x3bc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d059      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a33      	ldr	r2, [pc, #204]	; (800486c <HAL_DMA_Abort_IT+0x3c0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d054      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a31      	ldr	r2, [pc, #196]	; (8004870 <HAL_DMA_Abort_IT+0x3c4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d04f      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a30      	ldr	r2, [pc, #192]	; (8004874 <HAL_DMA_Abort_IT+0x3c8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d04a      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2e      	ldr	r2, [pc, #184]	; (8004878 <HAL_DMA_Abort_IT+0x3cc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d045      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2d      	ldr	r2, [pc, #180]	; (800487c <HAL_DMA_Abort_IT+0x3d0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d040      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2b      	ldr	r2, [pc, #172]	; (8004880 <HAL_DMA_Abort_IT+0x3d4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d03b      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2a      	ldr	r2, [pc, #168]	; (8004884 <HAL_DMA_Abort_IT+0x3d8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d036      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a28      	ldr	r2, [pc, #160]	; (8004888 <HAL_DMA_Abort_IT+0x3dc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d031      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a27      	ldr	r2, [pc, #156]	; (800488c <HAL_DMA_Abort_IT+0x3e0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d02c      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a25      	ldr	r2, [pc, #148]	; (8004890 <HAL_DMA_Abort_IT+0x3e4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d027      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a24      	ldr	r2, [pc, #144]	; (8004894 <HAL_DMA_Abort_IT+0x3e8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d022      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a22      	ldr	r2, [pc, #136]	; (8004898 <HAL_DMA_Abort_IT+0x3ec>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d01d      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a21      	ldr	r2, [pc, #132]	; (800489c <HAL_DMA_Abort_IT+0x3f0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d018      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <HAL_DMA_Abort_IT+0x3f4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d013      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <HAL_DMA_Abort_IT+0x3f8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00e      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1c      	ldr	r2, [pc, #112]	; (80048a8 <HAL_DMA_Abort_IT+0x3fc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d009      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_DMA_Abort_IT+0x400>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d004      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <HAL_DMA_Abort_IT+0x404>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d132      	bne.n	80048b4 <HAL_DMA_Abort_IT+0x408>
 800484e:	2301      	movs	r3, #1
 8004850:	e031      	b.n	80048b6 <HAL_DMA_Abort_IT+0x40a>
 8004852:	bf00      	nop
 8004854:	40020010 	.word	0x40020010
 8004858:	40020028 	.word	0x40020028
 800485c:	40020040 	.word	0x40020040
 8004860:	40020058 	.word	0x40020058
 8004864:	40020070 	.word	0x40020070
 8004868:	40020088 	.word	0x40020088
 800486c:	400200a0 	.word	0x400200a0
 8004870:	400200b8 	.word	0x400200b8
 8004874:	40020410 	.word	0x40020410
 8004878:	40020428 	.word	0x40020428
 800487c:	40020440 	.word	0x40020440
 8004880:	40020458 	.word	0x40020458
 8004884:	40020470 	.word	0x40020470
 8004888:	40020488 	.word	0x40020488
 800488c:	400204a0 	.word	0x400204a0
 8004890:	400204b8 	.word	0x400204b8
 8004894:	58025408 	.word	0x58025408
 8004898:	5802541c 	.word	0x5802541c
 800489c:	58025430 	.word	0x58025430
 80048a0:	58025444 	.word	0x58025444
 80048a4:	58025458 	.word	0x58025458
 80048a8:	5802546c 	.word	0x5802546c
 80048ac:	58025480 	.word	0x58025480
 80048b0:	58025494 	.word	0x58025494
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d028      	beq.n	800490c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2201      	movs	r2, #1
 80048da:	409a      	lsls	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00c      	beq.n	800490c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004900:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800490a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop

08004938 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004944:	4b67      	ldr	r3, [pc, #412]	; (8004ae4 <HAL_DMA_IRQHandler+0x1ac>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a67      	ldr	r2, [pc, #412]	; (8004ae8 <HAL_DMA_IRQHandler+0x1b0>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	0a9b      	lsrs	r3, r3, #10
 8004950:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a5f      	ldr	r2, [pc, #380]	; (8004aec <HAL_DMA_IRQHandler+0x1b4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04a      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a5d      	ldr	r2, [pc, #372]	; (8004af0 <HAL_DMA_IRQHandler+0x1b8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d045      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a5c      	ldr	r2, [pc, #368]	; (8004af4 <HAL_DMA_IRQHandler+0x1bc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d040      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5a      	ldr	r2, [pc, #360]	; (8004af8 <HAL_DMA_IRQHandler+0x1c0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d03b      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a59      	ldr	r2, [pc, #356]	; (8004afc <HAL_DMA_IRQHandler+0x1c4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d036      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a57      	ldr	r2, [pc, #348]	; (8004b00 <HAL_DMA_IRQHandler+0x1c8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d031      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a56      	ldr	r2, [pc, #344]	; (8004b04 <HAL_DMA_IRQHandler+0x1cc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d02c      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a54      	ldr	r2, [pc, #336]	; (8004b08 <HAL_DMA_IRQHandler+0x1d0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d027      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a53      	ldr	r2, [pc, #332]	; (8004b0c <HAL_DMA_IRQHandler+0x1d4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d022      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a51      	ldr	r2, [pc, #324]	; (8004b10 <HAL_DMA_IRQHandler+0x1d8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01d      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a50      	ldr	r2, [pc, #320]	; (8004b14 <HAL_DMA_IRQHandler+0x1dc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d018      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a4e      	ldr	r2, [pc, #312]	; (8004b18 <HAL_DMA_IRQHandler+0x1e0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a4d      	ldr	r2, [pc, #308]	; (8004b1c <HAL_DMA_IRQHandler+0x1e4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a4b      	ldr	r2, [pc, #300]	; (8004b20 <HAL_DMA_IRQHandler+0x1e8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <HAL_DMA_IRQHandler+0x1ec>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a48      	ldr	r2, [pc, #288]	; (8004b28 <HAL_DMA_IRQHandler+0x1f0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <HAL_DMA_IRQHandler+0xd6>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_DMA_IRQHandler+0xd8>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 842b 	beq.w	800526c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	2208      	movs	r2, #8
 8004a20:	409a      	lsls	r2, r3
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80a2 	beq.w	8004b70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2e      	ldr	r2, [pc, #184]	; (8004aec <HAL_DMA_IRQHandler+0x1b4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d04a      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a2d      	ldr	r2, [pc, #180]	; (8004af0 <HAL_DMA_IRQHandler+0x1b8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d045      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a2b      	ldr	r2, [pc, #172]	; (8004af4 <HAL_DMA_IRQHandler+0x1bc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d040      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <HAL_DMA_IRQHandler+0x1c0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d03b      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a28      	ldr	r2, [pc, #160]	; (8004afc <HAL_DMA_IRQHandler+0x1c4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d036      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a27      	ldr	r2, [pc, #156]	; (8004b00 <HAL_DMA_IRQHandler+0x1c8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d031      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a25      	ldr	r2, [pc, #148]	; (8004b04 <HAL_DMA_IRQHandler+0x1cc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02c      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a24      	ldr	r2, [pc, #144]	; (8004b08 <HAL_DMA_IRQHandler+0x1d0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d027      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <HAL_DMA_IRQHandler+0x1d4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d022      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <HAL_DMA_IRQHandler+0x1d8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d01d      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <HAL_DMA_IRQHandler+0x1dc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d018      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <HAL_DMA_IRQHandler+0x1e0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <HAL_DMA_IRQHandler+0x1e4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00e      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <HAL_DMA_IRQHandler+0x1e8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <HAL_DMA_IRQHandler+0x1ec>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_DMA_IRQHandler+0x1f0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d12f      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x1f4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bf14      	ite	ne
 8004ada:	2301      	movne	r3, #1
 8004adc:	2300      	moveq	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	e02e      	b.n	8004b40 <HAL_DMA_IRQHandler+0x208>
 8004ae2:	bf00      	nop
 8004ae4:	24000008 	.word	0x24000008
 8004ae8:	1b4e81b5 	.word	0x1b4e81b5
 8004aec:	40020010 	.word	0x40020010
 8004af0:	40020028 	.word	0x40020028
 8004af4:	40020040 	.word	0x40020040
 8004af8:	40020058 	.word	0x40020058
 8004afc:	40020070 	.word	0x40020070
 8004b00:	40020088 	.word	0x40020088
 8004b04:	400200a0 	.word	0x400200a0
 8004b08:	400200b8 	.word	0x400200b8
 8004b0c:	40020410 	.word	0x40020410
 8004b10:	40020428 	.word	0x40020428
 8004b14:	40020440 	.word	0x40020440
 8004b18:	40020458 	.word	0x40020458
 8004b1c:	40020470 	.word	0x40020470
 8004b20:	40020488 	.word	0x40020488
 8004b24:	400204a0 	.word	0x400204a0
 8004b28:	400204b8 	.word	0x400204b8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0204 	bic.w	r2, r2, #4
 8004b52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	f043 0201 	orr.w	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d06e      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a69      	ldr	r2, [pc, #420]	; (8004d30 <HAL_DMA_IRQHandler+0x3f8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d04a      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a67      	ldr	r2, [pc, #412]	; (8004d34 <HAL_DMA_IRQHandler+0x3fc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d045      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a66      	ldr	r2, [pc, #408]	; (8004d38 <HAL_DMA_IRQHandler+0x400>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d040      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a64      	ldr	r2, [pc, #400]	; (8004d3c <HAL_DMA_IRQHandler+0x404>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d03b      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a63      	ldr	r2, [pc, #396]	; (8004d40 <HAL_DMA_IRQHandler+0x408>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d036      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a61      	ldr	r2, [pc, #388]	; (8004d44 <HAL_DMA_IRQHandler+0x40c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d031      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a60      	ldr	r2, [pc, #384]	; (8004d48 <HAL_DMA_IRQHandler+0x410>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d02c      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5e      	ldr	r2, [pc, #376]	; (8004d4c <HAL_DMA_IRQHandler+0x414>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d027      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5d      	ldr	r2, [pc, #372]	; (8004d50 <HAL_DMA_IRQHandler+0x418>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a5b      	ldr	r2, [pc, #364]	; (8004d54 <HAL_DMA_IRQHandler+0x41c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01d      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a5a      	ldr	r2, [pc, #360]	; (8004d58 <HAL_DMA_IRQHandler+0x420>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_DMA_IRQHandler+0x424>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a57      	ldr	r2, [pc, #348]	; (8004d60 <HAL_DMA_IRQHandler+0x428>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a55      	ldr	r2, [pc, #340]	; (8004d64 <HAL_DMA_IRQHandler+0x42c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a54      	ldr	r2, [pc, #336]	; (8004d68 <HAL_DMA_IRQHandler+0x430>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a52      	ldr	r2, [pc, #328]	; (8004d6c <HAL_DMA_IRQHandler+0x434>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10a      	bne.n	8004c3c <HAL_DMA_IRQHandler+0x304>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e003      	b.n	8004c44 <HAL_DMA_IRQHandler+0x30c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2300      	movs	r3, #0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	2201      	movs	r2, #1
 8004c52:	409a      	lsls	r2, r3
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	f043 0202 	orr.w	r2, r3, #2
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	4013      	ands	r3, r2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 808f 	beq.w	8004d98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <HAL_DMA_IRQHandler+0x3f8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d04a      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2a      	ldr	r2, [pc, #168]	; (8004d34 <HAL_DMA_IRQHandler+0x3fc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d045      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <HAL_DMA_IRQHandler+0x400>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d040      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a27      	ldr	r2, [pc, #156]	; (8004d3c <HAL_DMA_IRQHandler+0x404>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d03b      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <HAL_DMA_IRQHandler+0x408>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d036      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <HAL_DMA_IRQHandler+0x40c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d031      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a23      	ldr	r2, [pc, #140]	; (8004d48 <HAL_DMA_IRQHandler+0x410>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d02c      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <HAL_DMA_IRQHandler+0x414>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d027      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <HAL_DMA_IRQHandler+0x418>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <HAL_DMA_IRQHandler+0x41c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01d      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <HAL_DMA_IRQHandler+0x420>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <HAL_DMA_IRQHandler+0x424>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1a      	ldr	r2, [pc, #104]	; (8004d60 <HAL_DMA_IRQHandler+0x428>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_DMA_IRQHandler+0x42c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <HAL_DMA_IRQHandler+0x430>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <HAL_DMA_IRQHandler+0x434>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d12a      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x438>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e023      	b.n	8004d78 <HAL_DMA_IRQHandler+0x440>
 8004d30:	40020010 	.word	0x40020010
 8004d34:	40020028 	.word	0x40020028
 8004d38:	40020040 	.word	0x40020040
 8004d3c:	40020058 	.word	0x40020058
 8004d40:	40020070 	.word	0x40020070
 8004d44:	40020088 	.word	0x40020088
 8004d48:	400200a0 	.word	0x400200a0
 8004d4c:	400200b8 	.word	0x400200b8
 8004d50:	40020410 	.word	0x40020410
 8004d54:	40020428 	.word	0x40020428
 8004d58:	40020440 	.word	0x40020440
 8004d5c:	40020458 	.word	0x40020458
 8004d60:	40020470 	.word	0x40020470
 8004d64:	40020488 	.word	0x40020488
 8004d68:	400204a0 	.word	0x400204a0
 8004d6c:	400204b8 	.word	0x400204b8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2204      	movs	r2, #4
 8004d86:	409a      	lsls	r2, r3
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	f043 0204 	orr.w	r2, r3, #4
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2210      	movs	r2, #16
 8004da2:	409a      	lsls	r2, r3
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a6 	beq.w	8004efa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a85      	ldr	r2, [pc, #532]	; (8004fc8 <HAL_DMA_IRQHandler+0x690>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d04a      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a83      	ldr	r2, [pc, #524]	; (8004fcc <HAL_DMA_IRQHandler+0x694>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d045      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a82      	ldr	r2, [pc, #520]	; (8004fd0 <HAL_DMA_IRQHandler+0x698>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d040      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a80      	ldr	r2, [pc, #512]	; (8004fd4 <HAL_DMA_IRQHandler+0x69c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d03b      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a7f      	ldr	r2, [pc, #508]	; (8004fd8 <HAL_DMA_IRQHandler+0x6a0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d036      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a7d      	ldr	r2, [pc, #500]	; (8004fdc <HAL_DMA_IRQHandler+0x6a4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d031      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a7c      	ldr	r2, [pc, #496]	; (8004fe0 <HAL_DMA_IRQHandler+0x6a8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d02c      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a7a      	ldr	r2, [pc, #488]	; (8004fe4 <HAL_DMA_IRQHandler+0x6ac>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d027      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a79      	ldr	r2, [pc, #484]	; (8004fe8 <HAL_DMA_IRQHandler+0x6b0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d022      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a77      	ldr	r2, [pc, #476]	; (8004fec <HAL_DMA_IRQHandler+0x6b4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01d      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a76      	ldr	r2, [pc, #472]	; (8004ff0 <HAL_DMA_IRQHandler+0x6b8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d018      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a74      	ldr	r2, [pc, #464]	; (8004ff4 <HAL_DMA_IRQHandler+0x6bc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a73      	ldr	r2, [pc, #460]	; (8004ff8 <HAL_DMA_IRQHandler+0x6c0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a71      	ldr	r2, [pc, #452]	; (8004ffc <HAL_DMA_IRQHandler+0x6c4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a70      	ldr	r2, [pc, #448]	; (8005000 <HAL_DMA_IRQHandler+0x6c8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a6e      	ldr	r2, [pc, #440]	; (8005004 <HAL_DMA_IRQHandler+0x6cc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10a      	bne.n	8004e64 <HAL_DMA_IRQHandler+0x52c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e009      	b.n	8004e78 <HAL_DMA_IRQHandler+0x540>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bf14      	ite	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	2300      	moveq	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d03e      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2210      	movs	r2, #16
 8004e86:	409a      	lsls	r2, r3
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d024      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
 8004eb8:	e01f      	b.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01b      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
 8004eca:	e016      	b.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0208 	bic.w	r2, r2, #8
 8004ee8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	2220      	movs	r2, #32
 8004f04:	409a      	lsls	r2, r3
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8110 	beq.w	8005130 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2c      	ldr	r2, [pc, #176]	; (8004fc8 <HAL_DMA_IRQHandler+0x690>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d04a      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	; (8004fcc <HAL_DMA_IRQHandler+0x694>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d045      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a29      	ldr	r2, [pc, #164]	; (8004fd0 <HAL_DMA_IRQHandler+0x698>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d040      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a28      	ldr	r2, [pc, #160]	; (8004fd4 <HAL_DMA_IRQHandler+0x69c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d03b      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <HAL_DMA_IRQHandler+0x6a0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d036      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a25      	ldr	r2, [pc, #148]	; (8004fdc <HAL_DMA_IRQHandler+0x6a4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d031      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <HAL_DMA_IRQHandler+0x6a8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d02c      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <HAL_DMA_IRQHandler+0x6ac>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d027      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <HAL_DMA_IRQHandler+0x6b0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d022      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_DMA_IRQHandler+0x6b4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d01d      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <HAL_DMA_IRQHandler+0x6b8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d018      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <HAL_DMA_IRQHandler+0x6bc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <HAL_DMA_IRQHandler+0x6c0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <HAL_DMA_IRQHandler+0x6c4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a17      	ldr	r2, [pc, #92]	; (8005000 <HAL_DMA_IRQHandler+0x6c8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a16      	ldr	r2, [pc, #88]	; (8005004 <HAL_DMA_IRQHandler+0x6cc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d12b      	bne.n	8005008 <HAL_DMA_IRQHandler+0x6d0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf14      	ite	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	e02a      	b.n	800501c <HAL_DMA_IRQHandler+0x6e4>
 8004fc6:	bf00      	nop
 8004fc8:	40020010 	.word	0x40020010
 8004fcc:	40020028 	.word	0x40020028
 8004fd0:	40020040 	.word	0x40020040
 8004fd4:	40020058 	.word	0x40020058
 8004fd8:	40020070 	.word	0x40020070
 8004fdc:	40020088 	.word	0x40020088
 8004fe0:	400200a0 	.word	0x400200a0
 8004fe4:	400200b8 	.word	0x400200b8
 8004fe8:	40020410 	.word	0x40020410
 8004fec:	40020428 	.word	0x40020428
 8004ff0:	40020440 	.word	0x40020440
 8004ff4:	40020458 	.word	0x40020458
 8004ff8:	40020470 	.word	0x40020470
 8004ffc:	40020488 	.word	0x40020488
 8005000:	400204a0 	.word	0x400204a0
 8005004:	400204b8 	.word	0x400204b8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf14      	ite	ne
 8005016:	2301      	movne	r3, #1
 8005018:	2300      	moveq	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8087 	beq.w	8005130 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	2220      	movs	r2, #32
 800502c:	409a      	lsls	r2, r3
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b04      	cmp	r3, #4
 800503c:	d139      	bne.n	80050b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0216 	bic.w	r2, r2, #22
 800504c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800505c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <HAL_DMA_IRQHandler+0x736>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0208 	bic.w	r2, r2, #8
 800507c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	223f      	movs	r2, #63	; 0x3f
 8005088:	409a      	lsls	r2, r3
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8382 	beq.w	80057ac <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
          }
          return;
 80050b0:	e37c      	b.n	80057ac <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d018      	beq.n	80050f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d108      	bne.n	80050e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d02c      	beq.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
 80050de:	e027      	b.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d023      	beq.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
 80050f0:	e01e      	b.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10f      	bne.n	8005120 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0210 	bic.w	r2, r2, #16
 800510e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 833e 	beq.w	80057b6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8088 	beq.w	8005258 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2204      	movs	r2, #4
 800514c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a89      	ldr	r2, [pc, #548]	; (800537c <HAL_DMA_IRQHandler+0xa44>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d04a      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a88      	ldr	r2, [pc, #544]	; (8005380 <HAL_DMA_IRQHandler+0xa48>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d045      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a86      	ldr	r2, [pc, #536]	; (8005384 <HAL_DMA_IRQHandler+0xa4c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d040      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a85      	ldr	r2, [pc, #532]	; (8005388 <HAL_DMA_IRQHandler+0xa50>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d03b      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a83      	ldr	r2, [pc, #524]	; (800538c <HAL_DMA_IRQHandler+0xa54>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d036      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a82      	ldr	r2, [pc, #520]	; (8005390 <HAL_DMA_IRQHandler+0xa58>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d031      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a80      	ldr	r2, [pc, #512]	; (8005394 <HAL_DMA_IRQHandler+0xa5c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d02c      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a7f      	ldr	r2, [pc, #508]	; (8005398 <HAL_DMA_IRQHandler+0xa60>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d027      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a7d      	ldr	r2, [pc, #500]	; (800539c <HAL_DMA_IRQHandler+0xa64>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d022      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a7c      	ldr	r2, [pc, #496]	; (80053a0 <HAL_DMA_IRQHandler+0xa68>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d01d      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a7a      	ldr	r2, [pc, #488]	; (80053a4 <HAL_DMA_IRQHandler+0xa6c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d018      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a79      	ldr	r2, [pc, #484]	; (80053a8 <HAL_DMA_IRQHandler+0xa70>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d013      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a77      	ldr	r2, [pc, #476]	; (80053ac <HAL_DMA_IRQHandler+0xa74>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00e      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a76      	ldr	r2, [pc, #472]	; (80053b0 <HAL_DMA_IRQHandler+0xa78>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d009      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a74      	ldr	r2, [pc, #464]	; (80053b4 <HAL_DMA_IRQHandler+0xa7c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a73      	ldr	r2, [pc, #460]	; (80053b8 <HAL_DMA_IRQHandler+0xa80>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d108      	bne.n	8005202 <HAL_DMA_IRQHandler+0x8ca>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e007      	b.n	8005212 <HAL_DMA_IRQHandler+0x8da>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	429a      	cmp	r2, r3
 800521c:	d307      	bcc.n	800522e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f2      	bne.n	8005212 <HAL_DMA_IRQHandler+0x8da>
 800522c:	e000      	b.n	8005230 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800522e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2203      	movs	r2, #3
 8005242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005246:	e003      	b.n	8005250 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 82aa 	beq.w	80057b6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
 800526a:	e2a4      	b.n	80057b6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a52      	ldr	r2, [pc, #328]	; (80053bc <HAL_DMA_IRQHandler+0xa84>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d04a      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a51      	ldr	r2, [pc, #324]	; (80053c0 <HAL_DMA_IRQHandler+0xa88>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d045      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a4f      	ldr	r2, [pc, #316]	; (80053c4 <HAL_DMA_IRQHandler+0xa8c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d040      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a4e      	ldr	r2, [pc, #312]	; (80053c8 <HAL_DMA_IRQHandler+0xa90>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d03b      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a4c      	ldr	r2, [pc, #304]	; (80053cc <HAL_DMA_IRQHandler+0xa94>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d036      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a4b      	ldr	r2, [pc, #300]	; (80053d0 <HAL_DMA_IRQHandler+0xa98>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d031      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a49      	ldr	r2, [pc, #292]	; (80053d4 <HAL_DMA_IRQHandler+0xa9c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d02c      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a48      	ldr	r2, [pc, #288]	; (80053d8 <HAL_DMA_IRQHandler+0xaa0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d027      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a46      	ldr	r2, [pc, #280]	; (80053dc <HAL_DMA_IRQHandler+0xaa4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d022      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a45      	ldr	r2, [pc, #276]	; (80053e0 <HAL_DMA_IRQHandler+0xaa8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d01d      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a43      	ldr	r2, [pc, #268]	; (80053e4 <HAL_DMA_IRQHandler+0xaac>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d018      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a42      	ldr	r2, [pc, #264]	; (80053e8 <HAL_DMA_IRQHandler+0xab0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d013      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a40      	ldr	r2, [pc, #256]	; (80053ec <HAL_DMA_IRQHandler+0xab4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00e      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a3f      	ldr	r2, [pc, #252]	; (80053f0 <HAL_DMA_IRQHandler+0xab8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d009      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a3d      	ldr	r2, [pc, #244]	; (80053f4 <HAL_DMA_IRQHandler+0xabc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <HAL_DMA_IRQHandler+0x9d4>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3c      	ldr	r2, [pc, #240]	; (80053f8 <HAL_DMA_IRQHandler+0xac0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d101      	bne.n	8005310 <HAL_DMA_IRQHandler+0x9d8>
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <HAL_DMA_IRQHandler+0x9da>
 8005310:	2300      	movs	r3, #0
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 824f 	beq.w	80057b6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	2204      	movs	r2, #4
 800532a:	409a      	lsls	r2, r3
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80dd 	beq.w	80054f0 <HAL_DMA_IRQHandler+0xbb8>
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80d7 	beq.w	80054f0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	2204      	movs	r2, #4
 800534c:	409a      	lsls	r2, r3
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d059      	beq.n	8005410 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d14a      	bne.n	80053fc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 8220 	beq.w	80057b0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005378:	e21a      	b.n	80057b0 <HAL_DMA_IRQHandler+0xe78>
 800537a:	bf00      	nop
 800537c:	40020010 	.word	0x40020010
 8005380:	40020028 	.word	0x40020028
 8005384:	40020040 	.word	0x40020040
 8005388:	40020058 	.word	0x40020058
 800538c:	40020070 	.word	0x40020070
 8005390:	40020088 	.word	0x40020088
 8005394:	400200a0 	.word	0x400200a0
 8005398:	400200b8 	.word	0x400200b8
 800539c:	40020410 	.word	0x40020410
 80053a0:	40020428 	.word	0x40020428
 80053a4:	40020440 	.word	0x40020440
 80053a8:	40020458 	.word	0x40020458
 80053ac:	40020470 	.word	0x40020470
 80053b0:	40020488 	.word	0x40020488
 80053b4:	400204a0 	.word	0x400204a0
 80053b8:	400204b8 	.word	0x400204b8
 80053bc:	48022c08 	.word	0x48022c08
 80053c0:	48022c1c 	.word	0x48022c1c
 80053c4:	48022c30 	.word	0x48022c30
 80053c8:	48022c44 	.word	0x48022c44
 80053cc:	48022c58 	.word	0x48022c58
 80053d0:	48022c6c 	.word	0x48022c6c
 80053d4:	48022c80 	.word	0x48022c80
 80053d8:	48022c94 	.word	0x48022c94
 80053dc:	58025408 	.word	0x58025408
 80053e0:	5802541c 	.word	0x5802541c
 80053e4:	58025430 	.word	0x58025430
 80053e8:	58025444 	.word	0x58025444
 80053ec:	58025458 	.word	0x58025458
 80053f0:	5802546c 	.word	0x5802546c
 80053f4:	58025480 	.word	0x58025480
 80053f8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 81d5 	beq.w	80057b0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800540e:	e1cf      	b.n	80057b0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d160      	bne.n	80054dc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a7f      	ldr	r2, [pc, #508]	; (800561c <HAL_DMA_IRQHandler+0xce4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d04a      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a7d      	ldr	r2, [pc, #500]	; (8005620 <HAL_DMA_IRQHandler+0xce8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d045      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a7c      	ldr	r2, [pc, #496]	; (8005624 <HAL_DMA_IRQHandler+0xcec>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d040      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a7a      	ldr	r2, [pc, #488]	; (8005628 <HAL_DMA_IRQHandler+0xcf0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d03b      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a79      	ldr	r2, [pc, #484]	; (800562c <HAL_DMA_IRQHandler+0xcf4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d036      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a77      	ldr	r2, [pc, #476]	; (8005630 <HAL_DMA_IRQHandler+0xcf8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d031      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a76      	ldr	r2, [pc, #472]	; (8005634 <HAL_DMA_IRQHandler+0xcfc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d02c      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a74      	ldr	r2, [pc, #464]	; (8005638 <HAL_DMA_IRQHandler+0xd00>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d027      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a73      	ldr	r2, [pc, #460]	; (800563c <HAL_DMA_IRQHandler+0xd04>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d022      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a71      	ldr	r2, [pc, #452]	; (8005640 <HAL_DMA_IRQHandler+0xd08>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01d      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a70      	ldr	r2, [pc, #448]	; (8005644 <HAL_DMA_IRQHandler+0xd0c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d018      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a6e      	ldr	r2, [pc, #440]	; (8005648 <HAL_DMA_IRQHandler+0xd10>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a6d      	ldr	r2, [pc, #436]	; (800564c <HAL_DMA_IRQHandler+0xd14>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00e      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a6b      	ldr	r2, [pc, #428]	; (8005650 <HAL_DMA_IRQHandler+0xd18>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d009      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a6a      	ldr	r2, [pc, #424]	; (8005654 <HAL_DMA_IRQHandler+0xd1c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_DMA_IRQHandler+0xb82>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a68      	ldr	r2, [pc, #416]	; (8005658 <HAL_DMA_IRQHandler+0xd20>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d108      	bne.n	80054cc <HAL_DMA_IRQHandler+0xb94>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0208 	bic.w	r2, r2, #8
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e007      	b.n	80054dc <HAL_DMA_IRQHandler+0xba4>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0204 	bic.w	r2, r2, #4
 80054da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8165 	beq.w	80057b0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ee:	e15f      	b.n	80057b0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f4:	f003 031f 	and.w	r3, r3, #31
 80054f8:	2202      	movs	r2, #2
 80054fa:	409a      	lsls	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80c5 	beq.w	8005690 <HAL_DMA_IRQHandler+0xd58>
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 80bf 	beq.w	8005690 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	2202      	movs	r2, #2
 800551c:	409a      	lsls	r2, r3
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d018      	beq.n	800555e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 813a 	beq.w	80057b4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005548:	e134      	b.n	80057b4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 8130 	beq.w	80057b4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800555c:	e12a      	b.n	80057b4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	f040 8089 	bne.w	800567c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2b      	ldr	r2, [pc, #172]	; (800561c <HAL_DMA_IRQHandler+0xce4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d04a      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a29      	ldr	r2, [pc, #164]	; (8005620 <HAL_DMA_IRQHandler+0xce8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d045      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a28      	ldr	r2, [pc, #160]	; (8005624 <HAL_DMA_IRQHandler+0xcec>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d040      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a26      	ldr	r2, [pc, #152]	; (8005628 <HAL_DMA_IRQHandler+0xcf0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d03b      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a25      	ldr	r2, [pc, #148]	; (800562c <HAL_DMA_IRQHandler+0xcf4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d036      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a23      	ldr	r2, [pc, #140]	; (8005630 <HAL_DMA_IRQHandler+0xcf8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d031      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a22      	ldr	r2, [pc, #136]	; (8005634 <HAL_DMA_IRQHandler+0xcfc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d02c      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a20      	ldr	r2, [pc, #128]	; (8005638 <HAL_DMA_IRQHandler+0xd00>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d027      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1f      	ldr	r2, [pc, #124]	; (800563c <HAL_DMA_IRQHandler+0xd04>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d022      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1d      	ldr	r2, [pc, #116]	; (8005640 <HAL_DMA_IRQHandler+0xd08>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01d      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1c      	ldr	r2, [pc, #112]	; (8005644 <HAL_DMA_IRQHandler+0xd0c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d018      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1a      	ldr	r2, [pc, #104]	; (8005648 <HAL_DMA_IRQHandler+0xd10>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a19      	ldr	r2, [pc, #100]	; (800564c <HAL_DMA_IRQHandler+0xd14>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a17      	ldr	r2, [pc, #92]	; (8005650 <HAL_DMA_IRQHandler+0xd18>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a16      	ldr	r2, [pc, #88]	; (8005654 <HAL_DMA_IRQHandler+0xd1c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_DMA_IRQHandler+0xcd2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a14      	ldr	r2, [pc, #80]	; (8005658 <HAL_DMA_IRQHandler+0xd20>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d128      	bne.n	800565c <HAL_DMA_IRQHandler+0xd24>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0214 	bic.w	r2, r2, #20
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e027      	b.n	800566c <HAL_DMA_IRQHandler+0xd34>
 800561c:	40020010 	.word	0x40020010
 8005620:	40020028 	.word	0x40020028
 8005624:	40020040 	.word	0x40020040
 8005628:	40020058 	.word	0x40020058
 800562c:	40020070 	.word	0x40020070
 8005630:	40020088 	.word	0x40020088
 8005634:	400200a0 	.word	0x400200a0
 8005638:	400200b8 	.word	0x400200b8
 800563c:	40020410 	.word	0x40020410
 8005640:	40020428 	.word	0x40020428
 8005644:	40020440 	.word	0x40020440
 8005648:	40020458 	.word	0x40020458
 800564c:	40020470 	.word	0x40020470
 8005650:	40020488 	.word	0x40020488
 8005654:	400204a0 	.word	0x400204a0
 8005658:	400204b8 	.word	0x400204b8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 020a 	bic.w	r2, r2, #10
 800566a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8097 	beq.w	80057b4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800568e:	e091      	b.n	80057b4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2208      	movs	r2, #8
 800569a:	409a      	lsls	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	4013      	ands	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8088 	beq.w	80057b6 <HAL_DMA_IRQHandler+0xe7e>
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8082 	beq.w	80057b6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a41      	ldr	r2, [pc, #260]	; (80057bc <HAL_DMA_IRQHandler+0xe84>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d04a      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a3f      	ldr	r2, [pc, #252]	; (80057c0 <HAL_DMA_IRQHandler+0xe88>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d045      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a3e      	ldr	r2, [pc, #248]	; (80057c4 <HAL_DMA_IRQHandler+0xe8c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d040      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a3c      	ldr	r2, [pc, #240]	; (80057c8 <HAL_DMA_IRQHandler+0xe90>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d03b      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a3b      	ldr	r2, [pc, #236]	; (80057cc <HAL_DMA_IRQHandler+0xe94>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d036      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a39      	ldr	r2, [pc, #228]	; (80057d0 <HAL_DMA_IRQHandler+0xe98>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d031      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a38      	ldr	r2, [pc, #224]	; (80057d4 <HAL_DMA_IRQHandler+0xe9c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d02c      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a36      	ldr	r2, [pc, #216]	; (80057d8 <HAL_DMA_IRQHandler+0xea0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d027      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a35      	ldr	r2, [pc, #212]	; (80057dc <HAL_DMA_IRQHandler+0xea4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d022      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a33      	ldr	r2, [pc, #204]	; (80057e0 <HAL_DMA_IRQHandler+0xea8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d01d      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a32      	ldr	r2, [pc, #200]	; (80057e4 <HAL_DMA_IRQHandler+0xeac>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d018      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a30      	ldr	r2, [pc, #192]	; (80057e8 <HAL_DMA_IRQHandler+0xeb0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2f      	ldr	r2, [pc, #188]	; (80057ec <HAL_DMA_IRQHandler+0xeb4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a2d      	ldr	r2, [pc, #180]	; (80057f0 <HAL_DMA_IRQHandler+0xeb8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2c      	ldr	r2, [pc, #176]	; (80057f4 <HAL_DMA_IRQHandler+0xebc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_DMA_IRQHandler+0xe1a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <HAL_DMA_IRQHandler+0xec0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d108      	bne.n	8005764 <HAL_DMA_IRQHandler+0xe2c>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 021c 	bic.w	r2, r2, #28
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e007      	b.n	8005774 <HAL_DMA_IRQHandler+0xe3c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 020e 	bic.w	r2, r2, #14
 8005772:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2201      	movs	r2, #1
 800577e:	409a      	lsls	r2, r3
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	4798      	blx	r3
 80057aa:	e004      	b.n	80057b6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80057ac:	bf00      	nop
 80057ae:	e002      	b.n	80057b6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80057b6:	3728      	adds	r7, #40	; 0x28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40020010 	.word	0x40020010
 80057c0:	40020028 	.word	0x40020028
 80057c4:	40020040 	.word	0x40020040
 80057c8:	40020058 	.word	0x40020058
 80057cc:	40020070 	.word	0x40020070
 80057d0:	40020088 	.word	0x40020088
 80057d4:	400200a0 	.word	0x400200a0
 80057d8:	400200b8 	.word	0x400200b8
 80057dc:	40020410 	.word	0x40020410
 80057e0:	40020428 	.word	0x40020428
 80057e4:	40020440 	.word	0x40020440
 80057e8:	40020458 	.word	0x40020458
 80057ec:	40020470 	.word	0x40020470
 80057f0:	40020488 	.word	0x40020488
 80057f4:	400204a0 	.word	0x400204a0
 80057f8:	400204b8 	.word	0x400204b8

080057fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a7f      	ldr	r2, [pc, #508]	; (8005a30 <DMA_SetConfig+0x21c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d072      	beq.n	800591e <DMA_SetConfig+0x10a>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a7d      	ldr	r2, [pc, #500]	; (8005a34 <DMA_SetConfig+0x220>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d06d      	beq.n	800591e <DMA_SetConfig+0x10a>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a7c      	ldr	r2, [pc, #496]	; (8005a38 <DMA_SetConfig+0x224>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d068      	beq.n	800591e <DMA_SetConfig+0x10a>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a7a      	ldr	r2, [pc, #488]	; (8005a3c <DMA_SetConfig+0x228>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d063      	beq.n	800591e <DMA_SetConfig+0x10a>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a79      	ldr	r2, [pc, #484]	; (8005a40 <DMA_SetConfig+0x22c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d05e      	beq.n	800591e <DMA_SetConfig+0x10a>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a77      	ldr	r2, [pc, #476]	; (8005a44 <DMA_SetConfig+0x230>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d059      	beq.n	800591e <DMA_SetConfig+0x10a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a76      	ldr	r2, [pc, #472]	; (8005a48 <DMA_SetConfig+0x234>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d054      	beq.n	800591e <DMA_SetConfig+0x10a>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a74      	ldr	r2, [pc, #464]	; (8005a4c <DMA_SetConfig+0x238>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d04f      	beq.n	800591e <DMA_SetConfig+0x10a>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a73      	ldr	r2, [pc, #460]	; (8005a50 <DMA_SetConfig+0x23c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d04a      	beq.n	800591e <DMA_SetConfig+0x10a>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a71      	ldr	r2, [pc, #452]	; (8005a54 <DMA_SetConfig+0x240>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d045      	beq.n	800591e <DMA_SetConfig+0x10a>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a70      	ldr	r2, [pc, #448]	; (8005a58 <DMA_SetConfig+0x244>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d040      	beq.n	800591e <DMA_SetConfig+0x10a>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a6e      	ldr	r2, [pc, #440]	; (8005a5c <DMA_SetConfig+0x248>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d03b      	beq.n	800591e <DMA_SetConfig+0x10a>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a6d      	ldr	r2, [pc, #436]	; (8005a60 <DMA_SetConfig+0x24c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d036      	beq.n	800591e <DMA_SetConfig+0x10a>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a6b      	ldr	r2, [pc, #428]	; (8005a64 <DMA_SetConfig+0x250>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d031      	beq.n	800591e <DMA_SetConfig+0x10a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a6a      	ldr	r2, [pc, #424]	; (8005a68 <DMA_SetConfig+0x254>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d02c      	beq.n	800591e <DMA_SetConfig+0x10a>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a68      	ldr	r2, [pc, #416]	; (8005a6c <DMA_SetConfig+0x258>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d027      	beq.n	800591e <DMA_SetConfig+0x10a>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a67      	ldr	r2, [pc, #412]	; (8005a70 <DMA_SetConfig+0x25c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d022      	beq.n	800591e <DMA_SetConfig+0x10a>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a65      	ldr	r2, [pc, #404]	; (8005a74 <DMA_SetConfig+0x260>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01d      	beq.n	800591e <DMA_SetConfig+0x10a>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a64      	ldr	r2, [pc, #400]	; (8005a78 <DMA_SetConfig+0x264>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d018      	beq.n	800591e <DMA_SetConfig+0x10a>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a62      	ldr	r2, [pc, #392]	; (8005a7c <DMA_SetConfig+0x268>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <DMA_SetConfig+0x10a>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a61      	ldr	r2, [pc, #388]	; (8005a80 <DMA_SetConfig+0x26c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <DMA_SetConfig+0x10a>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a5f      	ldr	r2, [pc, #380]	; (8005a84 <DMA_SetConfig+0x270>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d009      	beq.n	800591e <DMA_SetConfig+0x10a>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a5e      	ldr	r2, [pc, #376]	; (8005a88 <DMA_SetConfig+0x274>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <DMA_SetConfig+0x10a>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a5c      	ldr	r2, [pc, #368]	; (8005a8c <DMA_SetConfig+0x278>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d101      	bne.n	8005922 <DMA_SetConfig+0x10e>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <DMA_SetConfig+0x110>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00d      	beq.n	8005944 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005930:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005942:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a39      	ldr	r2, [pc, #228]	; (8005a30 <DMA_SetConfig+0x21c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d04a      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a38      	ldr	r2, [pc, #224]	; (8005a34 <DMA_SetConfig+0x220>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d045      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a36      	ldr	r2, [pc, #216]	; (8005a38 <DMA_SetConfig+0x224>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d040      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a35      	ldr	r2, [pc, #212]	; (8005a3c <DMA_SetConfig+0x228>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d03b      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a33      	ldr	r2, [pc, #204]	; (8005a40 <DMA_SetConfig+0x22c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d036      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a32      	ldr	r2, [pc, #200]	; (8005a44 <DMA_SetConfig+0x230>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d031      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a30      	ldr	r2, [pc, #192]	; (8005a48 <DMA_SetConfig+0x234>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d02c      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2f      	ldr	r2, [pc, #188]	; (8005a4c <DMA_SetConfig+0x238>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d027      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a2d      	ldr	r2, [pc, #180]	; (8005a50 <DMA_SetConfig+0x23c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d022      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a2c      	ldr	r2, [pc, #176]	; (8005a54 <DMA_SetConfig+0x240>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d01d      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a2a      	ldr	r2, [pc, #168]	; (8005a58 <DMA_SetConfig+0x244>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d018      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <DMA_SetConfig+0x248>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a27      	ldr	r2, [pc, #156]	; (8005a60 <DMA_SetConfig+0x24c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00e      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a26      	ldr	r2, [pc, #152]	; (8005a64 <DMA_SetConfig+0x250>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d009      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a24      	ldr	r2, [pc, #144]	; (8005a68 <DMA_SetConfig+0x254>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <DMA_SetConfig+0x1d0>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a23      	ldr	r2, [pc, #140]	; (8005a6c <DMA_SetConfig+0x258>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <DMA_SetConfig+0x1d4>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <DMA_SetConfig+0x1d6>
 80059e8:	2300      	movs	r3, #0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d059      	beq.n	8005aa2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	223f      	movs	r2, #63	; 0x3f
 80059f8:	409a      	lsls	r2, r3
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d138      	bne.n	8005a90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a2e:	e0ae      	b.n	8005b8e <DMA_SetConfig+0x37a>
 8005a30:	40020010 	.word	0x40020010
 8005a34:	40020028 	.word	0x40020028
 8005a38:	40020040 	.word	0x40020040
 8005a3c:	40020058 	.word	0x40020058
 8005a40:	40020070 	.word	0x40020070
 8005a44:	40020088 	.word	0x40020088
 8005a48:	400200a0 	.word	0x400200a0
 8005a4c:	400200b8 	.word	0x400200b8
 8005a50:	40020410 	.word	0x40020410
 8005a54:	40020428 	.word	0x40020428
 8005a58:	40020440 	.word	0x40020440
 8005a5c:	40020458 	.word	0x40020458
 8005a60:	40020470 	.word	0x40020470
 8005a64:	40020488 	.word	0x40020488
 8005a68:	400204a0 	.word	0x400204a0
 8005a6c:	400204b8 	.word	0x400204b8
 8005a70:	58025408 	.word	0x58025408
 8005a74:	5802541c 	.word	0x5802541c
 8005a78:	58025430 	.word	0x58025430
 8005a7c:	58025444 	.word	0x58025444
 8005a80:	58025458 	.word	0x58025458
 8005a84:	5802546c 	.word	0x5802546c
 8005a88:	58025480 	.word	0x58025480
 8005a8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]
}
 8005aa0:	e075      	b.n	8005b8e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a3d      	ldr	r2, [pc, #244]	; (8005b9c <DMA_SetConfig+0x388>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d04a      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a3b      	ldr	r2, [pc, #236]	; (8005ba0 <DMA_SetConfig+0x38c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d045      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a3a      	ldr	r2, [pc, #232]	; (8005ba4 <DMA_SetConfig+0x390>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d040      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a38      	ldr	r2, [pc, #224]	; (8005ba8 <DMA_SetConfig+0x394>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d03b      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a37      	ldr	r2, [pc, #220]	; (8005bac <DMA_SetConfig+0x398>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d036      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a35      	ldr	r2, [pc, #212]	; (8005bb0 <DMA_SetConfig+0x39c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d031      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a34      	ldr	r2, [pc, #208]	; (8005bb4 <DMA_SetConfig+0x3a0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d02c      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a32      	ldr	r2, [pc, #200]	; (8005bb8 <DMA_SetConfig+0x3a4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d027      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a31      	ldr	r2, [pc, #196]	; (8005bbc <DMA_SetConfig+0x3a8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d022      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a2f      	ldr	r2, [pc, #188]	; (8005bc0 <DMA_SetConfig+0x3ac>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01d      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a2e      	ldr	r2, [pc, #184]	; (8005bc4 <DMA_SetConfig+0x3b0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d018      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a2c      	ldr	r2, [pc, #176]	; (8005bc8 <DMA_SetConfig+0x3b4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <DMA_SetConfig+0x3b8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a29      	ldr	r2, [pc, #164]	; (8005bd0 <DMA_SetConfig+0x3bc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a28      	ldr	r2, [pc, #160]	; (8005bd4 <DMA_SetConfig+0x3c0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <DMA_SetConfig+0x32e>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a26      	ldr	r2, [pc, #152]	; (8005bd8 <DMA_SetConfig+0x3c4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d101      	bne.n	8005b46 <DMA_SetConfig+0x332>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <DMA_SetConfig+0x334>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d020      	beq.n	8005b8e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	2201      	movs	r2, #1
 8005b56:	409a      	lsls	r2, r3
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d108      	bne.n	8005b7e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	60da      	str	r2, [r3, #12]
}
 8005b7c:	e007      	b.n	8005b8e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	60da      	str	r2, [r3, #12]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	48022c08 	.word	0x48022c08
 8005ba0:	48022c1c 	.word	0x48022c1c
 8005ba4:	48022c30 	.word	0x48022c30
 8005ba8:	48022c44 	.word	0x48022c44
 8005bac:	48022c58 	.word	0x48022c58
 8005bb0:	48022c6c 	.word	0x48022c6c
 8005bb4:	48022c80 	.word	0x48022c80
 8005bb8:	48022c94 	.word	0x48022c94
 8005bbc:	58025408 	.word	0x58025408
 8005bc0:	5802541c 	.word	0x5802541c
 8005bc4:	58025430 	.word	0x58025430
 8005bc8:	58025444 	.word	0x58025444
 8005bcc:	58025458 	.word	0x58025458
 8005bd0:	5802546c 	.word	0x5802546c
 8005bd4:	58025480 	.word	0x58025480
 8005bd8:	58025494 	.word	0x58025494

08005bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a42      	ldr	r2, [pc, #264]	; (8005cf4 <DMA_CalcBaseAndBitshift+0x118>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d04a      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a41      	ldr	r2, [pc, #260]	; (8005cf8 <DMA_CalcBaseAndBitshift+0x11c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d045      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a3f      	ldr	r2, [pc, #252]	; (8005cfc <DMA_CalcBaseAndBitshift+0x120>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d040      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a3e      	ldr	r2, [pc, #248]	; (8005d00 <DMA_CalcBaseAndBitshift+0x124>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d03b      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a3c      	ldr	r2, [pc, #240]	; (8005d04 <DMA_CalcBaseAndBitshift+0x128>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d036      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a3b      	ldr	r2, [pc, #236]	; (8005d08 <DMA_CalcBaseAndBitshift+0x12c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d031      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a39      	ldr	r2, [pc, #228]	; (8005d0c <DMA_CalcBaseAndBitshift+0x130>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d02c      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a38      	ldr	r2, [pc, #224]	; (8005d10 <DMA_CalcBaseAndBitshift+0x134>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d027      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a36      	ldr	r2, [pc, #216]	; (8005d14 <DMA_CalcBaseAndBitshift+0x138>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d022      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a35      	ldr	r2, [pc, #212]	; (8005d18 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d01d      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a33      	ldr	r2, [pc, #204]	; (8005d1c <DMA_CalcBaseAndBitshift+0x140>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d018      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a32      	ldr	r2, [pc, #200]	; (8005d20 <DMA_CalcBaseAndBitshift+0x144>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d013      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a30      	ldr	r2, [pc, #192]	; (8005d24 <DMA_CalcBaseAndBitshift+0x148>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00e      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d009      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a2d      	ldr	r2, [pc, #180]	; (8005d2c <DMA_CalcBaseAndBitshift+0x150>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <DMA_CalcBaseAndBitshift+0xa8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a2c      	ldr	r2, [pc, #176]	; (8005d30 <DMA_CalcBaseAndBitshift+0x154>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <DMA_CalcBaseAndBitshift+0xac>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <DMA_CalcBaseAndBitshift+0xae>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d024      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	3b10      	subs	r3, #16
 8005c96:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <DMA_CalcBaseAndBitshift+0x158>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	4a24      	ldr	r2, [pc, #144]	; (8005d38 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ca8:	5cd3      	ldrb	r3, [r2, r3]
 8005caa:	461a      	mov	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d908      	bls.n	8005cc8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4b1f      	ldr	r3, [pc, #124]	; (8005d3c <DMA_CalcBaseAndBitshift+0x160>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	1d1a      	adds	r2, r3, #4
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	659a      	str	r2, [r3, #88]	; 0x58
 8005cc6:	e00d      	b.n	8005ce4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <DMA_CalcBaseAndBitshift+0x160>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8005cd6:	e005      	b.n	8005ce4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40020010 	.word	0x40020010
 8005cf8:	40020028 	.word	0x40020028
 8005cfc:	40020040 	.word	0x40020040
 8005d00:	40020058 	.word	0x40020058
 8005d04:	40020070 	.word	0x40020070
 8005d08:	40020088 	.word	0x40020088
 8005d0c:	400200a0 	.word	0x400200a0
 8005d10:	400200b8 	.word	0x400200b8
 8005d14:	40020410 	.word	0x40020410
 8005d18:	40020428 	.word	0x40020428
 8005d1c:	40020440 	.word	0x40020440
 8005d20:	40020458 	.word	0x40020458
 8005d24:	40020470 	.word	0x40020470
 8005d28:	40020488 	.word	0x40020488
 8005d2c:	400204a0 	.word	0x400204a0
 8005d30:	400204b8 	.word	0x400204b8
 8005d34:	aaaaaaab 	.word	0xaaaaaaab
 8005d38:	08012484 	.word	0x08012484
 8005d3c:	fffffc00 	.word	0xfffffc00

08005d40 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d120      	bne.n	8005d96 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d858      	bhi.n	8005e0e <DMA_CheckFifoParam+0xce>
 8005d5c:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <DMA_CheckFifoParam+0x24>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005d75 	.word	0x08005d75
 8005d68:	08005d87 	.word	0x08005d87
 8005d6c:	08005d75 	.word	0x08005d75
 8005d70:	08005e0f 	.word	0x08005e0f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d048      	beq.n	8005e12 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d84:	e045      	b.n	8005e12 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d8e:	d142      	bne.n	8005e16 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d94:	e03f      	b.n	8005e16 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d9e:	d123      	bne.n	8005de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d838      	bhi.n	8005e1a <DMA_CheckFifoParam+0xda>
 8005da8:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <DMA_CheckFifoParam+0x70>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005dc7 	.word	0x08005dc7
 8005db8:	08005dc1 	.word	0x08005dc1
 8005dbc:	08005dd9 	.word	0x08005dd9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
        break;
 8005dc4:	e030      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d025      	beq.n	8005e1e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dd6:	e022      	b.n	8005e1e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005de0:	d11f      	bne.n	8005e22 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005de6:	e01c      	b.n	8005e22 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d902      	bls.n	8005df6 <DMA_CheckFifoParam+0xb6>
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d003      	beq.n	8005dfc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005df4:	e018      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
        break;
 8005dfa:	e015      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00e      	beq.n	8005e26 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e0c:	e00b      	b.n	8005e26 <DMA_CheckFifoParam+0xe6>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e00a      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        break;
 8005e12:	bf00      	nop
 8005e14:	e008      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        break;
 8005e16:	bf00      	nop
 8005e18:	e006      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e004      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        break;
 8005e1e:	bf00      	nop
 8005e20:	e002      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
        break;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <DMA_CheckFifoParam+0xe8>
    break;
 8005e26:	bf00      	nop
    }
  }

  return status;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop

08005e38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a38      	ldr	r2, [pc, #224]	; (8005f2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a36      	ldr	r2, [pc, #216]	; (8005f30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a35      	ldr	r2, [pc, #212]	; (8005f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a33      	ldr	r2, [pc, #204]	; (8005f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a32      	ldr	r2, [pc, #200]	; (8005f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a30      	ldr	r2, [pc, #192]	; (8005f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2f      	ldr	r2, [pc, #188]	; (8005f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01a      	beq.n	8005ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	3b08      	subs	r3, #8
 8005ea8:	4a28      	ldr	r2, [pc, #160]	; (8005f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	091b      	lsrs	r3, r3, #4
 8005eb0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4b26      	ldr	r3, [pc, #152]	; (8005f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	461a      	mov	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a24      	ldr	r2, [pc, #144]	; (8005f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ec4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	2201      	movs	r2, #1
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ed4:	e024      	b.n	8005f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	3b10      	subs	r3, #16
 8005ede:	4a1e      	ldr	r2, [pc, #120]	; (8005f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d806      	bhi.n	8005efe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4a1b      	ldr	r2, [pc, #108]	; (8005f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d902      	bls.n	8005efe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3308      	adds	r3, #8
 8005efc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005f10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2201      	movs	r2, #1
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	58025408 	.word	0x58025408
 8005f30:	5802541c 	.word	0x5802541c
 8005f34:	58025430 	.word	0x58025430
 8005f38:	58025444 	.word	0x58025444
 8005f3c:	58025458 	.word	0x58025458
 8005f40:	5802546c 	.word	0x5802546c
 8005f44:	58025480 	.word	0x58025480
 8005f48:	58025494 	.word	0x58025494
 8005f4c:	cccccccd 	.word	0xcccccccd
 8005f50:	16009600 	.word	0x16009600
 8005f54:	58025880 	.word	0x58025880
 8005f58:	aaaaaaab 	.word	0xaaaaaaab
 8005f5c:	400204b8 	.word	0x400204b8
 8005f60:	4002040f 	.word	0x4002040f
 8005f64:	10008200 	.word	0x10008200
 8005f68:	40020880 	.word	0x40020880

08005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d04a      	beq.n	8006018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d847      	bhi.n	8006018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a25      	ldr	r2, [pc, #148]	; (8006024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d022      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a24      	ldr	r2, [pc, #144]	; (8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d01d      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a22      	ldr	r2, [pc, #136]	; (800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d018      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d013      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00e      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d009      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d004      	beq.n	8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d101      	bne.n	8005fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e000      	b.n	8005fde <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4b17      	ldr	r3, [pc, #92]	; (8006044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	461a      	mov	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a15      	ldr	r2, [pc, #84]	; (8006048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ff4:	671a      	str	r2, [r3, #112]	; 0x70
 8005ff6:	e009      	b.n	800600c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	461a      	mov	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a11      	ldr	r2, [pc, #68]	; (8006050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800600a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3b01      	subs	r3, #1
 8006010:	2201      	movs	r2, #1
 8006012:	409a      	lsls	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	58025408 	.word	0x58025408
 8006028:	5802541c 	.word	0x5802541c
 800602c:	58025430 	.word	0x58025430
 8006030:	58025444 	.word	0x58025444
 8006034:	58025458 	.word	0x58025458
 8006038:	5802546c 	.word	0x5802546c
 800603c:	58025480 	.word	0x58025480
 8006040:	58025494 	.word	0x58025494
 8006044:	1600963f 	.word	0x1600963f
 8006048:	58025940 	.word	0x58025940
 800604c:	1000823f 	.word	0x1000823f
 8006050:	40020940 	.word	0x40020940

08006054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006054:	b480      	push	{r7}
 8006056:	b089      	sub	sp, #36	; 0x24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006062:	4b89      	ldr	r3, [pc, #548]	; (8006288 <HAL_GPIO_Init+0x234>)
 8006064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006066:	e194      	b.n	8006392 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	4013      	ands	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8186 	beq.w	800638c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d005      	beq.n	8006098 <HAL_GPIO_Init+0x44>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d130      	bne.n	80060fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	2203      	movs	r2, #3
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4013      	ands	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ce:	2201      	movs	r2, #1
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	43db      	mvns	r3, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4013      	ands	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	091b      	lsrs	r3, r3, #4
 80060e4:	f003 0201 	and.w	r2, r3, #1
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b03      	cmp	r3, #3
 8006104:	d017      	beq.n	8006136 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	2203      	movs	r2, #3
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	43db      	mvns	r3, r3
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	4013      	ands	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	689a      	ldr	r2, [r3, #8]
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4313      	orrs	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d123      	bne.n	800618a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	08da      	lsrs	r2, r3, #3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3208      	adds	r2, #8
 800614a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	220f      	movs	r2, #15
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43db      	mvns	r3, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4013      	ands	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4313      	orrs	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	08da      	lsrs	r2, r3, #3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3208      	adds	r2, #8
 8006184:	69b9      	ldr	r1, [r7, #24]
 8006186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	2203      	movs	r2, #3
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43db      	mvns	r3, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4013      	ands	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 0203 	and.w	r2, r3, #3
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80e0 	beq.w	800638c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061cc:	4b2f      	ldr	r3, [pc, #188]	; (800628c <HAL_GPIO_Init+0x238>)
 80061ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80061d2:	4a2e      	ldr	r2, [pc, #184]	; (800628c <HAL_GPIO_Init+0x238>)
 80061d4:	f043 0302 	orr.w	r3, r3, #2
 80061d8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80061dc:	4b2b      	ldr	r3, [pc, #172]	; (800628c <HAL_GPIO_Init+0x238>)
 80061de:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061ea:	4a29      	ldr	r2, [pc, #164]	; (8006290 <HAL_GPIO_Init+0x23c>)
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	089b      	lsrs	r3, r3, #2
 80061f0:	3302      	adds	r3, #2
 80061f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	220f      	movs	r2, #15
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	43db      	mvns	r3, r3
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	4013      	ands	r3, r2
 800620c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a20      	ldr	r2, [pc, #128]	; (8006294 <HAL_GPIO_Init+0x240>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d052      	beq.n	80062bc <HAL_GPIO_Init+0x268>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a1f      	ldr	r2, [pc, #124]	; (8006298 <HAL_GPIO_Init+0x244>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d031      	beq.n	8006282 <HAL_GPIO_Init+0x22e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a1e      	ldr	r2, [pc, #120]	; (800629c <HAL_GPIO_Init+0x248>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d02b      	beq.n	800627e <HAL_GPIO_Init+0x22a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <HAL_GPIO_Init+0x24c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d025      	beq.n	800627a <HAL_GPIO_Init+0x226>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_GPIO_Init+0x250>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d01f      	beq.n	8006276 <HAL_GPIO_Init+0x222>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <HAL_GPIO_Init+0x254>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d019      	beq.n	8006272 <HAL_GPIO_Init+0x21e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <HAL_GPIO_Init+0x258>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_GPIO_Init+0x21a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <HAL_GPIO_Init+0x25c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00d      	beq.n	800626a <HAL_GPIO_Init+0x216>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a18      	ldr	r2, [pc, #96]	; (80062b4 <HAL_GPIO_Init+0x260>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d007      	beq.n	8006266 <HAL_GPIO_Init+0x212>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a17      	ldr	r2, [pc, #92]	; (80062b8 <HAL_GPIO_Init+0x264>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d101      	bne.n	8006262 <HAL_GPIO_Init+0x20e>
 800625e:	2309      	movs	r3, #9
 8006260:	e02d      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006262:	230a      	movs	r3, #10
 8006264:	e02b      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006266:	2308      	movs	r3, #8
 8006268:	e029      	b.n	80062be <HAL_GPIO_Init+0x26a>
 800626a:	2307      	movs	r3, #7
 800626c:	e027      	b.n	80062be <HAL_GPIO_Init+0x26a>
 800626e:	2306      	movs	r3, #6
 8006270:	e025      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006272:	2305      	movs	r3, #5
 8006274:	e023      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006276:	2304      	movs	r3, #4
 8006278:	e021      	b.n	80062be <HAL_GPIO_Init+0x26a>
 800627a:	2303      	movs	r3, #3
 800627c:	e01f      	b.n	80062be <HAL_GPIO_Init+0x26a>
 800627e:	2302      	movs	r3, #2
 8006280:	e01d      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006282:	2301      	movs	r3, #1
 8006284:	e01b      	b.n	80062be <HAL_GPIO_Init+0x26a>
 8006286:	bf00      	nop
 8006288:	58000080 	.word	0x58000080
 800628c:	58024400 	.word	0x58024400
 8006290:	58000400 	.word	0x58000400
 8006294:	58020000 	.word	0x58020000
 8006298:	58020400 	.word	0x58020400
 800629c:	58020800 	.word	0x58020800
 80062a0:	58020c00 	.word	0x58020c00
 80062a4:	58021000 	.word	0x58021000
 80062a8:	58021400 	.word	0x58021400
 80062ac:	58021800 	.word	0x58021800
 80062b0:	58021c00 	.word	0x58021c00
 80062b4:	58022000 	.word	0x58022000
 80062b8:	58022400 	.word	0x58022400
 80062bc:	2300      	movs	r3, #0
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	f002 0203 	and.w	r2, r2, #3
 80062c4:	0092      	lsls	r2, r2, #2
 80062c6:	4093      	lsls	r3, r2
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062ce:	4938      	ldr	r1, [pc, #224]	; (80063b0 <HAL_GPIO_Init+0x35c>)
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	089b      	lsrs	r3, r3, #2
 80062d4:	3302      	adds	r3, #2
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	43db      	mvns	r3, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4013      	ands	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800630a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	43db      	mvns	r3, r3
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	4013      	ands	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	43db      	mvns	r3, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4013      	ands	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	43db      	mvns	r3, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	4013      	ands	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	3301      	adds	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	fa22 f303 	lsr.w	r3, r2, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	f47f ae63 	bne.w	8006068 <HAL_GPIO_Init+0x14>
  }
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	3724      	adds	r7, #36	; 0x24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	58000400 	.word	0x58000400

080063b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]
 80063c0:	4613      	mov	r3, r2
 80063c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063c4:	787b      	ldrb	r3, [r7, #1]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063ca:	887a      	ldrh	r2, [r7, #2]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063d0:	e003      	b.n	80063da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063d2:	887b      	ldrh	r3, [r7, #2]
 80063d4:	041a      	lsls	r2, r3, #16
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	619a      	str	r2, [r3, #24]
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	4603      	mov	r3, r0
 80063ee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80063f8:	88fb      	ldrh	r3, [r7, #6]
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	4618      	mov	r0, r3
 800640e:	f7fb f94d 	bl	80016ac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006424:	4b19      	ldr	r3, [pc, #100]	; (800648c <HAL_PWREx_ConfigSupply+0x70>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b04      	cmp	r3, #4
 800642e:	d00a      	beq.n	8006446 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006430:	4b16      	ldr	r3, [pc, #88]	; (800648c <HAL_PWREx_ConfigSupply+0x70>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	429a      	cmp	r2, r3
 800643c:	d001      	beq.n	8006442 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e01f      	b.n	8006482 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	e01d      	b.n	8006482 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <HAL_PWREx_ConfigSupply+0x70>)
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f023 0207 	bic.w	r2, r3, #7
 800644e:	490f      	ldr	r1, [pc, #60]	; (800648c <HAL_PWREx_ConfigSupply+0x70>)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4313      	orrs	r3, r2
 8006454:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006456:	f7fc fd9f 	bl	8002f98 <HAL_GetTick>
 800645a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800645c:	e009      	b.n	8006472 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800645e:	f7fc fd9b 	bl	8002f98 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800646c:	d901      	bls.n	8006472 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e007      	b.n	8006482 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006472:	4b06      	ldr	r3, [pc, #24]	; (800648c <HAL_PWREx_ConfigSupply+0x70>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800647a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647e:	d1ee      	bne.n	800645e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	58024800 	.word	0x58024800

08006490 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08c      	sub	sp, #48	; 0x30
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e3f6      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 80b5 	beq.w	800661a <HAL_RCC_OscConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064b0:	4b96      	ldr	r3, [pc, #600]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064ba:	4b94      	ldr	r3, [pc, #592]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80064bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d007      	beq.n	80064d6 <HAL_RCC_OscConfig+0x46>
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	2b18      	cmp	r3, #24
 80064ca:	d112      	bne.n	80064f2 <HAL_RCC_OscConfig+0x62>
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d10d      	bne.n	80064f2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064d6:	4b8d      	ldr	r3, [pc, #564]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 809a 	beq.w	8006618 <HAL_RCC_OscConfig+0x188>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f040 8095 	bne.w	8006618 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e3ce      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fa:	d106      	bne.n	800650a <HAL_RCC_OscConfig+0x7a>
 80064fc:	4b83      	ldr	r3, [pc, #524]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a82      	ldr	r2, [pc, #520]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e058      	b.n	80065bc <HAL_RCC_OscConfig+0x12c>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d112      	bne.n	8006538 <HAL_RCC_OscConfig+0xa8>
 8006512:	4b7e      	ldr	r3, [pc, #504]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a7d      	ldr	r2, [pc, #500]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	4b7b      	ldr	r3, [pc, #492]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a7a      	ldr	r2, [pc, #488]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006524:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	4b78      	ldr	r3, [pc, #480]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a77      	ldr	r2, [pc, #476]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	e041      	b.n	80065bc <HAL_RCC_OscConfig+0x12c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006540:	d112      	bne.n	8006568 <HAL_RCC_OscConfig+0xd8>
 8006542:	4b72      	ldr	r3, [pc, #456]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a71      	ldr	r2, [pc, #452]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	4b6f      	ldr	r3, [pc, #444]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a6e      	ldr	r2, [pc, #440]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006554:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	4b6c      	ldr	r3, [pc, #432]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a6b      	ldr	r2, [pc, #428]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	e029      	b.n	80065bc <HAL_RCC_OscConfig+0x12c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006570:	d112      	bne.n	8006598 <HAL_RCC_OscConfig+0x108>
 8006572:	4b66      	ldr	r3, [pc, #408]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a65      	ldr	r2, [pc, #404]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	4b63      	ldr	r3, [pc, #396]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a62      	ldr	r2, [pc, #392]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	4b60      	ldr	r3, [pc, #384]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a5f      	ldr	r2, [pc, #380]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	e011      	b.n	80065bc <HAL_RCC_OscConfig+0x12c>
 8006598:	4b5c      	ldr	r3, [pc, #368]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a5b      	ldr	r2, [pc, #364]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 800659e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	4b59      	ldr	r3, [pc, #356]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a58      	ldr	r2, [pc, #352]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80065aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	4b56      	ldr	r3, [pc, #344]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a55      	ldr	r2, [pc, #340]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80065b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80065ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d014      	beq.n	80065ee <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fc fce8 	bl	8002f98 <HAL_GetTick>
 80065c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065ca:	e009      	b.n	80065e0 <HAL_RCC_OscConfig+0x150>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065cc:	f7fc fce4 	bl	8002f98 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065da:	d901      	bls.n	80065e0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e357      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065e0:	4b4a      	ldr	r3, [pc, #296]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0ef      	beq.n	80065cc <HAL_RCC_OscConfig+0x13c>
 80065ec:	e015      	b.n	800661a <HAL_RCC_OscConfig+0x18a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ee:	f7fc fcd3 	bl	8002f98 <HAL_GetTick>
 80065f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065f4:	e009      	b.n	800660a <HAL_RCC_OscConfig+0x17a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065f6:	f7fc fccf 	bl	8002f98 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e342      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800660a:	4b40      	ldr	r3, [pc, #256]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1ef      	bne.n	80065f6 <HAL_RCC_OscConfig+0x166>
 8006616:	e000      	b.n	800661a <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 808d 	beq.w	8006742 <HAL_RCC_OscConfig+0x2b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006628:	4b38      	ldr	r3, [pc, #224]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006630:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006632:	4b36      	ldr	r3, [pc, #216]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <HAL_RCC_OscConfig+0x1be>
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	2b18      	cmp	r3, #24
 8006642:	d137      	bne.n	80066b4 <HAL_RCC_OscConfig+0x224>
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d132      	bne.n	80066b4 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800664e:	4b2f      	ldr	r3, [pc, #188]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <HAL_RCC_OscConfig+0x1d6>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e314      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006666:	4b29      	ldr	r3, [pc, #164]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f023 0219 	bic.w	r2, r3, #25
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	4926      	ldr	r1, [pc, #152]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006674:	4313      	orrs	r3, r2
 8006676:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006678:	f7fc fc8e 	bl	8002f98 <HAL_GetTick>
 800667c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x202>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006680:	f7fc fc8a 	bl	8002f98 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x202>
            {
              return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e2fe      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006692:	4b1e      	ldr	r3, [pc, #120]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f0      	beq.n	8006680 <HAL_RCC_OscConfig+0x1f0>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669e:	4b1b      	ldr	r3, [pc, #108]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	061b      	lsls	r3, r3, #24
 80066ac:	4917      	ldr	r1, [pc, #92]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b2:	e046      	b.n	8006742 <HAL_RCC_OscConfig+0x2b2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d029      	beq.n	8006710 <HAL_RCC_OscConfig+0x280>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066bc:	4b13      	ldr	r3, [pc, #76]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f023 0219 	bic.w	r2, r3, #25
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	4910      	ldr	r1, [pc, #64]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ce:	f7fc fc63 	bl	8002f98 <HAL_GetTick>
 80066d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x258>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066d6:	f7fc fc5f 	bl	8002f98 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x258>
          {
            return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e2d3      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066e8:	4b08      	ldr	r3, [pc, #32]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0f0      	beq.n	80066d6 <HAL_RCC_OscConfig+0x246>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f4:	4b05      	ldr	r3, [pc, #20]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	061b      	lsls	r3, r3, #24
 8006702:	4902      	ldr	r1, [pc, #8]	; (800670c <HAL_RCC_OscConfig+0x27c>)
 8006704:	4313      	orrs	r3, r2
 8006706:	604b      	str	r3, [r1, #4]
 8006708:	e01b      	b.n	8006742 <HAL_RCC_OscConfig+0x2b2>
 800670a:	bf00      	nop
 800670c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006710:	4b97      	ldr	r3, [pc, #604]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a96      	ldr	r2, [pc, #600]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fc fc3c 	bl	8002f98 <HAL_GetTick>
 8006720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x2a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006724:	f7fc fc38 	bl	8002f98 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e2ac      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006736:	4b8e      	ldr	r3, [pc, #568]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b00      	cmp	r3, #0
 800674c:	d06a      	beq.n	8006824 <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800674e:	4b88      	ldr	r3, [pc, #544]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006756:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006758:	4b85      	ldr	r3, [pc, #532]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b08      	cmp	r3, #8
 8006762:	d007      	beq.n	8006774 <HAL_RCC_OscConfig+0x2e4>
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b18      	cmp	r3, #24
 8006768:	d11b      	bne.n	80067a2 <HAL_RCC_OscConfig+0x312>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d116      	bne.n	80067a2 <HAL_RCC_OscConfig+0x312>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006774:	4b7e      	ldr	r3, [pc, #504]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_RCC_OscConfig+0x2fc>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	2b80      	cmp	r3, #128	; 0x80
 8006786:	d001      	beq.n	800678c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e281      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800678c:	4b78      	ldr	r3, [pc, #480]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	061b      	lsls	r3, r3, #24
 800679a:	4975      	ldr	r1, [pc, #468]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 800679c:	4313      	orrs	r3, r2
 800679e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067a0:	e040      	b.n	8006824 <HAL_RCC_OscConfig+0x394>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d023      	beq.n	80067f2 <HAL_RCC_OscConfig+0x362>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80067aa:	4b71      	ldr	r3, [pc, #452]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a70      	ldr	r2, [pc, #448]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80067b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b6:	f7fc fbef 	bl	8002f98 <HAL_GetTick>
 80067ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80067be:	f7fc fbeb 	bl	8002f98 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x340>
          {
            return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e25f      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067d0:	4b67      	ldr	r3, [pc, #412]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <HAL_RCC_OscConfig+0x32e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067dc:	4b64      	ldr	r3, [pc, #400]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	061b      	lsls	r3, r3, #24
 80067ea:	4961      	ldr	r1, [pc, #388]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60cb      	str	r3, [r1, #12]
 80067f0:	e018      	b.n	8006824 <HAL_RCC_OscConfig+0x394>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067f2:	4b5f      	ldr	r3, [pc, #380]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a5e      	ldr	r2, [pc, #376]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80067f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fe:	f7fc fbcb 	bl	8002f98 <HAL_GetTick>
 8006802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x388>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006806:	f7fc fbc7 	bl	8002f98 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x388>
          {
            return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e23b      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006818:	4b55      	ldr	r3, [pc, #340]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f0      	bne.n	8006806 <HAL_RCC_OscConfig+0x376>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d036      	beq.n	800689e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d019      	beq.n	800686c <HAL_RCC_OscConfig+0x3dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006838:	4b4d      	ldr	r3, [pc, #308]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 800683a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683c:	4a4c      	ldr	r2, [pc, #304]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006844:	f7fc fba8 	bl	8002f98 <HAL_GetTick>
 8006848:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x3ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800684c:	f7fc fba4 	bl	8002f98 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e218      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800685e:	4b44      	ldr	r3, [pc, #272]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 8006860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0x3bc>
 800686a:	e018      	b.n	800689e <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800686c:	4b40      	ldr	r3, [pc, #256]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 800686e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006870:	4a3f      	ldr	r2, [pc, #252]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006878:	f7fc fb8e 	bl	8002f98 <HAL_GetTick>
 800687c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006880:	f7fc fb8a 	bl	8002f98 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e1fe      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006892:	4b37      	ldr	r3, [pc, #220]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 8006894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x3f0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d036      	beq.n	8006918 <HAL_RCC_OscConfig+0x488>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d019      	beq.n	80068e6 <HAL_RCC_OscConfig+0x456>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068b2:	4b2f      	ldr	r3, [pc, #188]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a2e      	ldr	r2, [pc, #184]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80068b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068be:	f7fc fb6b 	bl	8002f98 <HAL_GetTick>
 80068c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x448>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068c6:	f7fc fb67 	bl	8002f98 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x448>
        {
          return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e1db      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068d8:	4b25      	ldr	r3, [pc, #148]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f0      	beq.n	80068c6 <HAL_RCC_OscConfig+0x436>
 80068e4:	e018      	b.n	8006918 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068e6:	4b22      	ldr	r3, [pc, #136]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a21      	ldr	r2, [pc, #132]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 80068ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068f2:	f7fc fb51 	bl	8002f98 <HAL_GetTick>
 80068f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068fa:	f7fc fb4d 	bl	8002f98 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e1c1      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800690c:	4b18      	ldr	r3, [pc, #96]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1f0      	bne.n	80068fa <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80af 	beq.w	8006a84 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006926:	4b13      	ldr	r3, [pc, #76]	; (8006974 <HAL_RCC_OscConfig+0x4e4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a12      	ldr	r2, [pc, #72]	; (8006974 <HAL_RCC_OscConfig+0x4e4>)
 800692c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006930:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006932:	f7fc fb31 	bl	8002f98 <HAL_GetTick>
 8006936:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0x4bc>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800693a:	f7fc fb2d 	bl	8002f98 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b64      	cmp	r3, #100	; 0x64
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x4bc>
      {
        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e1a1      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800694c:	4b09      	ldr	r3, [pc, #36]	; (8006974 <HAL_RCC_OscConfig+0x4e4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0f0      	beq.n	800693a <HAL_RCC_OscConfig+0x4aa>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d10b      	bne.n	8006978 <HAL_RCC_OscConfig+0x4e8>
 8006960:	4b03      	ldr	r3, [pc, #12]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 8006962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006964:	4a02      	ldr	r2, [pc, #8]	; (8006970 <HAL_RCC_OscConfig+0x4e0>)
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	6713      	str	r3, [r2, #112]	; 0x70
 800696c:	e05b      	b.n	8006a26 <HAL_RCC_OscConfig+0x596>
 800696e:	bf00      	nop
 8006970:	58024400 	.word	0x58024400
 8006974:	58024800 	.word	0x58024800
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d112      	bne.n	80069a6 <HAL_RCC_OscConfig+0x516>
 8006980:	4b9d      	ldr	r3, [pc, #628]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006984:	4a9c      	ldr	r2, [pc, #624]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	6713      	str	r3, [r2, #112]	; 0x70
 800698c:	4b9a      	ldr	r3, [pc, #616]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 800698e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006990:	4a99      	ldr	r2, [pc, #612]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006996:	6713      	str	r3, [r2, #112]	; 0x70
 8006998:	4b97      	ldr	r3, [pc, #604]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699c:	4a96      	ldr	r2, [pc, #600]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 800699e:	f023 0304 	bic.w	r3, r3, #4
 80069a2:	6713      	str	r3, [r2, #112]	; 0x70
 80069a4:	e03f      	b.n	8006a26 <HAL_RCC_OscConfig+0x596>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b05      	cmp	r3, #5
 80069ac:	d112      	bne.n	80069d4 <HAL_RCC_OscConfig+0x544>
 80069ae:	4b92      	ldr	r3, [pc, #584]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	4a91      	ldr	r2, [pc, #580]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069b4:	f043 0304 	orr.w	r3, r3, #4
 80069b8:	6713      	str	r3, [r2, #112]	; 0x70
 80069ba:	4b8f      	ldr	r3, [pc, #572]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069be:	4a8e      	ldr	r2, [pc, #568]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069c4:	6713      	str	r3, [r2, #112]	; 0x70
 80069c6:	4b8c      	ldr	r3, [pc, #560]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	4a8b      	ldr	r2, [pc, #556]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	; 0x70
 80069d2:	e028      	b.n	8006a26 <HAL_RCC_OscConfig+0x596>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b85      	cmp	r3, #133	; 0x85
 80069da:	d112      	bne.n	8006a02 <HAL_RCC_OscConfig+0x572>
 80069dc:	4b86      	ldr	r3, [pc, #536]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e0:	4a85      	ldr	r2, [pc, #532]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069e2:	f043 0304 	orr.w	r3, r3, #4
 80069e6:	6713      	str	r3, [r2, #112]	; 0x70
 80069e8:	4b83      	ldr	r3, [pc, #524]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	4a82      	ldr	r2, [pc, #520]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	6713      	str	r3, [r2, #112]	; 0x70
 80069f4:	4b80      	ldr	r3, [pc, #512]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	4a7f      	ldr	r2, [pc, #508]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006a00:	e011      	b.n	8006a26 <HAL_RCC_OscConfig+0x596>
 8006a02:	4b7d      	ldr	r3, [pc, #500]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a06:	4a7c      	ldr	r2, [pc, #496]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a0e:	4b7a      	ldr	r3, [pc, #488]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	4a79      	ldr	r2, [pc, #484]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006a14:	f023 0304 	bic.w	r3, r3, #4
 8006a18:	6713      	str	r3, [r2, #112]	; 0x70
 8006a1a:	4b77      	ldr	r3, [pc, #476]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	4a76      	ldr	r2, [pc, #472]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d015      	beq.n	8006a5a <HAL_RCC_OscConfig+0x5ca>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2e:	f7fc fab3 	bl	8002f98 <HAL_GetTick>
 8006a32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a34:	e00a      	b.n	8006a4c <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a36:	f7fc faaf 	bl	8002f98 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e121      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a4c:	4b6a      	ldr	r3, [pc, #424]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0ee      	beq.n	8006a36 <HAL_RCC_OscConfig+0x5a6>
 8006a58:	e014      	b.n	8006a84 <HAL_RCC_OscConfig+0x5f4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a5a:	f7fc fa9d 	bl	8002f98 <HAL_GetTick>
 8006a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a60:	e00a      	b.n	8006a78 <HAL_RCC_OscConfig+0x5e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a62:	f7fc fa99 	bl	8002f98 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x5e8>
        {
          return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e10b      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a78:	4b5f      	ldr	r3, [pc, #380]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1ee      	bne.n	8006a62 <HAL_RCC_OscConfig+0x5d2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8100 	beq.w	8006c8e <HAL_RCC_OscConfig+0x7fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a8e:	4b5a      	ldr	r3, [pc, #360]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a96:	2b18      	cmp	r3, #24
 8006a98:	f000 80bb 	beq.w	8006c12 <HAL_RCC_OscConfig+0x782>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	f040 8095 	bne.w	8006bd0 <HAL_RCC_OscConfig+0x740>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa6:	4b54      	ldr	r3, [pc, #336]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a53      	ldr	r2, [pc, #332]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab2:	f7fc fa71 	bl	8002f98 <HAL_GetTick>
 8006ab6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aba:	f7fc fa6d 	bl	8002f98 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e0e1      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006acc:	4b4a      	ldr	r3, [pc, #296]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1f0      	bne.n	8006aba <HAL_RCC_OscConfig+0x62a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ad8:	4b47      	ldr	r3, [pc, #284]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006adc:	4b47      	ldr	r3, [pc, #284]	; (8006bfc <HAL_RCC_OscConfig+0x76c>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ae8:	0112      	lsls	r2, r2, #4
 8006aea:	430a      	orrs	r2, r1
 8006aec:	4942      	ldr	r1, [pc, #264]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	628b      	str	r3, [r1, #40]	; 0x28
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	3b01      	subs	r3, #1
 8006af8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b00:	3b01      	subs	r3, #1
 8006b02:	025b      	lsls	r3, r3, #9
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	061b      	lsls	r3, r3, #24
 8006b1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b22:	4935      	ldr	r1, [pc, #212]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006b28:	4b33      	ldr	r3, [pc, #204]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	4a32      	ldr	r2, [pc, #200]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b2e:	f023 0301 	bic.w	r3, r3, #1
 8006b32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b34:	4b30      	ldr	r3, [pc, #192]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b38:	4b31      	ldr	r3, [pc, #196]	; (8006c00 <HAL_RCC_OscConfig+0x770>)
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b40:	00d2      	lsls	r2, r2, #3
 8006b42:	492d      	ldr	r1, [pc, #180]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b48:	4b2b      	ldr	r3, [pc, #172]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	f023 020c 	bic.w	r2, r3, #12
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	4928      	ldr	r1, [pc, #160]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b5a:	4b27      	ldr	r3, [pc, #156]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	f023 0202 	bic.w	r2, r3, #2
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	4924      	ldr	r1, [pc, #144]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b6c:	4b22      	ldr	r3, [pc, #136]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b78:	4b1f      	ldr	r3, [pc, #124]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b84:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	4a1b      	ldr	r2, [pc, #108]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b90:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	4a18      	ldr	r2, [pc, #96]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b96:	f043 0301 	orr.w	r3, r3, #1
 8006b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b9c:	4b16      	ldr	r3, [pc, #88]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fc f9f6 	bl	8002f98 <HAL_GetTick>
 8006bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x732>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb0:	f7fc f9f2 	bl	8002f98 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x732>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e066      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x720>
 8006bce:	e05e      	b.n	8006c8e <HAL_RCC_OscConfig+0x7fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <HAL_RCC_OscConfig+0x768>)
 8006bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bdc:	f7fc f9dc 	bl	8002f98 <HAL_GetTick>
 8006be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006be2:	e00f      	b.n	8006c04 <HAL_RCC_OscConfig+0x774>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006be4:	f7fc f9d8 	bl	8002f98 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d908      	bls.n	8006c04 <HAL_RCC_OscConfig+0x774>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e04c      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
 8006bf6:	bf00      	nop
 8006bf8:	58024400 	.word	0x58024400
 8006bfc:	fffffc0c 	.word	0xfffffc0c
 8006c00:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c04:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <HAL_RCC_OscConfig+0x808>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e9      	bne.n	8006be4 <HAL_RCC_OscConfig+0x754>
 8006c10:	e03d      	b.n	8006c8e <HAL_RCC_OscConfig+0x7fe>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c12:	4b21      	ldr	r3, [pc, #132]	; (8006c98 <HAL_RCC_OscConfig+0x808>)
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c18:	4b1f      	ldr	r3, [pc, #124]	; (8006c98 <HAL_RCC_OscConfig+0x808>)
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d031      	beq.n	8006c8a <HAL_RCC_OscConfig+0x7fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f003 0203 	and.w	r2, r3, #3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d12a      	bne.n	8006c8a <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	091b      	lsrs	r3, r3, #4
 8006c38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d122      	bne.n	8006c8a <HAL_RCC_OscConfig+0x7fa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d11a      	bne.n	8006c8a <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	0a5b      	lsrs	r3, r3, #9
 8006c58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d111      	bne.n	8006c8a <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	0c1b      	lsrs	r3, r3, #16
 8006c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d108      	bne.n	8006c8a <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	0e1b      	lsrs	r3, r3, #24
 8006c7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d001      	beq.n	8006c8e <HAL_RCC_OscConfig+0x7fe>
      {
        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <HAL_RCC_OscConfig+0x800>
      }
    }
  }
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3730      	adds	r7, #48	; 0x30
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	58024400 	.word	0x58024400

08006c9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e19c      	b.n	8006fea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cb0:	4b8a      	ldr	r3, [pc, #552]	; (8006edc <HAL_RCC_ClockConfig+0x240>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d910      	bls.n	8006ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cbe:	4b87      	ldr	r3, [pc, #540]	; (8006edc <HAL_RCC_ClockConfig+0x240>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f023 020f 	bic.w	r2, r3, #15
 8006cc6:	4985      	ldr	r1, [pc, #532]	; (8006edc <HAL_RCC_ClockConfig+0x240>)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cce:	4b83      	ldr	r3, [pc, #524]	; (8006edc <HAL_RCC_ClockConfig+0x240>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d001      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e184      	b.n	8006fea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d010      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	4b7b      	ldr	r3, [pc, #492]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d908      	bls.n	8006d0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cfc:	4b78      	ldr	r3, [pc, #480]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	4975      	ldr	r1, [pc, #468]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d010      	beq.n	8006d3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695a      	ldr	r2, [r3, #20]
 8006d1e:	4b70      	ldr	r3, [pc, #448]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d908      	bls.n	8006d3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d2a:	4b6d      	ldr	r3, [pc, #436]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	496a      	ldr	r1, [pc, #424]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d010      	beq.n	8006d6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	4b64      	ldr	r3, [pc, #400]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d908      	bls.n	8006d6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d58:	4b61      	ldr	r3, [pc, #388]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	495e      	ldr	r1, [pc, #376]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d010      	beq.n	8006d98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	4b59      	ldr	r3, [pc, #356]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d908      	bls.n	8006d98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d86:	4b56      	ldr	r3, [pc, #344]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	4953      	ldr	r1, [pc, #332]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d010      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	4b4d      	ldr	r3, [pc, #308]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d908      	bls.n	8006dc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db4:	4b4a      	ldr	r3, [pc, #296]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	f023 020f 	bic.w	r2, r3, #15
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	4947      	ldr	r1, [pc, #284]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d055      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006dd2:	4b43      	ldr	r3, [pc, #268]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	4940      	ldr	r1, [pc, #256]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d107      	bne.n	8006dfc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dec:	4b3c      	ldr	r3, [pc, #240]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d121      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e0f6      	b.n	8006fea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d107      	bne.n	8006e14 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e04:	4b36      	ldr	r3, [pc, #216]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d115      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0ea      	b.n	8006fea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d107      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e1c:	4b30      	ldr	r3, [pc, #192]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0de      	b.n	8006fea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e2c:	4b2c      	ldr	r3, [pc, #176]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0d6      	b.n	8006fea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e3c:	4b28      	ldr	r3, [pc, #160]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f023 0207 	bic.w	r2, r3, #7
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	4925      	ldr	r1, [pc, #148]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e4e:	f7fc f8a3 	bl	8002f98 <HAL_GetTick>
 8006e52:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e54:	e00a      	b.n	8006e6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e56:	f7fc f89f 	bl	8002f98 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e0be      	b.n	8006fea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d1eb      	bne.n	8006e56 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d010      	beq.n	8006eac <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d208      	bcs.n	8006eac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9a:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f023 020f 	bic.w	r2, r3, #15
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	490e      	ldr	r1, [pc, #56]	; (8006ee0 <HAL_RCC_ClockConfig+0x244>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006eac:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <HAL_RCC_ClockConfig+0x240>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d214      	bcs.n	8006ee4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eba:	4b08      	ldr	r3, [pc, #32]	; (8006edc <HAL_RCC_ClockConfig+0x240>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f023 020f 	bic.w	r2, r3, #15
 8006ec2:	4906      	ldr	r1, [pc, #24]	; (8006edc <HAL_RCC_ClockConfig+0x240>)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eca:	4b04      	ldr	r3, [pc, #16]	; (8006edc <HAL_RCC_ClockConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d005      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e086      	b.n	8006fea <HAL_RCC_ClockConfig+0x34e>
 8006edc:	52002000 	.word	0x52002000
 8006ee0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d010      	beq.n	8006f12 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	4b3f      	ldr	r3, [pc, #252]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d208      	bcs.n	8006f12 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f00:	4b3c      	ldr	r3, [pc, #240]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	4939      	ldr	r1, [pc, #228]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d010      	beq.n	8006f40 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	4b34      	ldr	r3, [pc, #208]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d208      	bcs.n	8006f40 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f2e:	4b31      	ldr	r3, [pc, #196]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	492e      	ldr	r1, [pc, #184]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d010      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	4b28      	ldr	r3, [pc, #160]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d208      	bcs.n	8006f6e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f5c:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	4922      	ldr	r1, [pc, #136]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d010      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69da      	ldr	r2, [r3, #28]
 8006f7e:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d208      	bcs.n	8006f9c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f8a:	4b1a      	ldr	r3, [pc, #104]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	4917      	ldr	r1, [pc, #92]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006f9c:	f000 f834 	bl	8007008 <HAL_RCC_GetSysClockFreq>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b14      	ldr	r3, [pc, #80]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	0a1b      	lsrs	r3, r3, #8
 8006fa8:	f003 030f 	and.w	r3, r3, #15
 8006fac:	4912      	ldr	r1, [pc, #72]	; (8006ff8 <HAL_RCC_ClockConfig+0x35c>)
 8006fae:	5ccb      	ldrb	r3, [r1, r3]
 8006fb0:	f003 031f 	and.w	r3, r3, #31
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006fba:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <HAL_RCC_ClockConfig+0x358>)
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	4a0d      	ldr	r2, [pc, #52]	; (8006ff8 <HAL_RCC_ClockConfig+0x35c>)
 8006fc4:	5cd3      	ldrb	r3, [r2, r3]
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd0:	4a0a      	ldr	r2, [pc, #40]	; (8006ffc <HAL_RCC_ClockConfig+0x360>)
 8006fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fd4:	4a0a      	ldr	r2, [pc, #40]	; (8007000 <HAL_RCC_ClockConfig+0x364>)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <HAL_RCC_ClockConfig+0x368>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fb ff90 	bl	8002f04 <HAL_InitTick>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	08012474 	.word	0x08012474
 8006ffc:	2400000c 	.word	0x2400000c
 8007000:	24000008 	.word	0x24000008
 8007004:	24000010 	.word	0x24000010

08007008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007008:	b480      	push	{r7}
 800700a:	b089      	sub	sp, #36	; 0x24
 800700c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800700e:	4bb3      	ldr	r3, [pc, #716]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007016:	2b18      	cmp	r3, #24
 8007018:	f200 8155 	bhi.w	80072c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <HAL_RCC_GetSysClockFreq+0x1c>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	08007089 	.word	0x08007089
 8007028:	080072c7 	.word	0x080072c7
 800702c:	080072c7 	.word	0x080072c7
 8007030:	080072c7 	.word	0x080072c7
 8007034:	080072c7 	.word	0x080072c7
 8007038:	080072c7 	.word	0x080072c7
 800703c:	080072c7 	.word	0x080072c7
 8007040:	080072c7 	.word	0x080072c7
 8007044:	080070af 	.word	0x080070af
 8007048:	080072c7 	.word	0x080072c7
 800704c:	080072c7 	.word	0x080072c7
 8007050:	080072c7 	.word	0x080072c7
 8007054:	080072c7 	.word	0x080072c7
 8007058:	080072c7 	.word	0x080072c7
 800705c:	080072c7 	.word	0x080072c7
 8007060:	080072c7 	.word	0x080072c7
 8007064:	080070b5 	.word	0x080070b5
 8007068:	080072c7 	.word	0x080072c7
 800706c:	080072c7 	.word	0x080072c7
 8007070:	080072c7 	.word	0x080072c7
 8007074:	080072c7 	.word	0x080072c7
 8007078:	080072c7 	.word	0x080072c7
 800707c:	080072c7 	.word	0x080072c7
 8007080:	080072c7 	.word	0x080072c7
 8007084:	080070bb 	.word	0x080070bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007088:	4b94      	ldr	r3, [pc, #592]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007094:	4b91      	ldr	r3, [pc, #580]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	08db      	lsrs	r3, r3, #3
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	4a90      	ldr	r2, [pc, #576]	; (80072e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070a0:	fa22 f303 	lsr.w	r3, r2, r3
 80070a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80070a6:	e111      	b.n	80072cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80070a8:	4b8d      	ldr	r3, [pc, #564]	; (80072e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070aa:	61bb      	str	r3, [r7, #24]
    break;
 80070ac:	e10e      	b.n	80072cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80070ae:	4b8d      	ldr	r3, [pc, #564]	; (80072e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070b0:	61bb      	str	r3, [r7, #24]
    break;
 80070b2:	e10b      	b.n	80072cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80070b4:	4b8c      	ldr	r3, [pc, #560]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80070b6:	61bb      	str	r3, [r7, #24]
    break;
 80070b8:	e108      	b.n	80072cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070ba:	4b88      	ldr	r3, [pc, #544]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80070c4:	4b85      	ldr	r3, [pc, #532]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c8:	091b      	lsrs	r3, r3, #4
 80070ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070d0:	4b82      	ldr	r3, [pc, #520]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070da:	4b80      	ldr	r3, [pc, #512]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070de:	08db      	lsrs	r3, r3, #3
 80070e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80e1 	beq.w	80072c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b02      	cmp	r3, #2
 8007102:	f000 8083 	beq.w	800720c <HAL_RCC_GetSysClockFreq+0x204>
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b02      	cmp	r3, #2
 800710a:	f200 80a1 	bhi.w	8007250 <HAL_RCC_GetSysClockFreq+0x248>
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <HAL_RCC_GetSysClockFreq+0x114>
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d056      	beq.n	80071c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800711a:	e099      	b.n	8007250 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800711c:	4b6f      	ldr	r3, [pc, #444]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0320 	and.w	r3, r3, #32
 8007124:	2b00      	cmp	r3, #0
 8007126:	d02d      	beq.n	8007184 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007128:	4b6c      	ldr	r3, [pc, #432]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	08db      	lsrs	r3, r3, #3
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	4a6b      	ldr	r2, [pc, #428]	; (80072e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007134:	fa22 f303 	lsr.w	r3, r2, r3
 8007138:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007152:	4b62      	ldr	r3, [pc, #392]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007162:	ed97 6a02 	vldr	s12, [r7, #8]
 8007166:	eddf 5a61 	vldr	s11, [pc, #388]	; 80072ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800716a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007182:	e087      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80072f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007196:	4b51      	ldr	r3, [pc, #324]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80072ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c6:	e065      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80072f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071da:	4b40      	ldr	r3, [pc, #256]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80071ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80072ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80071f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800720a:	e043      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	eddf 6a38 	vldr	s13, [pc, #224]	; 80072f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800721a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721e:	4b2f      	ldr	r3, [pc, #188]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007232:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80072ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8007236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800724e:	e021      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80072f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800725e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007262:	4b1e      	ldr	r3, [pc, #120]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007272:	ed97 6a02 	vldr	s12, [r7, #8]
 8007276:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80072ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800727a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007292:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007294:	4b11      	ldr	r3, [pc, #68]	; (80072dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007298:	0a5b      	lsrs	r3, r3, #9
 800729a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729e:	3301      	adds	r3, #1
 80072a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	ee07 3a90 	vmov	s15, r3
 80072a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80072b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b8:	ee17 3a90 	vmov	r3, s15
 80072bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80072be:	e005      	b.n	80072cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	61bb      	str	r3, [r7, #24]
    break;
 80072c4:	e002      	b.n	80072cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80072c6:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80072c8:	61bb      	str	r3, [r7, #24]
    break;
 80072ca:	bf00      	nop
  }

  return sysclockfreq;
 80072cc:	69bb      	ldr	r3, [r7, #24]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3724      	adds	r7, #36	; 0x24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	58024400 	.word	0x58024400
 80072e0:	03d09000 	.word	0x03d09000
 80072e4:	003d0900 	.word	0x003d0900
 80072e8:	016e3600 	.word	0x016e3600
 80072ec:	46000000 	.word	0x46000000
 80072f0:	4c742400 	.word	0x4c742400
 80072f4:	4a742400 	.word	0x4a742400
 80072f8:	4bb71b00 	.word	0x4bb71b00

080072fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007302:	f7ff fe81 	bl	8007008 <HAL_RCC_GetSysClockFreq>
 8007306:	4602      	mov	r2, r0
 8007308:	4b10      	ldr	r3, [pc, #64]	; (800734c <HAL_RCC_GetHCLKFreq+0x50>)
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	0a1b      	lsrs	r3, r3, #8
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	490f      	ldr	r1, [pc, #60]	; (8007350 <HAL_RCC_GetHCLKFreq+0x54>)
 8007314:	5ccb      	ldrb	r3, [r1, r3]
 8007316:	f003 031f 	and.w	r3, r3, #31
 800731a:	fa22 f303 	lsr.w	r3, r2, r3
 800731e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <HAL_RCC_GetHCLKFreq+0x50>)
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	f003 030f 	and.w	r3, r3, #15
 8007328:	4a09      	ldr	r2, [pc, #36]	; (8007350 <HAL_RCC_GetHCLKFreq+0x54>)
 800732a:	5cd3      	ldrb	r3, [r2, r3]
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	fa22 f303 	lsr.w	r3, r2, r3
 8007336:	4a07      	ldr	r2, [pc, #28]	; (8007354 <HAL_RCC_GetHCLKFreq+0x58>)
 8007338:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800733a:	4a07      	ldr	r2, [pc, #28]	; (8007358 <HAL_RCC_GetHCLKFreq+0x5c>)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007340:	4b04      	ldr	r3, [pc, #16]	; (8007354 <HAL_RCC_GetHCLKFreq+0x58>)
 8007342:	681b      	ldr	r3, [r3, #0]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	58024400 	.word	0x58024400
 8007350:	08012474 	.word	0x08012474
 8007354:	2400000c 	.word	0x2400000c
 8007358:	24000008 	.word	0x24000008

0800735c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007360:	f7ff ffcc 	bl	80072fc <HAL_RCC_GetHCLKFreq>
 8007364:	4602      	mov	r2, r0
 8007366:	4b06      	ldr	r3, [pc, #24]	; (8007380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	091b      	lsrs	r3, r3, #4
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	4904      	ldr	r1, [pc, #16]	; (8007384 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007372:	5ccb      	ldrb	r3, [r1, r3]
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800737c:	4618      	mov	r0, r3
 800737e:	bd80      	pop	{r7, pc}
 8007380:	58024400 	.word	0x58024400
 8007384:	08012474 	.word	0x08012474

08007388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800738c:	f7ff ffb6 	bl	80072fc <HAL_RCC_GetHCLKFreq>
 8007390:	4602      	mov	r2, r0
 8007392:	4b06      	ldr	r3, [pc, #24]	; (80073ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	0a1b      	lsrs	r3, r3, #8
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	4904      	ldr	r1, [pc, #16]	; (80073b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800739e:	5ccb      	ldrb	r3, [r1, r3]
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	58024400 	.word	0x58024400
 80073b0:	08012474 	.word	0x08012474

080073b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073bc:	2300      	movs	r3, #0
 80073be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073c0:	2300      	movs	r3, #0
 80073c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d03f      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073d8:	d02a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80073da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073de:	d824      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073e4:	d018      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073ea:	d81e      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80073f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073f4:	d007      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80073f6:	e018      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f8:	4b9f      	ldr	r3, [pc, #636]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4a9e      	ldr	r2, [pc, #632]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80073fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007404:	e015      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3304      	adds	r3, #4
 800740a:	2102      	movs	r1, #2
 800740c:	4618      	mov	r0, r3
 800740e:	f001 ff1b 	bl	8009248 <RCCEx_PLL2_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007416:	e00c      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3324      	adds	r3, #36	; 0x24
 800741c:	2102      	movs	r1, #2
 800741e:	4618      	mov	r0, r3
 8007420:	f001 ffc4 	bl	80093ac <RCCEx_PLL3_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007428:	e003      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	75fb      	strb	r3, [r7, #23]
      break;
 800742e:	e000      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d109      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007438:	4b8f      	ldr	r3, [pc, #572]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800743a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007444:	498c      	ldr	r1, [pc, #560]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007446:	4313      	orrs	r3, r2
 8007448:	650b      	str	r3, [r1, #80]	; 0x50
 800744a:	e001      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007458:	2b00      	cmp	r3, #0
 800745a:	d03d      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	2b04      	cmp	r3, #4
 8007462:	d826      	bhi.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	08007481 	.word	0x08007481
 8007470:	0800748f 	.word	0x0800748f
 8007474:	080074a1 	.word	0x080074a1
 8007478:	080074b9 	.word	0x080074b9
 800747c:	080074b9 	.word	0x080074b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007480:	4b7d      	ldr	r3, [pc, #500]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	4a7c      	ldr	r2, [pc, #496]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800748a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800748c:	e015      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3304      	adds	r3, #4
 8007492:	2100      	movs	r1, #0
 8007494:	4618      	mov	r0, r3
 8007496:	f001 fed7 	bl	8009248 <RCCEx_PLL2_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800749e:	e00c      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3324      	adds	r3, #36	; 0x24
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f001 ff80 	bl	80093ac <RCCEx_PLL3_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074b0:	e003      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	75fb      	strb	r3, [r7, #23]
      break;
 80074b6:	e000      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80074b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d109      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074c0:	4b6d      	ldr	r3, [pc, #436]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c4:	f023 0207 	bic.w	r2, r3, #7
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074cc:	496a      	ldr	r1, [pc, #424]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	650b      	str	r3, [r1, #80]	; 0x50
 80074d2:	e001      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d04a      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80074ec:	d031      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80074ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80074f2:	d82b      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80074f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f8:	d02d      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80074fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fe:	d825      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007500:	2bc0      	cmp	r3, #192	; 0xc0
 8007502:	d02a      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007504:	2bc0      	cmp	r3, #192	; 0xc0
 8007506:	d821      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007508:	2b80      	cmp	r3, #128	; 0x80
 800750a:	d016      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800750c:	2b80      	cmp	r3, #128	; 0x80
 800750e:	d81d      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d007      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007518:	e018      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751a:	4b57      	ldr	r3, [pc, #348]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	4a56      	ldr	r2, [pc, #344]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007526:	e019      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3304      	adds	r3, #4
 800752c:	2100      	movs	r1, #0
 800752e:	4618      	mov	r0, r3
 8007530:	f001 fe8a 	bl	8009248 <RCCEx_PLL2_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007538:	e010      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3324      	adds	r3, #36	; 0x24
 800753e:	2100      	movs	r1, #0
 8007540:	4618      	mov	r0, r3
 8007542:	f001 ff33 	bl	80093ac <RCCEx_PLL3_Config>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800754a:	e007      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
      break;
 8007550:	e004      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007552:	bf00      	nop
 8007554:	e002      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007556:	bf00      	nop
 8007558:	e000      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800755a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d109      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007562:	4b45      	ldr	r3, [pc, #276]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007566:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756e:	4942      	ldr	r1, [pc, #264]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007570:	4313      	orrs	r3, r2
 8007572:	650b      	str	r3, [r1, #80]	; 0x50
 8007574:	e001      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007582:	2b00      	cmp	r3, #0
 8007584:	d04f      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800758e:	d036      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007590:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007594:	d830      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800759a:	d032      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800759c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a0:	d82a      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80075a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80075a6:	d02e      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80075a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80075ac:	d824      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80075ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b2:	d018      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80075b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b8:	d81e      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80075be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c2:	d007      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80075c4:	e018      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c6:	4b2c      	ldr	r3, [pc, #176]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	4a2b      	ldr	r2, [pc, #172]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80075cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80075d2:	e019      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3304      	adds	r3, #4
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 fe34 	bl	8009248 <RCCEx_PLL2_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80075e4:	e010      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3324      	adds	r3, #36	; 0x24
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f001 fedd 	bl	80093ac <RCCEx_PLL3_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80075f6:	e007      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
      break;
 80075fc:	e004      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d109      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800760e:	4b1a      	ldr	r3, [pc, #104]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007612:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761a:	4917      	ldr	r1, [pc, #92]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800761c:	4313      	orrs	r3, r2
 800761e:	650b      	str	r3, [r1, #80]	; 0x50
 8007620:	e001      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d034      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007636:	2b30      	cmp	r3, #48	; 0x30
 8007638:	d01c      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800763a:	2b30      	cmp	r3, #48	; 0x30
 800763c:	d817      	bhi.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800763e:	2b20      	cmp	r3, #32
 8007640:	d00c      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007642:	2b20      	cmp	r3, #32
 8007644:	d813      	bhi.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d018      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800764a:	2b10      	cmp	r3, #16
 800764c:	d10f      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800764e:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007652:	4a09      	ldr	r2, [pc, #36]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007658:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800765a:	e010      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3304      	adds	r3, #4
 8007660:	2102      	movs	r1, #2
 8007662:	4618      	mov	r0, r3
 8007664:	f001 fdf0 	bl	8009248 <RCCEx_PLL2_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800766c:	e007      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	75fb      	strb	r3, [r7, #23]
      break;
 8007672:	e004      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8007674:	bf00      	nop
 8007676:	e002      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007678:	58024400 	.word	0x58024400
      break;
 800767c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d109      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007684:	4b9b      	ldr	r3, [pc, #620]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007688:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007690:	4998      	ldr	r1, [pc, #608]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007692:	4313      	orrs	r3, r2
 8007694:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007696:	e001      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d047      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b0:	d030      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80076b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b6:	d82a      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80076b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076bc:	d02c      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80076be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076c2:	d824      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80076c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c8:	d018      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80076ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ce:	d81e      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x328>
 80076d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d8:	d007      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x336>
 80076da:	e018      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076dc:	4b85      	ldr	r3, [pc, #532]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	4a84      	ldr	r2, [pc, #528]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80076e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076e8:	e017      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3304      	adds	r3, #4
 80076ee:	2100      	movs	r1, #0
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 fda9 	bl	8009248 <RCCEx_PLL2_Config>
 80076f6:	4603      	mov	r3, r0
 80076f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076fa:	e00e      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3324      	adds	r3, #36	; 0x24
 8007700:	2100      	movs	r1, #0
 8007702:	4618      	mov	r0, r3
 8007704:	f001 fe52 	bl	80093ac <RCCEx_PLL3_Config>
 8007708:	4603      	mov	r3, r0
 800770a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800770c:	e005      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	75fb      	strb	r3, [r7, #23]
      break;
 8007712:	e002      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007714:	bf00      	nop
 8007716:	e000      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d109      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007720:	4b74      	ldr	r3, [pc, #464]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007724:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800772c:	4971      	ldr	r1, [pc, #452]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800772e:	4313      	orrs	r3, r2
 8007730:	650b      	str	r3, [r1, #80]	; 0x50
 8007732:	e001      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d049      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800774c:	d02e      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800774e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007752:	d828      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007754:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007758:	d02a      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800775a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800775e:	d822      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007760:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007764:	d026      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007766:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800776a:	d81c      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800776c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007770:	d010      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007776:	d816      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01d      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800777c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007780:	d111      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3304      	adds	r3, #4
 8007786:	2101      	movs	r1, #1
 8007788:	4618      	mov	r0, r3
 800778a:	f001 fd5d 	bl	8009248 <RCCEx_PLL2_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007792:	e012      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3324      	adds	r3, #36	; 0x24
 8007798:	2101      	movs	r1, #1
 800779a:	4618      	mov	r0, r3
 800779c:	f001 fe06 	bl	80093ac <RCCEx_PLL3_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80077a4:	e009      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	75fb      	strb	r3, [r7, #23]
      break;
 80077aa:	e006      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80077ac:	bf00      	nop
 80077ae:	e004      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80077b0:	bf00      	nop
 80077b2:	e002      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80077b4:	bf00      	nop
 80077b6:	e000      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80077b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d109      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077c0:	4b4c      	ldr	r3, [pc, #304]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80077c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077cc:	4949      	ldr	r1, [pc, #292]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	650b      	str	r3, [r1, #80]	; 0x50
 80077d2:	e001      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d053      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077ea:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80077ee:	d034      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80077f0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80077f4:	d82e      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80077f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077fa:	d030      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80077fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007800:	d828      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007806:	d02c      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780c:	d822      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800780e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007812:	d028      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007814:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007818:	d81c      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800781a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800781e:	d010      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8007820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007824:	d816      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d01f      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800782a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800782e:	d111      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3304      	adds	r3, #4
 8007834:	2101      	movs	r1, #1
 8007836:	4618      	mov	r0, r3
 8007838:	f001 fd06 	bl	8009248 <RCCEx_PLL2_Config>
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007840:	e014      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3324      	adds	r3, #36	; 0x24
 8007846:	2101      	movs	r1, #1
 8007848:	4618      	mov	r0, r3
 800784a:	f001 fdaf 	bl	80093ac <RCCEx_PLL3_Config>
 800784e:	4603      	mov	r3, r0
 8007850:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007852:	e00b      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	75fb      	strb	r3, [r7, #23]
      break;
 8007858:	e008      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800785a:	bf00      	nop
 800785c:	e006      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800785e:	bf00      	nop
 8007860:	e004      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007862:	bf00      	nop
 8007864:	e002      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007866:	bf00      	nop
 8007868:	e000      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800786a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007872:	4b20      	ldr	r3, [pc, #128]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007876:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007880:	491c      	ldr	r1, [pc, #112]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007882:	4313      	orrs	r3, r2
 8007884:	658b      	str	r3, [r1, #88]	; 0x58
 8007886:	e001      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007888:	7dfb      	ldrb	r3, [r7, #23]
 800788a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d031      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a0:	d00e      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80078a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a6:	d814      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d015      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80078ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b0:	d10f      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b2:	4b10      	ldr	r3, [pc, #64]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	4a0f      	ldr	r2, [pc, #60]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80078b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80078be:	e00c      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3304      	adds	r3, #4
 80078c4:	2101      	movs	r1, #1
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 fcbe 	bl	8009248 <RCCEx_PLL2_Config>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80078d0:	e003      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	75fb      	strb	r3, [r7, #23]
      break;
 80078d6:	e000      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80078d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10b      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078e0:	4b04      	ldr	r3, [pc, #16]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80078e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ec:	4901      	ldr	r1, [pc, #4]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	650b      	str	r3, [r1, #80]	; 0x50
 80078f2:	e003      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x548>
 80078f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
 80078fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d032      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790c:	2b03      	cmp	r3, #3
 800790e:	d81b      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007910:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	0800794f 	.word	0x0800794f
 800791c:	08007929 	.word	0x08007929
 8007920:	08007937 	.word	0x08007937
 8007924:	0800794f 	.word	0x0800794f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007928:	4bb2      	ldr	r3, [pc, #712]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	4ab1      	ldr	r2, [pc, #708]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800792e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007934:	e00c      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3304      	adds	r3, #4
 800793a:	2102      	movs	r1, #2
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fc83 	bl	8009248 <RCCEx_PLL2_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007946:	e003      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	75fb      	strb	r3, [r7, #23]
      break;
 800794c:	e000      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800794e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007956:	4ba7      	ldr	r3, [pc, #668]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795a:	f023 0203 	bic.w	r2, r3, #3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007962:	49a4      	ldr	r1, [pc, #656]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007964:	4313      	orrs	r3, r2
 8007966:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007968:	e001      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8086 	beq.w	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800797c:	4b9e      	ldr	r3, [pc, #632]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a9d      	ldr	r2, [pc, #628]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007986:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007988:	f7fb fb06 	bl	8002f98 <HAL_GetTick>
 800798c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800798e:	e009      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007990:	f7fb fb02 	bl	8002f98 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b64      	cmp	r3, #100	; 0x64
 800799c:	d902      	bls.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	75fb      	strb	r3, [r7, #23]
        break;
 80079a2:	e005      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079a4:	4b94      	ldr	r3, [pc, #592]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0ef      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d166      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80079b6:	4b8f      	ldr	r3, [pc, #572]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079c0:	4053      	eors	r3, r2
 80079c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d013      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079ca:	4b8a      	ldr	r3, [pc, #552]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079d4:	4b87      	ldr	r3, [pc, #540]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d8:	4a86      	ldr	r2, [pc, #536]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079e0:	4b84      	ldr	r3, [pc, #528]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e4:	4a83      	ldr	r2, [pc, #524]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80079ec:	4a81      	ldr	r2, [pc, #516]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fc:	d115      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fe:	f7fb facb 	bl	8002f98 <HAL_GetTick>
 8007a02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a04:	e00b      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a06:	f7fb fac7 	bl	8002f98 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d902      	bls.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	75fb      	strb	r3, [r7, #23]
            break;
 8007a1c:	e005      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a1e:	4b75      	ldr	r3, [pc, #468]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0ed      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d126      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a3e:	d10d      	bne.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8007a40:	4b6c      	ldr	r3, [pc, #432]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a4e:	0919      	lsrs	r1, r3, #4
 8007a50:	4b6a      	ldr	r3, [pc, #424]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007a52:	400b      	ands	r3, r1
 8007a54:	4967      	ldr	r1, [pc, #412]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	610b      	str	r3, [r1, #16]
 8007a5a:	e005      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8007a5c:	4b65      	ldr	r3, [pc, #404]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	4a64      	ldr	r2, [pc, #400]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a66:	6113      	str	r3, [r2, #16]
 8007a68:	4b62      	ldr	r3, [pc, #392]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a76:	495f      	ldr	r1, [pc, #380]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	670b      	str	r3, [r1, #112]	; 0x70
 8007a7c:	e004      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	75bb      	strb	r3, [r7, #22]
 8007a82:	e001      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d07f      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a9a:	2b28      	cmp	r3, #40	; 0x28
 8007a9c:	d866      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8007a9e:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007b73 	.word	0x08007b73
 8007aa8:	08007b6d 	.word	0x08007b6d
 8007aac:	08007b6d 	.word	0x08007b6d
 8007ab0:	08007b6d 	.word	0x08007b6d
 8007ab4:	08007b6d 	.word	0x08007b6d
 8007ab8:	08007b6d 	.word	0x08007b6d
 8007abc:	08007b6d 	.word	0x08007b6d
 8007ac0:	08007b6d 	.word	0x08007b6d
 8007ac4:	08007b49 	.word	0x08007b49
 8007ac8:	08007b6d 	.word	0x08007b6d
 8007acc:	08007b6d 	.word	0x08007b6d
 8007ad0:	08007b6d 	.word	0x08007b6d
 8007ad4:	08007b6d 	.word	0x08007b6d
 8007ad8:	08007b6d 	.word	0x08007b6d
 8007adc:	08007b6d 	.word	0x08007b6d
 8007ae0:	08007b6d 	.word	0x08007b6d
 8007ae4:	08007b5b 	.word	0x08007b5b
 8007ae8:	08007b6d 	.word	0x08007b6d
 8007aec:	08007b6d 	.word	0x08007b6d
 8007af0:	08007b6d 	.word	0x08007b6d
 8007af4:	08007b6d 	.word	0x08007b6d
 8007af8:	08007b6d 	.word	0x08007b6d
 8007afc:	08007b6d 	.word	0x08007b6d
 8007b00:	08007b6d 	.word	0x08007b6d
 8007b04:	08007b73 	.word	0x08007b73
 8007b08:	08007b6d 	.word	0x08007b6d
 8007b0c:	08007b6d 	.word	0x08007b6d
 8007b10:	08007b6d 	.word	0x08007b6d
 8007b14:	08007b6d 	.word	0x08007b6d
 8007b18:	08007b6d 	.word	0x08007b6d
 8007b1c:	08007b6d 	.word	0x08007b6d
 8007b20:	08007b6d 	.word	0x08007b6d
 8007b24:	08007b73 	.word	0x08007b73
 8007b28:	08007b6d 	.word	0x08007b6d
 8007b2c:	08007b6d 	.word	0x08007b6d
 8007b30:	08007b6d 	.word	0x08007b6d
 8007b34:	08007b6d 	.word	0x08007b6d
 8007b38:	08007b6d 	.word	0x08007b6d
 8007b3c:	08007b6d 	.word	0x08007b6d
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	08007b73 	.word	0x08007b73
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 fb7a 	bl	8009248 <RCCEx_PLL2_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b58:	e00c      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3324      	adds	r3, #36	; 0x24
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 fc23 	bl	80093ac <RCCEx_PLL3_Config>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b6a:	e003      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8007b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b7a:	4b1e      	ldr	r3, [pc, #120]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b88:	491a      	ldr	r1, [pc, #104]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	654b      	str	r3, [r1, #84]	; 0x54
 8007b8e:	e001      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d03f      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba4:	2b05      	cmp	r3, #5
 8007ba6:	d821      	bhi.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x838>
 8007ba8:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007c01 	.word	0x08007c01
 8007bb4:	08007bc9 	.word	0x08007bc9
 8007bb8:	08007bdb 	.word	0x08007bdb
 8007bbc:	08007c01 	.word	0x08007c01
 8007bc0:	08007c01 	.word	0x08007c01
 8007bc4:	08007c01 	.word	0x08007c01
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	2101      	movs	r1, #1
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f001 fb3a 	bl	8009248 <RCCEx_PLL2_Config>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007bd8:	e013      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3324      	adds	r3, #36	; 0x24
 8007bde:	2101      	movs	r1, #1
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 fbe3 	bl	80093ac <RCCEx_PLL3_Config>
 8007be6:	4603      	mov	r3, r0
 8007be8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007bea:	e00a      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf0:	e007      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8007bf2:	bf00      	nop
 8007bf4:	58024400 	.word	0x58024400
 8007bf8:	58024800 	.word	0x58024800
 8007bfc:	00ffffcf 	.word	0x00ffffcf
      break;
 8007c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d109      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c08:	4b9f      	ldr	r3, [pc, #636]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0c:	f023 0207 	bic.w	r2, r3, #7
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c14:	499c      	ldr	r1, [pc, #624]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	654b      	str	r3, [r1, #84]	; 0x54
 8007c1a:	e001      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d039      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	d820      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8007c36:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c7f 	.word	0x08007c7f
 8007c40:	08007c55 	.word	0x08007c55
 8007c44:	08007c67 	.word	0x08007c67
 8007c48:	08007c7f 	.word	0x08007c7f
 8007c4c:	08007c7f 	.word	0x08007c7f
 8007c50:	08007c7f 	.word	0x08007c7f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3304      	adds	r3, #4
 8007c58:	2101      	movs	r1, #1
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 faf4 	bl	8009248 <RCCEx_PLL2_Config>
 8007c60:	4603      	mov	r3, r0
 8007c62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c64:	e00c      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3324      	adds	r3, #36	; 0x24
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 fb9d 	bl	80093ac <RCCEx_PLL3_Config>
 8007c72:	4603      	mov	r3, r0
 8007c74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c76:	e003      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7c:	e000      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8007c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c86:	4b80      	ldr	r3, [pc, #512]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8a:	f023 0207 	bic.w	r2, r3, #7
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c94:	497c      	ldr	r1, [pc, #496]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	658b      	str	r3, [r1, #88]	; 0x58
 8007c9a:	e001      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0320 	and.w	r3, r3, #32
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d04b      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cb6:	d02e      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cbc:	d828      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc2:	d02a      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc8:	d822      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007cca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cce:	d026      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007cd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cd4:	d81c      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cda:	d010      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8007cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ce0:	d816      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d01d      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cea:	d111      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 faa8 	bl	8009248 <RCCEx_PLL2_Config>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007cfc:	e012      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3324      	adds	r3, #36	; 0x24
 8007d02:	2102      	movs	r1, #2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 fb51 	bl	80093ac <RCCEx_PLL3_Config>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d0e:	e009      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	75fb      	strb	r3, [r7, #23]
      break;
 8007d14:	e006      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d16:	bf00      	nop
 8007d18:	e004      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d1a:	bf00      	nop
 8007d1c:	e002      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d1e:	bf00      	nop
 8007d20:	e000      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d2a:	4b57      	ldr	r3, [pc, #348]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d38:	4953      	ldr	r1, [pc, #332]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	654b      	str	r3, [r1, #84]	; 0x54
 8007d3e:	e001      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d04b      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d5a:	d02e      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007d5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d60:	d828      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d66:	d02a      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6c:	d822      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d72:	d026      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d78:	d81c      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d7e:	d010      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8007d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d84:	d816      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d01d      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8e:	d111      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3304      	adds	r3, #4
 8007d94:	2100      	movs	r1, #0
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 fa56 	bl	8009248 <RCCEx_PLL2_Config>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007da0:	e012      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3324      	adds	r3, #36	; 0x24
 8007da6:	2102      	movs	r1, #2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 faff 	bl	80093ac <RCCEx_PLL3_Config>
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007db2:	e009      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
      break;
 8007db8:	e006      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007dba:	bf00      	nop
 8007dbc:	e004      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007dbe:	bf00      	nop
 8007dc0:	e002      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007dc2:	bf00      	nop
 8007dc4:	e000      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10a      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dce:	4b2e      	ldr	r3, [pc, #184]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ddc:	492a      	ldr	r1, [pc, #168]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	658b      	str	r3, [r1, #88]	; 0x58
 8007de2:	e001      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d04d      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007dfa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007dfe:	d02e      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007e00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e04:	d828      	bhi.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e0a:	d02a      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e10:	d822      	bhi.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e12:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e16:	d026      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007e18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e1c:	d81c      	bhi.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e22:	d010      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8007e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e28:	d816      	bhi.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d01d      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e32:	d111      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3304      	adds	r3, #4
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f001 fa04 	bl	8009248 <RCCEx_PLL2_Config>
 8007e40:	4603      	mov	r3, r0
 8007e42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e44:	e012      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3324      	adds	r3, #36	; 0x24
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 faad 	bl	80093ac <RCCEx_PLL3_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e56:	e009      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e5c:	e006      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007e5e:	bf00      	nop
 8007e60:	e004      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007e62:	bf00      	nop
 8007e64:	e002      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007e66:	bf00      	nop
 8007e68:	e000      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10c      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e72:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e80:	4901      	ldr	r1, [pc, #4]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	658b      	str	r3, [r1, #88]	; 0x58
 8007e86:	e003      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007e88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d01a      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea6:	d10a      	bne.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3324      	adds	r3, #36	; 0x24
 8007eac:	2102      	movs	r1, #2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 fa7c 	bl	80093ac <RCCEx_PLL3_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ebe:	4b8c      	ldr	r3, [pc, #560]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ecc:	4988      	ldr	r1, [pc, #544]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0310 	and.w	r3, r3, #16
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d01a      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee8:	d10a      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3324      	adds	r3, #36	; 0x24
 8007eee:	2102      	movs	r1, #2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f001 fa5b 	bl	80093ac <RCCEx_PLL3_Config>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f00:	4b7b      	ldr	r3, [pc, #492]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f0e:	4978      	ldr	r1, [pc, #480]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d034      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f2a:	d01d      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8007f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f30:	d817      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8007f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3a:	d009      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007f3c:	e011      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3304      	adds	r3, #4
 8007f42:	2100      	movs	r1, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f001 f97f 	bl	8009248 <RCCEx_PLL2_Config>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f4e:	e00c      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3324      	adds	r3, #36	; 0x24
 8007f54:	2102      	movs	r1, #2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f001 fa28 	bl	80093ac <RCCEx_PLL3_Config>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f60:	e003      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	75fb      	strb	r3, [r7, #23]
      break;
 8007f66:	e000      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8007f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10a      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f70:	4b5f      	ldr	r3, [pc, #380]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f7e:	495c      	ldr	r1, [pc, #368]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	658b      	str	r3, [r1, #88]	; 0x58
 8007f84:	e001      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
 8007f88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d033      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fa0:	d01c      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007fa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fa6:	d816      	bhi.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fac:	d003      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8007fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fb2:	d007      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007fb4:	e00f      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fb6:	4b4e      	ldr	r3, [pc, #312]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fba:	4a4d      	ldr	r2, [pc, #308]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007fc2:	e00c      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3324      	adds	r3, #36	; 0x24
 8007fc8:	2101      	movs	r1, #1
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f001 f9ee 	bl	80093ac <RCCEx_PLL3_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007fd4:	e003      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8007fda:	e000      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fe4:	4b42      	ldr	r3, [pc, #264]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff2:	493f      	ldr	r1, [pc, #252]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	654b      	str	r3, [r1, #84]	; 0x54
 8007ff8:	e001      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d029      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008016:	d007      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008018:	e00f      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801a:	4b35      	ldr	r3, [pc, #212]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	4a34      	ldr	r2, [pc, #208]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008026:	e00b      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3304      	adds	r3, #4
 800802c:	2102      	movs	r1, #2
 800802e:	4618      	mov	r0, r3
 8008030:	f001 f90a 	bl	8009248 <RCCEx_PLL2_Config>
 8008034:	4603      	mov	r3, r0
 8008036:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008038:	e002      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	75fb      	strb	r3, [r7, #23]
      break;
 800803e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008046:	4b2a      	ldr	r3, [pc, #168]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008052:	4927      	ldr	r1, [pc, #156]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008054:	4313      	orrs	r3, r2
 8008056:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008058:	e001      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3324      	adds	r3, #36	; 0x24
 800806e:	2102      	movs	r1, #2
 8008070:	4618      	mov	r0, r3
 8008072:	f001 f99b 	bl	80093ac <RCCEx_PLL3_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d035      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008096:	d017      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800809c:	d811      	bhi.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800809e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a2:	d013      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80080a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a8:	d80b      	bhi.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d010      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80080ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b2:	d106      	bne.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b4:	4b0e      	ldr	r3, [pc, #56]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	4a0d      	ldr	r2, [pc, #52]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80080ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80080c0:	e007      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	75fb      	strb	r3, [r7, #23]
      break;
 80080c6:	e004      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80080c8:	bf00      	nop
 80080ca:	e002      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80080cc:	bf00      	nop
 80080ce:	e000      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80080d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10d      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080d8:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80080da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e6:	4902      	ldr	r1, [pc, #8]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	654b      	str	r3, [r1, #84]	; 0x54
 80080ec:	e004      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80080ee:	bf00      	nop
 80080f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d008      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008104:	4b30      	ldr	r3, [pc, #192]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008108:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008110:	492d      	ldr	r1, [pc, #180]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008112:	4313      	orrs	r3, r2
 8008114:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d008      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008122:	4b29      	ldr	r3, [pc, #164]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008126:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800812e:	4926      	ldr	r1, [pc, #152]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008130:	4313      	orrs	r3, r2
 8008132:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800813c:	2b00      	cmp	r3, #0
 800813e:	d008      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008140:	4b21      	ldr	r3, [pc, #132]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008144:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814c:	491e      	ldr	r1, [pc, #120]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800814e:	4313      	orrs	r3, r2
 8008150:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00d      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800815e:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	4a19      	ldr	r2, [pc, #100]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008164:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008168:	6113      	str	r3, [r2, #16]
 800816a:	4b17      	ldr	r3, [pc, #92]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800816c:	691a      	ldr	r2, [r3, #16]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008174:	4914      	ldr	r1, [pc, #80]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008176:	4313      	orrs	r3, r2
 8008178:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	da08      	bge.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008182:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008186:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818e:	490e      	ldr	r1, [pc, #56]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008190:	4313      	orrs	r3, r2
 8008192:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081a0:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80081a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ae:	4906      	ldr	r1, [pc, #24]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80081b4:	7dbb      	ldrb	r3, [r7, #22]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	e000      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	58024400 	.word	0x58024400

080081cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b090      	sub	sp, #64	; 0x40
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081da:	f040 8089 	bne.w	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80081de:	4b91      	ldr	r3, [pc, #580]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d87d      	bhi.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80081ee:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008209 	.word	0x08008209
 80081f8:	0800822d 	.word	0x0800822d
 80081fc:	08008251 	.word	0x08008251
 8008200:	080082e5 	.word	0x080082e5
 8008204:	08008275 	.word	0x08008275
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008208:	4b86      	ldr	r3, [pc, #536]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008214:	d107      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fec2 	bl	8008fa4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008224:	e3f4      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800822a:	e3f1      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800822c:	4b7d      	ldr	r3, [pc, #500]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008238:	d107      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800823a:	f107 0318 	add.w	r3, r7, #24
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fc08 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008248:	e3e2      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800824e:	e3df      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008250:	4b74      	ldr	r3, [pc, #464]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800825c:	d107      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800825e:	f107 030c 	add.w	r3, r7, #12
 8008262:	4618      	mov	r0, r3
 8008264:	f000 fd4a 	bl	8008cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800826c:	e3d0      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008272:	e3cd      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008274:	4b6b      	ldr	r3, [pc, #428]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008278:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800827c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800827e:	4b69      	ldr	r3, [pc, #420]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b04      	cmp	r3, #4
 8008288:	d10c      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800828a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008290:	4b64      	ldr	r3, [pc, #400]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	08db      	lsrs	r3, r3, #3
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	4a63      	ldr	r2, [pc, #396]	; (8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800829c:	fa22 f303 	lsr.w	r3, r2, r3
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082a2:	e01e      	b.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082a4:	4b5f      	ldr	r3, [pc, #380]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b0:	d106      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80082b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082b8:	d102      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80082ba:	4b5c      	ldr	r3, [pc, #368]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082be:	e010      	b.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082c0:	4b58      	ldr	r3, [pc, #352]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082cc:	d106      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80082ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d4:	d102      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80082d6:	4b56      	ldr	r3, [pc, #344]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80082d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082da:	e002      	b.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80082e0:	e396      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80082e2:	e395      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80082e4:	4b53      	ldr	r3, [pc, #332]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80082e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082e8:	e392      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ee:	e38f      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f6:	f040 809f 	bne.w	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80082fa:	4b4a      	ldr	r3, [pc, #296]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008302:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830a:	d04d      	beq.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008312:	f200 8084 	bhi.w	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	2bc0      	cmp	r3, #192	; 0xc0
 800831a:	d07d      	beq.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	2bc0      	cmp	r3, #192	; 0xc0
 8008320:	d87d      	bhi.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	2b80      	cmp	r3, #128	; 0x80
 8008326:	d02d      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	2b80      	cmp	r3, #128	; 0x80
 800832c:	d877      	bhi.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	2b40      	cmp	r3, #64	; 0x40
 8008338:	d012      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800833a:	e070      	b.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800833c:	4b39      	ldr	r3, [pc, #228]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008348:	d107      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800834a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fe28 	bl	8008fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008358:	e35a      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800835a:	2300      	movs	r3, #0
 800835c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800835e:	e357      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008360:	4b30      	ldr	r3, [pc, #192]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800836c:	d107      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800836e:	f107 0318 	add.w	r3, r7, #24
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fb6e 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800837c:	e348      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008382:	e345      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008384:	4b27      	ldr	r3, [pc, #156]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800838c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008390:	d107      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008392:	f107 030c 	add.w	r3, r7, #12
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fcb0 	bl	8008cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083a0:	e336      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a6:	e333      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083a8:	4b1e      	ldr	r3, [pc, #120]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083b2:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d10c      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80083be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d109      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083c4:	4b17      	ldr	r3, [pc, #92]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	08db      	lsrs	r3, r3, #3
 80083ca:	f003 0303 	and.w	r3, r3, #3
 80083ce:	4a16      	ldr	r2, [pc, #88]	; (8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80083d0:	fa22 f303 	lsr.w	r3, r2, r3
 80083d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d6:	e01e      	b.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083d8:	4b12      	ldr	r3, [pc, #72]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083e4:	d106      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80083e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ec:	d102      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80083ee:	4b0f      	ldr	r3, [pc, #60]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083f2:	e010      	b.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083f4:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008400:	d106      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008408:	d102      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800840a:	4b09      	ldr	r3, [pc, #36]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800840e:	e002      	b.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008414:	e2fc      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008416:	e2fb      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008418:	4b06      	ldr	r3, [pc, #24]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800841c:	e2f8      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008422:	e2f5      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008424:	58024400 	.word	0x58024400
 8008428:	03d09000 	.word	0x03d09000
 800842c:	003d0900 	.word	0x003d0900
 8008430:	016e3600 	.word	0x016e3600
 8008434:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800843e:	f040 809c 	bne.w	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8008442:	4b9d      	ldr	r3, [pc, #628]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008446:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800844a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800844c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008452:	d054      	beq.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800845a:	f200 808b 	bhi.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800845e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008460:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008464:	f000 8083 	beq.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800846e:	f200 8081 	bhi.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008478:	d02f      	beq.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008480:	d878      	bhi.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	2b00      	cmp	r3, #0
 8008486:	d004      	beq.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800848e:	d012      	beq.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008490:	e070      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008492:	4b89      	ldr	r3, [pc, #548]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800849e:	d107      	bne.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 fd7d 	bl	8008fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084ae:	e2af      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084b4:	e2ac      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084b6:	4b80      	ldr	r3, [pc, #512]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084c2:	d107      	bne.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c4:	f107 0318 	add.w	r3, r7, #24
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fac3 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084d2:	e29d      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084d8:	e29a      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084da:	4b77      	ldr	r3, [pc, #476]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e6:	d107      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084e8:	f107 030c 	add.w	r3, r7, #12
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 fc05 	bl	8008cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084f6:	e28b      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084fc:	e288      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084fe:	4b6e      	ldr	r3, [pc, #440]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008502:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008506:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008508:	4b6b      	ldr	r3, [pc, #428]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b04      	cmp	r3, #4
 8008512:	d10c      	bne.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8008514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008516:	2b00      	cmp	r3, #0
 8008518:	d109      	bne.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800851a:	4b67      	ldr	r3, [pc, #412]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	08db      	lsrs	r3, r3, #3
 8008520:	f003 0303 	and.w	r3, r3, #3
 8008524:	4a65      	ldr	r2, [pc, #404]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8008526:	fa22 f303 	lsr.w	r3, r2, r3
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800852c:	e01e      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800852e:	4b62      	ldr	r3, [pc, #392]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853a:	d106      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800853c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008542:	d102      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008544:	4b5e      	ldr	r3, [pc, #376]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008548:	e010      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800854a:	4b5b      	ldr	r3, [pc, #364]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008556:	d106      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8008558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800855e:	d102      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008560:	4b58      	ldr	r3, [pc, #352]	; (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008564:	e002      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800856a:	e251      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800856c:	e250      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800856e:	4b56      	ldr	r3, [pc, #344]	; (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008572:	e24d      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008578:	e24a      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008580:	f040 80a7 	bne.w	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008584:	4b4c      	ldr	r3, [pc, #304]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008588:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800858c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008594:	d055      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800859c:	f200 8096 	bhi.w	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085a6:	f000 8084 	beq.w	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085b0:	f200 808c 	bhi.w	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ba:	d030      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c2:	f200 8083 	bhi.w	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d004      	beq.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d2:	d012      	beq.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80085d4:	e07a      	b.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085d6:	4b38      	ldr	r3, [pc, #224]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085e2:	d107      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fcdb 	bl	8008fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085f2:	e20d      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085f8:	e20a      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085fa:	4b2f      	ldr	r3, [pc, #188]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008606:	d107      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008608:	f107 0318 	add.w	r3, r7, #24
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fa21 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008616:	e1fb      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800861c:	e1f8      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800861e:	4b26      	ldr	r3, [pc, #152]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800862a:	d107      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800862c:	f107 030c 	add.w	r3, r7, #12
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fb63 	bl	8008cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800863a:	e1e9      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008640:	e1e6      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008642:	4b1d      	ldr	r3, [pc, #116]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800864a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800864c:	4b1a      	ldr	r3, [pc, #104]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b04      	cmp	r3, #4
 8008656:	d10c      	bne.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8008658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865a:	2b00      	cmp	r3, #0
 800865c:	d109      	bne.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800865e:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	08db      	lsrs	r3, r3, #3
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	4a14      	ldr	r2, [pc, #80]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800866a:	fa22 f303 	lsr.w	r3, r2, r3
 800866e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008670:	e01e      	b.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008672:	4b11      	ldr	r3, [pc, #68]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800867e:	d106      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8008680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008686:	d102      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008688:	4b0d      	ldr	r3, [pc, #52]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800868a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800868c:	e010      	b.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800868e:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800869a:	d106      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800869c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a2:	d102      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80086a4:	4b07      	ldr	r3, [pc, #28]	; (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a8:	e002      	b.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80086ae:	e1af      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80086b0:	e1ae      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80086b2:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80086b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086b6:	e1ab      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80086b8:	58024400 	.word	0x58024400
 80086bc:	03d09000 	.word	0x03d09000
 80086c0:	003d0900 	.word	0x003d0900
 80086c4:	016e3600 	.word	0x016e3600
 80086c8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086d0:	e19e      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086d8:	d173      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80086da:	4b9d      	ldr	r3, [pc, #628]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80086dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ea:	d02f      	beq.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086f2:	d863      	bhi.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d004      	beq.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008700:	d012      	beq.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008702:	e05b      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008704:	4b92      	ldr	r3, [pc, #584]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800870c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008710:	d107      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008712:	f107 0318 	add.w	r3, r7, #24
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f99c 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008720:	e176      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008726:	e173      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008728:	4b89      	ldr	r3, [pc, #548]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008734:	d107      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008736:	f107 030c 	add.w	r3, r7, #12
 800873a:	4618      	mov	r0, r3
 800873c:	f000 fade 	bl	8008cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008744:	e164      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800874a:	e161      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800874c:	4b80      	ldr	r3, [pc, #512]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800874e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008754:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008756:	4b7e      	ldr	r3, [pc, #504]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0304 	and.w	r3, r3, #4
 800875e:	2b04      	cmp	r3, #4
 8008760:	d10c      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8008762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008768:	4b79      	ldr	r3, [pc, #484]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	08db      	lsrs	r3, r3, #3
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	4a78      	ldr	r2, [pc, #480]	; (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
 8008778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800877a:	e01e      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800877c:	4b74      	ldr	r3, [pc, #464]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008788:	d106      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800878a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008790:	d102      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008792:	4b71      	ldr	r3, [pc, #452]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008796:	e010      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008798:	4b6d      	ldr	r3, [pc, #436]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087a4:	d106      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80087a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ac:	d102      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80087ae:	4b6b      	ldr	r3, [pc, #428]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80087b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087b2:	e002      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80087b8:	e12a      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80087ba:	e129      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087c0:	e126      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c8:	d133      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80087ca:	4b61      	ldr	r3, [pc, #388]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80087cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80087d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d004      	beq.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e0:	d012      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80087e2:	e023      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087e4:	4b5a      	ldr	r3, [pc, #360]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087f0:	d107      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fbd4 	bl	8008fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008800:	e106      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008806:	e103      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008808:	4b51      	ldr	r3, [pc, #324]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008814:	d107      	bne.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008816:	f107 0318 	add.w	r3, r7, #24
 800881a:	4618      	mov	r0, r3
 800881c:	f000 f91a 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008824:	e0f4      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008826:	2300      	movs	r3, #0
 8008828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800882a:	e0f1      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008830:	e0ee      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008838:	f040 809b 	bne.w	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800883c:	4b44      	ldr	r3, [pc, #272]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800883e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008840:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008844:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800884c:	f000 808b 	beq.w	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008856:	f200 8089 	bhi.w	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008860:	d06c      	beq.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008868:	f200 8080 	bhi.w	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008872:	d056      	beq.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800887a:	d877      	bhi.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008882:	d03b      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8008884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008886:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800888a:	d86f      	bhi.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008892:	d021      	beq.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800889a:	d867      	bhi.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800889c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d004      	beq.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80088a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088a8:	d004      	beq.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 80088aa:	e05f      	b.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80088ac:	f000 f8bc 	bl	8008a28 <HAL_RCCEx_GetD3PCLK1Freq>
 80088b0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80088b2:	e0ad      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088b4:	4b26      	ldr	r3, [pc, #152]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088c0:	d107      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088c2:	f107 0318 	add.w	r3, r7, #24
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f8c4 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80088d0:	e09e      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088d6:	e09b      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088d8:	4b1d      	ldr	r3, [pc, #116]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088e4:	d107      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088e6:	f107 030c 	add.w	r3, r7, #12
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fa06 	bl	8008cfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80088f4:	e08c      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088fa:	e089      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088fc:	4b14      	ldr	r3, [pc, #80]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b04      	cmp	r3, #4
 8008906:	d109      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008908:	4b11      	ldr	r3, [pc, #68]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	08db      	lsrs	r3, r3, #3
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	4a10      	ldr	r2, [pc, #64]	; (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800891a:	e079      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008920:	e076      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008922:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800892a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800892e:	d102      	bne.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8008930:	4b09      	ldr	r3, [pc, #36]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008932:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008934:	e06c      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800893a:	e069      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800893c:	4b04      	ldr	r3, [pc, #16]	; (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008948:	d10a      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800894a:	4b04      	ldr	r3, [pc, #16]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800894e:	e05f      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008950:	58024400 	.word	0x58024400
 8008954:	03d09000 	.word	0x03d09000
 8008958:	003d0900 	.word	0x003d0900
 800895c:	016e3600 	.word	0x016e3600
          frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008964:	e054      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008966:	4b2d      	ldr	r3, [pc, #180]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800896a:	e051      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008970:	e04e      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008978:	d148      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800897a:	4b29      	ldr	r3, [pc, #164]	; (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800897c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800897e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008982:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800898a:	d02a      	beq.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008992:	d838      	bhi.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008996:	2b00      	cmp	r3, #0
 8008998:	d004      	beq.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089a0:	d00d      	beq.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80089a2:	e030      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089a4:	4b1e      	ldr	r3, [pc, #120]	; (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089b0:	d102      	bne.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089b6:	e02b      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089bc:	e028      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089be:	4b18      	ldr	r3, [pc, #96]	; (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089ca:	d107      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 fae7 	bl	8008fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089da:	e019      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089e0:	e016      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089e2:	4b0f      	ldr	r3, [pc, #60]	; (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089ee:	d107      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089f0:	f107 0318 	add.w	r3, r7, #24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f82d 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089fe:	e007      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a04:	e004      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a0a:	e001      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3740      	adds	r7, #64	; 0x40
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	00bb8000 	.word	0x00bb8000
 8008a20:	58024400 	.word	0x58024400
 8008a24:	016e3600 	.word	0x016e3600

08008a28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008a2c:	f7fe fc66 	bl	80072fc <HAL_RCC_GetHCLKFreq>
 8008a30:	4602      	mov	r2, r0
 8008a32:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	091b      	lsrs	r3, r3, #4
 8008a38:	f003 0307 	and.w	r3, r3, #7
 8008a3c:	4904      	ldr	r1, [pc, #16]	; (8008a50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a3e:	5ccb      	ldrb	r3, [r1, r3]
 8008a40:	f003 031f 	and.w	r3, r3, #31
 8008a44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	08012474 	.word	0x08012474

08008a54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b089      	sub	sp, #36	; 0x24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a5c:	4ba1      	ldr	r3, [pc, #644]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008a66:	4b9f      	ldr	r3, [pc, #636]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6a:	0b1b      	lsrs	r3, r3, #12
 8008a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008a72:	4b9c      	ldr	r3, [pc, #624]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	091b      	lsrs	r3, r3, #4
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008a7e:	4b99      	ldr	r3, [pc, #612]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a82:	08db      	lsrs	r3, r3, #3
 8008a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	fb02 f303 	mul.w	r3, r2, r3
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8111 	beq.w	8008cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	f000 8083 	beq.w	8008bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	f200 80a1 	bhi.w	8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d056      	beq.n	8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008abe:	e099      	b.n	8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ac0:	4b88      	ldr	r3, [pc, #544]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0320 	and.w	r3, r3, #32
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d02d      	beq.n	8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008acc:	4b85      	ldr	r3, [pc, #532]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	08db      	lsrs	r3, r3, #3
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	4a84      	ldr	r2, [pc, #528]	; (8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8008adc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	ee07 3a90 	vmov	s15, r3
 8008ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af6:	4b7b      	ldr	r3, [pc, #492]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b26:	e087      	b.n	8008c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b3a:	4b6a      	ldr	r3, [pc, #424]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b6a:	e065      	b.n	8008c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7e:	4b59      	ldr	r3, [pc, #356]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bae:	e043      	b.n	8008c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc2:	4b48      	ldr	r3, [pc, #288]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bf2:	e021      	b.n	8008c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c06:	4b37      	ldr	r3, [pc, #220]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008cec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008c38:	4b2a      	ldr	r3, [pc, #168]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3c:	0a5b      	lsrs	r3, r3, #9
 8008c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c5e:	ee17 2a90 	vmov	r2, s15
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008c66:	4b1f      	ldr	r3, [pc, #124]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	0c1b      	lsrs	r3, r3, #16
 8008c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c70:	ee07 3a90 	vmov	s15, r3
 8008c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c8c:	ee17 2a90 	vmov	r2, s15
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008c94:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	0e1b      	lsrs	r3, r3, #24
 8008c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cba:	ee17 2a90 	vmov	r2, s15
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	609a      	str	r2, [r3, #8]
}
 8008cd6:	bf00      	nop
 8008cd8:	3724      	adds	r7, #36	; 0x24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	58024400 	.word	0x58024400
 8008ce8:	03d09000 	.word	0x03d09000
 8008cec:	46000000 	.word	0x46000000
 8008cf0:	4c742400 	.word	0x4c742400
 8008cf4:	4a742400 	.word	0x4a742400
 8008cf8:	4bb71b00 	.word	0x4bb71b00

08008cfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b089      	sub	sp, #36	; 0x24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d04:	4ba1      	ldr	r3, [pc, #644]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008d0e:	4b9f      	ldr	r3, [pc, #636]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d12:	0d1b      	lsrs	r3, r3, #20
 8008d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d1a:	4b9c      	ldr	r3, [pc, #624]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	0a1b      	lsrs	r3, r3, #8
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008d26:	4b99      	ldr	r3, [pc, #612]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2a:	08db      	lsrs	r3, r3, #3
 8008d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	fb02 f303 	mul.w	r3, r2, r3
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 8111 	beq.w	8008f6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	f000 8083 	beq.w	8008e58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	f200 80a1 	bhi.w	8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d056      	beq.n	8008e14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008d66:	e099      	b.n	8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d68:	4b88      	ldr	r3, [pc, #544]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0320 	and.w	r3, r3, #32
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d02d      	beq.n	8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d74:	4b85      	ldr	r3, [pc, #532]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	08db      	lsrs	r3, r3, #3
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	4a84      	ldr	r2, [pc, #528]	; (8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008d80:	fa22 f303 	lsr.w	r3, r2, r3
 8008d84:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	ee07 3a90 	vmov	s15, r3
 8008d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d9e:	4b7b      	ldr	r3, [pc, #492]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008db2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008dce:	e087      	b.n	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008de2:	4b6a      	ldr	r3, [pc, #424]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008df6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e12:	e065      	b.n	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e26:	4b59      	ldr	r3, [pc, #356]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e56:	e043      	b.n	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6a:	4b48      	ldr	r3, [pc, #288]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e9a:	e021      	b.n	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eae:	4b37      	ldr	r3, [pc, #220]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ede:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008ee0:	4b2a      	ldr	r3, [pc, #168]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	0a5b      	lsrs	r3, r3, #9
 8008ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f06:	ee17 2a90 	vmov	r2, s15
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008f0e:	4b1f      	ldr	r3, [pc, #124]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	0c1b      	lsrs	r3, r3, #16
 8008f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f18:	ee07 3a90 	vmov	s15, r3
 8008f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f34:	ee17 2a90 	vmov	r2, s15
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008f3c:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f40:	0e1b      	lsrs	r3, r3, #24
 8008f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f46:	ee07 3a90 	vmov	s15, r3
 8008f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f62:	ee17 2a90 	vmov	r2, s15
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f6a:	e008      	b.n	8008f7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	609a      	str	r2, [r3, #8]
}
 8008f7e:	bf00      	nop
 8008f80:	3724      	adds	r7, #36	; 0x24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	58024400 	.word	0x58024400
 8008f90:	03d09000 	.word	0x03d09000
 8008f94:	46000000 	.word	0x46000000
 8008f98:	4c742400 	.word	0x4c742400
 8008f9c:	4a742400 	.word	0x4a742400
 8008fa0:	4bb71b00 	.word	0x4bb71b00

08008fa4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b089      	sub	sp, #36	; 0x24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fac:	4ba0      	ldr	r3, [pc, #640]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	f003 0303 	and.w	r3, r3, #3
 8008fb4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008fb6:	4b9e      	ldr	r3, [pc, #632]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fba:	091b      	lsrs	r3, r3, #4
 8008fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fc0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008fc2:	4b9b      	ldr	r3, [pc, #620]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008fcc:	4b98      	ldr	r3, [pc, #608]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd0:	08db      	lsrs	r3, r3, #3
 8008fd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	fb02 f303 	mul.w	r3, r2, r3
 8008fdc:	ee07 3a90 	vmov	s15, r3
 8008fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 8111 	beq.w	8009212 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	f000 8083 	beq.w	80090fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	f200 80a1 	bhi.w	8009142 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d056      	beq.n	80090ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800900c:	e099      	b.n	8009142 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800900e:	4b88      	ldr	r3, [pc, #544]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d02d      	beq.n	8009076 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800901a:	4b85      	ldr	r3, [pc, #532]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	08db      	lsrs	r3, r3, #3
 8009020:	f003 0303 	and.w	r3, r3, #3
 8009024:	4a83      	ldr	r2, [pc, #524]	; (8009234 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009026:	fa22 f303 	lsr.w	r3, r2, r3
 800902a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	ee07 3a90 	vmov	s15, r3
 800903c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009044:	4b7a      	ldr	r3, [pc, #488]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904c:	ee07 3a90 	vmov	s15, r3
 8009050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009054:	ed97 6a03 	vldr	s12, [r7, #12]
 8009058:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800905c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800906c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009070:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009074:	e087      	b.n	8009186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	ee07 3a90 	vmov	s15, r3
 800907c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009080:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800923c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009088:	4b69      	ldr	r3, [pc, #420]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009090:	ee07 3a90 	vmov	s15, r3
 8009094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009098:	ed97 6a03 	vldr	s12, [r7, #12]
 800909c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090b8:	e065      	b.n	8009186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	ee07 3a90 	vmov	s15, r3
 80090c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009240 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80090c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090cc:	4b58      	ldr	r3, [pc, #352]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d4:	ee07 3a90 	vmov	s15, r3
 80090d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80090e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090fc:	e043      	b.n	8009186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	ee07 3a90 	vmov	s15, r3
 8009104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009108:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009244 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800910c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009110:	4b47      	ldr	r3, [pc, #284]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009118:	ee07 3a90 	vmov	s15, r3
 800911c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009120:	ed97 6a03 	vldr	s12, [r7, #12]
 8009124:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009140:	e021      	b.n	8009186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	ee07 3a90 	vmov	s15, r3
 8009148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800923c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009154:	4b36      	ldr	r3, [pc, #216]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009164:	ed97 6a03 	vldr	s12, [r7, #12]
 8009168:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800916c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009180:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009184:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009186:	4b2a      	ldr	r3, [pc, #168]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	0a5b      	lsrs	r3, r3, #9
 800918c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009190:	ee07 3a90 	vmov	s15, r3
 8009194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800919c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ac:	ee17 2a90 	vmov	r2, s15
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80091b4:	4b1e      	ldr	r3, [pc, #120]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b8:	0c1b      	lsrs	r3, r3, #16
 80091ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80091d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091da:	ee17 2a90 	vmov	r2, s15
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80091e2:	4b13      	ldr	r3, [pc, #76]	; (8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e6:	0e1b      	lsrs	r3, r3, #24
 80091e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ec:	ee07 3a90 	vmov	s15, r3
 80091f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009208:	ee17 2a90 	vmov	r2, s15
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009210:	e008      	b.n	8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	609a      	str	r2, [r3, #8]
}
 8009224:	bf00      	nop
 8009226:	3724      	adds	r7, #36	; 0x24
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	58024400 	.word	0x58024400
 8009234:	03d09000 	.word	0x03d09000
 8009238:	46000000 	.word	0x46000000
 800923c:	4c742400 	.word	0x4c742400
 8009240:	4a742400 	.word	0x4a742400
 8009244:	4bb71b00 	.word	0x4bb71b00

08009248 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009256:	4b53      	ldr	r3, [pc, #332]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 8009258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	2b03      	cmp	r3, #3
 8009260:	d101      	bne.n	8009266 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e099      	b.n	800939a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009266:	4b4f      	ldr	r3, [pc, #316]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a4e      	ldr	r2, [pc, #312]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800926c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009272:	f7f9 fe91 	bl	8002f98 <HAL_GetTick>
 8009276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009278:	e008      	b.n	800928c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800927a:	f7f9 fe8d 	bl	8002f98 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d901      	bls.n	800928c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e086      	b.n	800939a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800928c:	4b45      	ldr	r3, [pc, #276]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1f0      	bne.n	800927a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009298:	4b42      	ldr	r3, [pc, #264]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800929a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	031b      	lsls	r3, r3, #12
 80092a6:	493f      	ldr	r1, [pc, #252]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	628b      	str	r3, [r1, #40]	; 0x28
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	025b      	lsls	r3, r3, #9
 80092be:	b29b      	uxth	r3, r3
 80092c0:	431a      	orrs	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	041b      	lsls	r3, r3, #16
 80092ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	061b      	lsls	r3, r3, #24
 80092d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80092dc:	4931      	ldr	r1, [pc, #196]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80092e2:	4b30      	ldr	r3, [pc, #192]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 80092e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	492d      	ldr	r1, [pc, #180]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80092f4:	4b2b      	ldr	r3, [pc, #172]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	f023 0220 	bic.w	r2, r3, #32
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	4928      	ldr	r1, [pc, #160]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 8009302:	4313      	orrs	r3, r2
 8009304:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009306:	4b27      	ldr	r3, [pc, #156]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	4a26      	ldr	r2, [pc, #152]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800930c:	f023 0310 	bic.w	r3, r3, #16
 8009310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009312:	4b24      	ldr	r3, [pc, #144]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 8009314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009316:	4b24      	ldr	r3, [pc, #144]	; (80093a8 <RCCEx_PLL2_Config+0x160>)
 8009318:	4013      	ands	r3, r2
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	69d2      	ldr	r2, [r2, #28]
 800931e:	00d2      	lsls	r2, r2, #3
 8009320:	4920      	ldr	r1, [pc, #128]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 8009322:	4313      	orrs	r3, r2
 8009324:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009326:	4b1f      	ldr	r3, [pc, #124]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	4a1e      	ldr	r2, [pc, #120]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800932c:	f043 0310 	orr.w	r3, r3, #16
 8009330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d106      	bne.n	8009346 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009338:	4b1a      	ldr	r3, [pc, #104]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	4a19      	ldr	r2, [pc, #100]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800933e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009342:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009344:	e00f      	b.n	8009366 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d106      	bne.n	800935a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800934c:	4b15      	ldr	r3, [pc, #84]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	4a14      	ldr	r2, [pc, #80]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 8009352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009358:	e005      	b.n	8009366 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800935a:	4b12      	ldr	r3, [pc, #72]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	4a11      	ldr	r2, [pc, #68]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 8009360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009364:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009366:	4b0f      	ldr	r3, [pc, #60]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a0e      	ldr	r2, [pc, #56]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800936c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009372:	f7f9 fe11 	bl	8002f98 <HAL_GetTick>
 8009376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009378:	e008      	b.n	800938c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800937a:	f7f9 fe0d 	bl	8002f98 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	2b02      	cmp	r3, #2
 8009386:	d901      	bls.n	800938c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e006      	b.n	800939a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800938c:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <RCCEx_PLL2_Config+0x15c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0f0      	beq.n	800937a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	58024400 	.word	0x58024400
 80093a8:	ffff0007 	.word	0xffff0007

080093ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093ba:	4b53      	ldr	r3, [pc, #332]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80093bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d101      	bne.n	80093ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e099      	b.n	80094fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80093ca:	4b4f      	ldr	r3, [pc, #316]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a4e      	ldr	r2, [pc, #312]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80093d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093d6:	f7f9 fddf 	bl	8002f98 <HAL_GetTick>
 80093da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093dc:	e008      	b.n	80093f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80093de:	f7f9 fddb 	bl	8002f98 <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d901      	bls.n	80093f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e086      	b.n	80094fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093f0:	4b45      	ldr	r3, [pc, #276]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1f0      	bne.n	80093de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80093fc:	4b42      	ldr	r3, [pc, #264]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80093fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009400:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	051b      	lsls	r3, r3, #20
 800940a:	493f      	ldr	r1, [pc, #252]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 800940c:	4313      	orrs	r3, r2
 800940e:	628b      	str	r3, [r1, #40]	; 0x28
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	3b01      	subs	r3, #1
 8009416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	3b01      	subs	r3, #1
 8009420:	025b      	lsls	r3, r3, #9
 8009422:	b29b      	uxth	r3, r3
 8009424:	431a      	orrs	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	3b01      	subs	r3, #1
 800942c:	041b      	lsls	r3, r3, #16
 800942e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	3b01      	subs	r3, #1
 800943a:	061b      	lsls	r3, r3, #24
 800943c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009440:	4931      	ldr	r1, [pc, #196]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 8009442:	4313      	orrs	r3, r2
 8009444:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009446:	4b30      	ldr	r3, [pc, #192]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 8009448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	492d      	ldr	r1, [pc, #180]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 8009454:	4313      	orrs	r3, r2
 8009456:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009458:	4b2b      	ldr	r3, [pc, #172]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	4928      	ldr	r1, [pc, #160]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 8009466:	4313      	orrs	r3, r2
 8009468:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800946a:	4b27      	ldr	r3, [pc, #156]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	4a26      	ldr	r2, [pc, #152]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 8009470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009476:	4b24      	ldr	r3, [pc, #144]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 8009478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800947a:	4b24      	ldr	r3, [pc, #144]	; (800950c <RCCEx_PLL3_Config+0x160>)
 800947c:	4013      	ands	r3, r2
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	69d2      	ldr	r2, [r2, #28]
 8009482:	00d2      	lsls	r2, r2, #3
 8009484:	4920      	ldr	r1, [pc, #128]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 8009486:	4313      	orrs	r3, r2
 8009488:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800948a:	4b1f      	ldr	r3, [pc, #124]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	4a1e      	ldr	r2, [pc, #120]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 8009490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d106      	bne.n	80094aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800949c:	4b1a      	ldr	r3, [pc, #104]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 800949e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a0:	4a19      	ldr	r2, [pc, #100]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80094a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80094a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094a8:	e00f      	b.n	80094ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d106      	bne.n	80094be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094b0:	4b15      	ldr	r3, [pc, #84]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	4a14      	ldr	r2, [pc, #80]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80094b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094bc:	e005      	b.n	80094ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80094be:	4b12      	ldr	r3, [pc, #72]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	4a11      	ldr	r2, [pc, #68]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80094c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80094ca:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a0e      	ldr	r2, [pc, #56]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80094d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d6:	f7f9 fd5f 	bl	8002f98 <HAL_GetTick>
 80094da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094dc:	e008      	b.n	80094f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80094de:	f7f9 fd5b 	bl	8002f98 <HAL_GetTick>
 80094e2:	4602      	mov	r2, r0
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d901      	bls.n	80094f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e006      	b.n	80094fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094f0:	4b05      	ldr	r3, [pc, #20]	; (8009508 <RCCEx_PLL3_Config+0x15c>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d0f0      	beq.n	80094de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	58024400 	.word	0x58024400
 800950c:	ffff0007 	.word	0xffff0007

08009510 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08a      	sub	sp, #40	; 0x28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e075      	b.n	800960e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d105      	bne.n	800953a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7f8 fddf 	bl	80020f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2204      	movs	r2, #4
 800953e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f868 	bl	8009618 <HAL_SD_InitCard>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e05d      	b.n	800960e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009552:	f107 0308 	add.w	r3, r7, #8
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fda9 	bl	800a0b0 <HAL_SD_GetCardStatus>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e052      	b.n	800960e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009568:	7e3b      	ldrb	r3, [r7, #24]
 800956a:	b2db      	uxtb	r3, r3
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800956e:	7e7b      	ldrb	r3, [r7, #25]
 8009570:	b2db      	uxtb	r3, r3
 8009572:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	2b01      	cmp	r3, #1
 800957a:	d10a      	bne.n	8009592 <HAL_SD_Init+0x82>
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	2b00      	cmp	r3, #0
 8009580:	d102      	bne.n	8009588 <HAL_SD_Init+0x78>
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800958e:	659a      	str	r2, [r3, #88]	; 0x58
 8009590:	e00b      	b.n	80095aa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	2b01      	cmp	r3, #1
 8009598:	d104      	bne.n	80095a4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095a0:	659a      	str	r2, [r3, #88]	; 0x58
 80095a2:	e002      	b.n	80095aa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fe67 	bl	800a284 <HAL_SD_ConfigWideBusOperation>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e026      	b.n	800960e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80095c0:	f7f9 fcea 	bl	8002f98 <HAL_GetTick>
 80095c4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80095c6:	e011      	b.n	80095ec <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80095c8:	f7f9 fce6 	bl	8002f98 <HAL_GetTick>
 80095cc:	4602      	mov	r2, r0
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d6:	d109      	bne.n	80095ec <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095de:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e010      	b.n	800960e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 ff5b 	bl	800a4a8 <HAL_SD_GetCardState>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d1e7      	bne.n	80095c8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3728      	adds	r7, #40	; 0x28
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009618:	b590      	push	{r4, r7, lr}
 800961a:	b08d      	sub	sp, #52	; 0x34
 800961c:	af02      	add	r7, sp, #8
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009624:	2300      	movs	r3, #0
 8009626:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009628:	2300      	movs	r3, #0
 800962a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800962c:	2300      	movs	r3, #0
 800962e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009630:	2300      	movs	r3, #0
 8009632:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009634:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009638:	f7fe fdc8 	bl	80081cc <HAL_RCCEx_GetPeriphCLKFreq>
 800963c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	2b00      	cmp	r3, #0
 8009642:	d109      	bne.n	8009658 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009652:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e06a      	b.n	800972e <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	4a36      	ldr	r2, [pc, #216]	; (8009738 <HAL_SD_InitCard+0x120>)
 800965e:	fba2 2303 	umull	r2, r3, r2, r3
 8009662:	091b      	lsrs	r3, r3, #4
 8009664:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681c      	ldr	r4, [r3, #0]
 800966a:	466a      	mov	r2, sp
 800966c:	f107 0318 	add.w	r3, r7, #24
 8009670:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009674:	e882 0003 	stmia.w	r2, {r0, r1}
 8009678:	f107 030c 	add.w	r3, r7, #12
 800967c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800967e:	4620      	mov	r0, r4
 8009680:	f006 fd54 	bl	801012c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4618      	mov	r0, r3
 800968a:	f006 fd97 	bl	80101bc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009694:	fbb2 f3f3 	udiv	r3, r2, r3
 8009698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800969a:	4a28      	ldr	r2, [pc, #160]	; (800973c <HAL_SD_InitCard+0x124>)
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a2:	3301      	adds	r3, #1
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7f9 fc83 	bl	8002fb0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 ffea 	bl	800a684 <SD_PowerON>
 80096b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e02e      	b.n	800972e <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 ff09 	bl	800a4e8 <SD_InitCard>
 80096d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00b      	beq.n	80096f6 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	431a      	orrs	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e01b      	b.n	800972e <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80096fe:	4618      	mov	r0, r3
 8009700:	f006 fdf2 	bl	80102e8 <SDMMC_CmdBlockLength>
 8009704:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00f      	beq.n	800972c <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a0b      	ldr	r2, [pc, #44]	; (8009740 <HAL_SD_InitCard+0x128>)
 8009712:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	431a      	orrs	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e000      	b.n	800972e <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	372c      	adds	r7, #44	; 0x2c
 8009732:	46bd      	mov	sp, r7
 8009734:	bd90      	pop	{r4, r7, pc}
 8009736:	bf00      	nop
 8009738:	014f8b59 	.word	0x014f8b59
 800973c:	00012110 	.word	0x00012110
 8009740:	1fe00fff 	.word	0x1fe00fff

08009744 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08c      	sub	sp, #48	; 0x30
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d107      	bne.n	800976c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009760:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e08d      	b.n	8009888 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b01      	cmp	r3, #1
 8009776:	f040 8086 	bne.w	8009886 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	441a      	add	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800978a:	429a      	cmp	r2, r3
 800978c:	d907      	bls.n	800979e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009792:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e074      	b.n	8009888 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2203      	movs	r2, #3
 80097a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2200      	movs	r2, #0
 80097ac:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	025a      	lsls	r2, r3, #9
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d002      	beq.n	80097ca <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	025b      	lsls	r3, r3, #9
 80097c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097ca:	f04f 33ff 	mov.w	r3, #4294967295
 80097ce:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	025b      	lsls	r3, r3, #9
 80097d4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80097d6:	2390      	movs	r3, #144	; 0x90
 80097d8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80097da:	2302      	movs	r3, #2
 80097dc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80097de:	2300      	movs	r3, #0
 80097e0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f107 0210 	add.w	r2, r7, #16
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f006 fd4d 	bl	8010290 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009804:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2201      	movs	r2, #1
 8009814:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d90a      	bls.n	8009832 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2282      	movs	r2, #130	; 0x82
 8009820:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009828:	4618      	mov	r0, r3
 800982a:	f006 fda3 	bl	8010374 <SDMMC_CmdReadMultiBlock>
 800982e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009830:	e009      	b.n	8009846 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2281      	movs	r2, #129	; 0x81
 8009836:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800983e:	4618      	mov	r0, r3
 8009840:	f006 fd75 	bl	801032e <SDMMC_CmdReadSingleBlock>
 8009844:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009848:	2b00      	cmp	r3, #0
 800984a:	d012      	beq.n	8009872 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a0f      	ldr	r2, [pc, #60]	; (8009890 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009852:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985a:	431a      	orrs	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e00a      	b.n	8009888 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009880:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	e000      	b.n	8009888 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009886:	2302      	movs	r3, #2
  }
}
 8009888:	4618      	mov	r0, r3
 800988a:	3730      	adds	r7, #48	; 0x30
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	1fe00fff 	.word	0x1fe00fff

08009894 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08c      	sub	sp, #48	; 0x30
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
 80098a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d107      	bne.n	80098bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e08d      	b.n	80099d8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	f040 8086 	bne.w	80099d6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80098d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	441a      	add	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098da:	429a      	cmp	r2, r3
 80098dc:	d907      	bls.n	80098ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e074      	b.n	80099d8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2203      	movs	r2, #3
 80098f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2200      	movs	r2, #0
 80098fc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	025a      	lsls	r2, r3, #9
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009910:	2b01      	cmp	r3, #1
 8009912:	d002      	beq.n	800991a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	025b      	lsls	r3, r3, #9
 8009918:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800991a:	f04f 33ff 	mov.w	r3, #4294967295
 800991e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	025b      	lsls	r3, r3, #9
 8009924:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009926:	2390      	movs	r3, #144	; 0x90
 8009928:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800992a:	2300      	movs	r3, #0
 800992c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800992e:	2300      	movs	r3, #0
 8009930:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009932:	2300      	movs	r3, #0
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f107 0210 	add.w	r2, r7, #16
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f006 fca5 	bl	8010290 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009954:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2201      	movs	r2, #1
 8009964:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d90a      	bls.n	8009982 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	22a0      	movs	r2, #160	; 0xa0
 8009970:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009978:	4618      	mov	r0, r3
 800997a:	f006 fd41 	bl	8010400 <SDMMC_CmdWriteMultiBlock>
 800997e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009980:	e009      	b.n	8009996 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2290      	movs	r2, #144	; 0x90
 8009986:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800998e:	4618      	mov	r0, r3
 8009990:	f006 fd13 	bl	80103ba <SDMMC_CmdWriteSingleBlock>
 8009994:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	2b00      	cmp	r3, #0
 800999a:	d012      	beq.n	80099c2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a0f      	ldr	r2, [pc, #60]	; (80099e0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80099a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	431a      	orrs	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2200      	movs	r2, #0
 80099bc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e00a      	b.n	80099d8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80099d0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	e000      	b.n	80099d8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80099d6:	2302      	movs	r3, #2
  }
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3730      	adds	r7, #48	; 0x30
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	1fe00fff 	.word	0x1fe00fff

080099e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d008      	beq.n	8009a12 <HAL_SD_IRQHandler+0x2e>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f003 0308 	and.w	r3, r3, #8
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 f926 	bl	800ac5c <SD_Read_IT>
 8009a10:	e19a      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 80ac 	beq.w	8009b7a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a2a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	4b59      	ldr	r3, [pc, #356]	; (8009b9c <HAL_SD_IRQHandler+0x1b8>)
 8009a38:	400b      	ands	r3, r1
 8009a3a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009a4a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68da      	ldr	r2, [r3, #12]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a5a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f003 0308 	and.w	r3, r3, #8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d038      	beq.n	8009ad8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d104      	bne.n	8009a7a <HAL_SD_IRQHandler+0x96>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f003 0320 	and.w	r3, r3, #32
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d011      	beq.n	8009a9e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f006 fce2 	bl	8010448 <SDMMC_CmdStopTransfer>
 8009a84:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d008      	beq.n	8009a9e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	431a      	orrs	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f95b 	bl	8009d54 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a3f      	ldr	r2, [pc, #252]	; (8009ba0 <HAL_SD_IRQHandler+0x1bc>)
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d104      	bne.n	8009ac8 <HAL_SD_IRQHandler+0xe4>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f007 f98d 	bl	8010de8 <HAL_SD_RxCpltCallback>
 8009ace:	e13b      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f007 f97f 	bl	8010dd4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009ad6:	e137      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 8132 	beq.w	8009d48 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2200      	movs	r2, #0
 8009af2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2200      	movs	r2, #0
 8009afa:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f003 0302 	and.w	r3, r3, #2
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <HAL_SD_IRQHandler+0x12c>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f003 0320 	and.w	r3, r3, #32
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d011      	beq.n	8009b34 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f006 fc97 	bl	8010448 <SDMMC_CmdStopTransfer>
 8009b1a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d008      	beq.n	8009b34 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f910 	bl	8009d54 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f003 0310 	and.w	r3, r3, #16
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <HAL_SD_IRQHandler+0x172>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f003 0320 	and.w	r3, r3, #32
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f007 f93c 	bl	8010dd4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d105      	bne.n	8009b72 <HAL_SD_IRQHandler+0x18e>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f003 0302 	and.w	r3, r3, #2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80eb 	beq.w	8009d48 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f007 f938 	bl	8010de8 <HAL_SD_RxCpltCallback>
}
 8009b78:	e0e6      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00d      	beq.n	8009ba4 <HAL_SD_IRQHandler+0x1c0>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f003 0308 	and.w	r3, r3, #8
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d008      	beq.n	8009ba4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 f8a8 	bl	800ace8 <SD_Write_IT>
 8009b98:	e0d6      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
 8009b9a:	bf00      	nop
 8009b9c:	ffff3ec5 	.word	0xffff3ec5
 8009ba0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009baa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 809d 	beq.w	8009cee <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bba:	f003 0302 	and.w	r3, r3, #2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc6:	f043 0202 	orr.w	r2, r3, #2
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd4:	f003 0308 	and.w	r3, r3, #8
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d005      	beq.n	8009be8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be0:	f043 0208 	orr.w	r2, r3, #8
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfa:	f043 0220 	orr.w	r2, r3, #32
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c08:	f003 0310 	and.w	r3, r3, #16
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d005      	beq.n	8009c1c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c14:	f043 0210 	orr.w	r2, r3, #16
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a4b      	ldr	r2, [pc, #300]	; (8009d50 <HAL_SD_IRQHandler+0x36c>)
 8009c22:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009c32:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68da      	ldr	r2, [r3, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c42:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c52:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c62:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f006 fbed 	bl	8010448 <SDMMC_CmdStopTransfer>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	431a      	orrs	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c88:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c92:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f003 0308 	and.w	r3, r3, #8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f851 	bl	8009d54 <HAL_SD_ErrorCallback>
}
 8009cb2:	e049      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d044      	beq.n	8009d48 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d040      	beq.n	8009d48 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009cd4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f834 	bl	8009d54 <HAL_SD_ErrorCallback>
}
 8009cec:	e02c      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d025      	beq.n	8009d48 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d04:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0c:	f003 0304 	and.w	r3, r3, #4
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10c      	bne.n	8009d2e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f003 0320 	and.w	r3, r3, #32
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f001 f84a 	bl	800adb8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009d24:	e010      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f001 f832 	bl	800ad90 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009d2c:	e00c      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f003 0320 	and.w	r3, r3, #32
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d003      	beq.n	8009d40 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f001 f833 	bl	800ada4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009d3e:	e003      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f001 f81b 	bl	800ad7c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009d46:	e7ff      	b.n	8009d48 <HAL_SD_IRQHandler+0x364>
 8009d48:	bf00      	nop
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	18000f3a 	.word	0x18000f3a

08009d54 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d76:	0f9b      	lsrs	r3, r3, #30
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d82:	0e9b      	lsrs	r3, r3, #26
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	f003 030f 	and.w	r3, r3, #15
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d94:	0e1b      	lsrs	r3, r3, #24
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f003 0303 	and.w	r3, r3, #3
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009da6:	0c1b      	lsrs	r3, r3, #16
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db2:	0a1b      	lsrs	r3, r3, #8
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dc8:	0d1b      	lsrs	r3, r3, #20
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dd4:	0c1b      	lsrs	r3, r3, #16
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	f003 030f 	and.w	r3, r3, #15
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009de6:	0bdb      	lsrs	r3, r3, #15
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009df8:	0b9b      	lsrs	r3, r3, #14
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e0a:	0b5b      	lsrs	r3, r3, #13
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e1c:	0b1b      	lsrs	r3, r3, #12
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d163      	bne.n	8009f00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e3c:	009a      	lsls	r2, r3, #2
 8009e3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009e42:	4013      	ands	r3, r2
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009e48:	0f92      	lsrs	r2, r2, #30
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e54:	0edb      	lsrs	r3, r3, #27
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 0307 	and.w	r3, r3, #7
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e66:	0e1b      	lsrs	r3, r3, #24
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	f003 0307 	and.w	r3, r3, #7
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e78:	0d5b      	lsrs	r3, r3, #21
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0307 	and.w	r3, r3, #7
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e8a:	0c9b      	lsrs	r3, r3, #18
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	f003 0307 	and.w	r3, r3, #7
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e9c:	0bdb      	lsrs	r3, r3, #15
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	f003 0307 	and.w	r3, r3, #7
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	7e1b      	ldrb	r3, [r3, #24]
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	f003 0307 	and.w	r3, r3, #7
 8009ebe:	3302      	adds	r3, #2
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009eca:	fb03 f202 	mul.w	r2, r3, r2
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	7a1b      	ldrb	r3, [r3, #8]
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	f003 030f 	and.w	r3, r3, #15
 8009edc:	2201      	movs	r2, #1
 8009ede:	409a      	lsls	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009eec:	0a52      	lsrs	r2, r2, #9
 8009eee:	fb03 f202 	mul.w	r2, r3, r2
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009efc:	655a      	str	r2, [r3, #84]	; 0x54
 8009efe:	e031      	b.n	8009f64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d11d      	bne.n	8009f44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f0c:	041b      	lsls	r3, r3, #16
 8009f0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f16:	0c1b      	lsrs	r3, r3, #16
 8009f18:	431a      	orrs	r2, r3
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	3301      	adds	r3, #1
 8009f24:	029a      	lsls	r2, r3, #10
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f38:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	655a      	str	r2, [r3, #84]	; 0x54
 8009f42:	e00f      	b.n	8009f64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a58      	ldr	r2, [pc, #352]	; (800a0ac <HAL_SD_GetCardCSD+0x344>)
 8009f4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e09d      	b.n	800a0a0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f68:	0b9b      	lsrs	r3, r3, #14
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f7a:	09db      	lsrs	r3, r3, #7
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f9c:	0fdb      	lsrs	r3, r3, #31
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fa8:	0f5b      	lsrs	r3, r3, #29
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 0303 	and.w	r3, r3, #3
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fba:	0e9b      	lsrs	r3, r3, #26
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	f003 0307 	and.w	r3, r3, #7
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fcc:	0d9b      	lsrs	r3, r3, #22
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	f003 030f 	and.w	r3, r3, #15
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fde:	0d5b      	lsrs	r3, r3, #21
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ffa:	0c1b      	lsrs	r3, r3, #16
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	b2da      	uxtb	r2, r3
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a00e:	0bdb      	lsrs	r3, r3, #15
 800a010:	b2db      	uxtb	r3, r3
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	b2da      	uxtb	r2, r3
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a022:	0b9b      	lsrs	r3, r3, #14
 800a024:	b2db      	uxtb	r3, r3
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a036:	0b5b      	lsrs	r3, r3, #13
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a04a:	0b1b      	lsrs	r3, r3, #12
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	b2da      	uxtb	r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a05e:	0a9b      	lsrs	r3, r3, #10
 800a060:	b2db      	uxtb	r3, r3
 800a062:	f003 0303 	and.w	r3, r3, #3
 800a066:	b2da      	uxtb	r2, r3
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	b2db      	uxtb	r3, r3
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a086:	085b      	lsrs	r3, r3, #1
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	1fe00fff 	.word	0x1fe00fff

0800a0b0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b094      	sub	sp, #80	; 0x50
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d101      	bne.n	800a0d0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e0a7      	b.n	800a220 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a0d0:	f107 0308 	add.w	r3, r7, #8
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fb62 	bl	800a7a0 <SD_SendSDStatus>
 800a0dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d011      	beq.n	800a108 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a4f      	ldr	r2, [pc, #316]	; (800a228 <HAL_SD_GetCardStatus+0x178>)
 800a0ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0f2:	431a      	orrs	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a106:	e070      	b.n	800a1ea <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	099b      	lsrs	r3, r3, #6
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	b2da      	uxtb	r2, r3
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	095b      	lsrs	r3, r3, #5
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	b2da      	uxtb	r2, r3
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	0a1b      	lsrs	r3, r3, #8
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a132:	b29a      	uxth	r2, r3
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	0e1b      	lsrs	r3, r3, #24
 800a138:	b29b      	uxth	r3, r3
 800a13a:	4313      	orrs	r3, r2
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	061a      	lsls	r2, r3, #24
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	021b      	lsls	r3, r3, #8
 800a14a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a14e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	0a1b      	lsrs	r3, r3, #8
 800a154:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a158:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	0e1b      	lsrs	r3, r3, #24
 800a15e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	b2da      	uxtb	r2, r3
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	0a1b      	lsrs	r3, r3, #8
 800a170:	b2da      	uxtb	r2, r3
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	0d1b      	lsrs	r3, r3, #20
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	f003 030f 	and.w	r3, r3, #15
 800a180:	b2da      	uxtb	r2, r3
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	0c1b      	lsrs	r3, r3, #16
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a190:	b29a      	uxth	r2, r3
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	b29b      	uxth	r3, r3
 800a196:	b2db      	uxtb	r3, r3
 800a198:	b29b      	uxth	r3, r3
 800a19a:	4313      	orrs	r3, r2
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	0a9b      	lsrs	r3, r3, #10
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	0a1b      	lsrs	r3, r3, #8
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	f003 0303 	and.w	r3, r3, #3
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	091b      	lsrs	r3, r3, #4
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	f003 030f 	and.w	r3, r3, #15
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f003 030f 	and.w	r3, r3, #15
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	0e1b      	lsrs	r3, r3, #24
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f006 f878 	bl	80102e8 <SDMMC_CmdBlockLength>
 800a1f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00d      	beq.n	800a21c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a08      	ldr	r2, [pc, #32]	; (800a228 <HAL_SD_GetCardStatus+0x178>)
 800a206:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a20c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800a21c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a220:	4618      	mov	r0, r3
 800a222:	3750      	adds	r7, #80	; 0x50
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	1fe00fff 	.word	0x1fe00fff

0800a22c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a284:	b590      	push	{r4, r7, lr}
 800a286:	b08d      	sub	sp, #52	; 0x34
 800a288:	af02      	add	r7, sp, #8
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2203      	movs	r2, #3
 800a29c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d02e      	beq.n	800a306 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2ae:	d106      	bne.n	800a2be <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	635a      	str	r2, [r3, #52]	; 0x34
 800a2bc:	e029      	b.n	800a312 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2c4:	d10a      	bne.n	800a2dc <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fb62 	bl	800a990 <SD_WideBus_Enable>
 800a2cc:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	431a      	orrs	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	635a      	str	r2, [r3, #52]	; 0x34
 800a2da:	e01a      	b.n	800a312 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10a      	bne.n	800a2f8 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fb9f 	bl	800aa26 <SD_WideBus_Disable>
 800a2e8:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	635a      	str	r2, [r3, #52]	; 0x34
 800a2f6:	e00c      	b.n	800a312 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	635a      	str	r2, [r3, #52]	; 0x34
 800a304:	e005      	b.n	800a312 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a316:	2b00      	cmp	r3, #0
 800a318:	d007      	beq.n	800a32a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a5e      	ldr	r2, [pc, #376]	; (800a498 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a320:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a328:	e094      	b.n	800a454 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a32a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a32e:	f7fd ff4d 	bl	80081cc <HAL_RCCEx_GetPeriphCLKFreq>
 800a332:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800a334:	6a3b      	ldr	r3, [r7, #32]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8083 	beq.w	800a442 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	695a      	ldr	r2, [r3, #20]
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	4950      	ldr	r1, [pc, #320]	; (800a49c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a35a:	fba1 1303 	umull	r1, r3, r1, r3
 800a35e:	0e1b      	lsrs	r3, r3, #24
 800a360:	429a      	cmp	r2, r3
 800a362:	d303      	bcc.n	800a36c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	61bb      	str	r3, [r7, #24]
 800a36a:	e05a      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a374:	d103      	bne.n	800a37e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	61bb      	str	r3, [r7, #24]
 800a37c:	e051      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a386:	d126      	bne.n	800a3d6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10e      	bne.n	800a3ae <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	4a43      	ldr	r2, [pc, #268]	; (800a4a0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d906      	bls.n	800a3a6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	4a40      	ldr	r2, [pc, #256]	; (800a49c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a39c:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a0:	0e5b      	lsrs	r3, r3, #25
 800a3a2:	61bb      	str	r3, [r7, #24]
 800a3a4:	e03d      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	61bb      	str	r3, [r7, #24]
 800a3ac:	e039      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	6a3a      	ldr	r2, [r7, #32]
 800a3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ba:	4a39      	ldr	r2, [pc, #228]	; (800a4a0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d906      	bls.n	800a3ce <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	4a36      	ldr	r2, [pc, #216]	; (800a49c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a3c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c8:	0e5b      	lsrs	r3, r3, #25
 800a3ca:	61bb      	str	r3, [r7, #24]
 800a3cc:	e029      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	61bb      	str	r3, [r7, #24]
 800a3d4:	e025      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10e      	bne.n	800a3fc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	4a30      	ldr	r2, [pc, #192]	; (800a4a4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d906      	bls.n	800a3f4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	4a2c      	ldr	r2, [pc, #176]	; (800a49c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ee:	0e1b      	lsrs	r3, r3, #24
 800a3f0:	61bb      	str	r3, [r7, #24]
 800a3f2:	e016      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	61bb      	str	r3, [r7, #24]
 800a3fa:	e012      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	695b      	ldr	r3, [r3, #20]
 800a400:	005b      	lsls	r3, r3, #1
 800a402:	6a3a      	ldr	r2, [r7, #32]
 800a404:	fbb2 f3f3 	udiv	r3, r2, r3
 800a408:	4a26      	ldr	r2, [pc, #152]	; (800a4a4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d906      	bls.n	800a41c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a40e:	6a3b      	ldr	r3, [r7, #32]
 800a410:	4a22      	ldr	r2, [pc, #136]	; (800a49c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a412:	fba2 2303 	umull	r2, r3, r2, r3
 800a416:	0e1b      	lsrs	r3, r3, #24
 800a418:	61bb      	str	r3, [r7, #24]
 800a41a:	e002      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681c      	ldr	r4, [r3, #0]
 800a426:	466a      	mov	r2, sp
 800a428:	f107 0314 	add.w	r3, r7, #20
 800a42c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a430:	e882 0003 	stmia.w	r2, {r0, r1}
 800a434:	f107 0308 	add.w	r3, r7, #8
 800a438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a43a:	4620      	mov	r0, r4
 800a43c:	f005 fe76 	bl	801012c <SDMMC_Init>
 800a440:	e008      	b.n	800a454 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a446:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a45c:	4618      	mov	r0, r3
 800a45e:	f005 ff43 	bl	80102e8 <SDMMC_CmdBlockLength>
 800a462:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00c      	beq.n	800a484 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a0a      	ldr	r2, [pc, #40]	; (800a498 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a470:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	431a      	orrs	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a490:	4618      	mov	r0, r3
 800a492:	372c      	adds	r7, #44	; 0x2c
 800a494:	46bd      	mov	sp, r7
 800a496:	bd90      	pop	{r4, r7, pc}
 800a498:	1fe00fff 	.word	0x1fe00fff
 800a49c:	55e63b89 	.word	0x55e63b89
 800a4a0:	02faf080 	.word	0x02faf080
 800a4a4:	017d7840 	.word	0x017d7840

0800a4a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a4b4:	f107 030c 	add.w	r3, r7, #12
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fa40 	bl	800a940 <SD_SendStatus>
 800a4c0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	0a5b      	lsrs	r3, r3, #9
 800a4d8:	f003 030f 	and.w	r3, r3, #15
 800a4dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a4de:	693b      	ldr	r3, [r7, #16]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b090      	sub	sp, #64	; 0x40
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a4f4:	f7f8 fd50 	bl	8002f98 <HAL_GetTick>
 800a4f8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f005 fe6d 	bl	80101de <SDMMC_GetPowerState>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d102      	bne.n	800a510 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a50a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a50e:	e0b5      	b.n	800a67c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a514:	2b03      	cmp	r3, #3
 800a516:	d02e      	beq.n	800a576 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f006 f8b8 	bl	8010692 <SDMMC_CmdSendCID>
 800a522:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <SD_InitCard+0x46>
    {
      return errorstate;
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	e0a6      	b.n	800a67c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2100      	movs	r1, #0
 800a534:	4618      	mov	r0, r3
 800a536:	f005 fe98 	bl	801026a <SDMMC_GetResponse>
 800a53a:	4602      	mov	r2, r0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2104      	movs	r1, #4
 800a546:	4618      	mov	r0, r3
 800a548:	f005 fe8f 	bl	801026a <SDMMC_GetResponse>
 800a54c:	4602      	mov	r2, r0
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2108      	movs	r1, #8
 800a558:	4618      	mov	r0, r3
 800a55a:	f005 fe86 	bl	801026a <SDMMC_GetResponse>
 800a55e:	4602      	mov	r2, r0
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	210c      	movs	r1, #12
 800a56a:	4618      	mov	r0, r3
 800a56c:	f005 fe7d 	bl	801026a <SDMMC_GetResponse>
 800a570:	4602      	mov	r2, r0
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d01d      	beq.n	800a5ba <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a57e:	e019      	b.n	800a5b4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f107 020a 	add.w	r2, r7, #10
 800a588:	4611      	mov	r1, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f006 f8c0 	bl	8010710 <SDMMC_CmdSetRelAdd>
 800a590:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <SD_InitCard+0xb4>
      {
        return errorstate;
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	e06f      	b.n	800a67c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a59c:	f7f8 fcfc 	bl	8002f98 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	f241 3287 	movw	r2, #4999	; 0x1387
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d902      	bls.n	800a5b4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a5ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5b2:	e063      	b.n	800a67c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a5b4:	897b      	ldrh	r3, [r7, #10]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d0e2      	beq.n	800a580 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d036      	beq.n	800a630 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a5c2:	897b      	ldrh	r3, [r7, #10]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d2:	041b      	lsls	r3, r3, #16
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	f006 f87a 	bl	80106d0 <SDMMC_CmdSendCSD>
 800a5dc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <SD_InitCard+0x100>
    {
      return errorstate;
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	e049      	b.n	800a67c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f005 fe3b 	bl	801026a <SDMMC_GetResponse>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2104      	movs	r1, #4
 800a600:	4618      	mov	r0, r3
 800a602:	f005 fe32 	bl	801026a <SDMMC_GetResponse>
 800a606:	4602      	mov	r2, r0
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2108      	movs	r1, #8
 800a612:	4618      	mov	r0, r3
 800a614:	f005 fe29 	bl	801026a <SDMMC_GetResponse>
 800a618:	4602      	mov	r2, r0
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	210c      	movs	r1, #12
 800a624:	4618      	mov	r0, r3
 800a626:	f005 fe20 	bl	801026a <SDMMC_GetResponse>
 800a62a:	4602      	mov	r2, r0
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2104      	movs	r1, #4
 800a636:	4618      	mov	r0, r3
 800a638:	f005 fe17 	bl	801026a <SDMMC_GetResponse>
 800a63c:	4603      	mov	r3, r0
 800a63e:	0d1a      	lsrs	r2, r3, #20
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a644:	f107 030c 	add.w	r3, r7, #12
 800a648:	4619      	mov	r1, r3
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff fb8c 	bl	8009d68 <HAL_SD_GetCardCSD>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d002      	beq.n	800a65c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a656:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a65a:	e00f      	b.n	800a67c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a664:	041b      	lsls	r3, r3, #16
 800a666:	4619      	mov	r1, r3
 800a668:	4610      	mov	r0, r2
 800a66a:	f005 ff29 	bl	80104c0 <SDMMC_CmdSelDesel>
 800a66e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <SD_InitCard+0x192>
  {
    return errorstate;
 800a676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a678:	e000      	b.n	800a67c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3740      	adds	r7, #64	; 0x40
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a690:	2300      	movs	r3, #0
 800a692:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f005 ff32 	bl	8010506 <SDMMC_CmdGoIdleState>
 800a6a2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <SD_PowerON+0x2a>
  {
    return errorstate;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	e072      	b.n	800a794 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f005 ff45 	bl	8010542 <SDMMC_CmdOperCond>
 800a6b8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6c0:	d10d      	bne.n	800a6de <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f005 ff1a 	bl	8010506 <SDMMC_CmdGoIdleState>
 800a6d2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <SD_PowerON+0x60>
    {
      return errorstate;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	e05a      	b.n	800a794 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d137      	bne.n	800a75c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f005 ff45 	bl	8010582 <SDMMC_CmdAppCommand>
 800a6f8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d02d      	beq.n	800a75c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a700:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a704:	e046      	b.n	800a794 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2100      	movs	r1, #0
 800a70c:	4618      	mov	r0, r3
 800a70e:	f005 ff38 	bl	8010582 <SDMMC_CmdAppCommand>
 800a712:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <SD_PowerON+0x9a>
    {
      return errorstate;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	e03a      	b.n	800a794 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	491e      	ldr	r1, [pc, #120]	; (800a79c <SD_PowerON+0x118>)
 800a724:	4618      	mov	r0, r3
 800a726:	f005 ff4f 	bl	80105c8 <SDMMC_CmdAppOperCommand>
 800a72a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d002      	beq.n	800a738 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a732:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a736:	e02d      	b.n	800a794 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2100      	movs	r1, #0
 800a73e:	4618      	mov	r0, r3
 800a740:	f005 fd93 	bl	801026a <SDMMC_GetResponse>
 800a744:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	0fdb      	lsrs	r3, r3, #31
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d101      	bne.n	800a752 <SD_PowerON+0xce>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <SD_PowerON+0xd0>
 800a752:	2300      	movs	r3, #0
 800a754:	613b      	str	r3, [r7, #16]

    count++;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	3301      	adds	r3, #1
 800a75a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a762:	4293      	cmp	r3, r2
 800a764:	d802      	bhi.n	800a76c <SD_PowerON+0xe8>
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0cc      	beq.n	800a706 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a772:	4293      	cmp	r3, r2
 800a774:	d902      	bls.n	800a77c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a776:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a77a:	e00b      	b.n	800a794 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3718      	adds	r7, #24
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	c1100000 	.word	0xc1100000

0800a7a0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b08c      	sub	sp, #48	; 0x30
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a7aa:	f7f8 fbf5 	bl	8002f98 <HAL_GetTick>
 800a7ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f005 fd55 	bl	801026a <SDMMC_GetResponse>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7ca:	d102      	bne.n	800a7d2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a7cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7d0:	e0b0      	b.n	800a934 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2140      	movs	r1, #64	; 0x40
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f005 fd85 	bl	80102e8 <SDMMC_CmdBlockLength>
 800a7de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d005      	beq.n	800a7f2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	e0a0      	b.n	800a934 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7fa:	041b      	lsls	r3, r3, #16
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	f005 febf 	bl	8010582 <SDMMC_CmdAppCommand>
 800a804:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	e08d      	b.n	800a934 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a818:	f04f 33ff 	mov.w	r3, #4294967295
 800a81c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a81e:	2340      	movs	r3, #64	; 0x40
 800a820:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a822:	2360      	movs	r3, #96	; 0x60
 800a824:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a826:	2302      	movs	r3, #2
 800a828:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a82e:	2301      	movs	r3, #1
 800a830:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f107 0208 	add.w	r2, r7, #8
 800a83a:	4611      	mov	r1, r2
 800a83c:	4618      	mov	r0, r3
 800a83e:	f005 fd27 	bl	8010290 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4618      	mov	r0, r3
 800a848:	f005 ffa7 	bl	801079a <SDMMC_CmdStatusRegister>
 800a84c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d02b      	beq.n	800a8ac <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	e069      	b.n	800a934 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d013      	beq.n	800a896 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a86e:	2300      	movs	r3, #0
 800a870:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a872:	e00d      	b.n	800a890 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4618      	mov	r0, r3
 800a87a:	f005 fc81 	bl	8010180 <SDMMC_ReadFIFO>
 800a87e:	4602      	mov	r2, r0
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	601a      	str	r2, [r3, #0]
        pData++;
 800a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a886:	3304      	adds	r3, #4
 800a888:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	3301      	adds	r3, #1
 800a88e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a892:	2b07      	cmp	r3, #7
 800a894:	d9ee      	bls.n	800a874 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a896:	f7f8 fb7f 	bl	8002f98 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a4:	d102      	bne.n	800a8ac <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a8a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8aa:	e043      	b.n	800a934 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0d2      	beq.n	800a860 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c0:	f003 0308 	and.w	r3, r3, #8
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d001      	beq.n	800a8cc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a8c8:	2308      	movs	r3, #8
 800a8ca:	e033      	b.n	800a934 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8da:	2302      	movs	r3, #2
 800a8dc:	e02a      	b.n	800a934 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e4:	f003 0320 	and.w	r3, r3, #32
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d017      	beq.n	800a91c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a8ec:	2320      	movs	r3, #32
 800a8ee:	e021      	b.n	800a934 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f005 fc43 	bl	8010180 <SDMMC_ReadFIFO>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fe:	601a      	str	r2, [r3, #0]
    pData++;
 800a900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a902:	3304      	adds	r3, #4
 800a904:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a906:	f7f8 fb47 	bl	8002f98 <HAL_GetTick>
 800a90a:	4602      	mov	r2, r0
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a914:	d102      	bne.n	800a91c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a916:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a91a:	e00b      	b.n	800a934 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e2      	bne.n	800a8f0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a03      	ldr	r2, [pc, #12]	; (800a93c <SD_SendSDStatus+0x19c>)
 800a930:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3730      	adds	r7, #48	; 0x30
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	18000f3a 	.word	0x18000f3a

0800a940 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d102      	bne.n	800a956 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a950:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a954:	e018      	b.n	800a988 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a95e:	041b      	lsls	r3, r3, #16
 800a960:	4619      	mov	r1, r3
 800a962:	4610      	mov	r0, r2
 800a964:	f005 fef6 	bl	8010754 <SDMMC_CmdSendStatus>
 800a968:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	e009      	b.n	800a988 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2100      	movs	r1, #0
 800a97a:	4618      	mov	r0, r3
 800a97c:	f005 fc75 	bl	801026a <SDMMC_GetResponse>
 800a980:	4602      	mov	r2, r0
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a998:	2300      	movs	r3, #0
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	2300      	movs	r3, #0
 800a99e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f005 fc5f 	bl	801026a <SDMMC_GetResponse>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9b6:	d102      	bne.n	800a9be <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a9b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9bc:	e02f      	b.n	800aa1e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a9be:	f107 030c 	add.w	r3, r7, #12
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f879 	bl	800aabc <SD_FindSCR>
 800a9ca:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	e023      	b.n	800aa1e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01c      	beq.n	800aa1a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e8:	041b      	lsls	r3, r3, #16
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f005 fdc8 	bl	8010582 <SDMMC_CmdAppCommand>
 800a9f2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	e00f      	b.n	800aa1e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2102      	movs	r1, #2
 800aa04:	4618      	mov	r0, r3
 800aa06:	f005 fdff 	bl	8010608 <SDMMC_CmdBusWidth>
 800aa0a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	e003      	b.n	800aa1e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa16:	2300      	movs	r3, #0
 800aa18:	e001      	b.n	800aa1e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b086      	sub	sp, #24
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	2300      	movs	r3, #0
 800aa34:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f005 fc14 	bl	801026a <SDMMC_GetResponse>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa4c:	d102      	bne.n	800aa54 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa52:	e02f      	b.n	800aab4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa54:	f107 030c 	add.w	r3, r7, #12
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f82e 	bl	800aabc <SD_FindSCR>
 800aa60:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	e023      	b.n	800aab4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d01c      	beq.n	800aab0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7e:	041b      	lsls	r3, r3, #16
 800aa80:	4619      	mov	r1, r3
 800aa82:	4610      	mov	r0, r2
 800aa84:	f005 fd7d 	bl	8010582 <SDMMC_CmdAppCommand>
 800aa88:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d001      	beq.n	800aa94 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	e00f      	b.n	800aab4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2100      	movs	r1, #0
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f005 fdb4 	bl	8010608 <SDMMC_CmdBusWidth>
 800aaa0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	e003      	b.n	800aab4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aaac:	2300      	movs	r3, #0
 800aaae:	e001      	b.n	800aab4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aab0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08e      	sub	sp, #56	; 0x38
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aac6:	f7f8 fa67 	bl	8002f98 <HAL_GetTick>
 800aaca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800aacc:	2300      	movs	r3, #0
 800aace:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800aad0:	2300      	movs	r3, #0
 800aad2:	60bb      	str	r3, [r7, #8]
 800aad4:	2300      	movs	r3, #0
 800aad6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2108      	movs	r1, #8
 800aae2:	4618      	mov	r0, r3
 800aae4:	f005 fc00 	bl	80102e8 <SDMMC_CmdBlockLength>
 800aae8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf2:	e0ad      	b.n	800ac50 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafc:	041b      	lsls	r3, r3, #16
 800aafe:	4619      	mov	r1, r3
 800ab00:	4610      	mov	r0, r2
 800ab02:	f005 fd3e 	bl	8010582 <SDMMC_CmdAppCommand>
 800ab06:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	e09e      	b.n	800ac50 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab12:	f04f 33ff 	mov.w	r3, #4294967295
 800ab16:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ab18:	2308      	movs	r3, #8
 800ab1a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ab1c:	2330      	movs	r3, #48	; 0x30
 800ab1e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ab20:	2302      	movs	r3, #2
 800ab22:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f107 0210 	add.w	r2, r7, #16
 800ab34:	4611      	mov	r1, r2
 800ab36:	4618      	mov	r0, r3
 800ab38:	f005 fbaa 	bl	8010290 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f005 fd84 	bl	801064e <SDMMC_CmdSendSCR>
 800ab46:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d027      	beq.n	800ab9e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	e07e      	b.n	800ac50 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d113      	bne.n	800ab88 <SD_FindSCR+0xcc>
 800ab60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d110      	bne.n	800ab88 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f005 fb08 	bl	8010180 <SDMMC_ReadFIFO>
 800ab70:	4603      	mov	r3, r0
 800ab72:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f005 fb01 	bl	8010180 <SDMMC_ReadFIFO>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	60fb      	str	r3, [r7, #12]
      index++;
 800ab82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab84:	3301      	adds	r3, #1
 800ab86:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ab88:	f7f8 fa06 	bl	8002f98 <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d102      	bne.n	800ab9e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ab98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab9c:	e058      	b.n	800ac50 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aba4:	f240 532a 	movw	r3, #1322	; 0x52a
 800aba8:	4013      	ands	r3, r2
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0d1      	beq.n	800ab52 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb4:	f003 0308 	and.w	r3, r3, #8
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d005      	beq.n	800abc8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2208      	movs	r2, #8
 800abc2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800abc4:	2308      	movs	r3, #8
 800abc6:	e043      	b.n	800ac50 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d005      	beq.n	800abe2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2202      	movs	r2, #2
 800abdc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800abde:	2302      	movs	r3, #2
 800abe0:	e036      	b.n	800ac50 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe8:	f003 0320 	and.w	r3, r3, #32
 800abec:	2b00      	cmp	r3, #0
 800abee:	d005      	beq.n	800abfc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2220      	movs	r2, #32
 800abf6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800abf8:	2320      	movs	r3, #32
 800abfa:	e029      	b.n	800ac50 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a15      	ldr	r2, [pc, #84]	; (800ac58 <SD_FindSCR+0x19c>)
 800ac02:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	061a      	lsls	r2, r3, #24
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	021b      	lsls	r3, r3, #8
 800ac0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	0a1b      	lsrs	r3, r3, #8
 800ac16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ac1a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	0e1b      	lsrs	r3, r3, #24
 800ac20:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	601a      	str	r2, [r3, #0]
    scr++;
 800ac26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac28:	3304      	adds	r3, #4
 800ac2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	061a      	lsls	r2, r3, #24
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	021b      	lsls	r3, r3, #8
 800ac34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	0a1b      	lsrs	r3, r3, #8
 800ac3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ac42:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	0e1b      	lsrs	r3, r3, #24
 800ac48:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3738      	adds	r7, #56	; 0x38
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	18000f3a 	.word	0x18000f3a

0800ac5c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6e:	2b1f      	cmp	r3, #31
 800ac70:	d936      	bls.n	800ace0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ac72:	2300      	movs	r3, #0
 800ac74:	617b      	str	r3, [r7, #20]
 800ac76:	e027      	b.n	800acc8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f005 fa7f 	bl	8010180 <SDMMC_ReadFIFO>
 800ac82:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	0a1b      	lsrs	r3, r3, #8
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	0c1b      	lsrs	r3, r3, #16
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	3301      	adds	r3, #1
 800acb0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	0e1b      	lsrs	r3, r3, #24
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	3301      	adds	r3, #1
 800acc0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	3301      	adds	r3, #1
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	2b07      	cmp	r3, #7
 800accc:	d9d4      	bls.n	800ac78 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd8:	f1a3 0220 	sub.w	r2, r3, #32
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ace0:	bf00      	nop
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	69db      	ldr	r3, [r3, #28]
 800acf4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	2b1f      	cmp	r3, #31
 800acfc:	d93a      	bls.n	800ad74 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	e02b      	b.n	800ad5c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	021a      	lsls	r2, r3, #8
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	041a      	lsls	r2, r3, #16
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	3301      	adds	r3, #1
 800ad32:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	061a      	lsls	r2, r3, #24
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	3301      	adds	r3, #1
 800ad44:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f107 020c 	add.w	r2, r7, #12
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f005 fa22 	bl	801019a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	617b      	str	r3, [r7, #20]
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2b07      	cmp	r3, #7
 800ad60:	d9d0      	bls.n	800ad04 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	f1a3 0220 	sub.w	r2, r3, #32
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	621a      	str	r2, [r3, #32]
  }
}
 800ad74:	bf00      	nop
 800ad76:	3718      	adds	r7, #24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e02b      	b.n	800ae38 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d106      	bne.n	800adfa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7f7 feab 	bl	8002b50 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2202      	movs	r2, #2
 800adfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	f005 f88b 	bl	800ff28 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	6839      	ldr	r1, [r7, #0]
 800ae1e:	f005 f8df 	bl	800ffe0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ae22:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <HAL_SDRAM_Init+0x74>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a06      	ldr	r2, [pc, #24]	; (800ae40 <HAL_SDRAM_Init+0x74>)
 800ae28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae2c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	52004000 	.word	0x52004000

0800ae44 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ae56:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d101      	bne.n	800ae62 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800ae5e:	2302      	movs	r3, #2
 800ae60:	e021      	b.n	800aea6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d002      	beq.n	800ae6e <HAL_SDRAM_SendCommand+0x2a>
 800ae68:	7dfb      	ldrb	r3, [r7, #23]
 800ae6a:	2b05      	cmp	r3, #5
 800ae6c:	d118      	bne.n	800aea0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2202      	movs	r2, #2
 800ae72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	68b9      	ldr	r1, [r7, #8]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f005 f918 	bl	80100b4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d104      	bne.n	800ae96 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2205      	movs	r2, #5
 800ae90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae94:	e006      	b.n	800aea4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae9e:	e001      	b.n	800aea4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	e000      	b.n	800aea6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d101      	bne.n	800aec8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800aec4:	2302      	movs	r3, #2
 800aec6:	e016      	b.n	800aef6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d10f      	bne.n	800aef4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f005 f90a 	bl	80100fc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	e000      	b.n	800aef6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
	...

0800af00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	e0f1      	b.n	800b0f6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a78      	ldr	r2, [pc, #480]	; (800b100 <HAL_SPI_Init+0x200>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d00f      	beq.n	800af42 <HAL_SPI_Init+0x42>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a77      	ldr	r2, [pc, #476]	; (800b104 <HAL_SPI_Init+0x204>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d00a      	beq.n	800af42 <HAL_SPI_Init+0x42>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a75      	ldr	r2, [pc, #468]	; (800b108 <HAL_SPI_Init+0x208>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d005      	beq.n	800af42 <HAL_SPI_Init+0x42>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	2b0f      	cmp	r3, #15
 800af3c:	d901      	bls.n	800af42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e0d9      	b.n	800b0f6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 f816 	bl	800bf74 <SPI_GetPacketSize>
 800af48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a6c      	ldr	r2, [pc, #432]	; (800b100 <HAL_SPI_Init+0x200>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d00c      	beq.n	800af6e <HAL_SPI_Init+0x6e>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a6a      	ldr	r2, [pc, #424]	; (800b104 <HAL_SPI_Init+0x204>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d007      	beq.n	800af6e <HAL_SPI_Init+0x6e>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a69      	ldr	r2, [pc, #420]	; (800b108 <HAL_SPI_Init+0x208>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d002      	beq.n	800af6e <HAL_SPI_Init+0x6e>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2b08      	cmp	r3, #8
 800af6c:	d811      	bhi.n	800af92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af72:	4a63      	ldr	r2, [pc, #396]	; (800b100 <HAL_SPI_Init+0x200>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d009      	beq.n	800af8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a61      	ldr	r2, [pc, #388]	; (800b104 <HAL_SPI_Init+0x204>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d004      	beq.n	800af8c <HAL_SPI_Init+0x8c>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a60      	ldr	r2, [pc, #384]	; (800b108 <HAL_SPI_Init+0x208>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d104      	bne.n	800af96 <HAL_SPI_Init+0x96>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b10      	cmp	r3, #16
 800af90:	d901      	bls.n	800af96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e0af      	b.n	800b0f6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7f7 f93a 	bl	8002224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2202      	movs	r2, #2
 800afb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f022 0201 	bic.w	r2, r2, #1
 800afc6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800afd2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afdc:	d119      	bne.n	800b012 <HAL_SPI_Init+0x112>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afe6:	d103      	bne.n	800aff0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800afec:	2b00      	cmp	r3, #0
 800afee:	d008      	beq.n	800b002 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10c      	bne.n	800b012 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800affc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b000:	d107      	bne.n	800b012 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b010:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	69da      	ldr	r2, [r3, #28]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b01a:	431a      	orrs	r2, r3
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	431a      	orrs	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b024:	ea42 0103 	orr.w	r1, r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68da      	ldr	r2, [r3, #12]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	430a      	orrs	r2, r1
 800b032:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	431a      	orrs	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b042:	431a      	orrs	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	431a      	orrs	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	431a      	orrs	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	431a      	orrs	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	431a      	orrs	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	431a      	orrs	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b066:	431a      	orrs	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	431a      	orrs	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b072:	ea42 0103 	orr.w	r1, r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	430a      	orrs	r2, r1
 800b080:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d113      	bne.n	800b0b2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b09c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f022 0201 	bic.w	r2, r2, #1
 800b0c0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00a      	beq.n	800b0e4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	430a      	orrs	r2, r1
 800b0e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	40013000 	.word	0x40013000
 800b104:	40003800 	.word	0x40003800
 800b108:	40003c00 	.word	0x40003c00

0800b10c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08a      	sub	sp, #40	; 0x28
 800b110:	af02      	add	r7, sp, #8
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	603b      	str	r3, [r7, #0]
 800b118:	4613      	mov	r3, r2
 800b11a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3320      	adds	r3, #32
 800b122:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b124:	2300      	movs	r3, #0
 800b126:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d101      	bne.n	800b136 <HAL_SPI_Transmit+0x2a>
 800b132:	2302      	movs	r3, #2
 800b134:	e1d7      	b.n	800b4e6 <HAL_SPI_Transmit+0x3da>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b13e:	f7f7 ff2b 	bl	8002f98 <HAL_GetTick>
 800b142:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d007      	beq.n	800b160 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800b150:	2302      	movs	r3, #2
 800b152:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b15c:	7efb      	ldrb	r3, [r7, #27]
 800b15e:	e1c2      	b.n	800b4e6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <HAL_SPI_Transmit+0x60>
 800b166:	88fb      	ldrh	r3, [r7, #6]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d107      	bne.n	800b17c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b178:	7efb      	ldrb	r3, [r7, #27]
 800b17a:	e1b4      	b.n	800b4e6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2203      	movs	r2, #3
 800b180:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	88fa      	ldrh	r2, [r7, #6]
 800b196:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	88fa      	ldrh	r2, [r7, #6]
 800b19e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b1cc:	d107      	bne.n	800b1de <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	685a      	ldr	r2, [r3, #4]
 800b1e4:	4b96      	ldr	r3, [pc, #600]	; (800b440 <HAL_SPI_Transmit+0x334>)
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	88f9      	ldrh	r1, [r7, #6]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	6812      	ldr	r2, [r2, #0]
 800b1ee:	430b      	orrs	r3, r1
 800b1f0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f042 0201 	orr.w	r2, r2, #1
 800b200:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b20a:	d107      	bne.n	800b21c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b21a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	2b0f      	cmp	r3, #15
 800b222:	d947      	bls.n	800b2b4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b224:	e03f      	b.n	800b2a6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	695b      	ldr	r3, [r3, #20]
 800b22c:	f003 0302 	and.w	r3, r3, #2
 800b230:	2b02      	cmp	r3, #2
 800b232:	d114      	bne.n	800b25e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6812      	ldr	r2, [r2, #0]
 800b23e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b244:	1d1a      	adds	r2, r3, #4
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b250:	b29b      	uxth	r3, r3
 800b252:	3b01      	subs	r3, #1
 800b254:	b29a      	uxth	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b25c:	e023      	b.n	800b2a6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b25e:	f7f7 fe9b 	bl	8002f98 <HAL_GetTick>
 800b262:	4602      	mov	r2, r0
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d803      	bhi.n	800b276 <HAL_SPI_Transmit+0x16a>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b274:	d102      	bne.n	800b27c <HAL_SPI_Transmit+0x170>
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d114      	bne.n	800b2a6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 fdab 	bl	800bdd8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e11f      	b.n	800b4e6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1b9      	bne.n	800b226 <HAL_SPI_Transmit+0x11a>
 800b2b2:	e0f2      	b.n	800b49a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	2b07      	cmp	r3, #7
 800b2ba:	f240 80e7 	bls.w	800b48c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b2be:	e05d      	b.n	800b37c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	f003 0302 	and.w	r3, r3, #2
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d132      	bne.n	800b334 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d918      	bls.n	800b30c <HAL_SPI_Transmit+0x200>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d014      	beq.n	800b30c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6812      	ldr	r2, [r2, #0]
 800b2ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2f2:	1d1a      	adds	r2, r3, #4
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	3b02      	subs	r3, #2
 800b302:	b29a      	uxth	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b30a:	e037      	b.n	800b37c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b310:	881a      	ldrh	r2, [r3, #0]
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b31a:	1c9a      	adds	r2, r3, #2
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b326:	b29b      	uxth	r3, r3
 800b328:	3b01      	subs	r3, #1
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b332:	e023      	b.n	800b37c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b334:	f7f7 fe30 	bl	8002f98 <HAL_GetTick>
 800b338:	4602      	mov	r2, r0
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	429a      	cmp	r2, r3
 800b342:	d803      	bhi.n	800b34c <HAL_SPI_Transmit+0x240>
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34a:	d102      	bne.n	800b352 <HAL_SPI_Transmit+0x246>
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d114      	bne.n	800b37c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 fd40 	bl	800bdd8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b366:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b378:	2303      	movs	r3, #3
 800b37a:	e0b4      	b.n	800b4e6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b382:	b29b      	uxth	r3, r3
 800b384:	2b00      	cmp	r3, #0
 800b386:	d19b      	bne.n	800b2c0 <HAL_SPI_Transmit+0x1b4>
 800b388:	e087      	b.n	800b49a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	695b      	ldr	r3, [r3, #20]
 800b390:	f003 0302 	and.w	r3, r3, #2
 800b394:	2b02      	cmp	r3, #2
 800b396:	d155      	bne.n	800b444 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d918      	bls.n	800b3d6 <HAL_SPI_Transmit+0x2ca>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a8:	2b40      	cmp	r3, #64	; 0x40
 800b3aa:	d914      	bls.n	800b3d6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	6812      	ldr	r2, [r2, #0]
 800b3b6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3bc:	1d1a      	adds	r2, r3, #4
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	3b04      	subs	r3, #4
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b3d4:	e05a      	b.n	800b48c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d917      	bls.n	800b412 <HAL_SPI_Transmit+0x306>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d013      	beq.n	800b412 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ee:	881a      	ldrh	r2, [r3, #0]
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3f8:	1c9a      	adds	r2, r3, #2
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b404:	b29b      	uxth	r3, r3
 800b406:	3b02      	subs	r3, #2
 800b408:	b29a      	uxth	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b410:	e03c      	b.n	800b48c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3320      	adds	r3, #32
 800b41c:	7812      	ldrb	r2, [r2, #0]
 800b41e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b430:	b29b      	uxth	r3, r3
 800b432:	3b01      	subs	r3, #1
 800b434:	b29a      	uxth	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b43c:	e026      	b.n	800b48c <HAL_SPI_Transmit+0x380>
 800b43e:	bf00      	nop
 800b440:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b444:	f7f7 fda8 	bl	8002f98 <HAL_GetTick>
 800b448:	4602      	mov	r2, r0
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d803      	bhi.n	800b45c <HAL_SPI_Transmit+0x350>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45a:	d102      	bne.n	800b462 <HAL_SPI_Transmit+0x356>
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d114      	bne.n	800b48c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 fcb8 	bl	800bdd8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b476:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b488:	2303      	movs	r3, #3
 800b48a:	e02c      	b.n	800b4e6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b492:	b29b      	uxth	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	f47f af78 	bne.w	800b38a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	2108      	movs	r1, #8
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 fd37 	bl	800bf18 <SPI_WaitOnFlagUntilTimeout>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d007      	beq.n	800b4c0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4b6:	f043 0220 	orr.w	r2, r3, #32
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f000 fc89 	bl	800bdd8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d001      	beq.n	800b4e4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e000      	b.n	800b4e6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800b4e4:	7efb      	ldrb	r3, [r7, #27]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3720      	adds	r7, #32
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop

0800b4f0 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d101      	bne.n	800b510 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b50c:	2302      	movs	r3, #2
 800b50e:	e1b4      	b.n	800b87a <HAL_SPI_TransmitReceive_DMA+0x38a>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b51e:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b526:	7dbb      	ldrb	r3, [r7, #22]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d012      	beq.n	800b552 <HAL_SPI_TransmitReceive_DMA+0x62>
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b532:	d106      	bne.n	800b542 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b53c:	7dbb      	ldrb	r3, [r7, #22]
 800b53e:	2b04      	cmp	r3, #4
 800b540:	d007      	beq.n	800b552 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b542:	2302      	movs	r3, #2
 800b544:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
 800b550:	e193      	b.n	800b87a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d005      	beq.n	800b564 <HAL_SPI_TransmitReceive_DMA+0x74>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <HAL_SPI_TransmitReceive_DMA+0x74>
 800b55e:	887b      	ldrh	r3, [r7, #2]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d107      	bne.n	800b574 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b570:	7dfb      	ldrb	r3, [r7, #23]
 800b572:	e182      	b.n	800b87a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b04      	cmp	r3, #4
 800b57e:	d003      	beq.n	800b588 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2205      	movs	r2, #5
 800b584:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	887a      	ldrh	r2, [r7, #2]
 800b59a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	887a      	ldrh	r2, [r7, #2]
 800b5a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	887a      	ldrh	r2, [r7, #2]
 800b5b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	887a      	ldrh	r2, [r7, #2]
 800b5b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	689a      	ldr	r2, [r3, #8]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b5d6:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	2b0f      	cmp	r3, #15
 800b5de:	d905      	bls.n	800b5ec <HAL_SPI_TransmitReceive_DMA+0xfc>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5e4:	699b      	ldr	r3, [r3, #24]
 800b5e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5ea:	d10f      	bne.n	800b60c <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b5f0:	2b07      	cmp	r3, #7
 800b5f2:	d913      	bls.n	800b61c <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5f8:	699b      	ldr	r3, [r3, #24]
 800b5fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5fe:	d00d      	beq.n	800b61c <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b604:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b60a:	d007      	beq.n	800b61c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	e12e      	b.n	800b87a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	2b07      	cmp	r3, #7
 800b622:	d840      	bhi.n	800b6a6 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b62e:	d109      	bne.n	800b644 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b636:	b29b      	uxth	r3, r3
 800b638:	3301      	adds	r3, #1
 800b63a:	105b      	asrs	r3, r3, #1
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b64e:	d109      	bne.n	800b664 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b656:	b29b      	uxth	r3, r3
 800b658:	3303      	adds	r3, #3
 800b65a:	109b      	asrs	r3, r3, #2
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b66e:	d109      	bne.n	800b684 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b676:	b29b      	uxth	r3, r3
 800b678:	3301      	adds	r3, #1
 800b67a:	105b      	asrs	r3, r3, #1
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b68e:	d12e      	bne.n	800b6ee <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b696:	b29b      	uxth	r3, r3
 800b698:	3303      	adds	r3, #3
 800b69a:	109b      	asrs	r3, r3, #2
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b6a4:	e023      	b.n	800b6ee <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	2b0f      	cmp	r3, #15
 800b6ac:	d81f      	bhi.n	800b6ee <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6b8:	d109      	bne.n	800b6ce <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	105b      	asrs	r3, r3, #1
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6d8:	d109      	bne.n	800b6ee <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	105b      	asrs	r3, r3, #1
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b04      	cmp	r3, #4
 800b6f8:	d108      	bne.n	800b70c <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6fe:	4a61      	ldr	r2, [pc, #388]	; (800b884 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800b700:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b706:	4a60      	ldr	r2, [pc, #384]	; (800b888 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800b708:	63da      	str	r2, [r3, #60]	; 0x3c
 800b70a:	e007      	b.n	800b71c <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b710:	4a5e      	ldr	r2, [pc, #376]	; (800b88c <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800b712:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b718:	4a5d      	ldr	r2, [pc, #372]	; (800b890 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800b71a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b720:	4a5c      	ldr	r2, [pc, #368]	; (800b894 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800b722:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b728:	2200      	movs	r2, #0
 800b72a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3330      	adds	r3, #48	; 0x30
 800b736:	4619      	mov	r1, r3
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b73c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b744:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b746:	f7f8 f929 	bl	800399c <HAL_DMA_Start_IT>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d013      	beq.n	800b778 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b756:	f043 0210 	orr.w	r2, r3, #16
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	e080      	b.n	800b87a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	689a      	ldr	r2, [r3, #8]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b786:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b78c:	2200      	movs	r2, #0
 800b78e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b794:	2200      	movs	r2, #0
 800b796:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b79c:	2200      	movs	r2, #0
 800b79e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	3320      	adds	r3, #32
 800b7b8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7c0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b7c2:	f7f8 f8eb 	bl	800399c <HAL_DMA_Start_IT>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d013      	beq.n	800b7f4 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7d2:	f043 0210 	orr.w	r2, r3, #16
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
 800b7f2:	e042      	b.n	800b87a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7f8:	69db      	ldr	r3, [r3, #28]
 800b7fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7fe:	d108      	bne.n	800b812 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6859      	ldr	r1, [r3, #4]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	4b23      	ldr	r3, [pc, #140]	; (800b898 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800b80c:	400b      	ands	r3, r1
 800b80e:	6053      	str	r3, [r2, #4]
 800b810:	e009      	b.n	800b826 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	4b1f      	ldr	r3, [pc, #124]	; (800b898 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800b81a:	4013      	ands	r3, r2
 800b81c:	8879      	ldrh	r1, [r7, #2]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	6812      	ldr	r2, [r2, #0]
 800b822:	430b      	orrs	r3, r1
 800b824:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b834:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	691a      	ldr	r2, [r3, #16]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800b844:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f042 0201 	orr.w	r2, r2, #1
 800b854:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b85e:	d107      	bne.n	800b870 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b86e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800b878:	7dfb      	ldrb	r3, [r7, #23]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3718      	adds	r7, #24
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	0800bd25 	.word	0x0800bd25
 800b888:	0800bc99 	.word	0x0800bc99
 800b88c:	0800bd41 	.word	0x0800bd41
 800b890:	0800bcdf 	.word	0x0800bcdf
 800b894:	0800bd5d 	.word	0x0800bd5d
 800b898:	ffff0000 	.word	0xffff0000

0800b89c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b08a      	sub	sp, #40	; 0x28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b8b4:	6a3a      	ldr	r2, [r7, #32]
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b8ce:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3330      	adds	r3, #48	; 0x30
 800b8d6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d113      	bne.n	800b90a <HAL_SPI_IRQHandler+0x6e>
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	f003 0320 	and.w	r3, r3, #32
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10e      	bne.n	800b90a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d009      	beq.n	800b90a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	4798      	blx	r3
    handled = 1UL;
 800b906:	2301      	movs	r3, #1
 800b908:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10f      	bne.n	800b934 <HAL_SPI_IRQHandler+0x98>
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00a      	beq.n	800b934 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b924:	2b00      	cmp	r3, #0
 800b926:	d105      	bne.n	800b934 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	4798      	blx	r3
    handled = 1UL;
 800b930:	2301      	movs	r3, #1
 800b932:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	f003 0320 	and.w	r3, r3, #32
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10f      	bne.n	800b95e <HAL_SPI_IRQHandler+0xc2>
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	f003 0302 	and.w	r3, r3, #2
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00a      	beq.n	800b95e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d105      	bne.n	800b95e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	4798      	blx	r3
    handled = 1UL;
 800b95a:	2301      	movs	r3, #1
 800b95c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b960:	2b00      	cmp	r3, #0
 800b962:	f040 815a 	bne.w	800bc1a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	f003 0308 	and.w	r3, r3, #8
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f000 808b 	beq.w	800ba88 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	699a      	ldr	r2, [r3, #24]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f042 0208 	orr.w	r2, r2, #8
 800b980:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	699a      	ldr	r2, [r3, #24]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f042 0210 	orr.w	r2, r2, #16
 800b990:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	699a      	ldr	r2, [r3, #24]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9a0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	691a      	ldr	r2, [r3, #16]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f022 0208 	bic.w	r2, r2, #8
 800b9b0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d13d      	bne.n	800ba3c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b9c0:	e036      	b.n	800ba30 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	2b0f      	cmp	r3, #15
 800b9c8:	d90b      	bls.n	800b9e2 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b9d4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9da:	1d1a      	adds	r2, r3, #4
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	665a      	str	r2, [r3, #100]	; 0x64
 800b9e0:	e01d      	b.n	800ba1e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	2b07      	cmp	r3, #7
 800b9e8:	d90b      	bls.n	800ba02 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	8812      	ldrh	r2, [r2, #0]
 800b9f2:	b292      	uxth	r2, r2
 800b9f4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9fa:	1c9a      	adds	r2, r3, #2
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	665a      	str	r2, [r3, #100]	; 0x64
 800ba00:	e00d      	b.n	800ba1e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba0e:	7812      	ldrb	r2, [r2, #0]
 800ba10:	b2d2      	uxtb	r2, r2
 800ba12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	3b01      	subs	r3, #1
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1c2      	bne.n	800b9c2 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f9cb 	bl	800bdd8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f915 	bl	800bc84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ba5a:	e0e3      	b.n	800bc24 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ba5c:	7cfb      	ldrb	r3, [r7, #19]
 800ba5e:	2b05      	cmp	r3, #5
 800ba60:	d103      	bne.n	800ba6a <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f7f5 fe78 	bl	8001758 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ba68:	e0d9      	b.n	800bc1e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ba6a:	7cfb      	ldrb	r3, [r7, #19]
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	d103      	bne.n	800ba78 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f8e9 	bl	800bc48 <HAL_SPI_RxCpltCallback>
    return;
 800ba76:	e0d2      	b.n	800bc1e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ba78:	7cfb      	ldrb	r3, [r7, #19]
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	f040 80cf 	bne.w	800bc1e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f8d7 	bl	800bc34 <HAL_SPI_TxCpltCallback>
    return;
 800ba86:	e0ca      	b.n	800bc1e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00d      	beq.n	800baae <HAL_SPI_IRQHandler+0x212>
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	f003 0308 	and.w	r3, r3, #8
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d008      	beq.n	800baae <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	699a      	ldr	r2, [r3, #24]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800baaa:	619a      	str	r2, [r3, #24]

    return;
 800baac:	e0ba      	b.n	800bc24 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 80b5 	beq.w	800bc24 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00f      	beq.n	800bae4 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baca:	f043 0204 	orr.w	r2, r3, #4
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	699a      	ldr	r2, [r3, #24]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bae2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00f      	beq.n	800bb0e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baf4:	f043 0201 	orr.w	r2, r3, #1
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	699a      	ldr	r2, [r3, #24]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb0c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00f      	beq.n	800bb38 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb1e:	f043 0208 	orr.w	r2, r3, #8
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	699a      	ldr	r2, [r3, #24]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb36:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	f003 0320 	and.w	r3, r3, #32
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00f      	beq.n	800bb62 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	699a      	ldr	r2, [r3, #24]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f042 0220 	orr.w	r2, r2, #32
 800bb60:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d05a      	beq.n	800bc22 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f022 0201 	bic.w	r2, r2, #1
 800bb7a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	6919      	ldr	r1, [r3, #16]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	4b29      	ldr	r3, [pc, #164]	; (800bc2c <HAL_SPI_IRQHandler+0x390>)
 800bb88:	400b      	ands	r3, r1
 800bb8a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bb92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bb96:	d138      	bne.n	800bc0a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	689a      	ldr	r2, [r3, #8]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bba6:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d013      	beq.n	800bbd8 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbb4:	4a1e      	ldr	r2, [pc, #120]	; (800bc30 <HAL_SPI_IRQHandler+0x394>)
 800bbb6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7f8 fc75 	bl	80044ac <HAL_DMA_Abort_IT>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d007      	beq.n	800bbd8 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d020      	beq.n	800bc22 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbe4:	4a12      	ldr	r2, [pc, #72]	; (800bc30 <HAL_SPI_IRQHandler+0x394>)
 800bbe6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7f8 fc5d 	bl	80044ac <HAL_DMA_Abort_IT>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d014      	beq.n	800bc22 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bc08:	e00b      	b.n	800bc22 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f836 	bl	800bc84 <HAL_SPI_ErrorCallback>
    return;
 800bc18:	e003      	b.n	800bc22 <HAL_SPI_IRQHandler+0x386>
    return;
 800bc1a:	bf00      	nop
 800bc1c:	e002      	b.n	800bc24 <HAL_SPI_IRQHandler+0x388>
    return;
 800bc1e:	bf00      	nop
 800bc20:	e000      	b.n	800bc24 <HAL_SPI_IRQHandler+0x388>
    return;
 800bc22:	bf00      	nop
  }
}
 800bc24:	3728      	adds	r7, #40	; 0x28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	fffffc94 	.word	0xfffffc94
 800bc30:	0800bda3 	.word	0x0800bda3

0800bc34 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800bc3c:	bf00      	nop
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800bc50:	bf00      	nop
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bc8c:	bf00      	nop
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	2b07      	cmp	r3, #7
 800bcb0:	d011      	beq.n	800bcd6 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcb6:	69db      	ldr	r3, [r3, #28]
 800bcb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcbc:	d103      	bne.n	800bcc6 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f7ff ffc2 	bl	800bc48 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bcc4:	e007      	b.n	800bcd6 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	691a      	ldr	r2, [r3, #16]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f042 0208 	orr.w	r2, r2, #8
 800bcd4:	611a      	str	r2, [r3, #16]
}
 800bcd6:	bf00      	nop
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcea:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	2b07      	cmp	r3, #7
 800bcf6:	d011      	beq.n	800bd1c <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcfc:	69db      	ldr	r3, [r3, #28]
 800bcfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd02:	d103      	bne.n	800bd0c <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f7f5 fd27 	bl	8001758 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bd0a:	e007      	b.n	800bd1c <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	691a      	ldr	r2, [r3, #16]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f042 0208 	orr.w	r2, r2, #8
 800bd1a:	611a      	str	r2, [r3, #16]
}
 800bd1c:	bf00      	nop
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7ff ff92 	bl	800bc5c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd38:	bf00      	nop
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f7ff ff8e 	bl	800bc70 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd54:	bf00      	nop
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd68:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7f9 fd46 	bl	80057fc <HAL_DMA_GetError>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d011      	beq.n	800bd9a <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f000 f82e 	bl	800bdd8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd82:	f043 0210 	orr.w	r2, r3, #16
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f7ff ff75 	bl	800bc84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800bd9a:	bf00      	nop
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b084      	sub	sp, #16
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdae:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7ff ff5b 	bl	800bc84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bdce:	bf00      	nop
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	699a      	ldr	r2, [r3, #24]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f042 0208 	orr.w	r2, r2, #8
 800bdf6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	699a      	ldr	r2, [r3, #24]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f042 0210 	orr.w	r2, r2, #16
 800be06:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f022 0201 	bic.w	r2, r2, #1
 800be16:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	6919      	ldr	r1, [r3, #16]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	4b3c      	ldr	r3, [pc, #240]	; (800bf14 <SPI_CloseTransfer+0x13c>)
 800be24:	400b      	ands	r3, r1
 800be26:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	689a      	ldr	r2, [r3, #8]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800be36:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	2b04      	cmp	r3, #4
 800be42:	d014      	beq.n	800be6e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f003 0320 	and.w	r3, r3, #32
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00f      	beq.n	800be6e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	699a      	ldr	r2, [r3, #24]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f042 0220 	orr.w	r2, r2, #32
 800be6c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b03      	cmp	r3, #3
 800be78:	d014      	beq.n	800bea4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00f      	beq.n	800bea4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be8a:	f043 0204 	orr.w	r2, r3, #4
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	699a      	ldr	r2, [r3, #24]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bea2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00f      	beq.n	800bece <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beb4:	f043 0201 	orr.w	r2, r3, #1
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	699a      	ldr	r2, [r3, #24]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800becc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00f      	beq.n	800bef8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bede:	f043 0208 	orr.w	r2, r3, #8
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	699a      	ldr	r2, [r3, #24]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bef6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800bf08:	bf00      	nop
 800bf0a:	3714      	adds	r7, #20
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr
 800bf14:	fffffc90 	.word	0xfffffc90

0800bf18 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	603b      	str	r3, [r7, #0]
 800bf24:	4613      	mov	r3, r2
 800bf26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bf28:	e010      	b.n	800bf4c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf2a:	f7f7 f835 	bl	8002f98 <HAL_GetTick>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d803      	bhi.n	800bf42 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf40:	d102      	bne.n	800bf48 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	e00f      	b.n	800bf6c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	695a      	ldr	r2, [r3, #20]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	4013      	ands	r3, r2
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	bf0c      	ite	eq
 800bf5c:	2301      	moveq	r3, #1
 800bf5e:	2300      	movne	r3, #0
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	461a      	mov	r2, r3
 800bf64:	79fb      	ldrb	r3, [r7, #7]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d0df      	beq.n	800bf2a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf80:	095b      	lsrs	r3, r3, #5
 800bf82:	3301      	adds	r3, #1
 800bf84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	3307      	adds	r3, #7
 800bf92:	08db      	lsrs	r3, r3, #3
 800bf94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	fb02 f303 	mul.w	r3, r2, r3
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b082      	sub	sp, #8
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d101      	bne.n	800bfbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e049      	b.n	800c050 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d106      	bne.n	800bfd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f7f6 fc01 	bl	80027d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2202      	movs	r2, #2
 800bfda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4610      	mov	r0, r2
 800bfea:	f000 fbe1 	bl	800c7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2201      	movs	r2, #1
 800bffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2201      	movs	r2, #1
 800c002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2201      	movs	r2, #1
 800c00a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2201      	movs	r2, #1
 800c01a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2201      	movs	r2, #1
 800c022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2201      	movs	r2, #1
 800c03a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2201      	movs	r2, #1
 800c042:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2201      	movs	r2, #1
 800c04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c066:	2301      	movs	r3, #1
 800c068:	e049      	b.n	800c0fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b00      	cmp	r3, #0
 800c074:	d106      	bne.n	800c084 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f841 	bl	800c106 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2202      	movs	r2, #2
 800c088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3304      	adds	r3, #4
 800c094:	4619      	mov	r1, r3
 800c096:	4610      	mov	r0, r2
 800c098:	f000 fb8a 	bl	800c7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c10e:	bf00      	nop
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b082      	sub	sp, #8
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d101      	bne.n	800c12c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	e049      	b.n	800c1c0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	d106      	bne.n	800c146 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f841 	bl	800c1c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2202      	movs	r2, #2
 800c14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	3304      	adds	r3, #4
 800c156:	4619      	mov	r1, r3
 800c158:	4610      	mov	r0, r2
 800c15a:	f000 fb29 	bl	800c7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d101      	bne.n	800c1fa <HAL_TIM_IC_ConfigChannel+0x1e>
 800c1f6:	2302      	movs	r3, #2
 800c1f8:	e088      	b.n	800c30c <HAL_TIM_IC_ConfigChannel+0x130>
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d11b      	bne.n	800c240 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6818      	ldr	r0, [r3, #0]
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	6819      	ldr	r1, [r3, #0]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	f000 ff24 	bl	800d064 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	699a      	ldr	r2, [r3, #24]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f022 020c 	bic.w	r2, r2, #12
 800c22a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	6999      	ldr	r1, [r3, #24]
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	689a      	ldr	r2, [r3, #8]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	430a      	orrs	r2, r1
 800c23c:	619a      	str	r2, [r3, #24]
 800c23e:	e060      	b.n	800c302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b04      	cmp	r3, #4
 800c244:	d11c      	bne.n	800c280 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6818      	ldr	r0, [r3, #0]
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	6819      	ldr	r1, [r3, #0]
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	685a      	ldr	r2, [r3, #4]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	f000 ffa8 	bl	800d1aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	699a      	ldr	r2, [r3, #24]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c268:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	6999      	ldr	r1, [r3, #24]
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	021a      	lsls	r2, r3, #8
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	430a      	orrs	r2, r1
 800c27c:	619a      	str	r2, [r3, #24]
 800c27e:	e040      	b.n	800c302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2b08      	cmp	r3, #8
 800c284:	d11b      	bne.n	800c2be <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6818      	ldr	r0, [r3, #0]
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	6819      	ldr	r1, [r3, #0]
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	f000 fff5 	bl	800d284 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	69da      	ldr	r2, [r3, #28]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f022 020c 	bic.w	r2, r2, #12
 800c2a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	69d9      	ldr	r1, [r3, #28]
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	689a      	ldr	r2, [r3, #8]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	430a      	orrs	r2, r1
 800c2ba:	61da      	str	r2, [r3, #28]
 800c2bc:	e021      	b.n	800c302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b0c      	cmp	r3, #12
 800c2c2:	d11c      	bne.n	800c2fe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6818      	ldr	r0, [r3, #0]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	6819      	ldr	r1, [r3, #0]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	685a      	ldr	r2, [r3, #4]
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	f001 f812 	bl	800d2fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	69da      	ldr	r2, [r3, #28]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c2e6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	69d9      	ldr	r1, [r3, #28]
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	021a      	lsls	r2, r3, #8
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	430a      	orrs	r2, r1
 800c2fa:	61da      	str	r2, [r3, #28]
 800c2fc:	e001      	b.n	800c302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c2fe:	2301      	movs	r3, #1
 800c300:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2200      	movs	r2, #0
 800c306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d101      	bne.n	800c332 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c32e:	2302      	movs	r3, #2
 800c330:	e0ff      	b.n	800c532 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2201      	movs	r2, #1
 800c336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2b14      	cmp	r3, #20
 800c33e:	f200 80f0 	bhi.w	800c522 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c342:	a201      	add	r2, pc, #4	; (adr r2, 800c348 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c348:	0800c39d 	.word	0x0800c39d
 800c34c:	0800c523 	.word	0x0800c523
 800c350:	0800c523 	.word	0x0800c523
 800c354:	0800c523 	.word	0x0800c523
 800c358:	0800c3dd 	.word	0x0800c3dd
 800c35c:	0800c523 	.word	0x0800c523
 800c360:	0800c523 	.word	0x0800c523
 800c364:	0800c523 	.word	0x0800c523
 800c368:	0800c41f 	.word	0x0800c41f
 800c36c:	0800c523 	.word	0x0800c523
 800c370:	0800c523 	.word	0x0800c523
 800c374:	0800c523 	.word	0x0800c523
 800c378:	0800c45f 	.word	0x0800c45f
 800c37c:	0800c523 	.word	0x0800c523
 800c380:	0800c523 	.word	0x0800c523
 800c384:	0800c523 	.word	0x0800c523
 800c388:	0800c4a1 	.word	0x0800c4a1
 800c38c:	0800c523 	.word	0x0800c523
 800c390:	0800c523 	.word	0x0800c523
 800c394:	0800c523 	.word	0x0800c523
 800c398:	0800c4e1 	.word	0x0800c4e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68b9      	ldr	r1, [r7, #8]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 fa9e 	bl	800c8e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	699a      	ldr	r2, [r3, #24]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f042 0208 	orr.w	r2, r2, #8
 800c3b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	699a      	ldr	r2, [r3, #24]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f022 0204 	bic.w	r2, r2, #4
 800c3c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	6999      	ldr	r1, [r3, #24]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	691a      	ldr	r2, [r3, #16]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	430a      	orrs	r2, r1
 800c3d8:	619a      	str	r2, [r3, #24]
      break;
 800c3da:	e0a5      	b.n	800c528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 fb0e 	bl	800ca04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	699a      	ldr	r2, [r3, #24]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	699a      	ldr	r2, [r3, #24]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	6999      	ldr	r1, [r3, #24]
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	021a      	lsls	r2, r3, #8
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	430a      	orrs	r2, r1
 800c41a:	619a      	str	r2, [r3, #24]
      break;
 800c41c:	e084      	b.n	800c528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68b9      	ldr	r1, [r7, #8]
 800c424:	4618      	mov	r0, r3
 800c426:	f000 fb77 	bl	800cb18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	69da      	ldr	r2, [r3, #28]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f042 0208 	orr.w	r2, r2, #8
 800c438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	69da      	ldr	r2, [r3, #28]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f022 0204 	bic.w	r2, r2, #4
 800c448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	69d9      	ldr	r1, [r3, #28]
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	691a      	ldr	r2, [r3, #16]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	430a      	orrs	r2, r1
 800c45a:	61da      	str	r2, [r3, #28]
      break;
 800c45c:	e064      	b.n	800c528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68b9      	ldr	r1, [r7, #8]
 800c464:	4618      	mov	r0, r3
 800c466:	f000 fbdf 	bl	800cc28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	69da      	ldr	r2, [r3, #28]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	69da      	ldr	r2, [r3, #28]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	69d9      	ldr	r1, [r3, #28]
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	021a      	lsls	r2, r3, #8
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	430a      	orrs	r2, r1
 800c49c:	61da      	str	r2, [r3, #28]
      break;
 800c49e:	e043      	b.n	800c528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68b9      	ldr	r1, [r7, #8]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 fc28 	bl	800ccfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f042 0208 	orr.w	r2, r2, #8
 800c4ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 0204 	bic.w	r2, r2, #4
 800c4ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	691a      	ldr	r2, [r3, #16]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	430a      	orrs	r2, r1
 800c4dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c4de:	e023      	b.n	800c528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68b9      	ldr	r1, [r7, #8]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 fc6c 	bl	800cdc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c50a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	021a      	lsls	r2, r3, #8
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	430a      	orrs	r2, r1
 800c51e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c520:	e002      	b.n	800c528 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	75fb      	strb	r3, [r7, #23]
      break;
 800c526:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2200      	movs	r2, #0
 800c52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c530:	7dfb      	ldrb	r3, [r7, #23]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3718      	adds	r7, #24
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop

0800c53c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c550:	2b01      	cmp	r3, #1
 800c552:	d101      	bne.n	800c558 <HAL_TIM_ConfigClockSource+0x1c>
 800c554:	2302      	movs	r3, #2
 800c556:	e0dc      	b.n	800c712 <HAL_TIM_ConfigClockSource+0x1d6>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2202      	movs	r2, #2
 800c564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	4b6a      	ldr	r3, [pc, #424]	; (800c71c <HAL_TIM_ConfigClockSource+0x1e0>)
 800c574:	4013      	ands	r3, r2
 800c576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c57e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a64      	ldr	r2, [pc, #400]	; (800c720 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	f000 80a9 	beq.w	800c6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c594:	4a62      	ldr	r2, [pc, #392]	; (800c720 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c596:	4293      	cmp	r3, r2
 800c598:	f200 80ae 	bhi.w	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c59c:	4a61      	ldr	r2, [pc, #388]	; (800c724 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	f000 80a1 	beq.w	800c6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5a4:	4a5f      	ldr	r2, [pc, #380]	; (800c724 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	f200 80a6 	bhi.w	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5ac:	4a5e      	ldr	r2, [pc, #376]	; (800c728 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	f000 8099 	beq.w	800c6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5b4:	4a5c      	ldr	r2, [pc, #368]	; (800c728 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	f200 809e 	bhi.w	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c5c0:	f000 8091 	beq.w	800c6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c5c8:	f200 8096 	bhi.w	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5d0:	f000 8089 	beq.w	800c6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5d8:	f200 808e 	bhi.w	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5e0:	d03e      	beq.n	800c660 <HAL_TIM_ConfigClockSource+0x124>
 800c5e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5e6:	f200 8087 	bhi.w	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ee:	f000 8086 	beq.w	800c6fe <HAL_TIM_ConfigClockSource+0x1c2>
 800c5f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5f6:	d87f      	bhi.n	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5f8:	2b70      	cmp	r3, #112	; 0x70
 800c5fa:	d01a      	beq.n	800c632 <HAL_TIM_ConfigClockSource+0xf6>
 800c5fc:	2b70      	cmp	r3, #112	; 0x70
 800c5fe:	d87b      	bhi.n	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c600:	2b60      	cmp	r3, #96	; 0x60
 800c602:	d050      	beq.n	800c6a6 <HAL_TIM_ConfigClockSource+0x16a>
 800c604:	2b60      	cmp	r3, #96	; 0x60
 800c606:	d877      	bhi.n	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c608:	2b50      	cmp	r3, #80	; 0x50
 800c60a:	d03c      	beq.n	800c686 <HAL_TIM_ConfigClockSource+0x14a>
 800c60c:	2b50      	cmp	r3, #80	; 0x50
 800c60e:	d873      	bhi.n	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c610:	2b40      	cmp	r3, #64	; 0x40
 800c612:	d058      	beq.n	800c6c6 <HAL_TIM_ConfigClockSource+0x18a>
 800c614:	2b40      	cmp	r3, #64	; 0x40
 800c616:	d86f      	bhi.n	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c618:	2b30      	cmp	r3, #48	; 0x30
 800c61a:	d064      	beq.n	800c6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c61c:	2b30      	cmp	r3, #48	; 0x30
 800c61e:	d86b      	bhi.n	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c620:	2b20      	cmp	r3, #32
 800c622:	d060      	beq.n	800c6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c624:	2b20      	cmp	r3, #32
 800c626:	d867      	bhi.n	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d05c      	beq.n	800c6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c62c:	2b10      	cmp	r3, #16
 800c62e:	d05a      	beq.n	800c6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c630:	e062      	b.n	800c6f8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	6899      	ldr	r1, [r3, #8]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	f000 feb7 	bl	800d3b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	609a      	str	r2, [r3, #8]
      break;
 800c65e:	e04f      	b.n	800c700 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6818      	ldr	r0, [r3, #0]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	6899      	ldr	r1, [r3, #8]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	f000 fea0 	bl	800d3b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	689a      	ldr	r2, [r3, #8]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c682:	609a      	str	r2, [r3, #8]
      break;
 800c684:	e03c      	b.n	800c700 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6818      	ldr	r0, [r3, #0]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	6859      	ldr	r1, [r3, #4]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	461a      	mov	r2, r3
 800c694:	f000 fd5a 	bl	800d14c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2150      	movs	r1, #80	; 0x50
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 fe6a 	bl	800d378 <TIM_ITRx_SetConfig>
      break;
 800c6a4:	e02c      	b.n	800c700 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6818      	ldr	r0, [r3, #0]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	6859      	ldr	r1, [r3, #4]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	f000 fdb6 	bl	800d224 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2160      	movs	r1, #96	; 0x60
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 fe5a 	bl	800d378 <TIM_ITRx_SetConfig>
      break;
 800c6c4:	e01c      	b.n	800c700 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6818      	ldr	r0, [r3, #0]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	6859      	ldr	r1, [r3, #4]
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	f000 fd3a 	bl	800d14c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2140      	movs	r1, #64	; 0x40
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 fe4a 	bl	800d378 <TIM_ITRx_SetConfig>
      break;
 800c6e4:	e00c      	b.n	800c700 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f000 fe41 	bl	800d378 <TIM_ITRx_SetConfig>
      break;
 800c6f6:	e003      	b.n	800c700 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c6fc:	e000      	b.n	800c700 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c6fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c710:	7bfb      	ldrb	r3, [r7, #15]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	ffceff88 	.word	0xffceff88
 800c720:	00100040 	.word	0x00100040
 800c724:	00100030 	.word	0x00100030
 800c728:	00100020 	.word	0x00100020

0800c72c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d101      	bne.n	800c744 <HAL_TIM_SlaveConfigSynchro+0x18>
 800c740:	2302      	movs	r3, #2
 800c742:	e031      	b.n	800c7a8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2201      	movs	r2, #1
 800c748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2202      	movs	r2, #2
 800c750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fb9a 	bl	800ce90 <TIM_SlaveTimer_SetConfig>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d009      	beq.n	800c776 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2201      	movs	r2, #1
 800c766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	e018      	b.n	800c7a8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68da      	ldr	r2, [r3, #12]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c784:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68da      	ldr	r2, [r3, #12]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c794:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a40      	ldr	r2, [pc, #256]	; (800c8c4 <TIM_Base_SetConfig+0x114>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d013      	beq.n	800c7f0 <TIM_Base_SetConfig+0x40>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ce:	d00f      	beq.n	800c7f0 <TIM_Base_SetConfig+0x40>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a3d      	ldr	r2, [pc, #244]	; (800c8c8 <TIM_Base_SetConfig+0x118>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d00b      	beq.n	800c7f0 <TIM_Base_SetConfig+0x40>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a3c      	ldr	r2, [pc, #240]	; (800c8cc <TIM_Base_SetConfig+0x11c>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d007      	beq.n	800c7f0 <TIM_Base_SetConfig+0x40>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a3b      	ldr	r2, [pc, #236]	; (800c8d0 <TIM_Base_SetConfig+0x120>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d003      	beq.n	800c7f0 <TIM_Base_SetConfig+0x40>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a3a      	ldr	r2, [pc, #232]	; (800c8d4 <TIM_Base_SetConfig+0x124>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d108      	bne.n	800c802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a2f      	ldr	r2, [pc, #188]	; (800c8c4 <TIM_Base_SetConfig+0x114>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d01f      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c810:	d01b      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a2c      	ldr	r2, [pc, #176]	; (800c8c8 <TIM_Base_SetConfig+0x118>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d017      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4a2b      	ldr	r2, [pc, #172]	; (800c8cc <TIM_Base_SetConfig+0x11c>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d013      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a2a      	ldr	r2, [pc, #168]	; (800c8d0 <TIM_Base_SetConfig+0x120>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d00f      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a29      	ldr	r2, [pc, #164]	; (800c8d4 <TIM_Base_SetConfig+0x124>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d00b      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a28      	ldr	r2, [pc, #160]	; (800c8d8 <TIM_Base_SetConfig+0x128>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d007      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a27      	ldr	r2, [pc, #156]	; (800c8dc <TIM_Base_SetConfig+0x12c>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d003      	beq.n	800c84a <TIM_Base_SetConfig+0x9a>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4a26      	ldr	r2, [pc, #152]	; (800c8e0 <TIM_Base_SetConfig+0x130>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d108      	bne.n	800c85c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	4313      	orrs	r3, r2
 800c85a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	4313      	orrs	r3, r2
 800c868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	689a      	ldr	r2, [r3, #8]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a10      	ldr	r2, [pc, #64]	; (800c8c4 <TIM_Base_SetConfig+0x114>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d00f      	beq.n	800c8a8 <TIM_Base_SetConfig+0xf8>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a12      	ldr	r2, [pc, #72]	; (800c8d4 <TIM_Base_SetConfig+0x124>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d00b      	beq.n	800c8a8 <TIM_Base_SetConfig+0xf8>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a11      	ldr	r2, [pc, #68]	; (800c8d8 <TIM_Base_SetConfig+0x128>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d007      	beq.n	800c8a8 <TIM_Base_SetConfig+0xf8>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a10      	ldr	r2, [pc, #64]	; (800c8dc <TIM_Base_SetConfig+0x12c>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d003      	beq.n	800c8a8 <TIM_Base_SetConfig+0xf8>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a0f      	ldr	r2, [pc, #60]	; (800c8e0 <TIM_Base_SetConfig+0x130>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d103      	bne.n	800c8b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	691a      	ldr	r2, [r3, #16]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	615a      	str	r2, [r3, #20]
}
 800c8b6:	bf00      	nop
 800c8b8:	3714      	adds	r7, #20
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	40010000 	.word	0x40010000
 800c8c8:	40000400 	.word	0x40000400
 800c8cc:	40000800 	.word	0x40000800
 800c8d0:	40000c00 	.word	0x40000c00
 800c8d4:	40010400 	.word	0x40010400
 800c8d8:	40014000 	.word	0x40014000
 800c8dc:	40014400 	.word	0x40014400
 800c8e0:	40014800 	.word	0x40014800

0800c8e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	f023 0201 	bic.w	r2, r3, #1
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	4b37      	ldr	r3, [pc, #220]	; (800c9ec <TIM_OC1_SetConfig+0x108>)
 800c910:	4013      	ands	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f023 0303 	bic.w	r3, r3, #3
 800c91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	4313      	orrs	r3, r2
 800c924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f023 0302 	bic.w	r3, r3, #2
 800c92c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	4313      	orrs	r3, r2
 800c936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a2d      	ldr	r2, [pc, #180]	; (800c9f0 <TIM_OC1_SetConfig+0x10c>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d00f      	beq.n	800c960 <TIM_OC1_SetConfig+0x7c>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a2c      	ldr	r2, [pc, #176]	; (800c9f4 <TIM_OC1_SetConfig+0x110>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d00b      	beq.n	800c960 <TIM_OC1_SetConfig+0x7c>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a2b      	ldr	r2, [pc, #172]	; (800c9f8 <TIM_OC1_SetConfig+0x114>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d007      	beq.n	800c960 <TIM_OC1_SetConfig+0x7c>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a2a      	ldr	r2, [pc, #168]	; (800c9fc <TIM_OC1_SetConfig+0x118>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d003      	beq.n	800c960 <TIM_OC1_SetConfig+0x7c>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a29      	ldr	r2, [pc, #164]	; (800ca00 <TIM_OC1_SetConfig+0x11c>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d10c      	bne.n	800c97a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	f023 0308 	bic.w	r3, r3, #8
 800c966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	697a      	ldr	r2, [r7, #20]
 800c96e:	4313      	orrs	r3, r2
 800c970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f023 0304 	bic.w	r3, r3, #4
 800c978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a1c      	ldr	r2, [pc, #112]	; (800c9f0 <TIM_OC1_SetConfig+0x10c>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d00f      	beq.n	800c9a2 <TIM_OC1_SetConfig+0xbe>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a1b      	ldr	r2, [pc, #108]	; (800c9f4 <TIM_OC1_SetConfig+0x110>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d00b      	beq.n	800c9a2 <TIM_OC1_SetConfig+0xbe>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a1a      	ldr	r2, [pc, #104]	; (800c9f8 <TIM_OC1_SetConfig+0x114>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d007      	beq.n	800c9a2 <TIM_OC1_SetConfig+0xbe>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a19      	ldr	r2, [pc, #100]	; (800c9fc <TIM_OC1_SetConfig+0x118>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d003      	beq.n	800c9a2 <TIM_OC1_SetConfig+0xbe>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a18      	ldr	r2, [pc, #96]	; (800ca00 <TIM_OC1_SetConfig+0x11c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d111      	bne.n	800c9c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	695b      	ldr	r3, [r3, #20]
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	621a      	str	r2, [r3, #32]
}
 800c9e0:	bf00      	nop
 800c9e2:	371c      	adds	r7, #28
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	fffeff8f 	.word	0xfffeff8f
 800c9f0:	40010000 	.word	0x40010000
 800c9f4:	40010400 	.word	0x40010400
 800c9f8:	40014000 	.word	0x40014000
 800c9fc:	40014400 	.word	0x40014400
 800ca00:	40014800 	.word	0x40014800

0800ca04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b087      	sub	sp, #28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a1b      	ldr	r3, [r3, #32]
 800ca12:	f023 0210 	bic.w	r2, r3, #16
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	4b34      	ldr	r3, [pc, #208]	; (800cb00 <TIM_OC2_SetConfig+0xfc>)
 800ca30:	4013      	ands	r3, r2
 800ca32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	021b      	lsls	r3, r3, #8
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	f023 0320 	bic.w	r3, r3, #32
 800ca4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	011b      	lsls	r3, r3, #4
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a29      	ldr	r2, [pc, #164]	; (800cb04 <TIM_OC2_SetConfig+0x100>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d003      	beq.n	800ca6c <TIM_OC2_SetConfig+0x68>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a28      	ldr	r2, [pc, #160]	; (800cb08 <TIM_OC2_SetConfig+0x104>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d10d      	bne.n	800ca88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	011b      	lsls	r3, r3, #4
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a1e      	ldr	r2, [pc, #120]	; (800cb04 <TIM_OC2_SetConfig+0x100>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d00f      	beq.n	800cab0 <TIM_OC2_SetConfig+0xac>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a1d      	ldr	r2, [pc, #116]	; (800cb08 <TIM_OC2_SetConfig+0x104>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d00b      	beq.n	800cab0 <TIM_OC2_SetConfig+0xac>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4a1c      	ldr	r2, [pc, #112]	; (800cb0c <TIM_OC2_SetConfig+0x108>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d007      	beq.n	800cab0 <TIM_OC2_SetConfig+0xac>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	4a1b      	ldr	r2, [pc, #108]	; (800cb10 <TIM_OC2_SetConfig+0x10c>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d003      	beq.n	800cab0 <TIM_OC2_SetConfig+0xac>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4a1a      	ldr	r2, [pc, #104]	; (800cb14 <TIM_OC2_SetConfig+0x110>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d113      	bne.n	800cad8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cabe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	695b      	ldr	r3, [r3, #20]
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	693a      	ldr	r2, [r7, #16]
 800cac8:	4313      	orrs	r3, r2
 800caca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	693a      	ldr	r2, [r7, #16]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	621a      	str	r2, [r3, #32]
}
 800caf2:	bf00      	nop
 800caf4:	371c      	adds	r7, #28
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	feff8fff 	.word	0xfeff8fff
 800cb04:	40010000 	.word	0x40010000
 800cb08:	40010400 	.word	0x40010400
 800cb0c:	40014000 	.word	0x40014000
 800cb10:	40014400 	.word	0x40014400
 800cb14:	40014800 	.word	0x40014800

0800cb18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a1b      	ldr	r3, [r3, #32]
 800cb26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	69db      	ldr	r3, [r3, #28]
 800cb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	4b33      	ldr	r3, [pc, #204]	; (800cc10 <TIM_OC3_SetConfig+0xf8>)
 800cb44:	4013      	ands	r3, r2
 800cb46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f023 0303 	bic.w	r3, r3, #3
 800cb4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	689b      	ldr	r3, [r3, #8]
 800cb66:	021b      	lsls	r3, r3, #8
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a28      	ldr	r2, [pc, #160]	; (800cc14 <TIM_OC3_SetConfig+0xfc>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d003      	beq.n	800cb7e <TIM_OC3_SetConfig+0x66>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a27      	ldr	r2, [pc, #156]	; (800cc18 <TIM_OC3_SetConfig+0x100>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d10d      	bne.n	800cb9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	021b      	lsls	r3, r3, #8
 800cb8c:	697a      	ldr	r2, [r7, #20]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a1d      	ldr	r2, [pc, #116]	; (800cc14 <TIM_OC3_SetConfig+0xfc>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d00f      	beq.n	800cbc2 <TIM_OC3_SetConfig+0xaa>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a1c      	ldr	r2, [pc, #112]	; (800cc18 <TIM_OC3_SetConfig+0x100>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d00b      	beq.n	800cbc2 <TIM_OC3_SetConfig+0xaa>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a1b      	ldr	r2, [pc, #108]	; (800cc1c <TIM_OC3_SetConfig+0x104>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d007      	beq.n	800cbc2 <TIM_OC3_SetConfig+0xaa>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a1a      	ldr	r2, [pc, #104]	; (800cc20 <TIM_OC3_SetConfig+0x108>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d003      	beq.n	800cbc2 <TIM_OC3_SetConfig+0xaa>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a19      	ldr	r2, [pc, #100]	; (800cc24 <TIM_OC3_SetConfig+0x10c>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d113      	bne.n	800cbea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	011b      	lsls	r3, r3, #4
 800cbd8:	693a      	ldr	r2, [r7, #16]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	011b      	lsls	r3, r3, #4
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	685a      	ldr	r2, [r3, #4]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	697a      	ldr	r2, [r7, #20]
 800cc02:	621a      	str	r2, [r3, #32]
}
 800cc04:	bf00      	nop
 800cc06:	371c      	adds	r7, #28
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr
 800cc10:	fffeff8f 	.word	0xfffeff8f
 800cc14:	40010000 	.word	0x40010000
 800cc18:	40010400 	.word	0x40010400
 800cc1c:	40014000 	.word	0x40014000
 800cc20:	40014400 	.word	0x40014400
 800cc24:	40014800 	.word	0x40014800

0800cc28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b087      	sub	sp, #28
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a1b      	ldr	r3, [r3, #32]
 800cc36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a1b      	ldr	r3, [r3, #32]
 800cc42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	69db      	ldr	r3, [r3, #28]
 800cc4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	4b24      	ldr	r3, [pc, #144]	; (800cce4 <TIM_OC4_SetConfig+0xbc>)
 800cc54:	4013      	ands	r3, r2
 800cc56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	021b      	lsls	r3, r3, #8
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	031b      	lsls	r3, r3, #12
 800cc7a:	693a      	ldr	r2, [r7, #16]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a19      	ldr	r2, [pc, #100]	; (800cce8 <TIM_OC4_SetConfig+0xc0>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d00f      	beq.n	800cca8 <TIM_OC4_SetConfig+0x80>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a18      	ldr	r2, [pc, #96]	; (800ccec <TIM_OC4_SetConfig+0xc4>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00b      	beq.n	800cca8 <TIM_OC4_SetConfig+0x80>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a17      	ldr	r2, [pc, #92]	; (800ccf0 <TIM_OC4_SetConfig+0xc8>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d007      	beq.n	800cca8 <TIM_OC4_SetConfig+0x80>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a16      	ldr	r2, [pc, #88]	; (800ccf4 <TIM_OC4_SetConfig+0xcc>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d003      	beq.n	800cca8 <TIM_OC4_SetConfig+0x80>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a15      	ldr	r2, [pc, #84]	; (800ccf8 <TIM_OC4_SetConfig+0xd0>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d109      	bne.n	800ccbc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	019b      	lsls	r3, r3, #6
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	693a      	ldr	r2, [r7, #16]
 800ccd4:	621a      	str	r2, [r3, #32]
}
 800ccd6:	bf00      	nop
 800ccd8:	371c      	adds	r7, #28
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	feff8fff 	.word	0xfeff8fff
 800cce8:	40010000 	.word	0x40010000
 800ccec:	40010400 	.word	0x40010400
 800ccf0:	40014000 	.word	0x40014000
 800ccf4:	40014400 	.word	0x40014400
 800ccf8:	40014800 	.word	0x40014800

0800ccfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	4b21      	ldr	r3, [pc, #132]	; (800cdac <TIM_OC5_SetConfig+0xb0>)
 800cd28:	4013      	ands	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cd3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	041b      	lsls	r3, r3, #16
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	4313      	orrs	r3, r2
 800cd48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a18      	ldr	r2, [pc, #96]	; (800cdb0 <TIM_OC5_SetConfig+0xb4>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d00f      	beq.n	800cd72 <TIM_OC5_SetConfig+0x76>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4a17      	ldr	r2, [pc, #92]	; (800cdb4 <TIM_OC5_SetConfig+0xb8>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d00b      	beq.n	800cd72 <TIM_OC5_SetConfig+0x76>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4a16      	ldr	r2, [pc, #88]	; (800cdb8 <TIM_OC5_SetConfig+0xbc>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d007      	beq.n	800cd72 <TIM_OC5_SetConfig+0x76>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4a15      	ldr	r2, [pc, #84]	; (800cdbc <TIM_OC5_SetConfig+0xc0>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d003      	beq.n	800cd72 <TIM_OC5_SetConfig+0x76>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4a14      	ldr	r2, [pc, #80]	; (800cdc0 <TIM_OC5_SetConfig+0xc4>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d109      	bne.n	800cd86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	021b      	lsls	r3, r3, #8
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	693a      	ldr	r2, [r7, #16]
 800cd9e:	621a      	str	r2, [r3, #32]
}
 800cda0:	bf00      	nop
 800cda2:	371c      	adds	r7, #28
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	fffeff8f 	.word	0xfffeff8f
 800cdb0:	40010000 	.word	0x40010000
 800cdb4:	40010400 	.word	0x40010400
 800cdb8:	40014000 	.word	0x40014000
 800cdbc:	40014400 	.word	0x40014400
 800cdc0:	40014800 	.word	0x40014800

0800cdc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b087      	sub	sp, #28
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6a1b      	ldr	r3, [r3, #32]
 800cdde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	4b22      	ldr	r3, [pc, #136]	; (800ce78 <TIM_OC6_SetConfig+0xb4>)
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	021b      	lsls	r3, r3, #8
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	051b      	lsls	r3, r3, #20
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4a19      	ldr	r2, [pc, #100]	; (800ce7c <TIM_OC6_SetConfig+0xb8>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d00f      	beq.n	800ce3c <TIM_OC6_SetConfig+0x78>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a18      	ldr	r2, [pc, #96]	; (800ce80 <TIM_OC6_SetConfig+0xbc>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d00b      	beq.n	800ce3c <TIM_OC6_SetConfig+0x78>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4a17      	ldr	r2, [pc, #92]	; (800ce84 <TIM_OC6_SetConfig+0xc0>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d007      	beq.n	800ce3c <TIM_OC6_SetConfig+0x78>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4a16      	ldr	r2, [pc, #88]	; (800ce88 <TIM_OC6_SetConfig+0xc4>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d003      	beq.n	800ce3c <TIM_OC6_SetConfig+0x78>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a15      	ldr	r2, [pc, #84]	; (800ce8c <TIM_OC6_SetConfig+0xc8>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d109      	bne.n	800ce50 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	695b      	ldr	r3, [r3, #20]
 800ce48:	029b      	lsls	r3, r3, #10
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685a      	ldr	r2, [r3, #4]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	621a      	str	r2, [r3, #32]
}
 800ce6a:	bf00      	nop
 800ce6c:	371c      	adds	r7, #28
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	feff8fff 	.word	0xfeff8fff
 800ce7c:	40010000 	.word	0x40010000
 800ce80:	40010400 	.word	0x40010400
 800ce84:	40014000 	.word	0x40014000
 800ce88:	40014400 	.word	0x40014400
 800ce8c:	40014800 	.word	0x40014800

0800ce90 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	4b65      	ldr	r3, [pc, #404]	; (800d040 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800ceaa:	4013      	ands	r3, r2
 800ceac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	4b62      	ldr	r3, [pc, #392]	; (800d044 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	693a      	ldr	r2, [r7, #16]
 800ced0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	4a5c      	ldr	r2, [pc, #368]	; (800d048 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	f000 80ab 	beq.w	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cede:	4a5a      	ldr	r2, [pc, #360]	; (800d048 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	f200 80a4 	bhi.w	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ceea:	f000 80a3 	beq.w	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ceee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cef2:	f200 809c 	bhi.w	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cef6:	4a55      	ldr	r2, [pc, #340]	; (800d04c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	f000 809b 	beq.w	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cefe:	4a53      	ldr	r2, [pc, #332]	; (800d04c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	f200 8094 	bhi.w	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf06:	4a52      	ldr	r2, [pc, #328]	; (800d050 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	f000 8093 	beq.w	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf0e:	4a50      	ldr	r2, [pc, #320]	; (800d050 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	f200 808c 	bhi.w	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf16:	4a4f      	ldr	r2, [pc, #316]	; (800d054 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	f000 808b 	beq.w	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf1e:	4a4d      	ldr	r2, [pc, #308]	; (800d054 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	f200 8084 	bhi.w	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf26:	4a4c      	ldr	r2, [pc, #304]	; (800d058 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	f000 8083 	beq.w	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf2e:	4a4a      	ldr	r2, [pc, #296]	; (800d058 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d87c      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf34:	4a49      	ldr	r2, [pc, #292]	; (800d05c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d07c      	beq.n	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf3a:	4a48      	ldr	r2, [pc, #288]	; (800d05c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d876      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf40:	4a47      	ldr	r2, [pc, #284]	; (800d060 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d076      	beq.n	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf46:	4a46      	ldr	r2, [pc, #280]	; (800d060 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d870      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cf50:	d070      	beq.n	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf52:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cf56:	d86a      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf5c:	d06a      	beq.n	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf62:	d864      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf64:	2b70      	cmp	r3, #112	; 0x70
 800cf66:	d01a      	beq.n	800cf9e <TIM_SlaveTimer_SetConfig+0x10e>
 800cf68:	2b70      	cmp	r3, #112	; 0x70
 800cf6a:	d860      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf6c:	2b60      	cmp	r3, #96	; 0x60
 800cf6e:	d054      	beq.n	800d01a <TIM_SlaveTimer_SetConfig+0x18a>
 800cf70:	2b60      	cmp	r3, #96	; 0x60
 800cf72:	d85c      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf74:	2b50      	cmp	r3, #80	; 0x50
 800cf76:	d046      	beq.n	800d006 <TIM_SlaveTimer_SetConfig+0x176>
 800cf78:	2b50      	cmp	r3, #80	; 0x50
 800cf7a:	d858      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf7c:	2b40      	cmp	r3, #64	; 0x40
 800cf7e:	d019      	beq.n	800cfb4 <TIM_SlaveTimer_SetConfig+0x124>
 800cf80:	2b40      	cmp	r3, #64	; 0x40
 800cf82:	d854      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf84:	2b30      	cmp	r3, #48	; 0x30
 800cf86:	d055      	beq.n	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf88:	2b30      	cmp	r3, #48	; 0x30
 800cf8a:	d850      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf8c:	2b20      	cmp	r3, #32
 800cf8e:	d051      	beq.n	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf90:	2b20      	cmp	r3, #32
 800cf92:	d84c      	bhi.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d04d      	beq.n	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf98:	2b10      	cmp	r3, #16
 800cf9a:	d04b      	beq.n	800d034 <TIM_SlaveTimer_SetConfig+0x1a4>
 800cf9c:	e047      	b.n	800d02e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6818      	ldr	r0, [r3, #0]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	68d9      	ldr	r1, [r3, #12]
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	689a      	ldr	r2, [r3, #8]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	f000 fa01 	bl	800d3b4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800cfb2:	e040      	b.n	800d036 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b05      	cmp	r3, #5
 800cfba:	d101      	bne.n	800cfc0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e03b      	b.n	800d038 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6a1a      	ldr	r2, [r3, #32]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f022 0201 	bic.w	r2, r2, #1
 800cfd6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	699b      	ldr	r3, [r3, #24]
 800cfde:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfe6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	011b      	lsls	r3, r3, #4
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	4313      	orrs	r3, r2
 800cff2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	621a      	str	r2, [r3, #32]
      break;
 800d004:	e017      	b.n	800d036 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6818      	ldr	r0, [r3, #0]
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	6899      	ldr	r1, [r3, #8]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	461a      	mov	r2, r3
 800d014:	f000 f89a 	bl	800d14c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d018:	e00d      	b.n	800d036 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6818      	ldr	r0, [r3, #0]
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	6899      	ldr	r1, [r3, #8]
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	691b      	ldr	r3, [r3, #16]
 800d026:	461a      	mov	r2, r3
 800d028:	f000 f8fc 	bl	800d224 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d02c:	e003      	b.n	800d036 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	75fb      	strb	r3, [r7, #23]
      break;
 800d032:	e000      	b.n	800d036 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800d034:	bf00      	nop
  }

  return status;
 800d036:	7dfb      	ldrb	r3, [r7, #23]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3718      	adds	r7, #24
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	ffcfff8f 	.word	0xffcfff8f
 800d044:	fffefff8 	.word	0xfffefff8
 800d048:	00200010 	.word	0x00200010
 800d04c:	00100070 	.word	0x00100070
 800d050:	00100060 	.word	0x00100060
 800d054:	00100050 	.word	0x00100050
 800d058:	00100040 	.word	0x00100040
 800d05c:	00100030 	.word	0x00100030
 800d060:	00100020 	.word	0x00100020

0800d064 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d064:	b480      	push	{r7}
 800d066:	b087      	sub	sp, #28
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
 800d070:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6a1b      	ldr	r3, [r3, #32]
 800d076:	f023 0201 	bic.w	r2, r3, #1
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6a1b      	ldr	r3, [r3, #32]
 800d088:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	4a28      	ldr	r2, [pc, #160]	; (800d130 <TIM_TI1_SetConfig+0xcc>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d01b      	beq.n	800d0ca <TIM_TI1_SetConfig+0x66>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d098:	d017      	beq.n	800d0ca <TIM_TI1_SetConfig+0x66>
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	4a25      	ldr	r2, [pc, #148]	; (800d134 <TIM_TI1_SetConfig+0xd0>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d013      	beq.n	800d0ca <TIM_TI1_SetConfig+0x66>
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	4a24      	ldr	r2, [pc, #144]	; (800d138 <TIM_TI1_SetConfig+0xd4>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00f      	beq.n	800d0ca <TIM_TI1_SetConfig+0x66>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	4a23      	ldr	r2, [pc, #140]	; (800d13c <TIM_TI1_SetConfig+0xd8>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d00b      	beq.n	800d0ca <TIM_TI1_SetConfig+0x66>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	4a22      	ldr	r2, [pc, #136]	; (800d140 <TIM_TI1_SetConfig+0xdc>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d007      	beq.n	800d0ca <TIM_TI1_SetConfig+0x66>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	4a21      	ldr	r2, [pc, #132]	; (800d144 <TIM_TI1_SetConfig+0xe0>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d003      	beq.n	800d0ca <TIM_TI1_SetConfig+0x66>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	4a20      	ldr	r2, [pc, #128]	; (800d148 <TIM_TI1_SetConfig+0xe4>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d101      	bne.n	800d0ce <TIM_TI1_SetConfig+0x6a>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e000      	b.n	800d0d0 <TIM_TI1_SetConfig+0x6c>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d008      	beq.n	800d0e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	f023 0303 	bic.w	r3, r3, #3
 800d0da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d0dc:	697a      	ldr	r2, [r7, #20]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	617b      	str	r3, [r7, #20]
 800d0e4:	e003      	b.n	800d0ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	f043 0301 	orr.w	r3, r3, #1
 800d0ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d0f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	011b      	lsls	r3, r3, #4
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	697a      	ldr	r2, [r7, #20]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	f023 030a 	bic.w	r3, r3, #10
 800d108:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	f003 030a 	and.w	r3, r3, #10
 800d110:	693a      	ldr	r2, [r7, #16]
 800d112:	4313      	orrs	r3, r2
 800d114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	697a      	ldr	r2, [r7, #20]
 800d11a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	693a      	ldr	r2, [r7, #16]
 800d120:	621a      	str	r2, [r3, #32]
}
 800d122:	bf00      	nop
 800d124:	371c      	adds	r7, #28
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	40010000 	.word	0x40010000
 800d134:	40000400 	.word	0x40000400
 800d138:	40000800 	.word	0x40000800
 800d13c:	40000c00 	.word	0x40000c00
 800d140:	40010400 	.word	0x40010400
 800d144:	40001800 	.word	0x40001800
 800d148:	40014000 	.word	0x40014000

0800d14c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6a1b      	ldr	r3, [r3, #32]
 800d15c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6a1b      	ldr	r3, [r3, #32]
 800d162:	f023 0201 	bic.w	r2, r3, #1
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	011b      	lsls	r3, r3, #4
 800d17c:	693a      	ldr	r2, [r7, #16]
 800d17e:	4313      	orrs	r3, r2
 800d180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	f023 030a 	bic.w	r3, r3, #10
 800d188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	4313      	orrs	r3, r2
 800d190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	693a      	ldr	r2, [r7, #16]
 800d196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	697a      	ldr	r2, [r7, #20]
 800d19c:	621a      	str	r2, [r3, #32]
}
 800d19e:	bf00      	nop
 800d1a0:	371c      	adds	r7, #28
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d1aa:	b480      	push	{r7}
 800d1ac:	b087      	sub	sp, #28
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	60f8      	str	r0, [r7, #12]
 800d1b2:	60b9      	str	r1, [r7, #8]
 800d1b4:	607a      	str	r2, [r7, #4]
 800d1b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6a1b      	ldr	r3, [r3, #32]
 800d1bc:	f023 0210 	bic.w	r2, r3, #16
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	021b      	lsls	r3, r3, #8
 800d1dc:	697a      	ldr	r2, [r7, #20]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d1e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	031b      	lsls	r3, r3, #12
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	697a      	ldr	r2, [r7, #20]
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d1fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	011b      	lsls	r3, r3, #4
 800d202:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	4313      	orrs	r3, r2
 800d20a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	621a      	str	r2, [r3, #32]
}
 800d218:	bf00      	nop
 800d21a:	371c      	adds	r7, #28
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d224:	b480      	push	{r7}
 800d226:	b087      	sub	sp, #28
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6a1b      	ldr	r3, [r3, #32]
 800d234:	f023 0210 	bic.w	r2, r3, #16
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6a1b      	ldr	r3, [r3, #32]
 800d246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d24e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	031b      	lsls	r3, r3, #12
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	4313      	orrs	r3, r2
 800d258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	011b      	lsls	r3, r3, #4
 800d266:	693a      	ldr	r2, [r7, #16]
 800d268:	4313      	orrs	r3, r2
 800d26a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	697a      	ldr	r2, [r7, #20]
 800d270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	621a      	str	r2, [r3, #32]
}
 800d278:	bf00      	nop
 800d27a:	371c      	adds	r7, #28
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d284:	b480      	push	{r7}
 800d286:	b087      	sub	sp, #28
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	607a      	str	r2, [r7, #4]
 800d290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6a1b      	ldr	r3, [r3, #32]
 800d296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	69db      	ldr	r3, [r3, #28]
 800d2a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6a1b      	ldr	r3, [r3, #32]
 800d2a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	f023 0303 	bic.w	r3, r3, #3
 800d2b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d2b2:	697a      	ldr	r2, [r7, #20]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d2c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	011b      	lsls	r3, r3, #4
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d2d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	021b      	lsls	r3, r3, #8
 800d2da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d2de:	693a      	ldr	r2, [r7, #16]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	621a      	str	r2, [r3, #32]
}
 800d2f0:	bf00      	nop
 800d2f2:	371c      	adds	r7, #28
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b087      	sub	sp, #28
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6a1b      	ldr	r3, [r3, #32]
 800d30e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	69db      	ldr	r3, [r3, #28]
 800d31a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6a1b      	ldr	r3, [r3, #32]
 800d320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d328:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	021b      	lsls	r3, r3, #8
 800d32e:	697a      	ldr	r2, [r7, #20]
 800d330:	4313      	orrs	r3, r2
 800d332:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d33a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	031b      	lsls	r3, r3, #12
 800d340:	b29b      	uxth	r3, r3
 800d342:	697a      	ldr	r2, [r7, #20]
 800d344:	4313      	orrs	r3, r2
 800d346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d34e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	031b      	lsls	r3, r3, #12
 800d354:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	4313      	orrs	r3, r2
 800d35c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	621a      	str	r2, [r3, #32]
}
 800d36a:	bf00      	nop
 800d36c:	371c      	adds	r7, #28
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
	...

0800d378 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	4b09      	ldr	r3, [pc, #36]	; (800d3b0 <TIM_ITRx_SetConfig+0x38>)
 800d38c:	4013      	ands	r3, r2
 800d38e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d390:	683a      	ldr	r2, [r7, #0]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	4313      	orrs	r3, r2
 800d396:	f043 0307 	orr.w	r3, r3, #7
 800d39a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	68fa      	ldr	r2, [r7, #12]
 800d3a0:	609a      	str	r2, [r3, #8]
}
 800d3a2:	bf00      	nop
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	ffcfff8f 	.word	0xffcfff8f

0800d3b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b087      	sub	sp, #28
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d3ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	021a      	lsls	r2, r3, #8
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	431a      	orrs	r2, r3
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	697a      	ldr	r2, [r7, #20]
 800d3e6:	609a      	str	r2, [r3, #8]
}
 800d3e8:	bf00      	nop
 800d3ea:	371c      	adds	r7, #28
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d404:	2b01      	cmp	r3, #1
 800d406:	d101      	bne.n	800d40c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d408:	2302      	movs	r3, #2
 800d40a:	e06d      	b.n	800d4e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2201      	movs	r2, #1
 800d410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2202      	movs	r2, #2
 800d418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a30      	ldr	r2, [pc, #192]	; (800d4f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d004      	beq.n	800d440 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a2f      	ldr	r2, [pc, #188]	; (800d4f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d108      	bne.n	800d452 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d446:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	4313      	orrs	r3, r2
 800d450:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d458:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	4313      	orrs	r3, r2
 800d462:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a20      	ldr	r2, [pc, #128]	; (800d4f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d022      	beq.n	800d4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d47e:	d01d      	beq.n	800d4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a1d      	ldr	r2, [pc, #116]	; (800d4fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d018      	beq.n	800d4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a1c      	ldr	r2, [pc, #112]	; (800d500 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d013      	beq.n	800d4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a1a      	ldr	r2, [pc, #104]	; (800d504 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d00e      	beq.n	800d4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a15      	ldr	r2, [pc, #84]	; (800d4f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d009      	beq.n	800d4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a16      	ldr	r2, [pc, #88]	; (800d508 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d004      	beq.n	800d4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a15      	ldr	r2, [pc, #84]	; (800d50c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d10c      	bne.n	800d4d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68ba      	ldr	r2, [r7, #8]
 800d4d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3714      	adds	r7, #20
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr
 800d4f4:	40010000 	.word	0x40010000
 800d4f8:	40010400 	.word	0x40010400
 800d4fc:	40000400 	.word	0x40000400
 800d500:	40000800 	.word	0x40000800
 800d504:	40000c00 	.word	0x40000c00
 800d508:	40001800 	.word	0x40001800
 800d50c:	40014000 	.word	0x40014000

0800d510 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d51a:	2300      	movs	r3, #0
 800d51c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d524:	2b01      	cmp	r3, #1
 800d526:	d101      	bne.n	800d52c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d528:	2302      	movs	r3, #2
 800d52a:	e087      	b.n	800d63c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	4313      	orrs	r3, r2
 800d540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	4313      	orrs	r3, r2
 800d55c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4313      	orrs	r3, r2
 800d56a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	4313      	orrs	r3, r2
 800d578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	695b      	ldr	r3, [r3, #20]
 800d584:	4313      	orrs	r3, r2
 800d586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d592:	4313      	orrs	r3, r2
 800d594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	699b      	ldr	r3, [r3, #24]
 800d5a0:	041b      	lsls	r3, r3, #16
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a27      	ldr	r2, [pc, #156]	; (800d648 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d004      	beq.n	800d5ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a25      	ldr	r2, [pc, #148]	; (800d64c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d106      	bne.n	800d5c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	69db      	ldr	r3, [r3, #28]
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a1e      	ldr	r2, [pc, #120]	; (800d648 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d004      	beq.n	800d5dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a1d      	ldr	r2, [pc, #116]	; (800d64c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d126      	bne.n	800d62a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e6:	051b      	lsls	r3, r3, #20
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	6a1b      	ldr	r3, [r3, #32]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d604:	4313      	orrs	r3, r2
 800d606:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a0e      	ldr	r2, [pc, #56]	; (800d648 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d004      	beq.n	800d61c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a0d      	ldr	r2, [pc, #52]	; (800d64c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d106      	bne.n	800d62a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d626:	4313      	orrs	r3, r2
 800d628:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3714      	adds	r7, #20
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr
 800d648:	40010000 	.word	0x40010000
 800d64c:	40010400 	.word	0x40010400

0800d650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	e042      	b.n	800d6e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d106      	bne.n	800d67a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f7f5 f94b 	bl	8002910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2224      	movs	r2, #36	; 0x24
 800d67e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f022 0201 	bic.w	r2, r2, #1
 800d690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fcd6 	bl	800e044 <UART_SetConfig>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d101      	bne.n	800d6a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e022      	b.n	800d6e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d002      	beq.n	800d6b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f001 fb36 	bl	800ed1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d6be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	689a      	ldr	r2, [r3, #8]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d6ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f042 0201 	orr.w	r2, r2, #1
 800d6de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f001 fbbd 	bl	800ee60 <UART_CheckIdleState>
 800d6e6:	4603      	mov	r3, r0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08a      	sub	sp, #40	; 0x28
 800d6f4:	af02      	add	r7, sp, #8
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	603b      	str	r3, [r7, #0]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d706:	2b20      	cmp	r3, #32
 800d708:	f040 8083 	bne.w	800d812 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d002      	beq.n	800d718 <HAL_UART_Transmit+0x28>
 800d712:	88fb      	ldrh	r3, [r7, #6]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d101      	bne.n	800d71c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d718:	2301      	movs	r3, #1
 800d71a:	e07b      	b.n	800d814 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d722:	2b01      	cmp	r3, #1
 800d724:	d101      	bne.n	800d72a <HAL_UART_Transmit+0x3a>
 800d726:	2302      	movs	r3, #2
 800d728:	e074      	b.n	800d814 <HAL_UART_Transmit+0x124>
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2200      	movs	r2, #0
 800d736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2221      	movs	r2, #33	; 0x21
 800d73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d742:	f7f5 fc29 	bl	8002f98 <HAL_GetTick>
 800d746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	88fa      	ldrh	r2, [r7, #6]
 800d74c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	88fa      	ldrh	r2, [r7, #6]
 800d754:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d760:	d108      	bne.n	800d774 <HAL_UART_Transmit+0x84>
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	691b      	ldr	r3, [r3, #16]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d104      	bne.n	800d774 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d76a:	2300      	movs	r3, #0
 800d76c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	61bb      	str	r3, [r7, #24]
 800d772:	e003      	b.n	800d77c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d778:	2300      	movs	r3, #0
 800d77a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d784:	e02c      	b.n	800d7e0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2200      	movs	r2, #0
 800d78e:	2180      	movs	r1, #128	; 0x80
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f001 fbb0 	bl	800eef6 <UART_WaitOnFlagUntilTimeout>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d79c:	2303      	movs	r3, #3
 800d79e:	e039      	b.n	800d814 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d10b      	bne.n	800d7be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d7b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	3302      	adds	r3, #2
 800d7ba:	61bb      	str	r3, [r7, #24]
 800d7bc:	e007      	b.n	800d7ce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	781a      	ldrb	r2, [r3, #0]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d1cc      	bne.n	800d786 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	2140      	movs	r1, #64	; 0x40
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f001 fb7d 	bl	800eef6 <UART_WaitOnFlagUntilTimeout>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d001      	beq.n	800d806 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d802:	2303      	movs	r3, #3
 800d804:	e006      	b.n	800d814 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2220      	movs	r2, #32
 800d80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d80e:	2300      	movs	r3, #0
 800d810:	e000      	b.n	800d814 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d812:	2302      	movs	r3, #2
  }
}
 800d814:	4618      	mov	r0, r3
 800d816:	3720      	adds	r7, #32
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b08a      	sub	sp, #40	; 0x28
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	4613      	mov	r3, r2
 800d828:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d830:	2b20      	cmp	r3, #32
 800d832:	d142      	bne.n	800d8ba <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d002      	beq.n	800d840 <HAL_UART_Receive_IT+0x24>
 800d83a:	88fb      	ldrh	r3, [r7, #6]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d101      	bne.n	800d844 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	e03b      	b.n	800d8bc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d101      	bne.n	800d852 <HAL_UART_Receive_IT+0x36>
 800d84e:	2302      	movs	r3, #2
 800d850:	e034      	b.n	800d8bc <HAL_UART_Receive_IT+0xa0>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2201      	movs	r2, #1
 800d856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2200      	movs	r2, #0
 800d85e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a17      	ldr	r2, [pc, #92]	; (800d8c4 <HAL_UART_Receive_IT+0xa8>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d01f      	beq.n	800d8aa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d874:	2b00      	cmp	r3, #0
 800d876:	d018      	beq.n	800d8aa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	e853 3f00 	ldrex	r3, [r3]
 800d884:	613b      	str	r3, [r7, #16]
   return(result);
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d88c:	627b      	str	r3, [r7, #36]	; 0x24
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	461a      	mov	r2, r3
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	623b      	str	r3, [r7, #32]
 800d898:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89a:	69f9      	ldr	r1, [r7, #28]
 800d89c:	6a3a      	ldr	r2, [r7, #32]
 800d89e:	e841 2300 	strex	r3, r2, [r1]
 800d8a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1e6      	bne.n	800d878 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d8aa:	88fb      	ldrh	r3, [r7, #6]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	68b9      	ldr	r1, [r7, #8]
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f001 fbe9 	bl	800f088 <UART_Start_Receive_IT>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	e000      	b.n	800d8bc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d8ba:	2302      	movs	r3, #2
  }
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3728      	adds	r7, #40	; 0x28
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	58000c00 	.word	0x58000c00

0800d8c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b0ba      	sub	sp, #232	; 0xe8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	69db      	ldr	r3, [r3, #28]
 800d8d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d8ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d8f2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d8fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d900:	2b00      	cmp	r3, #0
 800d902:	d11b      	bne.n	800d93c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d908:	f003 0320 	and.w	r3, r3, #32
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d015      	beq.n	800d93c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d914:	f003 0320 	and.w	r3, r3, #32
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d105      	bne.n	800d928 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d91c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d924:	2b00      	cmp	r3, #0
 800d926:	d009      	beq.n	800d93c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f000 835a 	beq.w	800dfe6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	4798      	blx	r3
      }
      return;
 800d93a:	e354      	b.n	800dfe6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d93c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 811f 	beq.w	800db84 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d946:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d94a:	4b8b      	ldr	r3, [pc, #556]	; (800db78 <HAL_UART_IRQHandler+0x2b0>)
 800d94c:	4013      	ands	r3, r2
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d106      	bne.n	800d960 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d952:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d956:	4b89      	ldr	r3, [pc, #548]	; (800db7c <HAL_UART_IRQHandler+0x2b4>)
 800d958:	4013      	ands	r3, r2
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f000 8112 	beq.w	800db84 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d011      	beq.n	800d990 <HAL_UART_IRQHandler+0xc8>
 800d96c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00b      	beq.n	800d990 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2201      	movs	r2, #1
 800d97e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d986:	f043 0201 	orr.w	r2, r3, #1
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d994:	f003 0302 	and.w	r3, r3, #2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d011      	beq.n	800d9c0 <HAL_UART_IRQHandler+0xf8>
 800d99c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9a0:	f003 0301 	and.w	r3, r3, #1
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00b      	beq.n	800d9c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2202      	movs	r2, #2
 800d9ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9b6:	f043 0204 	orr.w	r2, r3, #4
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9c4:	f003 0304 	and.w	r3, r3, #4
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d011      	beq.n	800d9f0 <HAL_UART_IRQHandler+0x128>
 800d9cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9d0:	f003 0301 	and.w	r3, r3, #1
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00b      	beq.n	800d9f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	2204      	movs	r2, #4
 800d9de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9e6:	f043 0202 	orr.w	r2, r3, #2
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d9f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9f4:	f003 0308 	and.w	r3, r3, #8
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d017      	beq.n	800da2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d9fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da00:	f003 0320 	and.w	r3, r3, #32
 800da04:	2b00      	cmp	r3, #0
 800da06:	d105      	bne.n	800da14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800da08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800da0c:	4b5a      	ldr	r3, [pc, #360]	; (800db78 <HAL_UART_IRQHandler+0x2b0>)
 800da0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00b      	beq.n	800da2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2208      	movs	r2, #8
 800da1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da22:	f043 0208 	orr.w	r2, r3, #8
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800da2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da34:	2b00      	cmp	r3, #0
 800da36:	d012      	beq.n	800da5e <HAL_UART_IRQHandler+0x196>
 800da38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00c      	beq.n	800da5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da54:	f043 0220 	orr.w	r2, r3, #32
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 82c0 	beq.w	800dfea <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800da6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da6e:	f003 0320 	and.w	r3, r3, #32
 800da72:	2b00      	cmp	r3, #0
 800da74:	d013      	beq.n	800da9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800da76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da7a:	f003 0320 	and.w	r3, r3, #32
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d105      	bne.n	800da8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800da82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d007      	beq.n	800da9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	689b      	ldr	r3, [r3, #8]
 800daae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dab2:	2b40      	cmp	r3, #64	; 0x40
 800dab4:	d005      	beq.n	800dac2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800daba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d04f      	beq.n	800db62 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f001 fc0a 	bl	800f2dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dad2:	2b40      	cmp	r3, #64	; 0x40
 800dad4:	d141      	bne.n	800db5a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3308      	adds	r3, #8
 800dadc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dae4:	e853 3f00 	ldrex	r3, [r3]
 800dae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800daec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800daf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	3308      	adds	r3, #8
 800dafe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800db02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800db06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800db0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800db12:	e841 2300 	strex	r3, r2, [r1]
 800db16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800db1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1d9      	bne.n	800dad6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db26:	2b00      	cmp	r3, #0
 800db28:	d013      	beq.n	800db52 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db2e:	4a14      	ldr	r2, [pc, #80]	; (800db80 <HAL_UART_IRQHandler+0x2b8>)
 800db30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db36:	4618      	mov	r0, r3
 800db38:	f7f6 fcb8 	bl	80044ac <HAL_DMA_Abort_IT>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d017      	beq.n	800db72 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800db4c:	4610      	mov	r0, r2
 800db4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db50:	e00f      	b.n	800db72 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 fa60 	bl	800e018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db58:	e00b      	b.n	800db72 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 fa5c 	bl	800e018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db60:	e007      	b.n	800db72 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fa58 	bl	800e018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800db70:	e23b      	b.n	800dfea <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db72:	bf00      	nop
    return;
 800db74:	e239      	b.n	800dfea <HAL_UART_IRQHandler+0x722>
 800db76:	bf00      	nop
 800db78:	10000001 	.word	0x10000001
 800db7c:	04000120 	.word	0x04000120
 800db80:	0800f3a9 	.word	0x0800f3a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db88:	2b01      	cmp	r3, #1
 800db8a:	f040 81ce 	bne.w	800df2a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800db8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db92:	f003 0310 	and.w	r3, r3, #16
 800db96:	2b00      	cmp	r3, #0
 800db98:	f000 81c7 	beq.w	800df2a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800db9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dba0:	f003 0310 	and.w	r3, r3, #16
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f000 81c0 	beq.w	800df2a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2210      	movs	r2, #16
 800dbb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbbc:	2b40      	cmp	r3, #64	; 0x40
 800dbbe:	f040 813b 	bne.w	800de38 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a8b      	ldr	r2, [pc, #556]	; (800ddf8 <HAL_UART_IRQHandler+0x530>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d059      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a89      	ldr	r2, [pc, #548]	; (800ddfc <HAL_UART_IRQHandler+0x534>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d053      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a87      	ldr	r2, [pc, #540]	; (800de00 <HAL_UART_IRQHandler+0x538>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d04d      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a85      	ldr	r2, [pc, #532]	; (800de04 <HAL_UART_IRQHandler+0x53c>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d047      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a83      	ldr	r2, [pc, #524]	; (800de08 <HAL_UART_IRQHandler+0x540>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d041      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4a81      	ldr	r2, [pc, #516]	; (800de0c <HAL_UART_IRQHandler+0x544>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d03b      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a7f      	ldr	r2, [pc, #508]	; (800de10 <HAL_UART_IRQHandler+0x548>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d035      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a7d      	ldr	r2, [pc, #500]	; (800de14 <HAL_UART_IRQHandler+0x54c>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d02f      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a7b      	ldr	r2, [pc, #492]	; (800de18 <HAL_UART_IRQHandler+0x550>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d029      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a79      	ldr	r2, [pc, #484]	; (800de1c <HAL_UART_IRQHandler+0x554>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d023      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a77      	ldr	r2, [pc, #476]	; (800de20 <HAL_UART_IRQHandler+0x558>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d01d      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a75      	ldr	r2, [pc, #468]	; (800de24 <HAL_UART_IRQHandler+0x55c>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d017      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a73      	ldr	r2, [pc, #460]	; (800de28 <HAL_UART_IRQHandler+0x560>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d011      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a71      	ldr	r2, [pc, #452]	; (800de2c <HAL_UART_IRQHandler+0x564>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d00b      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a6f      	ldr	r2, [pc, #444]	; (800de30 <HAL_UART_IRQHandler+0x568>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d005      	beq.n	800dc82 <HAL_UART_IRQHandler+0x3ba>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a6d      	ldr	r2, [pc, #436]	; (800de34 <HAL_UART_IRQHandler+0x56c>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d105      	bne.n	800dc8e <HAL_UART_IRQHandler+0x3c6>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	e004      	b.n	800dc98 <HAL_UART_IRQHandler+0x3d0>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dc9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f000 81a4 	beq.w	800dfee <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dcac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	f080 819c 	bcs.w	800dfee <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dcbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcc4:	69db      	ldr	r3, [r3, #28]
 800dcc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcca:	f000 8086 	beq.w	800ddda <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dcda:	e853 3f00 	ldrex	r3, [r3]
 800dcde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dce6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dcea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dcf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dcfc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dd04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd08:	e841 2300 	strex	r3, r2, [r1]
 800dd0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dd10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1da      	bne.n	800dcce <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	3308      	adds	r3, #8
 800dd1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd22:	e853 3f00 	ldrex	r3, [r3]
 800dd26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dd28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd2a:	f023 0301 	bic.w	r3, r3, #1
 800dd2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	3308      	adds	r3, #8
 800dd38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dd3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dd40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dd44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dd48:	e841 2300 	strex	r3, r2, [r1]
 800dd4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dd4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d1e1      	bne.n	800dd18 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	3308      	adds	r3, #8
 800dd5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd5e:	e853 3f00 	ldrex	r3, [r3]
 800dd62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dd64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	3308      	adds	r3, #8
 800dd74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dd78:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dd7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dd7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd80:	e841 2300 	strex	r3, r2, [r1]
 800dd84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dd86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1e3      	bne.n	800dd54 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda2:	e853 3f00 	ldrex	r3, [r3]
 800dda6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dda8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddaa:	f023 0310 	bic.w	r3, r3, #16
 800ddae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ddbc:	65bb      	str	r3, [r7, #88]	; 0x58
 800ddbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ddc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ddc4:	e841 2300 	strex	r3, r2, [r1]
 800ddc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ddca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1e4      	bne.n	800dd9a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7f6 f84b 	bl	8003e70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	4619      	mov	r1, r3
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 f91c 	bl	800e02c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ddf4:	e0fb      	b.n	800dfee <HAL_UART_IRQHandler+0x726>
 800ddf6:	bf00      	nop
 800ddf8:	40020010 	.word	0x40020010
 800ddfc:	40020028 	.word	0x40020028
 800de00:	40020040 	.word	0x40020040
 800de04:	40020058 	.word	0x40020058
 800de08:	40020070 	.word	0x40020070
 800de0c:	40020088 	.word	0x40020088
 800de10:	400200a0 	.word	0x400200a0
 800de14:	400200b8 	.word	0x400200b8
 800de18:	40020410 	.word	0x40020410
 800de1c:	40020428 	.word	0x40020428
 800de20:	40020440 	.word	0x40020440
 800de24:	40020458 	.word	0x40020458
 800de28:	40020470 	.word	0x40020470
 800de2c:	40020488 	.word	0x40020488
 800de30:	400204a0 	.word	0x400204a0
 800de34:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de44:	b29b      	uxth	r3, r3
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de52:	b29b      	uxth	r3, r3
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 80cc 	beq.w	800dff2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800de5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de5e:	2b00      	cmp	r3, #0
 800de60:	f000 80c7 	beq.w	800dff2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6c:	e853 3f00 	ldrex	r3, [r3]
 800de70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	461a      	mov	r2, r3
 800de82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de86:	647b      	str	r3, [r7, #68]	; 0x44
 800de88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de8e:	e841 2300 	strex	r3, r2, [r1]
 800de92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1e4      	bne.n	800de64 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	3308      	adds	r3, #8
 800dea0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea4:	e853 3f00 	ldrex	r3, [r3]
 800dea8:	623b      	str	r3, [r7, #32]
   return(result);
 800deaa:	6a3a      	ldr	r2, [r7, #32]
 800deac:	4b54      	ldr	r3, [pc, #336]	; (800e000 <HAL_UART_IRQHandler+0x738>)
 800deae:	4013      	ands	r3, r2
 800deb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	3308      	adds	r3, #8
 800deba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800debe:	633a      	str	r2, [r7, #48]	; 0x30
 800dec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dec6:	e841 2300 	strex	r3, r2, [r1]
 800deca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800decc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1e3      	bne.n	800de9a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2220      	movs	r2, #32
 800ded6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	e853 3f00 	ldrex	r3, [r3]
 800def2:	60fb      	str	r3, [r7, #12]
   return(result);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f023 0310 	bic.w	r3, r3, #16
 800defa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	461a      	mov	r2, r3
 800df04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800df08:	61fb      	str	r3, [r7, #28]
 800df0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df0c:	69b9      	ldr	r1, [r7, #24]
 800df0e:	69fa      	ldr	r2, [r7, #28]
 800df10:	e841 2300 	strex	r3, r2, [r1]
 800df14:	617b      	str	r3, [r7, #20]
   return(result);
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d1e4      	bne.n	800dee6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800df1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800df20:	4619      	mov	r1, r3
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 f882 	bl	800e02c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df28:	e063      	b.n	800dff2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800df2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00e      	beq.n	800df54 <HAL_UART_IRQHandler+0x68c>
 800df36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d008      	beq.n	800df54 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800df4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f001 fec9 	bl	800fce4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df52:	e051      	b.n	800dff8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800df54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d014      	beq.n	800df8a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800df60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d105      	bne.n	800df78 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800df6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df74:	2b00      	cmp	r3, #0
 800df76:	d008      	beq.n	800df8a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d03a      	beq.n	800dff6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	4798      	blx	r3
    }
    return;
 800df88:	e035      	b.n	800dff6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800df8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df92:	2b00      	cmp	r3, #0
 800df94:	d009      	beq.n	800dfaa <HAL_UART_IRQHandler+0x6e2>
 800df96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d003      	beq.n	800dfaa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f001 fa16 	bl	800f3d4 <UART_EndTransmit_IT>
    return;
 800dfa8:	e026      	b.n	800dff8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dfaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d009      	beq.n	800dfca <HAL_UART_IRQHandler+0x702>
 800dfb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d003      	beq.n	800dfca <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f001 fea2 	bl	800fd0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dfc8:	e016      	b.n	800dff8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dfca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d010      	beq.n	800dff8 <HAL_UART_IRQHandler+0x730>
 800dfd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	da0c      	bge.n	800dff8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f001 fe8a 	bl	800fcf8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dfe4:	e008      	b.n	800dff8 <HAL_UART_IRQHandler+0x730>
      return;
 800dfe6:	bf00      	nop
 800dfe8:	e006      	b.n	800dff8 <HAL_UART_IRQHandler+0x730>
    return;
 800dfea:	bf00      	nop
 800dfec:	e004      	b.n	800dff8 <HAL_UART_IRQHandler+0x730>
      return;
 800dfee:	bf00      	nop
 800dff0:	e002      	b.n	800dff8 <HAL_UART_IRQHandler+0x730>
      return;
 800dff2:	bf00      	nop
 800dff4:	e000      	b.n	800dff8 <HAL_UART_IRQHandler+0x730>
    return;
 800dff6:	bf00      	nop
  }
}
 800dff8:	37e8      	adds	r7, #232	; 0xe8
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	effffffe 	.word	0xeffffffe

0800e004 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e00c:	bf00      	nop
 800e00e:	370c      	adds	r7, #12
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e020:	bf00      	nop
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	460b      	mov	r3, r1
 800e036:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e048:	b092      	sub	sp, #72	; 0x48
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	689a      	ldr	r2, [r3, #8]
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	431a      	orrs	r2, r3
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	695b      	ldr	r3, [r3, #20]
 800e062:	431a      	orrs	r2, r3
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	69db      	ldr	r3, [r3, #28]
 800e068:	4313      	orrs	r3, r2
 800e06a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	4bbe      	ldr	r3, [pc, #760]	; (800e36c <UART_SetConfig+0x328>)
 800e074:	4013      	ands	r3, r2
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	6812      	ldr	r2, [r2, #0]
 800e07a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e07c:	430b      	orrs	r3, r1
 800e07e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	68da      	ldr	r2, [r3, #12]
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	430a      	orrs	r2, r1
 800e094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	699b      	ldr	r3, [r3, #24]
 800e09a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4ab3      	ldr	r2, [pc, #716]	; (800e370 <UART_SetConfig+0x32c>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d004      	beq.n	800e0b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	6a1b      	ldr	r3, [r3, #32]
 800e0aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	689a      	ldr	r2, [r3, #8]
 800e0b6:	4baf      	ldr	r3, [pc, #700]	; (800e374 <UART_SetConfig+0x330>)
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	697a      	ldr	r2, [r7, #20]
 800e0bc:	6812      	ldr	r2, [r2, #0]
 800e0be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0c0:	430b      	orrs	r3, r1
 800e0c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ca:	f023 010f 	bic.w	r1, r3, #15
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	430a      	orrs	r2, r1
 800e0d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	4aa6      	ldr	r2, [pc, #664]	; (800e378 <UART_SetConfig+0x334>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d177      	bne.n	800e1d4 <UART_SetConfig+0x190>
 800e0e4:	4ba5      	ldr	r3, [pc, #660]	; (800e37c <UART_SetConfig+0x338>)
 800e0e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0ec:	2b28      	cmp	r3, #40	; 0x28
 800e0ee:	d86d      	bhi.n	800e1cc <UART_SetConfig+0x188>
 800e0f0:	a201      	add	r2, pc, #4	; (adr r2, 800e0f8 <UART_SetConfig+0xb4>)
 800e0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f6:	bf00      	nop
 800e0f8:	0800e19d 	.word	0x0800e19d
 800e0fc:	0800e1cd 	.word	0x0800e1cd
 800e100:	0800e1cd 	.word	0x0800e1cd
 800e104:	0800e1cd 	.word	0x0800e1cd
 800e108:	0800e1cd 	.word	0x0800e1cd
 800e10c:	0800e1cd 	.word	0x0800e1cd
 800e110:	0800e1cd 	.word	0x0800e1cd
 800e114:	0800e1cd 	.word	0x0800e1cd
 800e118:	0800e1a5 	.word	0x0800e1a5
 800e11c:	0800e1cd 	.word	0x0800e1cd
 800e120:	0800e1cd 	.word	0x0800e1cd
 800e124:	0800e1cd 	.word	0x0800e1cd
 800e128:	0800e1cd 	.word	0x0800e1cd
 800e12c:	0800e1cd 	.word	0x0800e1cd
 800e130:	0800e1cd 	.word	0x0800e1cd
 800e134:	0800e1cd 	.word	0x0800e1cd
 800e138:	0800e1ad 	.word	0x0800e1ad
 800e13c:	0800e1cd 	.word	0x0800e1cd
 800e140:	0800e1cd 	.word	0x0800e1cd
 800e144:	0800e1cd 	.word	0x0800e1cd
 800e148:	0800e1cd 	.word	0x0800e1cd
 800e14c:	0800e1cd 	.word	0x0800e1cd
 800e150:	0800e1cd 	.word	0x0800e1cd
 800e154:	0800e1cd 	.word	0x0800e1cd
 800e158:	0800e1b5 	.word	0x0800e1b5
 800e15c:	0800e1cd 	.word	0x0800e1cd
 800e160:	0800e1cd 	.word	0x0800e1cd
 800e164:	0800e1cd 	.word	0x0800e1cd
 800e168:	0800e1cd 	.word	0x0800e1cd
 800e16c:	0800e1cd 	.word	0x0800e1cd
 800e170:	0800e1cd 	.word	0x0800e1cd
 800e174:	0800e1cd 	.word	0x0800e1cd
 800e178:	0800e1bd 	.word	0x0800e1bd
 800e17c:	0800e1cd 	.word	0x0800e1cd
 800e180:	0800e1cd 	.word	0x0800e1cd
 800e184:	0800e1cd 	.word	0x0800e1cd
 800e188:	0800e1cd 	.word	0x0800e1cd
 800e18c:	0800e1cd 	.word	0x0800e1cd
 800e190:	0800e1cd 	.word	0x0800e1cd
 800e194:	0800e1cd 	.word	0x0800e1cd
 800e198:	0800e1c5 	.word	0x0800e1c5
 800e19c:	2301      	movs	r3, #1
 800e19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a2:	e326      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e1a4:	2304      	movs	r3, #4
 800e1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1aa:	e322      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e1ac:	2308      	movs	r3, #8
 800e1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1b2:	e31e      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e1b4:	2310      	movs	r3, #16
 800e1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ba:	e31a      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e1bc:	2320      	movs	r3, #32
 800e1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c2:	e316      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e1c4:	2340      	movs	r3, #64	; 0x40
 800e1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ca:	e312      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e1cc:	2380      	movs	r3, #128	; 0x80
 800e1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d2:	e30e      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a69      	ldr	r2, [pc, #420]	; (800e380 <UART_SetConfig+0x33c>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d130      	bne.n	800e240 <UART_SetConfig+0x1fc>
 800e1de:	4b67      	ldr	r3, [pc, #412]	; (800e37c <UART_SetConfig+0x338>)
 800e1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1e2:	f003 0307 	and.w	r3, r3, #7
 800e1e6:	2b05      	cmp	r3, #5
 800e1e8:	d826      	bhi.n	800e238 <UART_SetConfig+0x1f4>
 800e1ea:	a201      	add	r2, pc, #4	; (adr r2, 800e1f0 <UART_SetConfig+0x1ac>)
 800e1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f0:	0800e209 	.word	0x0800e209
 800e1f4:	0800e211 	.word	0x0800e211
 800e1f8:	0800e219 	.word	0x0800e219
 800e1fc:	0800e221 	.word	0x0800e221
 800e200:	0800e229 	.word	0x0800e229
 800e204:	0800e231 	.word	0x0800e231
 800e208:	2300      	movs	r3, #0
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20e:	e2f0      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e210:	2304      	movs	r3, #4
 800e212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e216:	e2ec      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e218:	2308      	movs	r3, #8
 800e21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e21e:	e2e8      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e220:	2310      	movs	r3, #16
 800e222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e226:	e2e4      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e228:	2320      	movs	r3, #32
 800e22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e22e:	e2e0      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e230:	2340      	movs	r3, #64	; 0x40
 800e232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e236:	e2dc      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e238:	2380      	movs	r3, #128	; 0x80
 800e23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23e:	e2d8      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a4f      	ldr	r2, [pc, #316]	; (800e384 <UART_SetConfig+0x340>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d130      	bne.n	800e2ac <UART_SetConfig+0x268>
 800e24a:	4b4c      	ldr	r3, [pc, #304]	; (800e37c <UART_SetConfig+0x338>)
 800e24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e24e:	f003 0307 	and.w	r3, r3, #7
 800e252:	2b05      	cmp	r3, #5
 800e254:	d826      	bhi.n	800e2a4 <UART_SetConfig+0x260>
 800e256:	a201      	add	r2, pc, #4	; (adr r2, 800e25c <UART_SetConfig+0x218>)
 800e258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25c:	0800e275 	.word	0x0800e275
 800e260:	0800e27d 	.word	0x0800e27d
 800e264:	0800e285 	.word	0x0800e285
 800e268:	0800e28d 	.word	0x0800e28d
 800e26c:	0800e295 	.word	0x0800e295
 800e270:	0800e29d 	.word	0x0800e29d
 800e274:	2300      	movs	r3, #0
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27a:	e2ba      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e27c:	2304      	movs	r3, #4
 800e27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e282:	e2b6      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e284:	2308      	movs	r3, #8
 800e286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28a:	e2b2      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e28c:	2310      	movs	r3, #16
 800e28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e292:	e2ae      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e294:	2320      	movs	r3, #32
 800e296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29a:	e2aa      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e29c:	2340      	movs	r3, #64	; 0x40
 800e29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a2:	e2a6      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e2a4:	2380      	movs	r3, #128	; 0x80
 800e2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2aa:	e2a2      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a35      	ldr	r2, [pc, #212]	; (800e388 <UART_SetConfig+0x344>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d130      	bne.n	800e318 <UART_SetConfig+0x2d4>
 800e2b6:	4b31      	ldr	r3, [pc, #196]	; (800e37c <UART_SetConfig+0x338>)
 800e2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ba:	f003 0307 	and.w	r3, r3, #7
 800e2be:	2b05      	cmp	r3, #5
 800e2c0:	d826      	bhi.n	800e310 <UART_SetConfig+0x2cc>
 800e2c2:	a201      	add	r2, pc, #4	; (adr r2, 800e2c8 <UART_SetConfig+0x284>)
 800e2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c8:	0800e2e1 	.word	0x0800e2e1
 800e2cc:	0800e2e9 	.word	0x0800e2e9
 800e2d0:	0800e2f1 	.word	0x0800e2f1
 800e2d4:	0800e2f9 	.word	0x0800e2f9
 800e2d8:	0800e301 	.word	0x0800e301
 800e2dc:	0800e309 	.word	0x0800e309
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e6:	e284      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e2e8:	2304      	movs	r3, #4
 800e2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ee:	e280      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e2f0:	2308      	movs	r3, #8
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f6:	e27c      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e2f8:	2310      	movs	r3, #16
 800e2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fe:	e278      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e300:	2320      	movs	r3, #32
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e306:	e274      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e308:	2340      	movs	r3, #64	; 0x40
 800e30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30e:	e270      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e310:	2380      	movs	r3, #128	; 0x80
 800e312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e316:	e26c      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a1b      	ldr	r2, [pc, #108]	; (800e38c <UART_SetConfig+0x348>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d142      	bne.n	800e3a8 <UART_SetConfig+0x364>
 800e322:	4b16      	ldr	r3, [pc, #88]	; (800e37c <UART_SetConfig+0x338>)
 800e324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e326:	f003 0307 	and.w	r3, r3, #7
 800e32a:	2b05      	cmp	r3, #5
 800e32c:	d838      	bhi.n	800e3a0 <UART_SetConfig+0x35c>
 800e32e:	a201      	add	r2, pc, #4	; (adr r2, 800e334 <UART_SetConfig+0x2f0>)
 800e330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e334:	0800e34d 	.word	0x0800e34d
 800e338:	0800e355 	.word	0x0800e355
 800e33c:	0800e35d 	.word	0x0800e35d
 800e340:	0800e365 	.word	0x0800e365
 800e344:	0800e391 	.word	0x0800e391
 800e348:	0800e399 	.word	0x0800e399
 800e34c:	2300      	movs	r3, #0
 800e34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e352:	e24e      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e354:	2304      	movs	r3, #4
 800e356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35a:	e24a      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e35c:	2308      	movs	r3, #8
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e362:	e246      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e364:	2310      	movs	r3, #16
 800e366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36a:	e242      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e36c:	cfff69f3 	.word	0xcfff69f3
 800e370:	58000c00 	.word	0x58000c00
 800e374:	11fff4ff 	.word	0x11fff4ff
 800e378:	40011000 	.word	0x40011000
 800e37c:	58024400 	.word	0x58024400
 800e380:	40004400 	.word	0x40004400
 800e384:	40004800 	.word	0x40004800
 800e388:	40004c00 	.word	0x40004c00
 800e38c:	40005000 	.word	0x40005000
 800e390:	2320      	movs	r3, #32
 800e392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e396:	e22c      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e398:	2340      	movs	r3, #64	; 0x40
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39e:	e228      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e3a0:	2380      	movs	r3, #128	; 0x80
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e224      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4ab1      	ldr	r2, [pc, #708]	; (800e674 <UART_SetConfig+0x630>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d176      	bne.n	800e4a0 <UART_SetConfig+0x45c>
 800e3b2:	4bb1      	ldr	r3, [pc, #708]	; (800e678 <UART_SetConfig+0x634>)
 800e3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3ba:	2b28      	cmp	r3, #40	; 0x28
 800e3bc:	d86c      	bhi.n	800e498 <UART_SetConfig+0x454>
 800e3be:	a201      	add	r2, pc, #4	; (adr r2, 800e3c4 <UART_SetConfig+0x380>)
 800e3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c4:	0800e469 	.word	0x0800e469
 800e3c8:	0800e499 	.word	0x0800e499
 800e3cc:	0800e499 	.word	0x0800e499
 800e3d0:	0800e499 	.word	0x0800e499
 800e3d4:	0800e499 	.word	0x0800e499
 800e3d8:	0800e499 	.word	0x0800e499
 800e3dc:	0800e499 	.word	0x0800e499
 800e3e0:	0800e499 	.word	0x0800e499
 800e3e4:	0800e471 	.word	0x0800e471
 800e3e8:	0800e499 	.word	0x0800e499
 800e3ec:	0800e499 	.word	0x0800e499
 800e3f0:	0800e499 	.word	0x0800e499
 800e3f4:	0800e499 	.word	0x0800e499
 800e3f8:	0800e499 	.word	0x0800e499
 800e3fc:	0800e499 	.word	0x0800e499
 800e400:	0800e499 	.word	0x0800e499
 800e404:	0800e479 	.word	0x0800e479
 800e408:	0800e499 	.word	0x0800e499
 800e40c:	0800e499 	.word	0x0800e499
 800e410:	0800e499 	.word	0x0800e499
 800e414:	0800e499 	.word	0x0800e499
 800e418:	0800e499 	.word	0x0800e499
 800e41c:	0800e499 	.word	0x0800e499
 800e420:	0800e499 	.word	0x0800e499
 800e424:	0800e481 	.word	0x0800e481
 800e428:	0800e499 	.word	0x0800e499
 800e42c:	0800e499 	.word	0x0800e499
 800e430:	0800e499 	.word	0x0800e499
 800e434:	0800e499 	.word	0x0800e499
 800e438:	0800e499 	.word	0x0800e499
 800e43c:	0800e499 	.word	0x0800e499
 800e440:	0800e499 	.word	0x0800e499
 800e444:	0800e489 	.word	0x0800e489
 800e448:	0800e499 	.word	0x0800e499
 800e44c:	0800e499 	.word	0x0800e499
 800e450:	0800e499 	.word	0x0800e499
 800e454:	0800e499 	.word	0x0800e499
 800e458:	0800e499 	.word	0x0800e499
 800e45c:	0800e499 	.word	0x0800e499
 800e460:	0800e499 	.word	0x0800e499
 800e464:	0800e491 	.word	0x0800e491
 800e468:	2301      	movs	r3, #1
 800e46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46e:	e1c0      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e470:	2304      	movs	r3, #4
 800e472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e476:	e1bc      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e478:	2308      	movs	r3, #8
 800e47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e47e:	e1b8      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e480:	2310      	movs	r3, #16
 800e482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e486:	e1b4      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e488:	2320      	movs	r3, #32
 800e48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48e:	e1b0      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e490:	2340      	movs	r3, #64	; 0x40
 800e492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e496:	e1ac      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e498:	2380      	movs	r3, #128	; 0x80
 800e49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49e:	e1a8      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4a75      	ldr	r2, [pc, #468]	; (800e67c <UART_SetConfig+0x638>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d130      	bne.n	800e50c <UART_SetConfig+0x4c8>
 800e4aa:	4b73      	ldr	r3, [pc, #460]	; (800e678 <UART_SetConfig+0x634>)
 800e4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ae:	f003 0307 	and.w	r3, r3, #7
 800e4b2:	2b05      	cmp	r3, #5
 800e4b4:	d826      	bhi.n	800e504 <UART_SetConfig+0x4c0>
 800e4b6:	a201      	add	r2, pc, #4	; (adr r2, 800e4bc <UART_SetConfig+0x478>)
 800e4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4bc:	0800e4d5 	.word	0x0800e4d5
 800e4c0:	0800e4dd 	.word	0x0800e4dd
 800e4c4:	0800e4e5 	.word	0x0800e4e5
 800e4c8:	0800e4ed 	.word	0x0800e4ed
 800e4cc:	0800e4f5 	.word	0x0800e4f5
 800e4d0:	0800e4fd 	.word	0x0800e4fd
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4da:	e18a      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e4dc:	2304      	movs	r3, #4
 800e4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e2:	e186      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e4e4:	2308      	movs	r3, #8
 800e4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ea:	e182      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e4ec:	2310      	movs	r3, #16
 800e4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f2:	e17e      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e4f4:	2320      	movs	r3, #32
 800e4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fa:	e17a      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e4fc:	2340      	movs	r3, #64	; 0x40
 800e4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e502:	e176      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e504:	2380      	movs	r3, #128	; 0x80
 800e506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50a:	e172      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a5b      	ldr	r2, [pc, #364]	; (800e680 <UART_SetConfig+0x63c>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d130      	bne.n	800e578 <UART_SetConfig+0x534>
 800e516:	4b58      	ldr	r3, [pc, #352]	; (800e678 <UART_SetConfig+0x634>)
 800e518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e51a:	f003 0307 	and.w	r3, r3, #7
 800e51e:	2b05      	cmp	r3, #5
 800e520:	d826      	bhi.n	800e570 <UART_SetConfig+0x52c>
 800e522:	a201      	add	r2, pc, #4	; (adr r2, 800e528 <UART_SetConfig+0x4e4>)
 800e524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e528:	0800e541 	.word	0x0800e541
 800e52c:	0800e549 	.word	0x0800e549
 800e530:	0800e551 	.word	0x0800e551
 800e534:	0800e559 	.word	0x0800e559
 800e538:	0800e561 	.word	0x0800e561
 800e53c:	0800e569 	.word	0x0800e569
 800e540:	2300      	movs	r3, #0
 800e542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e546:	e154      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e548:	2304      	movs	r3, #4
 800e54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54e:	e150      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e550:	2308      	movs	r3, #8
 800e552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e556:	e14c      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e558:	2310      	movs	r3, #16
 800e55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e55e:	e148      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e560:	2320      	movs	r3, #32
 800e562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e566:	e144      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e568:	2340      	movs	r3, #64	; 0x40
 800e56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e56e:	e140      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e570:	2380      	movs	r3, #128	; 0x80
 800e572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e576:	e13c      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a41      	ldr	r2, [pc, #260]	; (800e684 <UART_SetConfig+0x640>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	f040 8082 	bne.w	800e688 <UART_SetConfig+0x644>
 800e584:	4b3c      	ldr	r3, [pc, #240]	; (800e678 <UART_SetConfig+0x634>)
 800e586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e58c:	2b28      	cmp	r3, #40	; 0x28
 800e58e:	d86d      	bhi.n	800e66c <UART_SetConfig+0x628>
 800e590:	a201      	add	r2, pc, #4	; (adr r2, 800e598 <UART_SetConfig+0x554>)
 800e592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e596:	bf00      	nop
 800e598:	0800e63d 	.word	0x0800e63d
 800e59c:	0800e66d 	.word	0x0800e66d
 800e5a0:	0800e66d 	.word	0x0800e66d
 800e5a4:	0800e66d 	.word	0x0800e66d
 800e5a8:	0800e66d 	.word	0x0800e66d
 800e5ac:	0800e66d 	.word	0x0800e66d
 800e5b0:	0800e66d 	.word	0x0800e66d
 800e5b4:	0800e66d 	.word	0x0800e66d
 800e5b8:	0800e645 	.word	0x0800e645
 800e5bc:	0800e66d 	.word	0x0800e66d
 800e5c0:	0800e66d 	.word	0x0800e66d
 800e5c4:	0800e66d 	.word	0x0800e66d
 800e5c8:	0800e66d 	.word	0x0800e66d
 800e5cc:	0800e66d 	.word	0x0800e66d
 800e5d0:	0800e66d 	.word	0x0800e66d
 800e5d4:	0800e66d 	.word	0x0800e66d
 800e5d8:	0800e64d 	.word	0x0800e64d
 800e5dc:	0800e66d 	.word	0x0800e66d
 800e5e0:	0800e66d 	.word	0x0800e66d
 800e5e4:	0800e66d 	.word	0x0800e66d
 800e5e8:	0800e66d 	.word	0x0800e66d
 800e5ec:	0800e66d 	.word	0x0800e66d
 800e5f0:	0800e66d 	.word	0x0800e66d
 800e5f4:	0800e66d 	.word	0x0800e66d
 800e5f8:	0800e655 	.word	0x0800e655
 800e5fc:	0800e66d 	.word	0x0800e66d
 800e600:	0800e66d 	.word	0x0800e66d
 800e604:	0800e66d 	.word	0x0800e66d
 800e608:	0800e66d 	.word	0x0800e66d
 800e60c:	0800e66d 	.word	0x0800e66d
 800e610:	0800e66d 	.word	0x0800e66d
 800e614:	0800e66d 	.word	0x0800e66d
 800e618:	0800e65d 	.word	0x0800e65d
 800e61c:	0800e66d 	.word	0x0800e66d
 800e620:	0800e66d 	.word	0x0800e66d
 800e624:	0800e66d 	.word	0x0800e66d
 800e628:	0800e66d 	.word	0x0800e66d
 800e62c:	0800e66d 	.word	0x0800e66d
 800e630:	0800e66d 	.word	0x0800e66d
 800e634:	0800e66d 	.word	0x0800e66d
 800e638:	0800e665 	.word	0x0800e665
 800e63c:	2301      	movs	r3, #1
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e642:	e0d6      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e644:	2304      	movs	r3, #4
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64a:	e0d2      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e64c:	2308      	movs	r3, #8
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e652:	e0ce      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e654:	2310      	movs	r3, #16
 800e656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65a:	e0ca      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e65c:	2320      	movs	r3, #32
 800e65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e662:	e0c6      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e664:	2340      	movs	r3, #64	; 0x40
 800e666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66a:	e0c2      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e66c:	2380      	movs	r3, #128	; 0x80
 800e66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e672:	e0be      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e674:	40011400 	.word	0x40011400
 800e678:	58024400 	.word	0x58024400
 800e67c:	40007800 	.word	0x40007800
 800e680:	40007c00 	.word	0x40007c00
 800e684:	40011800 	.word	0x40011800
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4aad      	ldr	r2, [pc, #692]	; (800e944 <UART_SetConfig+0x900>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d176      	bne.n	800e780 <UART_SetConfig+0x73c>
 800e692:	4bad      	ldr	r3, [pc, #692]	; (800e948 <UART_SetConfig+0x904>)
 800e694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e69a:	2b28      	cmp	r3, #40	; 0x28
 800e69c:	d86c      	bhi.n	800e778 <UART_SetConfig+0x734>
 800e69e:	a201      	add	r2, pc, #4	; (adr r2, 800e6a4 <UART_SetConfig+0x660>)
 800e6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a4:	0800e749 	.word	0x0800e749
 800e6a8:	0800e779 	.word	0x0800e779
 800e6ac:	0800e779 	.word	0x0800e779
 800e6b0:	0800e779 	.word	0x0800e779
 800e6b4:	0800e779 	.word	0x0800e779
 800e6b8:	0800e779 	.word	0x0800e779
 800e6bc:	0800e779 	.word	0x0800e779
 800e6c0:	0800e779 	.word	0x0800e779
 800e6c4:	0800e751 	.word	0x0800e751
 800e6c8:	0800e779 	.word	0x0800e779
 800e6cc:	0800e779 	.word	0x0800e779
 800e6d0:	0800e779 	.word	0x0800e779
 800e6d4:	0800e779 	.word	0x0800e779
 800e6d8:	0800e779 	.word	0x0800e779
 800e6dc:	0800e779 	.word	0x0800e779
 800e6e0:	0800e779 	.word	0x0800e779
 800e6e4:	0800e759 	.word	0x0800e759
 800e6e8:	0800e779 	.word	0x0800e779
 800e6ec:	0800e779 	.word	0x0800e779
 800e6f0:	0800e779 	.word	0x0800e779
 800e6f4:	0800e779 	.word	0x0800e779
 800e6f8:	0800e779 	.word	0x0800e779
 800e6fc:	0800e779 	.word	0x0800e779
 800e700:	0800e779 	.word	0x0800e779
 800e704:	0800e761 	.word	0x0800e761
 800e708:	0800e779 	.word	0x0800e779
 800e70c:	0800e779 	.word	0x0800e779
 800e710:	0800e779 	.word	0x0800e779
 800e714:	0800e779 	.word	0x0800e779
 800e718:	0800e779 	.word	0x0800e779
 800e71c:	0800e779 	.word	0x0800e779
 800e720:	0800e779 	.word	0x0800e779
 800e724:	0800e769 	.word	0x0800e769
 800e728:	0800e779 	.word	0x0800e779
 800e72c:	0800e779 	.word	0x0800e779
 800e730:	0800e779 	.word	0x0800e779
 800e734:	0800e779 	.word	0x0800e779
 800e738:	0800e779 	.word	0x0800e779
 800e73c:	0800e779 	.word	0x0800e779
 800e740:	0800e779 	.word	0x0800e779
 800e744:	0800e771 	.word	0x0800e771
 800e748:	2301      	movs	r3, #1
 800e74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74e:	e050      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e750:	2304      	movs	r3, #4
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e756:	e04c      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e758:	2308      	movs	r3, #8
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75e:	e048      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e760:	2310      	movs	r3, #16
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e766:	e044      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e768:	2320      	movs	r3, #32
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76e:	e040      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e770:	2340      	movs	r3, #64	; 0x40
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e03c      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e778:	2380      	movs	r3, #128	; 0x80
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77e:	e038      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a71      	ldr	r2, [pc, #452]	; (800e94c <UART_SetConfig+0x908>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d130      	bne.n	800e7ec <UART_SetConfig+0x7a8>
 800e78a:	4b6f      	ldr	r3, [pc, #444]	; (800e948 <UART_SetConfig+0x904>)
 800e78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e78e:	f003 0307 	and.w	r3, r3, #7
 800e792:	2b05      	cmp	r3, #5
 800e794:	d826      	bhi.n	800e7e4 <UART_SetConfig+0x7a0>
 800e796:	a201      	add	r2, pc, #4	; (adr r2, 800e79c <UART_SetConfig+0x758>)
 800e798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e79c:	0800e7b5 	.word	0x0800e7b5
 800e7a0:	0800e7bd 	.word	0x0800e7bd
 800e7a4:	0800e7c5 	.word	0x0800e7c5
 800e7a8:	0800e7cd 	.word	0x0800e7cd
 800e7ac:	0800e7d5 	.word	0x0800e7d5
 800e7b0:	0800e7dd 	.word	0x0800e7dd
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ba:	e01a      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e7bc:	2304      	movs	r3, #4
 800e7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c2:	e016      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e7c4:	2308      	movs	r3, #8
 800e7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ca:	e012      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e7cc:	2310      	movs	r3, #16
 800e7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d2:	e00e      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e7d4:	2320      	movs	r3, #32
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7da:	e00a      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e7dc:	2340      	movs	r3, #64	; 0x40
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e2:	e006      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e7e4:	2380      	movs	r3, #128	; 0x80
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ea:	e002      	b.n	800e7f2 <UART_SetConfig+0x7ae>
 800e7ec:	2380      	movs	r3, #128	; 0x80
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a55      	ldr	r2, [pc, #340]	; (800e94c <UART_SetConfig+0x908>)
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	f040 80f8 	bne.w	800e9ee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e7fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e802:	2b20      	cmp	r3, #32
 800e804:	dc46      	bgt.n	800e894 <UART_SetConfig+0x850>
 800e806:	2b02      	cmp	r3, #2
 800e808:	db75      	blt.n	800e8f6 <UART_SetConfig+0x8b2>
 800e80a:	3b02      	subs	r3, #2
 800e80c:	2b1e      	cmp	r3, #30
 800e80e:	d872      	bhi.n	800e8f6 <UART_SetConfig+0x8b2>
 800e810:	a201      	add	r2, pc, #4	; (adr r2, 800e818 <UART_SetConfig+0x7d4>)
 800e812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e816:	bf00      	nop
 800e818:	0800e89b 	.word	0x0800e89b
 800e81c:	0800e8f7 	.word	0x0800e8f7
 800e820:	0800e8a3 	.word	0x0800e8a3
 800e824:	0800e8f7 	.word	0x0800e8f7
 800e828:	0800e8f7 	.word	0x0800e8f7
 800e82c:	0800e8f7 	.word	0x0800e8f7
 800e830:	0800e8b3 	.word	0x0800e8b3
 800e834:	0800e8f7 	.word	0x0800e8f7
 800e838:	0800e8f7 	.word	0x0800e8f7
 800e83c:	0800e8f7 	.word	0x0800e8f7
 800e840:	0800e8f7 	.word	0x0800e8f7
 800e844:	0800e8f7 	.word	0x0800e8f7
 800e848:	0800e8f7 	.word	0x0800e8f7
 800e84c:	0800e8f7 	.word	0x0800e8f7
 800e850:	0800e8c3 	.word	0x0800e8c3
 800e854:	0800e8f7 	.word	0x0800e8f7
 800e858:	0800e8f7 	.word	0x0800e8f7
 800e85c:	0800e8f7 	.word	0x0800e8f7
 800e860:	0800e8f7 	.word	0x0800e8f7
 800e864:	0800e8f7 	.word	0x0800e8f7
 800e868:	0800e8f7 	.word	0x0800e8f7
 800e86c:	0800e8f7 	.word	0x0800e8f7
 800e870:	0800e8f7 	.word	0x0800e8f7
 800e874:	0800e8f7 	.word	0x0800e8f7
 800e878:	0800e8f7 	.word	0x0800e8f7
 800e87c:	0800e8f7 	.word	0x0800e8f7
 800e880:	0800e8f7 	.word	0x0800e8f7
 800e884:	0800e8f7 	.word	0x0800e8f7
 800e888:	0800e8f7 	.word	0x0800e8f7
 800e88c:	0800e8f7 	.word	0x0800e8f7
 800e890:	0800e8e9 	.word	0x0800e8e9
 800e894:	2b40      	cmp	r3, #64	; 0x40
 800e896:	d02a      	beq.n	800e8ee <UART_SetConfig+0x8aa>
 800e898:	e02d      	b.n	800e8f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e89a:	f7fa f8c5 	bl	8008a28 <HAL_RCCEx_GetD3PCLK1Freq>
 800e89e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8a0:	e02f      	b.n	800e902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fa f8d4 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8b0:	e027      	b.n	800e902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8b2:	f107 0318 	add.w	r3, r7, #24
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fa fa20 	bl	8008cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8c0:	e01f      	b.n	800e902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8c2:	4b21      	ldr	r3, [pc, #132]	; (800e948 <UART_SetConfig+0x904>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f003 0320 	and.w	r3, r3, #32
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d009      	beq.n	800e8e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8ce:	4b1e      	ldr	r3, [pc, #120]	; (800e948 <UART_SetConfig+0x904>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	08db      	lsrs	r3, r3, #3
 800e8d4:	f003 0303 	and.w	r3, r3, #3
 800e8d8:	4a1d      	ldr	r2, [pc, #116]	; (800e950 <UART_SetConfig+0x90c>)
 800e8da:	fa22 f303 	lsr.w	r3, r2, r3
 800e8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8e0:	e00f      	b.n	800e902 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e8e2:	4b1b      	ldr	r3, [pc, #108]	; (800e950 <UART_SetConfig+0x90c>)
 800e8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8e6:	e00c      	b.n	800e902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8e8:	4b1a      	ldr	r3, [pc, #104]	; (800e954 <UART_SetConfig+0x910>)
 800e8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8ec:	e009      	b.n	800e902 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8f4:	e005      	b.n	800e902 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e900:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e904:	2b00      	cmp	r3, #0
 800e906:	f000 81ee 	beq.w	800ece6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90e:	4a12      	ldr	r2, [pc, #72]	; (800e958 <UART_SetConfig+0x914>)
 800e910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e914:	461a      	mov	r2, r3
 800e916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e918:	fbb3 f3f2 	udiv	r3, r3, r2
 800e91c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	685a      	ldr	r2, [r3, #4]
 800e922:	4613      	mov	r3, r2
 800e924:	005b      	lsls	r3, r3, #1
 800e926:	4413      	add	r3, r2
 800e928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d305      	bcc.n	800e93a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e936:	429a      	cmp	r2, r3
 800e938:	d910      	bls.n	800e95c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e93a:	2301      	movs	r3, #1
 800e93c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e940:	e1d1      	b.n	800ece6 <UART_SetConfig+0xca2>
 800e942:	bf00      	nop
 800e944:	40011c00 	.word	0x40011c00
 800e948:	58024400 	.word	0x58024400
 800e94c:	58000c00 	.word	0x58000c00
 800e950:	03d09000 	.word	0x03d09000
 800e954:	003d0900 	.word	0x003d0900
 800e958:	0801248c 	.word	0x0801248c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e95e:	2200      	movs	r2, #0
 800e960:	60bb      	str	r3, [r7, #8]
 800e962:	60fa      	str	r2, [r7, #12]
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e968:	4ac0      	ldr	r2, [pc, #768]	; (800ec6c <UART_SetConfig+0xc28>)
 800e96a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e96e:	b29b      	uxth	r3, r3
 800e970:	2200      	movs	r2, #0
 800e972:	603b      	str	r3, [r7, #0]
 800e974:	607a      	str	r2, [r7, #4]
 800e976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e97a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e97e:	f7f1 fd07 	bl	8000390 <__aeabi_uldivmod>
 800e982:	4602      	mov	r2, r0
 800e984:	460b      	mov	r3, r1
 800e986:	4610      	mov	r0, r2
 800e988:	4619      	mov	r1, r3
 800e98a:	f04f 0200 	mov.w	r2, #0
 800e98e:	f04f 0300 	mov.w	r3, #0
 800e992:	020b      	lsls	r3, r1, #8
 800e994:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e998:	0202      	lsls	r2, r0, #8
 800e99a:	6979      	ldr	r1, [r7, #20]
 800e99c:	6849      	ldr	r1, [r1, #4]
 800e99e:	0849      	lsrs	r1, r1, #1
 800e9a0:	2000      	movs	r0, #0
 800e9a2:	460c      	mov	r4, r1
 800e9a4:	4605      	mov	r5, r0
 800e9a6:	eb12 0804 	adds.w	r8, r2, r4
 800e9aa:	eb43 0905 	adc.w	r9, r3, r5
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	469a      	mov	sl, r3
 800e9b6:	4693      	mov	fp, r2
 800e9b8:	4652      	mov	r2, sl
 800e9ba:	465b      	mov	r3, fp
 800e9bc:	4640      	mov	r0, r8
 800e9be:	4649      	mov	r1, r9
 800e9c0:	f7f1 fce6 	bl	8000390 <__aeabi_uldivmod>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9d2:	d308      	bcc.n	800e9e6 <UART_SetConfig+0x9a2>
 800e9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9da:	d204      	bcs.n	800e9e6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9e2:	60da      	str	r2, [r3, #12]
 800e9e4:	e17f      	b.n	800ece6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9ec:	e17b      	b.n	800ece6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	69db      	ldr	r3, [r3, #28]
 800e9f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9f6:	f040 80bd 	bne.w	800eb74 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e9fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e9fe:	2b20      	cmp	r3, #32
 800ea00:	dc48      	bgt.n	800ea94 <UART_SetConfig+0xa50>
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	db7b      	blt.n	800eafe <UART_SetConfig+0xaba>
 800ea06:	2b20      	cmp	r3, #32
 800ea08:	d879      	bhi.n	800eafe <UART_SetConfig+0xaba>
 800ea0a:	a201      	add	r2, pc, #4	; (adr r2, 800ea10 <UART_SetConfig+0x9cc>)
 800ea0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea10:	0800ea9b 	.word	0x0800ea9b
 800ea14:	0800eaa3 	.word	0x0800eaa3
 800ea18:	0800eaff 	.word	0x0800eaff
 800ea1c:	0800eaff 	.word	0x0800eaff
 800ea20:	0800eaab 	.word	0x0800eaab
 800ea24:	0800eaff 	.word	0x0800eaff
 800ea28:	0800eaff 	.word	0x0800eaff
 800ea2c:	0800eaff 	.word	0x0800eaff
 800ea30:	0800eabb 	.word	0x0800eabb
 800ea34:	0800eaff 	.word	0x0800eaff
 800ea38:	0800eaff 	.word	0x0800eaff
 800ea3c:	0800eaff 	.word	0x0800eaff
 800ea40:	0800eaff 	.word	0x0800eaff
 800ea44:	0800eaff 	.word	0x0800eaff
 800ea48:	0800eaff 	.word	0x0800eaff
 800ea4c:	0800eaff 	.word	0x0800eaff
 800ea50:	0800eacb 	.word	0x0800eacb
 800ea54:	0800eaff 	.word	0x0800eaff
 800ea58:	0800eaff 	.word	0x0800eaff
 800ea5c:	0800eaff 	.word	0x0800eaff
 800ea60:	0800eaff 	.word	0x0800eaff
 800ea64:	0800eaff 	.word	0x0800eaff
 800ea68:	0800eaff 	.word	0x0800eaff
 800ea6c:	0800eaff 	.word	0x0800eaff
 800ea70:	0800eaff 	.word	0x0800eaff
 800ea74:	0800eaff 	.word	0x0800eaff
 800ea78:	0800eaff 	.word	0x0800eaff
 800ea7c:	0800eaff 	.word	0x0800eaff
 800ea80:	0800eaff 	.word	0x0800eaff
 800ea84:	0800eaff 	.word	0x0800eaff
 800ea88:	0800eaff 	.word	0x0800eaff
 800ea8c:	0800eaff 	.word	0x0800eaff
 800ea90:	0800eaf1 	.word	0x0800eaf1
 800ea94:	2b40      	cmp	r3, #64	; 0x40
 800ea96:	d02e      	beq.n	800eaf6 <UART_SetConfig+0xab2>
 800ea98:	e031      	b.n	800eafe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea9a:	f7f8 fc5f 	bl	800735c <HAL_RCC_GetPCLK1Freq>
 800ea9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eaa0:	e033      	b.n	800eb0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eaa2:	f7f8 fc71 	bl	8007388 <HAL_RCC_GetPCLK2Freq>
 800eaa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eaa8:	e02f      	b.n	800eb0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eaaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7f9 ffd0 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eab8:	e027      	b.n	800eb0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaba:	f107 0318 	add.w	r3, r7, #24
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fa f91c 	bl	8008cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eac8:	e01f      	b.n	800eb0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eaca:	4b69      	ldr	r3, [pc, #420]	; (800ec70 <UART_SetConfig+0xc2c>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f003 0320 	and.w	r3, r3, #32
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d009      	beq.n	800eaea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ead6:	4b66      	ldr	r3, [pc, #408]	; (800ec70 <UART_SetConfig+0xc2c>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	08db      	lsrs	r3, r3, #3
 800eadc:	f003 0303 	and.w	r3, r3, #3
 800eae0:	4a64      	ldr	r2, [pc, #400]	; (800ec74 <UART_SetConfig+0xc30>)
 800eae2:	fa22 f303 	lsr.w	r3, r2, r3
 800eae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eae8:	e00f      	b.n	800eb0a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800eaea:	4b62      	ldr	r3, [pc, #392]	; (800ec74 <UART_SetConfig+0xc30>)
 800eaec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaee:	e00c      	b.n	800eb0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eaf0:	4b61      	ldr	r3, [pc, #388]	; (800ec78 <UART_SetConfig+0xc34>)
 800eaf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaf4:	e009      	b.n	800eb0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eaf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eafc:	e005      	b.n	800eb0a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800eafe:	2300      	movs	r3, #0
 800eb00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eb02:	2301      	movs	r3, #1
 800eb04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eb08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eb0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 80ea 	beq.w	800ece6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb16:	4a55      	ldr	r2, [pc, #340]	; (800ec6c <UART_SetConfig+0xc28>)
 800eb18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb20:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb24:	005a      	lsls	r2, r3, #1
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	085b      	lsrs	r3, r3, #1
 800eb2c:	441a      	add	r2, r3
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3a:	2b0f      	cmp	r3, #15
 800eb3c:	d916      	bls.n	800eb6c <UART_SetConfig+0xb28>
 800eb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb44:	d212      	bcs.n	800eb6c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	f023 030f 	bic.w	r3, r3, #15
 800eb4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb52:	085b      	lsrs	r3, r3, #1
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	f003 0307 	and.w	r3, r3, #7
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eb68:	60da      	str	r2, [r3, #12]
 800eb6a:	e0bc      	b.n	800ece6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb72:	e0b8      	b.n	800ece6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb78:	2b20      	cmp	r3, #32
 800eb7a:	dc4b      	bgt.n	800ec14 <UART_SetConfig+0xbd0>
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	f2c0 8087 	blt.w	800ec90 <UART_SetConfig+0xc4c>
 800eb82:	2b20      	cmp	r3, #32
 800eb84:	f200 8084 	bhi.w	800ec90 <UART_SetConfig+0xc4c>
 800eb88:	a201      	add	r2, pc, #4	; (adr r2, 800eb90 <UART_SetConfig+0xb4c>)
 800eb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8e:	bf00      	nop
 800eb90:	0800ec1b 	.word	0x0800ec1b
 800eb94:	0800ec23 	.word	0x0800ec23
 800eb98:	0800ec91 	.word	0x0800ec91
 800eb9c:	0800ec91 	.word	0x0800ec91
 800eba0:	0800ec2b 	.word	0x0800ec2b
 800eba4:	0800ec91 	.word	0x0800ec91
 800eba8:	0800ec91 	.word	0x0800ec91
 800ebac:	0800ec91 	.word	0x0800ec91
 800ebb0:	0800ec3b 	.word	0x0800ec3b
 800ebb4:	0800ec91 	.word	0x0800ec91
 800ebb8:	0800ec91 	.word	0x0800ec91
 800ebbc:	0800ec91 	.word	0x0800ec91
 800ebc0:	0800ec91 	.word	0x0800ec91
 800ebc4:	0800ec91 	.word	0x0800ec91
 800ebc8:	0800ec91 	.word	0x0800ec91
 800ebcc:	0800ec91 	.word	0x0800ec91
 800ebd0:	0800ec4b 	.word	0x0800ec4b
 800ebd4:	0800ec91 	.word	0x0800ec91
 800ebd8:	0800ec91 	.word	0x0800ec91
 800ebdc:	0800ec91 	.word	0x0800ec91
 800ebe0:	0800ec91 	.word	0x0800ec91
 800ebe4:	0800ec91 	.word	0x0800ec91
 800ebe8:	0800ec91 	.word	0x0800ec91
 800ebec:	0800ec91 	.word	0x0800ec91
 800ebf0:	0800ec91 	.word	0x0800ec91
 800ebf4:	0800ec91 	.word	0x0800ec91
 800ebf8:	0800ec91 	.word	0x0800ec91
 800ebfc:	0800ec91 	.word	0x0800ec91
 800ec00:	0800ec91 	.word	0x0800ec91
 800ec04:	0800ec91 	.word	0x0800ec91
 800ec08:	0800ec91 	.word	0x0800ec91
 800ec0c:	0800ec91 	.word	0x0800ec91
 800ec10:	0800ec83 	.word	0x0800ec83
 800ec14:	2b40      	cmp	r3, #64	; 0x40
 800ec16:	d037      	beq.n	800ec88 <UART_SetConfig+0xc44>
 800ec18:	e03a      	b.n	800ec90 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec1a:	f7f8 fb9f 	bl	800735c <HAL_RCC_GetPCLK1Freq>
 800ec1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec20:	e03c      	b.n	800ec9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec22:	f7f8 fbb1 	bl	8007388 <HAL_RCC_GetPCLK2Freq>
 800ec26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec28:	e038      	b.n	800ec9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7f9 ff10 	bl	8008a54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec38:	e030      	b.n	800ec9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec3a:	f107 0318 	add.w	r3, r7, #24
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7fa f85c 	bl	8008cfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec48:	e028      	b.n	800ec9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec4a:	4b09      	ldr	r3, [pc, #36]	; (800ec70 <UART_SetConfig+0xc2c>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f003 0320 	and.w	r3, r3, #32
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d012      	beq.n	800ec7c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec56:	4b06      	ldr	r3, [pc, #24]	; (800ec70 <UART_SetConfig+0xc2c>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	08db      	lsrs	r3, r3, #3
 800ec5c:	f003 0303 	and.w	r3, r3, #3
 800ec60:	4a04      	ldr	r2, [pc, #16]	; (800ec74 <UART_SetConfig+0xc30>)
 800ec62:	fa22 f303 	lsr.w	r3, r2, r3
 800ec66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec68:	e018      	b.n	800ec9c <UART_SetConfig+0xc58>
 800ec6a:	bf00      	nop
 800ec6c:	0801248c 	.word	0x0801248c
 800ec70:	58024400 	.word	0x58024400
 800ec74:	03d09000 	.word	0x03d09000
 800ec78:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ec7c:	4b24      	ldr	r3, [pc, #144]	; (800ed10 <UART_SetConfig+0xccc>)
 800ec7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec80:	e00c      	b.n	800ec9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec82:	4b24      	ldr	r3, [pc, #144]	; (800ed14 <UART_SetConfig+0xcd0>)
 800ec84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec86:	e009      	b.n	800ec9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec8e:	e005      	b.n	800ec9c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ec90:	2300      	movs	r3, #0
 800ec92:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec94:	2301      	movs	r3, #1
 800ec96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec9a:	bf00      	nop
    }

    if (pclk != 0U)
 800ec9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d021      	beq.n	800ece6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca6:	4a1c      	ldr	r2, [pc, #112]	; (800ed18 <UART_SetConfig+0xcd4>)
 800eca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecac:	461a      	mov	r2, r3
 800ecae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecb0:	fbb3 f2f2 	udiv	r2, r3, r2
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	085b      	lsrs	r3, r3, #1
 800ecba:	441a      	add	r2, r3
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecc4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc8:	2b0f      	cmp	r3, #15
 800ecca:	d909      	bls.n	800ece0 <UART_SetConfig+0xc9c>
 800eccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecd2:	d205      	bcs.n	800ece0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	60da      	str	r2, [r3, #12]
 800ecde:	e002      	b.n	800ece6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ece0:	2301      	movs	r3, #1
 800ece2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ed02:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3748      	adds	r7, #72	; 0x48
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ed10:	03d09000 	.word	0x03d09000
 800ed14:	003d0900 	.word	0x003d0900
 800ed18:	0801248c 	.word	0x0801248c

0800ed1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed28:	f003 0301 	and.w	r3, r3, #1
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d00a      	beq.n	800ed46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	430a      	orrs	r2, r1
 800ed44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed4a:	f003 0302 	and.w	r3, r3, #2
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d00a      	beq.n	800ed68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	430a      	orrs	r2, r1
 800ed66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed6c:	f003 0304 	and.w	r3, r3, #4
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d00a      	beq.n	800ed8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	430a      	orrs	r2, r1
 800ed88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed8e:	f003 0308 	and.w	r3, r3, #8
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d00a      	beq.n	800edac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	430a      	orrs	r2, r1
 800edaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edb0:	f003 0310 	and.w	r3, r3, #16
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00a      	beq.n	800edce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	689b      	ldr	r3, [r3, #8]
 800edbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	430a      	orrs	r2, r1
 800edcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edd2:	f003 0320 	and.w	r3, r3, #32
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00a      	beq.n	800edf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	430a      	orrs	r2, r1
 800edee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d01a      	beq.n	800ee32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	430a      	orrs	r2, r1
 800ee10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee1a:	d10a      	bne.n	800ee32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	430a      	orrs	r2, r1
 800ee30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00a      	beq.n	800ee54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	430a      	orrs	r2, r1
 800ee52:	605a      	str	r2, [r3, #4]
  }
}
 800ee54:	bf00      	nop
 800ee56:	370c      	adds	r7, #12
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af02      	add	r7, sp, #8
 800ee66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee70:	f7f4 f892 	bl	8002f98 <HAL_GetTick>
 800ee74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f003 0308 	and.w	r3, r3, #8
 800ee80:	2b08      	cmp	r3, #8
 800ee82:	d10e      	bne.n	800eea2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 f82f 	bl	800eef6 <UART_WaitOnFlagUntilTimeout>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee9e:	2303      	movs	r3, #3
 800eea0:	e025      	b.n	800eeee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f003 0304 	and.w	r3, r3, #4
 800eeac:	2b04      	cmp	r3, #4
 800eeae:	d10e      	bne.n	800eece <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eeb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 f819 	bl	800eef6 <UART_WaitOnFlagUntilTimeout>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d001      	beq.n	800eece <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eeca:	2303      	movs	r3, #3
 800eecc:	e00f      	b.n	800eeee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2220      	movs	r2, #32
 800eed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2220      	movs	r2, #32
 800eeda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b09c      	sub	sp, #112	; 0x70
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	60f8      	str	r0, [r7, #12]
 800eefe:	60b9      	str	r1, [r7, #8]
 800ef00:	603b      	str	r3, [r7, #0]
 800ef02:	4613      	mov	r3, r2
 800ef04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef06:	e0a9      	b.n	800f05c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef0e:	f000 80a5 	beq.w	800f05c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef12:	f7f4 f841 	bl	8002f98 <HAL_GetTick>
 800ef16:	4602      	mov	r2, r0
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	1ad3      	subs	r3, r2, r3
 800ef1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d302      	bcc.n	800ef28 <UART_WaitOnFlagUntilTimeout+0x32>
 800ef22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d140      	bne.n	800efaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef30:	e853 3f00 	ldrex	r3, [r3]
 800ef34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ef36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ef3c:	667b      	str	r3, [r7, #100]	; 0x64
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	461a      	mov	r2, r3
 800ef44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ef4e:	e841 2300 	strex	r3, r2, [r1]
 800ef52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ef54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d1e6      	bne.n	800ef28 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	3308      	adds	r3, #8
 800ef60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef64:	e853 3f00 	ldrex	r3, [r3]
 800ef68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6c:	f023 0301 	bic.w	r3, r3, #1
 800ef70:	663b      	str	r3, [r7, #96]	; 0x60
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	3308      	adds	r3, #8
 800ef78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef7a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ef7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef82:	e841 2300 	strex	r3, r2, [r1]
 800ef86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ef88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d1e5      	bne.n	800ef5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2220      	movs	r2, #32
 800ef92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2220      	movs	r2, #32
 800ef9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2200      	movs	r2, #0
 800efa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800efa6:	2303      	movs	r3, #3
 800efa8:	e069      	b.n	800f07e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f003 0304 	and.w	r3, r3, #4
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d051      	beq.n	800f05c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	69db      	ldr	r3, [r3, #28]
 800efbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efc6:	d149      	bne.n	800f05c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efda:	e853 3f00 	ldrex	r3, [r3]
 800efde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800efe6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	461a      	mov	r2, r3
 800efee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eff0:	637b      	str	r3, [r7, #52]	; 0x34
 800eff2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eff8:	e841 2300 	strex	r3, r2, [r1]
 800effc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800effe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f000:	2b00      	cmp	r3, #0
 800f002:	d1e6      	bne.n	800efd2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	3308      	adds	r3, #8
 800f00a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	e853 3f00 	ldrex	r3, [r3]
 800f012:	613b      	str	r3, [r7, #16]
   return(result);
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	f023 0301 	bic.w	r3, r3, #1
 800f01a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	3308      	adds	r3, #8
 800f022:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f024:	623a      	str	r2, [r7, #32]
 800f026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f028:	69f9      	ldr	r1, [r7, #28]
 800f02a:	6a3a      	ldr	r2, [r7, #32]
 800f02c:	e841 2300 	strex	r3, r2, [r1]
 800f030:	61bb      	str	r3, [r7, #24]
   return(result);
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1e5      	bne.n	800f004 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2220      	movs	r2, #32
 800f03c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2220      	movs	r2, #32
 800f044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2220      	movs	r2, #32
 800f04c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f058:	2303      	movs	r3, #3
 800f05a:	e010      	b.n	800f07e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	69da      	ldr	r2, [r3, #28]
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	4013      	ands	r3, r2
 800f066:	68ba      	ldr	r2, [r7, #8]
 800f068:	429a      	cmp	r2, r3
 800f06a:	bf0c      	ite	eq
 800f06c:	2301      	moveq	r3, #1
 800f06e:	2300      	movne	r3, #0
 800f070:	b2db      	uxtb	r3, r3
 800f072:	461a      	mov	r2, r3
 800f074:	79fb      	ldrb	r3, [r7, #7]
 800f076:	429a      	cmp	r2, r3
 800f078:	f43f af46 	beq.w	800ef08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3770      	adds	r7, #112	; 0x70
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
	...

0800f088 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f088:	b480      	push	{r7}
 800f08a:	b0a3      	sub	sp, #140	; 0x8c
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	4613      	mov	r3, r2
 800f094:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	68ba      	ldr	r2, [r7, #8]
 800f09a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	88fa      	ldrh	r2, [r7, #6]
 800f0a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	88fa      	ldrh	r2, [r7, #6]
 800f0a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0ba:	d10e      	bne.n	800f0da <UART_Start_Receive_IT+0x52>
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	691b      	ldr	r3, [r3, #16]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d105      	bne.n	800f0d0 <UART_Start_Receive_IT+0x48>
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f0ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0ce:	e02d      	b.n	800f12c <UART_Start_Receive_IT+0xa4>
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	22ff      	movs	r2, #255	; 0xff
 800f0d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0d8:	e028      	b.n	800f12c <UART_Start_Receive_IT+0xa4>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	689b      	ldr	r3, [r3, #8]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d10d      	bne.n	800f0fe <UART_Start_Receive_IT+0x76>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	691b      	ldr	r3, [r3, #16]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d104      	bne.n	800f0f4 <UART_Start_Receive_IT+0x6c>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	22ff      	movs	r2, #255	; 0xff
 800f0ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0f2:	e01b      	b.n	800f12c <UART_Start_Receive_IT+0xa4>
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	227f      	movs	r2, #127	; 0x7f
 800f0f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0fc:	e016      	b.n	800f12c <UART_Start_Receive_IT+0xa4>
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f106:	d10d      	bne.n	800f124 <UART_Start_Receive_IT+0x9c>
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	691b      	ldr	r3, [r3, #16]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d104      	bne.n	800f11a <UART_Start_Receive_IT+0x92>
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	227f      	movs	r2, #127	; 0x7f
 800f114:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f118:	e008      	b.n	800f12c <UART_Start_Receive_IT+0xa4>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	223f      	movs	r2, #63	; 0x3f
 800f11e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f122:	e003      	b.n	800f12c <UART_Start_Receive_IT+0xa4>
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2200      	movs	r2, #0
 800f128:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2222      	movs	r2, #34	; 0x22
 800f138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	3308      	adds	r3, #8
 800f142:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f146:	e853 3f00 	ldrex	r3, [r3]
 800f14a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f14c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f14e:	f043 0301 	orr.w	r3, r3, #1
 800f152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	3308      	adds	r3, #8
 800f15c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f160:	673a      	str	r2, [r7, #112]	; 0x70
 800f162:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f164:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f166:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f168:	e841 2300 	strex	r3, r2, [r1]
 800f16c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f16e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f170:	2b00      	cmp	r3, #0
 800f172:	d1e3      	bne.n	800f13c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f17c:	d153      	bne.n	800f226 <UART_Start_Receive_IT+0x19e>
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f184:	88fa      	ldrh	r2, [r7, #6]
 800f186:	429a      	cmp	r2, r3
 800f188:	d34d      	bcc.n	800f226 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f192:	d107      	bne.n	800f1a4 <UART_Start_Receive_IT+0x11c>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	691b      	ldr	r3, [r3, #16]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d103      	bne.n	800f1a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	4a4b      	ldr	r2, [pc, #300]	; (800f2cc <UART_Start_Receive_IT+0x244>)
 800f1a0:	671a      	str	r2, [r3, #112]	; 0x70
 800f1a2:	e002      	b.n	800f1aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	4a4a      	ldr	r2, [pc, #296]	; (800f2d0 <UART_Start_Receive_IT+0x248>)
 800f1a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	691b      	ldr	r3, [r3, #16]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d01a      	beq.n	800f1f0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1c2:	e853 3f00 	ldrex	r3, [r3]
 800f1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f1ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f1dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f1de:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f1e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f1e4:	e841 2300 	strex	r3, r2, [r1]
 800f1e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f1ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1e4      	bne.n	800f1ba <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	3308      	adds	r3, #8
 800f1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1fa:	e853 3f00 	ldrex	r3, [r3]
 800f1fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f206:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	3308      	adds	r3, #8
 800f20e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f210:	64ba      	str	r2, [r7, #72]	; 0x48
 800f212:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f214:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f218:	e841 2300 	strex	r3, r2, [r1]
 800f21c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f21e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f220:	2b00      	cmp	r3, #0
 800f222:	d1e5      	bne.n	800f1f0 <UART_Start_Receive_IT+0x168>
 800f224:	e04a      	b.n	800f2bc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f22e:	d107      	bne.n	800f240 <UART_Start_Receive_IT+0x1b8>
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	691b      	ldr	r3, [r3, #16]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d103      	bne.n	800f240 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	4a26      	ldr	r2, [pc, #152]	; (800f2d4 <UART_Start_Receive_IT+0x24c>)
 800f23c:	671a      	str	r2, [r3, #112]	; 0x70
 800f23e:	e002      	b.n	800f246 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	4a25      	ldr	r2, [pc, #148]	; (800f2d8 <UART_Start_Receive_IT+0x250>)
 800f244:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2200      	movs	r2, #0
 800f24a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d019      	beq.n	800f28a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25e:	e853 3f00 	ldrex	r3, [r3]
 800f262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f266:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f26a:	677b      	str	r3, [r7, #116]	; 0x74
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	461a      	mov	r2, r3
 800f272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f274:	637b      	str	r3, [r7, #52]	; 0x34
 800f276:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f27a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f27c:	e841 2300 	strex	r3, r2, [r1]
 800f280:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1e6      	bne.n	800f256 <UART_Start_Receive_IT+0x1ce>
 800f288:	e018      	b.n	800f2bc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	e853 3f00 	ldrex	r3, [r3]
 800f296:	613b      	str	r3, [r7, #16]
   return(result);
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	f043 0320 	orr.w	r3, r3, #32
 800f29e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2a8:	623b      	str	r3, [r7, #32]
 800f2aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ac:	69f9      	ldr	r1, [r7, #28]
 800f2ae:	6a3a      	ldr	r2, [r7, #32]
 800f2b0:	e841 2300 	strex	r3, r2, [r1]
 800f2b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1e6      	bne.n	800f28a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f2bc:	2300      	movs	r3, #0
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	378c      	adds	r7, #140	; 0x8c
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	0800f9e5 	.word	0x0800f9e5
 800f2d0:	0800f6ed 	.word	0x0800f6ed
 800f2d4:	0800f58b 	.word	0x0800f58b
 800f2d8:	0800f42b 	.word	0x0800f42b

0800f2dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b095      	sub	sp, #84	; 0x54
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ec:	e853 3f00 	ldrex	r3, [r3]
 800f2f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	461a      	mov	r2, r3
 800f300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f302:	643b      	str	r3, [r7, #64]	; 0x40
 800f304:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f306:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f30a:	e841 2300 	strex	r3, r2, [r1]
 800f30e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f312:	2b00      	cmp	r3, #0
 800f314:	d1e6      	bne.n	800f2e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	3308      	adds	r3, #8
 800f31c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f31e:	6a3b      	ldr	r3, [r7, #32]
 800f320:	e853 3f00 	ldrex	r3, [r3]
 800f324:	61fb      	str	r3, [r7, #28]
   return(result);
 800f326:	69fa      	ldr	r2, [r7, #28]
 800f328:	4b1e      	ldr	r3, [pc, #120]	; (800f3a4 <UART_EndRxTransfer+0xc8>)
 800f32a:	4013      	ands	r3, r2
 800f32c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	3308      	adds	r3, #8
 800f334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f336:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f338:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f33a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f33e:	e841 2300 	strex	r3, r2, [r1]
 800f342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1e5      	bne.n	800f316 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d118      	bne.n	800f384 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	e853 3f00 	ldrex	r3, [r3]
 800f35e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	f023 0310 	bic.w	r3, r3, #16
 800f366:	647b      	str	r3, [r7, #68]	; 0x44
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	461a      	mov	r2, r3
 800f36e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f370:	61bb      	str	r3, [r7, #24]
 800f372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f374:	6979      	ldr	r1, [r7, #20]
 800f376:	69ba      	ldr	r2, [r7, #24]
 800f378:	e841 2300 	strex	r3, r2, [r1]
 800f37c:	613b      	str	r3, [r7, #16]
   return(result);
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d1e6      	bne.n	800f352 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2220      	movs	r2, #32
 800f388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2200      	movs	r2, #0
 800f390:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f398:	bf00      	nop
 800f39a:	3754      	adds	r7, #84	; 0x54
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr
 800f3a4:	effffffe 	.word	0xeffffffe

0800f3a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f7fe fe26 	bl	800e018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3cc:	bf00      	nop
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b088      	sub	sp, #32
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	e853 3f00 	ldrex	r3, [r3]
 800f3e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3f0:	61fb      	str	r3, [r7, #28]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	61bb      	str	r3, [r7, #24]
 800f3fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fe:	6979      	ldr	r1, [r7, #20]
 800f400:	69ba      	ldr	r2, [r7, #24]
 800f402:	e841 2300 	strex	r3, r2, [r1]
 800f406:	613b      	str	r3, [r7, #16]
   return(result);
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d1e6      	bne.n	800f3dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2220      	movs	r2, #32
 800f412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f7fe fdf1 	bl	800e004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f422:	bf00      	nop
 800f424:	3720      	adds	r7, #32
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b096      	sub	sp, #88	; 0x58
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f438:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f442:	2b22      	cmp	r3, #34	; 0x22
 800f444:	f040 8095 	bne.w	800f572 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f44e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f452:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f456:	b2d9      	uxtb	r1, r3
 800f458:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f45c:	b2da      	uxtb	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f462:	400a      	ands	r2, r1
 800f464:	b2d2      	uxtb	r2, r2
 800f466:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f46c:	1c5a      	adds	r2, r3, #1
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f478:	b29b      	uxth	r3, r3
 800f47a:	3b01      	subs	r3, #1
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d178      	bne.n	800f582 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f498:	e853 3f00 	ldrex	r3, [r3]
 800f49c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f4a4:	653b      	str	r3, [r7, #80]	; 0x50
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ae:	647b      	str	r3, [r7, #68]	; 0x44
 800f4b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4b6:	e841 2300 	strex	r3, r2, [r1]
 800f4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1e6      	bne.n	800f490 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	3308      	adds	r3, #8
 800f4c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	e853 3f00 	ldrex	r3, [r3]
 800f4d0:	623b      	str	r3, [r7, #32]
   return(result);
 800f4d2:	6a3b      	ldr	r3, [r7, #32]
 800f4d4:	f023 0301 	bic.w	r3, r3, #1
 800f4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	3308      	adds	r3, #8
 800f4e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4e2:	633a      	str	r2, [r7, #48]	; 0x30
 800f4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ea:	e841 2300 	strex	r3, r2, [r1]
 800f4ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d1e5      	bne.n	800f4c2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2220      	movs	r2, #32
 800f4fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d12e      	bne.n	800f56a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	e853 3f00 	ldrex	r3, [r3]
 800f51e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f023 0310 	bic.w	r3, r3, #16
 800f526:	64bb      	str	r3, [r7, #72]	; 0x48
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	461a      	mov	r2, r3
 800f52e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f530:	61fb      	str	r3, [r7, #28]
 800f532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f534:	69b9      	ldr	r1, [r7, #24]
 800f536:	69fa      	ldr	r2, [r7, #28]
 800f538:	e841 2300 	strex	r3, r2, [r1]
 800f53c:	617b      	str	r3, [r7, #20]
   return(result);
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1e6      	bne.n	800f512 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	69db      	ldr	r3, [r3, #28]
 800f54a:	f003 0310 	and.w	r3, r3, #16
 800f54e:	2b10      	cmp	r3, #16
 800f550:	d103      	bne.n	800f55a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2210      	movs	r2, #16
 800f558:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f560:	4619      	mov	r1, r3
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7fe fd62 	bl	800e02c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f568:	e00b      	b.n	800f582 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f7f2 f948 	bl	8001800 <HAL_UART_RxCpltCallback>
}
 800f570:	e007      	b.n	800f582 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	699a      	ldr	r2, [r3, #24]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f042 0208 	orr.w	r2, r2, #8
 800f580:	619a      	str	r2, [r3, #24]
}
 800f582:	bf00      	nop
 800f584:	3758      	adds	r7, #88	; 0x58
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b096      	sub	sp, #88	; 0x58
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f598:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5a2:	2b22      	cmp	r3, #34	; 0x22
 800f5a4:	f040 8095 	bne.w	800f6d2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5b6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f5b8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f5bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f5c0:	4013      	ands	r3, r2
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5c6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5cc:	1c9a      	adds	r2, r3, #2
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	3b01      	subs	r3, #1
 800f5dc:	b29a      	uxth	r2, r3
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d178      	bne.n	800f6e2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5f8:	e853 3f00 	ldrex	r3, [r3]
 800f5fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f604:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	461a      	mov	r2, r3
 800f60c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f60e:	643b      	str	r3, [r7, #64]	; 0x40
 800f610:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f612:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f616:	e841 2300 	strex	r3, r2, [r1]
 800f61a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d1e6      	bne.n	800f5f0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	3308      	adds	r3, #8
 800f628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62a:	6a3b      	ldr	r3, [r7, #32]
 800f62c:	e853 3f00 	ldrex	r3, [r3]
 800f630:	61fb      	str	r3, [r7, #28]
   return(result);
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	f023 0301 	bic.w	r3, r3, #1
 800f638:	64bb      	str	r3, [r7, #72]	; 0x48
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	3308      	adds	r3, #8
 800f640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f642:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f644:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f64a:	e841 2300 	strex	r3, r2, [r1]
 800f64e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f652:	2b00      	cmp	r3, #0
 800f654:	d1e5      	bne.n	800f622 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2220      	movs	r2, #32
 800f65a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2200      	movs	r2, #0
 800f662:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d12e      	bne.n	800f6ca <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	e853 3f00 	ldrex	r3, [r3]
 800f67e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	f023 0310 	bic.w	r3, r3, #16
 800f686:	647b      	str	r3, [r7, #68]	; 0x44
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	461a      	mov	r2, r3
 800f68e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f690:	61bb      	str	r3, [r7, #24]
 800f692:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f694:	6979      	ldr	r1, [r7, #20]
 800f696:	69ba      	ldr	r2, [r7, #24]
 800f698:	e841 2300 	strex	r3, r2, [r1]
 800f69c:	613b      	str	r3, [r7, #16]
   return(result);
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1e6      	bne.n	800f672 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	69db      	ldr	r3, [r3, #28]
 800f6aa:	f003 0310 	and.w	r3, r3, #16
 800f6ae:	2b10      	cmp	r3, #16
 800f6b0:	d103      	bne.n	800f6ba <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2210      	movs	r2, #16
 800f6b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f7fe fcb2 	bl	800e02c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6c8:	e00b      	b.n	800f6e2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7f2 f898 	bl	8001800 <HAL_UART_RxCpltCallback>
}
 800f6d0:	e007      	b.n	800f6e2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	699a      	ldr	r2, [r3, #24]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f042 0208 	orr.w	r2, r2, #8
 800f6e0:	619a      	str	r2, [r3, #24]
}
 800f6e2:	bf00      	nop
 800f6e4:	3758      	adds	r7, #88	; 0x58
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
	...

0800f6ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b0a6      	sub	sp, #152	; 0x98
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6fa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	69db      	ldr	r3, [r3, #28]
 800f704:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f722:	2b22      	cmp	r3, #34	; 0x22
 800f724:	f040 814d 	bne.w	800f9c2 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f72e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f732:	e0f4      	b.n	800f91e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f73a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f73e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f742:	b2d9      	uxtb	r1, r3
 800f744:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f748:	b2da      	uxtb	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f74e:	400a      	ands	r2, r1
 800f750:	b2d2      	uxtb	r2, r2
 800f752:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f758:	1c5a      	adds	r2, r3, #1
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f764:	b29b      	uxth	r3, r3
 800f766:	3b01      	subs	r3, #1
 800f768:	b29a      	uxth	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	69db      	ldr	r3, [r3, #28]
 800f776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f77a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f77e:	f003 0307 	and.w	r3, r3, #7
 800f782:	2b00      	cmp	r3, #0
 800f784:	d053      	beq.n	800f82e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f786:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f78a:	f003 0301 	and.w	r3, r3, #1
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d011      	beq.n	800f7b6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00b      	beq.n	800f7b6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7ac:	f043 0201 	orr.w	r2, r3, #1
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f7ba:	f003 0302 	and.w	r3, r3, #2
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d011      	beq.n	800f7e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f7c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7c6:	f003 0301 	and.w	r3, r3, #1
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00b      	beq.n	800f7e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7dc:	f043 0204 	orr.w	r2, r3, #4
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f7ea:	f003 0304 	and.w	r3, r3, #4
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d011      	beq.n	800f816 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f7f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7f6:	f003 0301 	and.w	r3, r3, #1
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00b      	beq.n	800f816 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2204      	movs	r2, #4
 800f804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f80c:	f043 0202 	orr.w	r2, r3, #2
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d006      	beq.n	800f82e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f7fe fbf9 	bl	800e018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2200      	movs	r2, #0
 800f82a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f834:	b29b      	uxth	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	d171      	bne.n	800f91e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f842:	e853 3f00 	ldrex	r3, [r3]
 800f846:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f84a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f84e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	461a      	mov	r2, r3
 800f858:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f85c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f85e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f860:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f862:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f864:	e841 2300 	strex	r3, r2, [r1]
 800f868:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f86a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d1e4      	bne.n	800f83a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	3308      	adds	r3, #8
 800f876:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f87a:	e853 3f00 	ldrex	r3, [r3]
 800f87e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f882:	4b56      	ldr	r3, [pc, #344]	; (800f9dc <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f884:	4013      	ands	r3, r2
 800f886:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	3308      	adds	r3, #8
 800f88e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f890:	657a      	str	r2, [r7, #84]	; 0x54
 800f892:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f894:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f896:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f898:	e841 2300 	strex	r3, r2, [r1]
 800f89c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d1e5      	bne.n	800f870 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2220      	movs	r2, #32
 800f8a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d12e      	bne.n	800f918 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c8:	e853 3f00 	ldrex	r3, [r3]
 800f8cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d0:	f023 0310 	bic.w	r3, r3, #16
 800f8d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8de:	643b      	str	r3, [r7, #64]	; 0x40
 800f8e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f8e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8e6:	e841 2300 	strex	r3, r2, [r1]
 800f8ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d1e6      	bne.n	800f8c0 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	69db      	ldr	r3, [r3, #28]
 800f8f8:	f003 0310 	and.w	r3, r3, #16
 800f8fc:	2b10      	cmp	r3, #16
 800f8fe:	d103      	bne.n	800f908 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2210      	movs	r2, #16
 800f906:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f90e:	4619      	mov	r1, r3
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f7fe fb8b 	bl	800e02c <HAL_UARTEx_RxEventCallback>
 800f916:	e002      	b.n	800f91e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7f1 ff71 	bl	8001800 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f91e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f922:	2b00      	cmp	r3, #0
 800f924:	d006      	beq.n	800f934 <UART_RxISR_8BIT_FIFOEN+0x248>
 800f926:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f92a:	f003 0320 	and.w	r3, r3, #32
 800f92e:	2b00      	cmp	r3, #0
 800f930:	f47f af00 	bne.w	800f734 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f93a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f93e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f942:	2b00      	cmp	r3, #0
 800f944:	d045      	beq.n	800f9d2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f94c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f950:	429a      	cmp	r2, r3
 800f952:	d23e      	bcs.n	800f9d2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	3308      	adds	r3, #8
 800f95a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f95c:	6a3b      	ldr	r3, [r7, #32]
 800f95e:	e853 3f00 	ldrex	r3, [r3]
 800f962:	61fb      	str	r3, [r7, #28]
   return(result);
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f96a:	673b      	str	r3, [r7, #112]	; 0x70
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	3308      	adds	r3, #8
 800f972:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f974:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f97a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f97c:	e841 2300 	strex	r3, r2, [r1]
 800f980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1e5      	bne.n	800f954 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a15      	ldr	r2, [pc, #84]	; (800f9e0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f98c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	e853 3f00 	ldrex	r3, [r3]
 800f99a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	f043 0320 	orr.w	r3, r3, #32
 800f9a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9ac:	61bb      	str	r3, [r7, #24]
 800f9ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b0:	6979      	ldr	r1, [r7, #20]
 800f9b2:	69ba      	ldr	r2, [r7, #24]
 800f9b4:	e841 2300 	strex	r3, r2, [r1]
 800f9b8:	613b      	str	r3, [r7, #16]
   return(result);
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d1e6      	bne.n	800f98e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f9c0:	e007      	b.n	800f9d2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	699a      	ldr	r2, [r3, #24]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f042 0208 	orr.w	r2, r2, #8
 800f9d0:	619a      	str	r2, [r3, #24]
}
 800f9d2:	bf00      	nop
 800f9d4:	3798      	adds	r7, #152	; 0x98
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	effffffe 	.word	0xeffffffe
 800f9e0:	0800f42b 	.word	0x0800f42b

0800f9e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b0a8      	sub	sp, #160	; 0xa0
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9f2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	69db      	ldr	r3, [r3, #28]
 800f9fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	689b      	ldr	r3, [r3, #8]
 800fa10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa1a:	2b22      	cmp	r3, #34	; 0x22
 800fa1c:	f040 8151 	bne.w	800fcc2 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fa26:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fa2a:	e0f8      	b.n	800fc1e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa32:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800fa3e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800fa42:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800fa46:	4013      	ands	r3, r2
 800fa48:	b29a      	uxth	r2, r3
 800fa4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa54:	1c9a      	adds	r2, r3, #2
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	3b01      	subs	r3, #1
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	69db      	ldr	r3, [r3, #28]
 800fa72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fa76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fa7a:	f003 0307 	and.w	r3, r3, #7
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d053      	beq.n	800fb2a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fa82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fa86:	f003 0301 	and.w	r3, r3, #1
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d011      	beq.n	800fab2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800fa8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00b      	beq.n	800fab2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800faa8:	f043 0201 	orr.w	r2, r3, #1
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fab6:	f003 0302 	and.w	r3, r3, #2
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d011      	beq.n	800fae2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fabe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fac2:	f003 0301 	and.w	r3, r3, #1
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00b      	beq.n	800fae2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2202      	movs	r2, #2
 800fad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fad8:	f043 0204 	orr.w	r2, r3, #4
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fae2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fae6:	f003 0304 	and.w	r3, r3, #4
 800faea:	2b00      	cmp	r3, #0
 800faec:	d011      	beq.n	800fb12 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800faee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800faf2:	f003 0301 	and.w	r3, r3, #1
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d00b      	beq.n	800fb12 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2204      	movs	r2, #4
 800fb00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb08:	f043 0202 	orr.w	r2, r3, #2
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d006      	beq.n	800fb2a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7fe fa7b 	bl	800e018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2200      	movs	r2, #0
 800fb26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d173      	bne.n	800fc1e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb3e:	e853 3f00 	ldrex	r3, [r3]
 800fb42:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fb44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	461a      	mov	r2, r3
 800fb54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fb58:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fb5a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fb5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fb60:	e841 2300 	strex	r3, r2, [r1]
 800fb64:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fb66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1e4      	bne.n	800fb36 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	3308      	adds	r3, #8
 800fb72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb76:	e853 3f00 	ldrex	r3, [r3]
 800fb7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fb7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb7e:	4b57      	ldr	r3, [pc, #348]	; (800fcdc <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800fb80:	4013      	ands	r3, r2
 800fb82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	3308      	adds	r3, #8
 800fb8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb90:	65ba      	str	r2, [r7, #88]	; 0x58
 800fb92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fb96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb98:	e841 2300 	strex	r3, r2, [r1]
 800fb9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d1e3      	bne.n	800fb6c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2220      	movs	r2, #32
 800fba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d12e      	bne.n	800fc18 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc8:	e853 3f00 	ldrex	r3, [r3]
 800fbcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbd0:	f023 0310 	bic.w	r3, r3, #16
 800fbd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbde:	647b      	str	r3, [r7, #68]	; 0x44
 800fbe0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fbe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbe6:	e841 2300 	strex	r3, r2, [r1]
 800fbea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1e6      	bne.n	800fbc0 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	69db      	ldr	r3, [r3, #28]
 800fbf8:	f003 0310 	and.w	r3, r3, #16
 800fbfc:	2b10      	cmp	r3, #16
 800fbfe:	d103      	bne.n	800fc08 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2210      	movs	r2, #16
 800fc06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc0e:	4619      	mov	r1, r3
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f7fe fa0b 	bl	800e02c <HAL_UARTEx_RxEventCallback>
 800fc16:	e002      	b.n	800fc1e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f7f1 fdf1 	bl	8001800 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fc1e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d006      	beq.n	800fc34 <UART_RxISR_16BIT_FIFOEN+0x250>
 800fc26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fc2a:	f003 0320 	and.w	r3, r3, #32
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f47f aefc 	bne.w	800fa2c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc3a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fc3e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d045      	beq.n	800fcd2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc4c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d23e      	bcs.n	800fcd2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	3308      	adds	r3, #8
 800fc5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5e:	e853 3f00 	ldrex	r3, [r3]
 800fc62:	623b      	str	r3, [r7, #32]
   return(result);
 800fc64:	6a3b      	ldr	r3, [r7, #32]
 800fc66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc6a:	677b      	str	r3, [r7, #116]	; 0x74
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	3308      	adds	r3, #8
 800fc72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fc74:	633a      	str	r2, [r7, #48]	; 0x30
 800fc76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc7c:	e841 2300 	strex	r3, r2, [r1]
 800fc80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1e5      	bne.n	800fc54 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4a15      	ldr	r2, [pc, #84]	; (800fce0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800fc8c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	e853 3f00 	ldrex	r3, [r3]
 800fc9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f043 0320 	orr.w	r3, r3, #32
 800fca2:	673b      	str	r3, [r7, #112]	; 0x70
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	461a      	mov	r2, r3
 800fcaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fcac:	61fb      	str	r3, [r7, #28]
 800fcae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcb0:	69b9      	ldr	r1, [r7, #24]
 800fcb2:	69fa      	ldr	r2, [r7, #28]
 800fcb4:	e841 2300 	strex	r3, r2, [r1]
 800fcb8:	617b      	str	r3, [r7, #20]
   return(result);
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d1e6      	bne.n	800fc8e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fcc0:	e007      	b.n	800fcd2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	699a      	ldr	r2, [r3, #24]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f042 0208 	orr.w	r2, r2, #8
 800fcd0:	619a      	str	r2, [r3, #24]
}
 800fcd2:	bf00      	nop
 800fcd4:	37a0      	adds	r7, #160	; 0xa0
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	effffffe 	.word	0xeffffffe
 800fce0:	0800f58b 	.word	0x0800f58b

0800fce4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fcec:	bf00      	nop
 800fcee:	370c      	adds	r7, #12
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fd00:	bf00      	nop
 800fd02:	370c      	adds	r7, #12
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr

0800fd0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fd14:	bf00      	nop
 800fd16:	370c      	adds	r7, #12
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd20:	b480      	push	{r7}
 800fd22:	b085      	sub	sp, #20
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d101      	bne.n	800fd36 <HAL_UARTEx_DisableFifoMode+0x16>
 800fd32:	2302      	movs	r3, #2
 800fd34:	e027      	b.n	800fd86 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2201      	movs	r2, #1
 800fd3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2224      	movs	r2, #36	; 0x24
 800fd42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f022 0201 	bic.w	r2, r2, #1
 800fd5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fd64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	68fa      	ldr	r2, [r7, #12]
 800fd72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2220      	movs	r2, #32
 800fd78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd84:	2300      	movs	r3, #0
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3714      	adds	r7, #20
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd90:	4770      	bx	lr

0800fd92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b084      	sub	sp, #16
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	6078      	str	r0, [r7, #4]
 800fd9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	d101      	bne.n	800fdaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fda6:	2302      	movs	r3, #2
 800fda8:	e02d      	b.n	800fe06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2201      	movs	r2, #1
 800fdae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2224      	movs	r2, #36	; 0x24
 800fdb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f022 0201 	bic.w	r2, r2, #1
 800fdd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	689b      	ldr	r3, [r3, #8]
 800fdd8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	683a      	ldr	r2, [r7, #0]
 800fde2:	430a      	orrs	r2, r1
 800fde4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 f850 	bl	800fe8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2220      	movs	r2, #32
 800fdf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fe04:	2300      	movs	r3, #0
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b084      	sub	sp, #16
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
 800fe16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	d101      	bne.n	800fe26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe22:	2302      	movs	r3, #2
 800fe24:	e02d      	b.n	800fe82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2224      	movs	r2, #36	; 0x24
 800fe32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f022 0201 	bic.w	r2, r2, #1
 800fe4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	689b      	ldr	r3, [r3, #8]
 800fe54:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	683a      	ldr	r2, [r7, #0]
 800fe5e:	430a      	orrs	r2, r1
 800fe60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 f812 	bl	800fe8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	68fa      	ldr	r2, [r7, #12]
 800fe6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2220      	movs	r2, #32
 800fe74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fe80:	2300      	movs	r3, #0
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
	...

0800fe8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b085      	sub	sp, #20
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d108      	bne.n	800feae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2201      	movs	r2, #1
 800fea8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800feac:	e031      	b.n	800ff12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800feae:	2310      	movs	r3, #16
 800feb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800feb2:	2310      	movs	r3, #16
 800feb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	689b      	ldr	r3, [r3, #8]
 800febc:	0e5b      	lsrs	r3, r3, #25
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	f003 0307 	and.w	r3, r3, #7
 800fec4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	0f5b      	lsrs	r3, r3, #29
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	f003 0307 	and.w	r3, r3, #7
 800fed4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fed6:	7bbb      	ldrb	r3, [r7, #14]
 800fed8:	7b3a      	ldrb	r2, [r7, #12]
 800feda:	4911      	ldr	r1, [pc, #68]	; (800ff20 <UARTEx_SetNbDataToProcess+0x94>)
 800fedc:	5c8a      	ldrb	r2, [r1, r2]
 800fede:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fee2:	7b3a      	ldrb	r2, [r7, #12]
 800fee4:	490f      	ldr	r1, [pc, #60]	; (800ff24 <UARTEx_SetNbDataToProcess+0x98>)
 800fee6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fee8:	fb93 f3f2 	sdiv	r3, r3, r2
 800feec:	b29a      	uxth	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fef4:	7bfb      	ldrb	r3, [r7, #15]
 800fef6:	7b7a      	ldrb	r2, [r7, #13]
 800fef8:	4909      	ldr	r1, [pc, #36]	; (800ff20 <UARTEx_SetNbDataToProcess+0x94>)
 800fefa:	5c8a      	ldrb	r2, [r1, r2]
 800fefc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ff00:	7b7a      	ldrb	r2, [r7, #13]
 800ff02:	4908      	ldr	r1, [pc, #32]	; (800ff24 <UARTEx_SetNbDataToProcess+0x98>)
 800ff04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff06:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ff12:	bf00      	nop
 800ff14:	3714      	adds	r7, #20
 800ff16:	46bd      	mov	sp, r7
 800ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	080124a4 	.word	0x080124a4
 800ff24:	080124ac 	.word	0x080124ac

0800ff28 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d121      	bne.n	800ff7e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	4b27      	ldr	r3, [pc, #156]	; (800ffdc <FMC_SDRAM_Init+0xb4>)
 800ff40:	4013      	ands	r3, r2
 800ff42:	683a      	ldr	r2, [r7, #0]
 800ff44:	6851      	ldr	r1, [r2, #4]
 800ff46:	683a      	ldr	r2, [r7, #0]
 800ff48:	6892      	ldr	r2, [r2, #8]
 800ff4a:	4311      	orrs	r1, r2
 800ff4c:	683a      	ldr	r2, [r7, #0]
 800ff4e:	68d2      	ldr	r2, [r2, #12]
 800ff50:	4311      	orrs	r1, r2
 800ff52:	683a      	ldr	r2, [r7, #0]
 800ff54:	6912      	ldr	r2, [r2, #16]
 800ff56:	4311      	orrs	r1, r2
 800ff58:	683a      	ldr	r2, [r7, #0]
 800ff5a:	6952      	ldr	r2, [r2, #20]
 800ff5c:	4311      	orrs	r1, r2
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	6992      	ldr	r2, [r2, #24]
 800ff62:	4311      	orrs	r1, r2
 800ff64:	683a      	ldr	r2, [r7, #0]
 800ff66:	69d2      	ldr	r2, [r2, #28]
 800ff68:	4311      	orrs	r1, r2
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	6a12      	ldr	r2, [r2, #32]
 800ff6e:	4311      	orrs	r1, r2
 800ff70:	683a      	ldr	r2, [r7, #0]
 800ff72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ff74:	430a      	orrs	r2, r1
 800ff76:	431a      	orrs	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	601a      	str	r2, [r3, #0]
 800ff7c:	e026      	b.n	800ffcc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	69d9      	ldr	r1, [r3, #28]
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	6a1b      	ldr	r3, [r3, #32]
 800ff8e:	4319      	orrs	r1, r3
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff94:	430b      	orrs	r3, r1
 800ff96:	431a      	orrs	r2, r3
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	685a      	ldr	r2, [r3, #4]
 800ffa0:	4b0e      	ldr	r3, [pc, #56]	; (800ffdc <FMC_SDRAM_Init+0xb4>)
 800ffa2:	4013      	ands	r3, r2
 800ffa4:	683a      	ldr	r2, [r7, #0]
 800ffa6:	6851      	ldr	r1, [r2, #4]
 800ffa8:	683a      	ldr	r2, [r7, #0]
 800ffaa:	6892      	ldr	r2, [r2, #8]
 800ffac:	4311      	orrs	r1, r2
 800ffae:	683a      	ldr	r2, [r7, #0]
 800ffb0:	68d2      	ldr	r2, [r2, #12]
 800ffb2:	4311      	orrs	r1, r2
 800ffb4:	683a      	ldr	r2, [r7, #0]
 800ffb6:	6912      	ldr	r2, [r2, #16]
 800ffb8:	4311      	orrs	r1, r2
 800ffba:	683a      	ldr	r2, [r7, #0]
 800ffbc:	6952      	ldr	r2, [r2, #20]
 800ffbe:	4311      	orrs	r1, r2
 800ffc0:	683a      	ldr	r2, [r7, #0]
 800ffc2:	6992      	ldr	r2, [r2, #24]
 800ffc4:	430a      	orrs	r2, r1
 800ffc6:	431a      	orrs	r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ffcc:	2300      	movs	r3, #0
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	370c      	adds	r7, #12
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop
 800ffdc:	ffff8000 	.word	0xffff8000

0800ffe0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b085      	sub	sp, #20
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d128      	bne.n	8010044 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	1e59      	subs	r1, r3, #1
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	3b01      	subs	r3, #1
 8010006:	011b      	lsls	r3, r3, #4
 8010008:	4319      	orrs	r1, r3
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	3b01      	subs	r3, #1
 8010010:	021b      	lsls	r3, r3, #8
 8010012:	4319      	orrs	r1, r3
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	3b01      	subs	r3, #1
 801001a:	031b      	lsls	r3, r3, #12
 801001c:	4319      	orrs	r1, r3
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	691b      	ldr	r3, [r3, #16]
 8010022:	3b01      	subs	r3, #1
 8010024:	041b      	lsls	r3, r3, #16
 8010026:	4319      	orrs	r1, r3
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	695b      	ldr	r3, [r3, #20]
 801002c:	3b01      	subs	r3, #1
 801002e:	051b      	lsls	r3, r3, #20
 8010030:	4319      	orrs	r1, r3
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	699b      	ldr	r3, [r3, #24]
 8010036:	3b01      	subs	r3, #1
 8010038:	061b      	lsls	r3, r3, #24
 801003a:	430b      	orrs	r3, r1
 801003c:	431a      	orrs	r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	609a      	str	r2, [r3, #8]
 8010042:	e02d      	b.n	80100a0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	689a      	ldr	r2, [r3, #8]
 8010048:	4b19      	ldr	r3, [pc, #100]	; (80100b0 <FMC_SDRAM_Timing_Init+0xd0>)
 801004a:	4013      	ands	r3, r2
 801004c:	68ba      	ldr	r2, [r7, #8]
 801004e:	68d2      	ldr	r2, [r2, #12]
 8010050:	3a01      	subs	r2, #1
 8010052:	0311      	lsls	r1, r2, #12
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	6952      	ldr	r2, [r2, #20]
 8010058:	3a01      	subs	r2, #1
 801005a:	0512      	lsls	r2, r2, #20
 801005c:	430a      	orrs	r2, r1
 801005e:	431a      	orrs	r2, r3
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	1e59      	subs	r1, r3, #1
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	3b01      	subs	r3, #1
 8010078:	011b      	lsls	r3, r3, #4
 801007a:	4319      	orrs	r1, r3
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	3b01      	subs	r3, #1
 8010082:	021b      	lsls	r3, r3, #8
 8010084:	4319      	orrs	r1, r3
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	691b      	ldr	r3, [r3, #16]
 801008a:	3b01      	subs	r3, #1
 801008c:	041b      	lsls	r3, r3, #16
 801008e:	4319      	orrs	r1, r3
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	699b      	ldr	r3, [r3, #24]
 8010094:	3b01      	subs	r3, #1
 8010096:	061b      	lsls	r3, r3, #24
 8010098:	430b      	orrs	r3, r1
 801009a:	431a      	orrs	r2, r3
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80100a0:	2300      	movs	r3, #0
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3714      	adds	r7, #20
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	ff0f0fff 	.word	0xff0f0fff

080100b4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80100b4:	b480      	push	{r7}
 80100b6:	b085      	sub	sp, #20
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	691a      	ldr	r2, [r3, #16]
 80100c4:	4b0c      	ldr	r3, [pc, #48]	; (80100f8 <FMC_SDRAM_SendCommand+0x44>)
 80100c6:	4013      	ands	r3, r2
 80100c8:	68ba      	ldr	r2, [r7, #8]
 80100ca:	6811      	ldr	r1, [r2, #0]
 80100cc:	68ba      	ldr	r2, [r7, #8]
 80100ce:	6852      	ldr	r2, [r2, #4]
 80100d0:	4311      	orrs	r1, r2
 80100d2:	68ba      	ldr	r2, [r7, #8]
 80100d4:	6892      	ldr	r2, [r2, #8]
 80100d6:	3a01      	subs	r2, #1
 80100d8:	0152      	lsls	r2, r2, #5
 80100da:	4311      	orrs	r1, r2
 80100dc:	68ba      	ldr	r2, [r7, #8]
 80100de:	68d2      	ldr	r2, [r2, #12]
 80100e0:	0252      	lsls	r2, r2, #9
 80100e2:	430a      	orrs	r2, r1
 80100e4:	431a      	orrs	r2, r3
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80100ea:	2300      	movs	r3, #0
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3714      	adds	r7, #20
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr
 80100f8:	ffc00000 	.word	0xffc00000

080100fc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	695a      	ldr	r2, [r3, #20]
 801010a:	4b07      	ldr	r3, [pc, #28]	; (8010128 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 801010c:	4013      	ands	r3, r2
 801010e:	683a      	ldr	r2, [r7, #0]
 8010110:	0052      	lsls	r2, r2, #1
 8010112:	431a      	orrs	r2, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	370c      	adds	r7, #12
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	ffffc001 	.word	0xffffc001

0801012c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801012c:	b084      	sub	sp, #16
 801012e:	b480      	push	{r7}
 8010130:	b085      	sub	sp, #20
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	f107 001c 	add.w	r0, r7, #28
 801013a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8010142:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010144:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010146:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801014a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801014c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801014e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8010152:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	4313      	orrs	r3, r2
 8010158:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	685a      	ldr	r2, [r3, #4]
 801015e:	4b07      	ldr	r3, [pc, #28]	; (801017c <SDMMC_Init+0x50>)
 8010160:	4013      	ands	r3, r2
 8010162:	68fa      	ldr	r2, [r7, #12]
 8010164:	431a      	orrs	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801016a:	2300      	movs	r3, #0
}
 801016c:	4618      	mov	r0, r3
 801016e:	3714      	adds	r7, #20
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	b004      	add	sp, #16
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop
 801017c:	ffc02c00 	.word	0xffc02c00

08010180 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010180:	b480      	push	{r7}
 8010182:	b083      	sub	sp, #12
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801018e:	4618      	mov	r0, r3
 8010190:	370c      	adds	r7, #12
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr

0801019a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801019a:	b480      	push	{r7}
 801019c:	b083      	sub	sp, #12
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
 80101a2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101ae:	2300      	movs	r3, #0
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f043 0203 	orr.w	r2, r3, #3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80101d0:	2300      	movs	r3, #0
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	370c      	adds	r7, #12
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr

080101de <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80101de:	b480      	push	{r7}
 80101e0:	b083      	sub	sp, #12
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f003 0303 	and.w	r3, r3, #3
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	370c      	adds	r7, #12
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr
	...

080101fc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b085      	sub	sp, #20
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010206:	2300      	movs	r3, #0
 8010208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	681a      	ldr	r2, [r3, #0]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801021a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010220:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010226:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	4313      	orrs	r3, r2
 801022c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	68da      	ldr	r2, [r3, #12]
 8010232:	4b06      	ldr	r3, [pc, #24]	; (801024c <SDMMC_SendCommand+0x50>)
 8010234:	4013      	ands	r3, r2
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	431a      	orrs	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	3714      	adds	r7, #20
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	fffee0c0 	.word	0xfffee0c0

08010250 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	691b      	ldr	r3, [r3, #16]
 801025c:	b2db      	uxtb	r3, r3
}
 801025e:	4618      	mov	r0, r3
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr

0801026a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801026a:	b480      	push	{r7}
 801026c:	b085      	sub	sp, #20
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
 8010272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3314      	adds	r3, #20
 8010278:	461a      	mov	r2, r3
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	4413      	add	r3, r2
 801027e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801029a:	2300      	movs	r3, #0
 801029c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	685a      	ldr	r2, [r3, #4]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102b6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80102bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80102c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102c4:	68fa      	ldr	r2, [r7, #12]
 80102c6:	4313      	orrs	r3, r2
 80102c8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	431a      	orrs	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80102da:	2300      	movs	r3, #0

}
 80102dc:	4618      	mov	r0, r3
 80102de:	3714      	adds	r7, #20
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b088      	sub	sp, #32
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102f6:	2310      	movs	r3, #16
 80102f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010300:	2300      	movs	r3, #0
 8010302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801030a:	f107 0308 	add.w	r3, r7, #8
 801030e:	4619      	mov	r1, r3
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7ff ff73 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010316:	f241 3288 	movw	r2, #5000	; 0x1388
 801031a:	2110      	movs	r1, #16
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f000 fa5f 	bl	80107e0 <SDMMC_GetCmdResp1>
 8010322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010324:	69fb      	ldr	r3, [r7, #28]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3720      	adds	r7, #32
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b088      	sub	sp, #32
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801033c:	2311      	movs	r3, #17
 801033e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010346:	2300      	movs	r3, #0
 8010348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801034a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801034e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010350:	f107 0308 	add.w	r3, r7, #8
 8010354:	4619      	mov	r1, r3
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f7ff ff50 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801035c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010360:	2111      	movs	r1, #17
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f000 fa3c 	bl	80107e0 <SDMMC_GetCmdResp1>
 8010368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801036a:	69fb      	ldr	r3, [r7, #28]
}
 801036c:	4618      	mov	r0, r3
 801036e:	3720      	adds	r7, #32
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b088      	sub	sp, #32
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010382:	2312      	movs	r3, #18
 8010384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010386:	f44f 7380 	mov.w	r3, #256	; 0x100
 801038a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801038c:	2300      	movs	r3, #0
 801038e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010394:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010396:	f107 0308 	add.w	r3, r7, #8
 801039a:	4619      	mov	r1, r3
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7ff ff2d 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80103a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80103a6:	2112      	movs	r1, #18
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 fa19 	bl	80107e0 <SDMMC_GetCmdResp1>
 80103ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103b0:	69fb      	ldr	r3, [r7, #28]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3720      	adds	r7, #32
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b088      	sub	sp, #32
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
 80103c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80103c8:	2318      	movs	r3, #24
 80103ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103d2:	2300      	movs	r3, #0
 80103d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103dc:	f107 0308 	add.w	r3, r7, #8
 80103e0:	4619      	mov	r1, r3
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7ff ff0a 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80103e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80103ec:	2118      	movs	r1, #24
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f9f6 	bl	80107e0 <SDMMC_GetCmdResp1>
 80103f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103f6:	69fb      	ldr	r3, [r7, #28]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3720      	adds	r7, #32
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b088      	sub	sp, #32
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801040e:	2319      	movs	r3, #25
 8010410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010418:	2300      	movs	r3, #0
 801041a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801041c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010420:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010422:	f107 0308 	add.w	r3, r7, #8
 8010426:	4619      	mov	r1, r3
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7ff fee7 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801042e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010432:	2119      	movs	r1, #25
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f000 f9d3 	bl	80107e0 <SDMMC_GetCmdResp1>
 801043a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801043c:	69fb      	ldr	r3, [r7, #28]
}
 801043e:	4618      	mov	r0, r3
 8010440:	3720      	adds	r7, #32
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
	...

08010448 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b088      	sub	sp, #32
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010450:	2300      	movs	r3, #0
 8010452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010454:	230c      	movs	r3, #12
 8010456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010458:	f44f 7380 	mov.w	r3, #256	; 0x100
 801045c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801045e:	2300      	movs	r3, #0
 8010460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010466:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010480:	f107 0308 	add.w	r3, r7, #8
 8010484:	4619      	mov	r1, r3
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f7ff feb8 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801048c:	4a0b      	ldr	r2, [pc, #44]	; (80104bc <SDMMC_CmdStopTransfer+0x74>)
 801048e:	210c      	movs	r1, #12
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 f9a5 	bl	80107e0 <SDMMC_GetCmdResp1>
 8010496:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104aa:	d101      	bne.n	80104b0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80104ac:	2300      	movs	r3, #0
 80104ae:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80104b0:	69fb      	ldr	r3, [r7, #28]
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3720      	adds	r7, #32
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	05f5e100 	.word	0x05f5e100

080104c0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b088      	sub	sp, #32
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80104ce:	2307      	movs	r3, #7
 80104d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104d8:	2300      	movs	r3, #0
 80104da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104e2:	f107 0308 	add.w	r3, r7, #8
 80104e6:	4619      	mov	r1, r3
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f7ff fe87 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80104ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80104f2:	2107      	movs	r1, #7
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 f973 	bl	80107e0 <SDMMC_GetCmdResp1>
 80104fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104fc:	69fb      	ldr	r3, [r7, #28]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3720      	adds	r7, #32
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010506:	b580      	push	{r7, lr}
 8010508:	b088      	sub	sp, #32
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801050e:	2300      	movs	r3, #0
 8010510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010512:	2300      	movs	r3, #0
 8010514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010516:	2300      	movs	r3, #0
 8010518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801051a:	2300      	movs	r3, #0
 801051c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801051e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010522:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010524:	f107 0308 	add.w	r3, r7, #8
 8010528:	4619      	mov	r1, r3
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7ff fe66 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 fb97 	bl	8010c64 <SDMMC_GetCmdError>
 8010536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010538:	69fb      	ldr	r3, [r7, #28]
}
 801053a:	4618      	mov	r0, r3
 801053c:	3720      	adds	r7, #32
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b088      	sub	sp, #32
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801054a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801054e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010550:	2308      	movs	r3, #8
 8010552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801055a:	2300      	movs	r3, #0
 801055c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801055e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010562:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010564:	f107 0308 	add.w	r3, r7, #8
 8010568:	4619      	mov	r1, r3
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7ff fe46 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f000 fb29 	bl	8010bc8 <SDMMC_GetCmdResp7>
 8010576:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010578:	69fb      	ldr	r3, [r7, #28]
}
 801057a:	4618      	mov	r0, r3
 801057c:	3720      	adds	r7, #32
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b088      	sub	sp, #32
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
 801058a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010590:	2337      	movs	r3, #55	; 0x37
 8010592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801059a:	2300      	movs	r3, #0
 801059c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105a4:	f107 0308 	add.w	r3, r7, #8
 80105a8:	4619      	mov	r1, r3
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f7ff fe26 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80105b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80105b4:	2137      	movs	r1, #55	; 0x37
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 f912 	bl	80107e0 <SDMMC_GetCmdResp1>
 80105bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105be:	69fb      	ldr	r3, [r7, #28]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3720      	adds	r7, #32
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b088      	sub	sp, #32
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80105d6:	2329      	movs	r3, #41	; 0x29
 80105d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105e0:	2300      	movs	r3, #0
 80105e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105ea:	f107 0308 	add.w	r3, r7, #8
 80105ee:	4619      	mov	r1, r3
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f7ff fe03 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 fa2e 	bl	8010a58 <SDMMC_GetCmdResp3>
 80105fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105fe:	69fb      	ldr	r3, [r7, #28]
}
 8010600:	4618      	mov	r0, r3
 8010602:	3720      	adds	r7, #32
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b088      	sub	sp, #32
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010616:	2306      	movs	r3, #6
 8010618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801061a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801061e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010620:	2300      	movs	r3, #0
 8010622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010628:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801062a:	f107 0308 	add.w	r3, r7, #8
 801062e:	4619      	mov	r1, r3
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7ff fde3 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010636:	f241 3288 	movw	r2, #5000	; 0x1388
 801063a:	2106      	movs	r1, #6
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f000 f8cf 	bl	80107e0 <SDMMC_GetCmdResp1>
 8010642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010644:	69fb      	ldr	r3, [r7, #28]
}
 8010646:	4618      	mov	r0, r3
 8010648:	3720      	adds	r7, #32
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801064e:	b580      	push	{r7, lr}
 8010650:	b088      	sub	sp, #32
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010656:	2300      	movs	r3, #0
 8010658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801065a:	2333      	movs	r3, #51	; 0x33
 801065c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801065e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010664:	2300      	movs	r3, #0
 8010666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801066c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801066e:	f107 0308 	add.w	r3, r7, #8
 8010672:	4619      	mov	r1, r3
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f7ff fdc1 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801067a:	f241 3288 	movw	r2, #5000	; 0x1388
 801067e:	2133      	movs	r1, #51	; 0x33
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 f8ad 	bl	80107e0 <SDMMC_GetCmdResp1>
 8010686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010688:	69fb      	ldr	r3, [r7, #28]
}
 801068a:	4618      	mov	r0, r3
 801068c:	3720      	adds	r7, #32
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b088      	sub	sp, #32
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801069a:	2300      	movs	r3, #0
 801069c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801069e:	2302      	movs	r3, #2
 80106a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80106a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106a8:	2300      	movs	r3, #0
 80106aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106b2:	f107 0308 	add.w	r3, r7, #8
 80106b6:	4619      	mov	r1, r3
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7ff fd9f 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f000 f980 	bl	80109c4 <SDMMC_GetCmdResp2>
 80106c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106c6:	69fb      	ldr	r3, [r7, #28]
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3720      	adds	r7, #32
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b088      	sub	sp, #32
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106de:	2309      	movs	r3, #9
 80106e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80106e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106e8:	2300      	movs	r3, #0
 80106ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106f2:	f107 0308 	add.w	r3, r7, #8
 80106f6:	4619      	mov	r1, r3
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7ff fd7f 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f000 f960 	bl	80109c4 <SDMMC_GetCmdResp2>
 8010704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010706:	69fb      	ldr	r3, [r7, #28]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3720      	adds	r7, #32
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b088      	sub	sp, #32
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801071a:	2300      	movs	r3, #0
 801071c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801071e:	2303      	movs	r3, #3
 8010720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010728:	2300      	movs	r3, #0
 801072a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010730:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010732:	f107 0308 	add.w	r3, r7, #8
 8010736:	4619      	mov	r1, r3
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f7ff fd5f 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801073e:	683a      	ldr	r2, [r7, #0]
 8010740:	2103      	movs	r1, #3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 f9c8 	bl	8010ad8 <SDMMC_GetCmdResp6>
 8010748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801074a:	69fb      	ldr	r3, [r7, #28]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3720      	adds	r7, #32
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b088      	sub	sp, #32
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010762:	230d      	movs	r3, #13
 8010764:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010766:	f44f 7380 	mov.w	r3, #256	; 0x100
 801076a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801076c:	2300      	movs	r3, #0
 801076e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010774:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010776:	f107 0308 	add.w	r3, r7, #8
 801077a:	4619      	mov	r1, r3
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7ff fd3d 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010782:	f241 3288 	movw	r2, #5000	; 0x1388
 8010786:	210d      	movs	r1, #13
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 f829 	bl	80107e0 <SDMMC_GetCmdResp1>
 801078e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010790:	69fb      	ldr	r3, [r7, #28]
}
 8010792:	4618      	mov	r0, r3
 8010794:	3720      	adds	r7, #32
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}

0801079a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801079a:	b580      	push	{r7, lr}
 801079c:	b088      	sub	sp, #32
 801079e:	af00      	add	r7, sp, #0
 80107a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80107a2:	2300      	movs	r3, #0
 80107a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80107a6:	230d      	movs	r3, #13
 80107a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107b0:	2300      	movs	r3, #0
 80107b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107ba:	f107 0308 	add.w	r3, r7, #8
 80107be:	4619      	mov	r1, r3
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7ff fd1b 	bl	80101fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80107c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80107ca:	210d      	movs	r1, #13
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 f807 	bl	80107e0 <SDMMC_GetCmdResp1>
 80107d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107d4:	69fb      	ldr	r3, [r7, #28]
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3720      	adds	r7, #32
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
	...

080107e0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b088      	sub	sp, #32
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	460b      	mov	r3, r1
 80107ea:	607a      	str	r2, [r7, #4]
 80107ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80107ee:	4b70      	ldr	r3, [pc, #448]	; (80109b0 <SDMMC_GetCmdResp1+0x1d0>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	4a70      	ldr	r2, [pc, #448]	; (80109b4 <SDMMC_GetCmdResp1+0x1d4>)
 80107f4:	fba2 2303 	umull	r2, r3, r2, r3
 80107f8:	0a5a      	lsrs	r2, r3, #9
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	fb02 f303 	mul.w	r3, r2, r3
 8010800:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	1e5a      	subs	r2, r3, #1
 8010806:	61fa      	str	r2, [r7, #28]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d102      	bne.n	8010812 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801080c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010810:	e0c9      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010816:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010818:	69ba      	ldr	r2, [r7, #24]
 801081a:	4b67      	ldr	r3, [pc, #412]	; (80109b8 <SDMMC_GetCmdResp1+0x1d8>)
 801081c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801081e:	2b00      	cmp	r3, #0
 8010820:	d0ef      	beq.n	8010802 <SDMMC_GetCmdResp1+0x22>
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010828:	2b00      	cmp	r3, #0
 801082a:	d1ea      	bne.n	8010802 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010830:	f003 0304 	and.w	r3, r3, #4
 8010834:	2b00      	cmp	r3, #0
 8010836:	d004      	beq.n	8010842 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2204      	movs	r2, #4
 801083c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801083e:	2304      	movs	r3, #4
 8010840:	e0b1      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010846:	f003 0301 	and.w	r3, r3, #1
 801084a:	2b00      	cmp	r3, #0
 801084c:	d004      	beq.n	8010858 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2201      	movs	r2, #1
 8010852:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010854:	2301      	movs	r3, #1
 8010856:	e0a6      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	4a58      	ldr	r2, [pc, #352]	; (80109bc <SDMMC_GetCmdResp1+0x1dc>)
 801085c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	f7ff fcf6 	bl	8010250 <SDMMC_GetCommandResponse>
 8010864:	4603      	mov	r3, r0
 8010866:	461a      	mov	r2, r3
 8010868:	7afb      	ldrb	r3, [r7, #11]
 801086a:	4293      	cmp	r3, r2
 801086c:	d001      	beq.n	8010872 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801086e:	2301      	movs	r3, #1
 8010870:	e099      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010872:	2100      	movs	r1, #0
 8010874:	68f8      	ldr	r0, [r7, #12]
 8010876:	f7ff fcf8 	bl	801026a <SDMMC_GetResponse>
 801087a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801087c:	697a      	ldr	r2, [r7, #20]
 801087e:	4b50      	ldr	r3, [pc, #320]	; (80109c0 <SDMMC_GetCmdResp1+0x1e0>)
 8010880:	4013      	ands	r3, r2
 8010882:	2b00      	cmp	r3, #0
 8010884:	d101      	bne.n	801088a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010886:	2300      	movs	r3, #0
 8010888:	e08d      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	2b00      	cmp	r3, #0
 801088e:	da02      	bge.n	8010896 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010894:	e087      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801089c:	2b00      	cmp	r3, #0
 801089e:	d001      	beq.n	80108a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80108a0:	2340      	movs	r3, #64	; 0x40
 80108a2:	e080      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d001      	beq.n	80108b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80108ae:	2380      	movs	r3, #128	; 0x80
 80108b0:	e079      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d002      	beq.n	80108c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80108bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108c0:	e071      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d002      	beq.n	80108d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80108cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108d0:	e069      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80108dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108e0:	e061      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d002      	beq.n	80108f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80108ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108f0:	e059      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d002      	beq.n	8010902 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010900:	e051      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010910:	e049      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801091c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010920:	e041      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801092c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010930:	e039      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010938:	2b00      	cmp	r3, #0
 801093a:	d002      	beq.n	8010942 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801093c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010940:	e031      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801094c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010950:	e029      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801095c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010960:	e021      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010968:	2b00      	cmp	r3, #0
 801096a:	d002      	beq.n	8010972 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801096c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010970:	e019      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010978:	2b00      	cmp	r3, #0
 801097a:	d002      	beq.n	8010982 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801097c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010980:	e011      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010988:	2b00      	cmp	r3, #0
 801098a:	d002      	beq.n	8010992 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801098c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010990:	e009      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	f003 0308 	and.w	r3, r3, #8
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801099c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80109a0:	e001      	b.n	80109a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3720      	adds	r7, #32
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	24000008 	.word	0x24000008
 80109b4:	10624dd3 	.word	0x10624dd3
 80109b8:	00200045 	.word	0x00200045
 80109bc:	002000c5 	.word	0x002000c5
 80109c0:	fdffe008 	.word	0xfdffe008

080109c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80109c4:	b480      	push	{r7}
 80109c6:	b085      	sub	sp, #20
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109cc:	4b1f      	ldr	r3, [pc, #124]	; (8010a4c <SDMMC_GetCmdResp2+0x88>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a1f      	ldr	r2, [pc, #124]	; (8010a50 <SDMMC_GetCmdResp2+0x8c>)
 80109d2:	fba2 2303 	umull	r2, r3, r2, r3
 80109d6:	0a5b      	lsrs	r3, r3, #9
 80109d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80109dc:	fb02 f303 	mul.w	r3, r2, r3
 80109e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	1e5a      	subs	r2, r3, #1
 80109e6:	60fa      	str	r2, [r7, #12]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d102      	bne.n	80109f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109f0:	e026      	b.n	8010a40 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d0ef      	beq.n	80109e2 <SDMMC_GetCmdResp2+0x1e>
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d1ea      	bne.n	80109e2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a10:	f003 0304 	and.w	r3, r3, #4
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d004      	beq.n	8010a22 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2204      	movs	r2, #4
 8010a1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a1e:	2304      	movs	r3, #4
 8010a20:	e00e      	b.n	8010a40 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a26:	f003 0301 	and.w	r3, r3, #1
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d004      	beq.n	8010a38 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2201      	movs	r2, #1
 8010a32:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a34:	2301      	movs	r3, #1
 8010a36:	e003      	b.n	8010a40 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4a06      	ldr	r2, [pc, #24]	; (8010a54 <SDMMC_GetCmdResp2+0x90>)
 8010a3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a3e:	2300      	movs	r3, #0
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3714      	adds	r7, #20
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr
 8010a4c:	24000008 	.word	0x24000008
 8010a50:	10624dd3 	.word	0x10624dd3
 8010a54:	002000c5 	.word	0x002000c5

08010a58 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a60:	4b1a      	ldr	r3, [pc, #104]	; (8010acc <SDMMC_GetCmdResp3+0x74>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a1a      	ldr	r2, [pc, #104]	; (8010ad0 <SDMMC_GetCmdResp3+0x78>)
 8010a66:	fba2 2303 	umull	r2, r3, r2, r3
 8010a6a:	0a5b      	lsrs	r3, r3, #9
 8010a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a70:	fb02 f303 	mul.w	r3, r2, r3
 8010a74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	1e5a      	subs	r2, r3, #1
 8010a7a:	60fa      	str	r2, [r7, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d102      	bne.n	8010a86 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a84:	e01b      	b.n	8010abe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a8a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d0ef      	beq.n	8010a76 <SDMMC_GetCmdResp3+0x1e>
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d1ea      	bne.n	8010a76 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa4:	f003 0304 	and.w	r3, r3, #4
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d004      	beq.n	8010ab6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2204      	movs	r2, #4
 8010ab0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ab2:	2304      	movs	r3, #4
 8010ab4:	e003      	b.n	8010abe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	4a06      	ldr	r2, [pc, #24]	; (8010ad4 <SDMMC_GetCmdResp3+0x7c>)
 8010aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3714      	adds	r7, #20
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	24000008 	.word	0x24000008
 8010ad0:	10624dd3 	.word	0x10624dd3
 8010ad4:	002000c5 	.word	0x002000c5

08010ad8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b088      	sub	sp, #32
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	60f8      	str	r0, [r7, #12]
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	607a      	str	r2, [r7, #4]
 8010ae4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ae6:	4b35      	ldr	r3, [pc, #212]	; (8010bbc <SDMMC_GetCmdResp6+0xe4>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a35      	ldr	r2, [pc, #212]	; (8010bc0 <SDMMC_GetCmdResp6+0xe8>)
 8010aec:	fba2 2303 	umull	r2, r3, r2, r3
 8010af0:	0a5b      	lsrs	r3, r3, #9
 8010af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010af6:	fb02 f303 	mul.w	r3, r2, r3
 8010afa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	1e5a      	subs	r2, r3, #1
 8010b00:	61fa      	str	r2, [r7, #28]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d102      	bne.n	8010b0c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b0a:	e052      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b10:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b12:	69bb      	ldr	r3, [r7, #24]
 8010b14:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d0ef      	beq.n	8010afc <SDMMC_GetCmdResp6+0x24>
 8010b1c:	69bb      	ldr	r3, [r7, #24]
 8010b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1ea      	bne.n	8010afc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b2a:	f003 0304 	and.w	r3, r3, #4
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d004      	beq.n	8010b3c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2204      	movs	r2, #4
 8010b36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b38:	2304      	movs	r3, #4
 8010b3a:	e03a      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b40:	f003 0301 	and.w	r3, r3, #1
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d004      	beq.n	8010b52 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e02f      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010b52:	68f8      	ldr	r0, [r7, #12]
 8010b54:	f7ff fb7c 	bl	8010250 <SDMMC_GetCommandResponse>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	7afb      	ldrb	r3, [r7, #11]
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d001      	beq.n	8010b66 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b62:	2301      	movs	r3, #1
 8010b64:	e025      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	4a16      	ldr	r2, [pc, #88]	; (8010bc4 <SDMMC_GetCmdResp6+0xec>)
 8010b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010b6c:	2100      	movs	r1, #0
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f7ff fb7b 	bl	801026a <SDMMC_GetResponse>
 8010b74:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d106      	bne.n	8010b8e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	0c1b      	lsrs	r3, r3, #16
 8010b84:	b29a      	uxth	r2, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	e011      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d002      	beq.n	8010b9e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b9c:	e009      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d002      	beq.n	8010bae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bac:	e001      	b.n	8010bb2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3720      	adds	r7, #32
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	24000008 	.word	0x24000008
 8010bc0:	10624dd3 	.word	0x10624dd3
 8010bc4:	002000c5 	.word	0x002000c5

08010bc8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010bd0:	4b22      	ldr	r3, [pc, #136]	; (8010c5c <SDMMC_GetCmdResp7+0x94>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4a22      	ldr	r2, [pc, #136]	; (8010c60 <SDMMC_GetCmdResp7+0x98>)
 8010bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8010bda:	0a5b      	lsrs	r3, r3, #9
 8010bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010be0:	fb02 f303 	mul.w	r3, r2, r3
 8010be4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	1e5a      	subs	r2, r3, #1
 8010bea:	60fa      	str	r2, [r7, #12]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d102      	bne.n	8010bf6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bf4:	e02c      	b.n	8010c50 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bfa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d0ef      	beq.n	8010be6 <SDMMC_GetCmdResp7+0x1e>
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d1ea      	bne.n	8010be6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c14:	f003 0304 	and.w	r3, r3, #4
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d004      	beq.n	8010c26 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2204      	movs	r2, #4
 8010c20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c22:	2304      	movs	r3, #4
 8010c24:	e014      	b.n	8010c50 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c2a:	f003 0301 	and.w	r3, r3, #1
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d004      	beq.n	8010c3c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2201      	movs	r2, #1
 8010c36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e009      	b.n	8010c50 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d002      	beq.n	8010c4e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2240      	movs	r2, #64	; 0x40
 8010c4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c4e:	2300      	movs	r3, #0

}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3714      	adds	r7, #20
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr
 8010c5c:	24000008 	.word	0x24000008
 8010c60:	10624dd3 	.word	0x10624dd3

08010c64 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c6c:	4b11      	ldr	r3, [pc, #68]	; (8010cb4 <SDMMC_GetCmdError+0x50>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a11      	ldr	r2, [pc, #68]	; (8010cb8 <SDMMC_GetCmdError+0x54>)
 8010c72:	fba2 2303 	umull	r2, r3, r2, r3
 8010c76:	0a5b      	lsrs	r3, r3, #9
 8010c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c7c:	fb02 f303 	mul.w	r3, r2, r3
 8010c80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	1e5a      	subs	r2, r3, #1
 8010c86:	60fa      	str	r2, [r7, #12]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d102      	bne.n	8010c92 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c90:	e009      	b.n	8010ca6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d0f1      	beq.n	8010c82 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4a06      	ldr	r2, [pc, #24]	; (8010cbc <SDMMC_GetCmdError+0x58>)
 8010ca2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010ca4:	2300      	movs	r3, #0
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3714      	adds	r7, #20
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop
 8010cb4:	24000008 	.word	0x24000008
 8010cb8:	10624dd3 	.word	0x10624dd3
 8010cbc:	002000c5 	.word	0x002000c5

08010cc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010cc4:	4904      	ldr	r1, [pc, #16]	; (8010cd8 <MX_FATFS_Init+0x18>)
 8010cc6:	4805      	ldr	r0, [pc, #20]	; (8010cdc <MX_FATFS_Init+0x1c>)
 8010cc8:	f000 fef0 	bl	8011aac <FATFS_LinkDriver>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	461a      	mov	r2, r3
 8010cd0:	4b03      	ldr	r3, [pc, #12]	; (8010ce0 <MX_FATFS_Init+0x20>)
 8010cd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010cd4:	bf00      	nop
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	240087a4 	.word	0x240087a4
 8010cdc:	080124b4 	.word	0x080124b4
 8010ce0:	240087a0 	.word	0x240087a0

08010ce4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010cea:	2300      	movs	r3, #0
 8010cec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010cee:	f000 f885 	bl	8010dfc <BSP_SD_IsDetected>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d001      	beq.n	8010cfc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010cf8:	2302      	movs	r3, #2
 8010cfa:	e012      	b.n	8010d22 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010cfc:	480b      	ldr	r0, [pc, #44]	; (8010d2c <BSP_SD_Init+0x48>)
 8010cfe:	f7f8 fc07 	bl	8009510 <HAL_SD_Init>
 8010d02:	4603      	mov	r3, r0
 8010d04:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010d06:	79fb      	ldrb	r3, [r7, #7]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d109      	bne.n	8010d20 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010d0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010d10:	4806      	ldr	r0, [pc, #24]	; (8010d2c <BSP_SD_Init+0x48>)
 8010d12:	f7f9 fab7 	bl	800a284 <HAL_SD_ConfigWideBusOperation>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d001      	beq.n	8010d20 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010d20:	79fb      	ldrb	r3, [r7, #7]
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3708      	adds	r7, #8
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	240080a0 	.word	0x240080a0

08010d30 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b086      	sub	sp, #24
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	60f8      	str	r0, [r7, #12]
 8010d38:	60b9      	str	r1, [r7, #8]
 8010d3a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	68ba      	ldr	r2, [r7, #8]
 8010d44:	68f9      	ldr	r1, [r7, #12]
 8010d46:	4806      	ldr	r0, [pc, #24]	; (8010d60 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010d48:	f7f8 fcfc 	bl	8009744 <HAL_SD_ReadBlocks_DMA>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d001      	beq.n	8010d56 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d52:	2301      	movs	r3, #1
 8010d54:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3718      	adds	r7, #24
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	240080a0 	.word	0x240080a0

08010d64 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b086      	sub	sp, #24
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d70:	2300      	movs	r3, #0
 8010d72:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	68ba      	ldr	r2, [r7, #8]
 8010d78:	68f9      	ldr	r1, [r7, #12]
 8010d7a:	4806      	ldr	r0, [pc, #24]	; (8010d94 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010d7c:	f7f8 fd8a 	bl	8009894 <HAL_SD_WriteBlocks_DMA>
 8010d80:	4603      	mov	r3, r0
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d001      	beq.n	8010d8a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3718      	adds	r7, #24
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	240080a0 	.word	0x240080a0

08010d98 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010d9c:	4805      	ldr	r0, [pc, #20]	; (8010db4 <BSP_SD_GetCardState+0x1c>)
 8010d9e:	f7f9 fb83 	bl	800a4a8 <HAL_SD_GetCardState>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b04      	cmp	r3, #4
 8010da6:	bf14      	ite	ne
 8010da8:	2301      	movne	r3, #1
 8010daa:	2300      	moveq	r3, #0
 8010dac:	b2db      	uxtb	r3, r3
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	240080a0 	.word	0x240080a0

08010db8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b082      	sub	sp, #8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010dc0:	6879      	ldr	r1, [r7, #4]
 8010dc2:	4803      	ldr	r0, [pc, #12]	; (8010dd0 <BSP_SD_GetCardInfo+0x18>)
 8010dc4:	f7f9 fa32 	bl	800a22c <HAL_SD_GetCardInfo>
}
 8010dc8:	bf00      	nop
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	240080a0 	.word	0x240080a0

08010dd4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010ddc:	f000 f984 	bl	80110e8 <BSP_SD_WriteCpltCallback>
}
 8010de0:	bf00      	nop
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010df0:	f000 f986 	bl	8011100 <BSP_SD_ReadCpltCallback>
}
 8010df4:	bf00      	nop
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010e02:	2301      	movs	r3, #1
 8010e04:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8010e06:	79fb      	ldrb	r3, [r7, #7]
 8010e08:	b2db      	uxtb	r3, r3
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	370c      	adds	r7, #12
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e14:	4770      	bx	lr

08010e16 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b084      	sub	sp, #16
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010e1e:	f7f2 f8bb 	bl	8002f98 <HAL_GetTick>
 8010e22:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010e24:	e006      	b.n	8010e34 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e26:	f7ff ffb7 	bl	8010d98 <BSP_SD_GetCardState>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d101      	bne.n	8010e34 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010e30:	2300      	movs	r3, #0
 8010e32:	e009      	b.n	8010e48 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010e34:	f7f2 f8b0 	bl	8002f98 <HAL_GetTick>
 8010e38:	4602      	mov	r2, r0
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	1ad3      	subs	r3, r2, r3
 8010e3e:	687a      	ldr	r2, [r7, #4]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d8f0      	bhi.n	8010e26 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	4603      	mov	r3, r0
 8010e58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e5a:	4b0b      	ldr	r3, [pc, #44]	; (8010e88 <SD_CheckStatus+0x38>)
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e60:	f7ff ff9a 	bl	8010d98 <BSP_SD_GetCardState>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d107      	bne.n	8010e7a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e6a:	4b07      	ldr	r3, [pc, #28]	; (8010e88 <SD_CheckStatus+0x38>)
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	f023 0301 	bic.w	r3, r3, #1
 8010e74:	b2da      	uxtb	r2, r3
 8010e76:	4b04      	ldr	r3, [pc, #16]	; (8010e88 <SD_CheckStatus+0x38>)
 8010e78:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e7a:	4b03      	ldr	r3, [pc, #12]	; (8010e88 <SD_CheckStatus+0x38>)
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	b2db      	uxtb	r3, r3
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	24000015 	.word	0x24000015

08010e8c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	4603      	mov	r3, r0
 8010e94:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010e96:	f7ff ff25 	bl	8010ce4 <BSP_SD_Init>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d107      	bne.n	8010eb0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010ea0:	79fb      	ldrb	r3, [r7, #7]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7ff ffd4 	bl	8010e50 <SD_CheckStatus>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	461a      	mov	r2, r3
 8010eac:	4b04      	ldr	r3, [pc, #16]	; (8010ec0 <SD_initialize+0x34>)
 8010eae:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010eb0:	4b03      	ldr	r3, [pc, #12]	; (8010ec0 <SD_initialize+0x34>)
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	b2db      	uxtb	r3, r3
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3708      	adds	r7, #8
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	24000015 	.word	0x24000015

08010ec4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	4603      	mov	r3, r0
 8010ecc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010ece:	79fb      	ldrb	r3, [r7, #7]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7ff ffbd 	bl	8010e50 <SD_CheckStatus>
 8010ed6:	4603      	mov	r3, r0
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b086      	sub	sp, #24
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60b9      	str	r1, [r7, #8]
 8010ee8:	607a      	str	r2, [r7, #4]
 8010eea:	603b      	str	r3, [r7, #0]
 8010eec:	4603      	mov	r3, r0
 8010eee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010ef4:	f247 5030 	movw	r0, #30000	; 0x7530
 8010ef8:	f7ff ff8d 	bl	8010e16 <SD_CheckStatusWithTimeout>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	da01      	bge.n	8010f06 <SD_read+0x26>
  {
    return res;
 8010f02:	7dfb      	ldrb	r3, [r7, #23]
 8010f04:	e03b      	b.n	8010f7e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010f06:	683a      	ldr	r2, [r7, #0]
 8010f08:	6879      	ldr	r1, [r7, #4]
 8010f0a:	68b8      	ldr	r0, [r7, #8]
 8010f0c:	f7ff ff10 	bl	8010d30 <BSP_SD_ReadBlocks_DMA>
 8010f10:	4603      	mov	r3, r0
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d132      	bne.n	8010f7c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010f16:	4b1c      	ldr	r3, [pc, #112]	; (8010f88 <SD_read+0xa8>)
 8010f18:	2200      	movs	r2, #0
 8010f1a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010f1c:	f7f2 f83c 	bl	8002f98 <HAL_GetTick>
 8010f20:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f22:	bf00      	nop
 8010f24:	4b18      	ldr	r3, [pc, #96]	; (8010f88 <SD_read+0xa8>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d108      	bne.n	8010f3e <SD_read+0x5e>
 8010f2c:	f7f2 f834 	bl	8002f98 <HAL_GetTick>
 8010f30:	4602      	mov	r2, r0
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	1ad3      	subs	r3, r2, r3
 8010f36:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d9f2      	bls.n	8010f24 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010f3e:	4b12      	ldr	r3, [pc, #72]	; (8010f88 <SD_read+0xa8>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d102      	bne.n	8010f4c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010f46:	2301      	movs	r3, #1
 8010f48:	75fb      	strb	r3, [r7, #23]
 8010f4a:	e017      	b.n	8010f7c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010f4c:	4b0e      	ldr	r3, [pc, #56]	; (8010f88 <SD_read+0xa8>)
 8010f4e:	2200      	movs	r2, #0
 8010f50:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f52:	f7f2 f821 	bl	8002f98 <HAL_GetTick>
 8010f56:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f58:	e007      	b.n	8010f6a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f5a:	f7ff ff1d 	bl	8010d98 <BSP_SD_GetCardState>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d102      	bne.n	8010f6a <SD_read+0x8a>
          {
            res = RES_OK;
 8010f64:	2300      	movs	r3, #0
 8010f66:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010f68:	e008      	b.n	8010f7c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f6a:	f7f2 f815 	bl	8002f98 <HAL_GetTick>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	1ad3      	subs	r3, r2, r3
 8010f74:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f78:	4293      	cmp	r3, r2
 8010f7a:	d9ee      	bls.n	8010f5a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3718      	adds	r7, #24
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	240089dc 	.word	0x240089dc

08010f8c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b086      	sub	sp, #24
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	60b9      	str	r1, [r7, #8]
 8010f94:	607a      	str	r2, [r7, #4]
 8010f96:	603b      	str	r3, [r7, #0]
 8010f98:	4603      	mov	r3, r0
 8010f9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010fa0:	4b24      	ldr	r3, [pc, #144]	; (8011034 <SD_write+0xa8>)
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010fa6:	f247 5030 	movw	r0, #30000	; 0x7530
 8010faa:	f7ff ff34 	bl	8010e16 <SD_CheckStatusWithTimeout>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	da01      	bge.n	8010fb8 <SD_write+0x2c>
  {
    return res;
 8010fb4:	7dfb      	ldrb	r3, [r7, #23]
 8010fb6:	e038      	b.n	801102a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010fb8:	683a      	ldr	r2, [r7, #0]
 8010fba:	6879      	ldr	r1, [r7, #4]
 8010fbc:	68b8      	ldr	r0, [r7, #8]
 8010fbe:	f7ff fed1 	bl	8010d64 <BSP_SD_WriteBlocks_DMA>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d12f      	bne.n	8011028 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010fc8:	f7f1 ffe6 	bl	8002f98 <HAL_GetTick>
 8010fcc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010fce:	bf00      	nop
 8010fd0:	4b18      	ldr	r3, [pc, #96]	; (8011034 <SD_write+0xa8>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d108      	bne.n	8010fea <SD_write+0x5e>
 8010fd8:	f7f1 ffde 	bl	8002f98 <HAL_GetTick>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	1ad3      	subs	r3, r2, r3
 8010fe2:	f247 522f 	movw	r2, #29999	; 0x752f
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d9f2      	bls.n	8010fd0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010fea:	4b12      	ldr	r3, [pc, #72]	; (8011034 <SD_write+0xa8>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d102      	bne.n	8010ff8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	75fb      	strb	r3, [r7, #23]
 8010ff6:	e017      	b.n	8011028 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010ff8:	4b0e      	ldr	r3, [pc, #56]	; (8011034 <SD_write+0xa8>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010ffe:	f7f1 ffcb 	bl	8002f98 <HAL_GetTick>
 8011002:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011004:	e007      	b.n	8011016 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011006:	f7ff fec7 	bl	8010d98 <BSP_SD_GetCardState>
 801100a:	4603      	mov	r3, r0
 801100c:	2b00      	cmp	r3, #0
 801100e:	d102      	bne.n	8011016 <SD_write+0x8a>
          {
            res = RES_OK;
 8011010:	2300      	movs	r3, #0
 8011012:	75fb      	strb	r3, [r7, #23]
            break;
 8011014:	e008      	b.n	8011028 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011016:	f7f1 ffbf 	bl	8002f98 <HAL_GetTick>
 801101a:	4602      	mov	r2, r0
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	f247 522f 	movw	r2, #29999	; 0x752f
 8011024:	4293      	cmp	r3, r2
 8011026:	d9ee      	bls.n	8011006 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011028:	7dfb      	ldrb	r3, [r7, #23]
}
 801102a:	4618      	mov	r0, r3
 801102c:	3718      	adds	r7, #24
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	240089d8 	.word	0x240089d8

08011038 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b08c      	sub	sp, #48	; 0x30
 801103c:	af00      	add	r7, sp, #0
 801103e:	4603      	mov	r3, r0
 8011040:	603a      	str	r2, [r7, #0]
 8011042:	71fb      	strb	r3, [r7, #7]
 8011044:	460b      	mov	r3, r1
 8011046:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011048:	2301      	movs	r3, #1
 801104a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801104e:	4b25      	ldr	r3, [pc, #148]	; (80110e4 <SD_ioctl+0xac>)
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	b2db      	uxtb	r3, r3
 8011054:	f003 0301 	and.w	r3, r3, #1
 8011058:	2b00      	cmp	r3, #0
 801105a:	d001      	beq.n	8011060 <SD_ioctl+0x28>
 801105c:	2303      	movs	r3, #3
 801105e:	e03c      	b.n	80110da <SD_ioctl+0xa2>

  switch (cmd)
 8011060:	79bb      	ldrb	r3, [r7, #6]
 8011062:	2b03      	cmp	r3, #3
 8011064:	d834      	bhi.n	80110d0 <SD_ioctl+0x98>
 8011066:	a201      	add	r2, pc, #4	; (adr r2, 801106c <SD_ioctl+0x34>)
 8011068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801106c:	0801107d 	.word	0x0801107d
 8011070:	08011085 	.word	0x08011085
 8011074:	0801109d 	.word	0x0801109d
 8011078:	080110b7 	.word	0x080110b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011082:	e028      	b.n	80110d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011084:	f107 0308 	add.w	r3, r7, #8
 8011088:	4618      	mov	r0, r3
 801108a:	f7ff fe95 	bl	8010db8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801108e:	6a3a      	ldr	r2, [r7, #32]
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801109a:	e01c      	b.n	80110d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801109c:	f107 0308 	add.w	r3, r7, #8
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7ff fe89 	bl	8010db8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80110a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80110ae:	2300      	movs	r3, #0
 80110b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110b4:	e00f      	b.n	80110d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80110b6:	f107 0308 	add.w	r3, r7, #8
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7ff fe7c 	bl	8010db8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	0a5a      	lsrs	r2, r3, #9
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110c8:	2300      	movs	r3, #0
 80110ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110ce:	e002      	b.n	80110d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80110d0:	2304      	movs	r3, #4
 80110d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80110d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3730      	adds	r7, #48	; 0x30
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	24000015 	.word	0x24000015

080110e8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80110e8:	b480      	push	{r7}
 80110ea:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80110ec:	4b03      	ldr	r3, [pc, #12]	; (80110fc <BSP_SD_WriteCpltCallback+0x14>)
 80110ee:	2201      	movs	r2, #1
 80110f0:	601a      	str	r2, [r3, #0]
}
 80110f2:	bf00      	nop
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr
 80110fc:	240089d8 	.word	0x240089d8

08011100 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011100:	b480      	push	{r7}
 8011102:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011104:	4b03      	ldr	r3, [pc, #12]	; (8011114 <BSP_SD_ReadCpltCallback+0x14>)
 8011106:	2201      	movs	r2, #1
 8011108:	601a      	str	r2, [r3, #0]
}
 801110a:	bf00      	nop
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr
 8011114:	240089dc 	.word	0x240089dc

08011118 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	4603      	mov	r3, r0
 8011120:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011122:	79fb      	ldrb	r3, [r7, #7]
 8011124:	4a08      	ldr	r2, [pc, #32]	; (8011148 <disk_status+0x30>)
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	4413      	add	r3, r2
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	79fa      	ldrb	r2, [r7, #7]
 8011130:	4905      	ldr	r1, [pc, #20]	; (8011148 <disk_status+0x30>)
 8011132:	440a      	add	r2, r1
 8011134:	7a12      	ldrb	r2, [r2, #8]
 8011136:	4610      	mov	r0, r2
 8011138:	4798      	blx	r3
 801113a:	4603      	mov	r3, r0
 801113c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801113e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011140:	4618      	mov	r0, r3
 8011142:	3710      	adds	r7, #16
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}
 8011148:	24008a08 	.word	0x24008a08

0801114c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	4603      	mov	r3, r0
 8011154:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011156:	2300      	movs	r3, #0
 8011158:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801115a:	79fb      	ldrb	r3, [r7, #7]
 801115c:	4a0d      	ldr	r2, [pc, #52]	; (8011194 <disk_initialize+0x48>)
 801115e:	5cd3      	ldrb	r3, [r2, r3]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d111      	bne.n	8011188 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011164:	79fb      	ldrb	r3, [r7, #7]
 8011166:	4a0b      	ldr	r2, [pc, #44]	; (8011194 <disk_initialize+0x48>)
 8011168:	2101      	movs	r1, #1
 801116a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801116c:	79fb      	ldrb	r3, [r7, #7]
 801116e:	4a09      	ldr	r2, [pc, #36]	; (8011194 <disk_initialize+0x48>)
 8011170:	009b      	lsls	r3, r3, #2
 8011172:	4413      	add	r3, r2
 8011174:	685b      	ldr	r3, [r3, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	79fa      	ldrb	r2, [r7, #7]
 801117a:	4906      	ldr	r1, [pc, #24]	; (8011194 <disk_initialize+0x48>)
 801117c:	440a      	add	r2, r1
 801117e:	7a12      	ldrb	r2, [r2, #8]
 8011180:	4610      	mov	r0, r2
 8011182:	4798      	blx	r3
 8011184:	4603      	mov	r3, r0
 8011186:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011188:	7bfb      	ldrb	r3, [r7, #15]
}
 801118a:	4618      	mov	r0, r3
 801118c:	3710      	adds	r7, #16
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	24008a08 	.word	0x24008a08

08011198 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011198:	b590      	push	{r4, r7, lr}
 801119a:	b087      	sub	sp, #28
 801119c:	af00      	add	r7, sp, #0
 801119e:	60b9      	str	r1, [r7, #8]
 80111a0:	607a      	str	r2, [r7, #4]
 80111a2:	603b      	str	r3, [r7, #0]
 80111a4:	4603      	mov	r3, r0
 80111a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80111a8:	7bfb      	ldrb	r3, [r7, #15]
 80111aa:	4a0a      	ldr	r2, [pc, #40]	; (80111d4 <disk_read+0x3c>)
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4413      	add	r3, r2
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	689c      	ldr	r4, [r3, #8]
 80111b4:	7bfb      	ldrb	r3, [r7, #15]
 80111b6:	4a07      	ldr	r2, [pc, #28]	; (80111d4 <disk_read+0x3c>)
 80111b8:	4413      	add	r3, r2
 80111ba:	7a18      	ldrb	r0, [r3, #8]
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	68b9      	ldr	r1, [r7, #8]
 80111c2:	47a0      	blx	r4
 80111c4:	4603      	mov	r3, r0
 80111c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80111c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	371c      	adds	r7, #28
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd90      	pop	{r4, r7, pc}
 80111d2:	bf00      	nop
 80111d4:	24008a08 	.word	0x24008a08

080111d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80111d8:	b590      	push	{r4, r7, lr}
 80111da:	b087      	sub	sp, #28
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60b9      	str	r1, [r7, #8]
 80111e0:	607a      	str	r2, [r7, #4]
 80111e2:	603b      	str	r3, [r7, #0]
 80111e4:	4603      	mov	r3, r0
 80111e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80111e8:	7bfb      	ldrb	r3, [r7, #15]
 80111ea:	4a0a      	ldr	r2, [pc, #40]	; (8011214 <disk_write+0x3c>)
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	4413      	add	r3, r2
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	68dc      	ldr	r4, [r3, #12]
 80111f4:	7bfb      	ldrb	r3, [r7, #15]
 80111f6:	4a07      	ldr	r2, [pc, #28]	; (8011214 <disk_write+0x3c>)
 80111f8:	4413      	add	r3, r2
 80111fa:	7a18      	ldrb	r0, [r3, #8]
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	687a      	ldr	r2, [r7, #4]
 8011200:	68b9      	ldr	r1, [r7, #8]
 8011202:	47a0      	blx	r4
 8011204:	4603      	mov	r3, r0
 8011206:	75fb      	strb	r3, [r7, #23]
  return res;
 8011208:	7dfb      	ldrb	r3, [r7, #23]
}
 801120a:	4618      	mov	r0, r3
 801120c:	371c      	adds	r7, #28
 801120e:	46bd      	mov	sp, r7
 8011210:	bd90      	pop	{r4, r7, pc}
 8011212:	bf00      	nop
 8011214:	24008a08 	.word	0x24008a08

08011218 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011218:	b480      	push	{r7}
 801121a:	b085      	sub	sp, #20
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	3301      	adds	r3, #1
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011228:	89fb      	ldrh	r3, [r7, #14]
 801122a:	021b      	lsls	r3, r3, #8
 801122c:	b21a      	sxth	r2, r3
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	b21b      	sxth	r3, r3
 8011234:	4313      	orrs	r3, r2
 8011236:	b21b      	sxth	r3, r3
 8011238:	81fb      	strh	r3, [r7, #14]
	return rv;
 801123a:	89fb      	ldrh	r3, [r7, #14]
}
 801123c:	4618      	mov	r0, r3
 801123e:	3714      	adds	r7, #20
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr

08011248 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011248:	b480      	push	{r7}
 801124a:	b085      	sub	sp, #20
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	3303      	adds	r3, #3
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	021b      	lsls	r3, r3, #8
 801125c:	687a      	ldr	r2, [r7, #4]
 801125e:	3202      	adds	r2, #2
 8011260:	7812      	ldrb	r2, [r2, #0]
 8011262:	4313      	orrs	r3, r2
 8011264:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	021b      	lsls	r3, r3, #8
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	3201      	adds	r2, #1
 801126e:	7812      	ldrb	r2, [r2, #0]
 8011270:	4313      	orrs	r3, r2
 8011272:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	021b      	lsls	r3, r3, #8
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	7812      	ldrb	r2, [r2, #0]
 801127c:	4313      	orrs	r3, r2
 801127e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011280:	68fb      	ldr	r3, [r7, #12]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3714      	adds	r7, #20
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr
	...

08011290 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011290:	b480      	push	{r7}
 8011292:	b085      	sub	sp, #20
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011298:	2300      	movs	r3, #0
 801129a:	60fb      	str	r3, [r7, #12]
 801129c:	e010      	b.n	80112c0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801129e:	4a0d      	ldr	r2, [pc, #52]	; (80112d4 <clear_lock+0x44>)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	011b      	lsls	r3, r3, #4
 80112a4:	4413      	add	r3, r2
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	687a      	ldr	r2, [r7, #4]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d105      	bne.n	80112ba <clear_lock+0x2a>
 80112ae:	4a09      	ldr	r2, [pc, #36]	; (80112d4 <clear_lock+0x44>)
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	011b      	lsls	r3, r3, #4
 80112b4:	4413      	add	r3, r2
 80112b6:	2200      	movs	r2, #0
 80112b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	3301      	adds	r3, #1
 80112be:	60fb      	str	r3, [r7, #12]
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2b01      	cmp	r3, #1
 80112c4:	d9eb      	bls.n	801129e <clear_lock+0xe>
	}
}
 80112c6:	bf00      	nop
 80112c8:	bf00      	nop
 80112ca:	3714      	adds	r7, #20
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr
 80112d4:	240089e8 	.word	0x240089e8

080112d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b086      	sub	sp, #24
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80112e0:	2300      	movs	r3, #0
 80112e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	78db      	ldrb	r3, [r3, #3]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d034      	beq.n	8011356 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	7858      	ldrb	r0, [r3, #1]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80112fc:	2301      	movs	r3, #1
 80112fe:	697a      	ldr	r2, [r7, #20]
 8011300:	f7ff ff6a 	bl	80111d8 <disk_write>
 8011304:	4603      	mov	r3, r0
 8011306:	2b00      	cmp	r3, #0
 8011308:	d002      	beq.n	8011310 <sync_window+0x38>
			res = FR_DISK_ERR;
 801130a:	2301      	movs	r3, #1
 801130c:	73fb      	strb	r3, [r7, #15]
 801130e:	e022      	b.n	8011356 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6a1b      	ldr	r3, [r3, #32]
 801131a:	697a      	ldr	r2, [r7, #20]
 801131c:	1ad2      	subs	r2, r2, r3
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	699b      	ldr	r3, [r3, #24]
 8011322:	429a      	cmp	r2, r3
 8011324:	d217      	bcs.n	8011356 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	789b      	ldrb	r3, [r3, #2]
 801132a:	613b      	str	r3, [r7, #16]
 801132c:	e010      	b.n	8011350 <sync_window+0x78>
					wsect += fs->fsize;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	699b      	ldr	r3, [r3, #24]
 8011332:	697a      	ldr	r2, [r7, #20]
 8011334:	4413      	add	r3, r2
 8011336:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	7858      	ldrb	r0, [r3, #1]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011342:	2301      	movs	r3, #1
 8011344:	697a      	ldr	r2, [r7, #20]
 8011346:	f7ff ff47 	bl	80111d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	3b01      	subs	r3, #1
 801134e:	613b      	str	r3, [r7, #16]
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	2b01      	cmp	r3, #1
 8011354:	d8eb      	bhi.n	801132e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011356:	7bfb      	ldrb	r3, [r7, #15]
}
 8011358:	4618      	mov	r0, r3
 801135a:	3718      	adds	r7, #24
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801136a:	2300      	movs	r3, #0
 801136c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011372:	683a      	ldr	r2, [r7, #0]
 8011374:	429a      	cmp	r2, r3
 8011376:	d01b      	beq.n	80113b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f7ff ffad 	bl	80112d8 <sync_window>
 801137e:	4603      	mov	r3, r0
 8011380:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011382:	7bfb      	ldrb	r3, [r7, #15]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d113      	bne.n	80113b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	7858      	ldrb	r0, [r3, #1]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011392:	2301      	movs	r3, #1
 8011394:	683a      	ldr	r2, [r7, #0]
 8011396:	f7ff feff 	bl	8011198 <disk_read>
 801139a:	4603      	mov	r3, r0
 801139c:	2b00      	cmp	r3, #0
 801139e:	d004      	beq.n	80113aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80113a0:	f04f 33ff 	mov.w	r3, #4294967295
 80113a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80113a6:	2301      	movs	r3, #1
 80113a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	683a      	ldr	r2, [r7, #0]
 80113ae:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80113b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80113ba:	b480      	push	{r7}
 80113bc:	b087      	sub	sp, #28
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80113c2:	f04f 33ff 	mov.w	r3, #4294967295
 80113c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d031      	beq.n	8011434 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	617b      	str	r3, [r7, #20]
 80113d6:	e002      	b.n	80113de <get_ldnumber+0x24>
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	3301      	adds	r3, #1
 80113dc:	617b      	str	r3, [r7, #20]
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	2b20      	cmp	r3, #32
 80113e4:	d903      	bls.n	80113ee <get_ldnumber+0x34>
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	2b3a      	cmp	r3, #58	; 0x3a
 80113ec:	d1f4      	bne.n	80113d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	2b3a      	cmp	r3, #58	; 0x3a
 80113f4:	d11c      	bne.n	8011430 <get_ldnumber+0x76>
			tp = *path;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	1c5a      	adds	r2, r3, #1
 8011400:	60fa      	str	r2, [r7, #12]
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	3b30      	subs	r3, #48	; 0x30
 8011406:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	2b09      	cmp	r3, #9
 801140c:	d80e      	bhi.n	801142c <get_ldnumber+0x72>
 801140e:	68fa      	ldr	r2, [r7, #12]
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	429a      	cmp	r2, r3
 8011414:	d10a      	bne.n	801142c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d107      	bne.n	801142c <get_ldnumber+0x72>
					vol = (int)i;
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	3301      	adds	r3, #1
 8011424:	617b      	str	r3, [r7, #20]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	697a      	ldr	r2, [r7, #20]
 801142a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	e002      	b.n	8011436 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011430:	2300      	movs	r3, #0
 8011432:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011434:	693b      	ldr	r3, [r7, #16]
}
 8011436:	4618      	mov	r0, r3
 8011438:	371c      	adds	r7, #28
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr
	...

08011444 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2200      	movs	r2, #0
 8011452:	70da      	strb	r2, [r3, #3]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f04f 32ff 	mov.w	r2, #4294967295
 801145a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801145c:	6839      	ldr	r1, [r7, #0]
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f7ff ff7e 	bl	8011360 <move_window>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d001      	beq.n	801146e <check_fs+0x2a>
 801146a:	2304      	movs	r3, #4
 801146c:	e038      	b.n	80114e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	3330      	adds	r3, #48	; 0x30
 8011472:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011476:	4618      	mov	r0, r3
 8011478:	f7ff fece 	bl	8011218 <ld_word>
 801147c:	4603      	mov	r3, r0
 801147e:	461a      	mov	r2, r3
 8011480:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011484:	429a      	cmp	r2, r3
 8011486:	d001      	beq.n	801148c <check_fs+0x48>
 8011488:	2303      	movs	r3, #3
 801148a:	e029      	b.n	80114e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011492:	2be9      	cmp	r3, #233	; 0xe9
 8011494:	d009      	beq.n	80114aa <check_fs+0x66>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801149c:	2beb      	cmp	r3, #235	; 0xeb
 801149e:	d11e      	bne.n	80114de <check_fs+0x9a>
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80114a6:	2b90      	cmp	r3, #144	; 0x90
 80114a8:	d119      	bne.n	80114de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	3330      	adds	r3, #48	; 0x30
 80114ae:	3336      	adds	r3, #54	; 0x36
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7ff fec9 	bl	8011248 <ld_dword>
 80114b6:	4603      	mov	r3, r0
 80114b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80114bc:	4a0a      	ldr	r2, [pc, #40]	; (80114e8 <check_fs+0xa4>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d101      	bne.n	80114c6 <check_fs+0x82>
 80114c2:	2300      	movs	r3, #0
 80114c4:	e00c      	b.n	80114e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	3330      	adds	r3, #48	; 0x30
 80114ca:	3352      	adds	r3, #82	; 0x52
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7ff febb 	bl	8011248 <ld_dword>
 80114d2:	4603      	mov	r3, r0
 80114d4:	4a05      	ldr	r2, [pc, #20]	; (80114ec <check_fs+0xa8>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d101      	bne.n	80114de <check_fs+0x9a>
 80114da:	2300      	movs	r3, #0
 80114dc:	e000      	b.n	80114e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80114de:	2302      	movs	r3, #2
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}
 80114e8:	00544146 	.word	0x00544146
 80114ec:	33544146 	.word	0x33544146

080114f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b096      	sub	sp, #88	; 0x58
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	4613      	mov	r3, r2
 80114fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	2200      	movs	r2, #0
 8011502:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	f7ff ff58 	bl	80113ba <get_ldnumber>
 801150a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801150c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801150e:	2b00      	cmp	r3, #0
 8011510:	da01      	bge.n	8011516 <find_volume+0x26>
 8011512:	230b      	movs	r3, #11
 8011514:	e22d      	b.n	8011972 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011516:	4aa1      	ldr	r2, [pc, #644]	; (801179c <find_volume+0x2ac>)
 8011518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801151e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011522:	2b00      	cmp	r3, #0
 8011524:	d101      	bne.n	801152a <find_volume+0x3a>
 8011526:	230c      	movs	r3, #12
 8011528:	e223      	b.n	8011972 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801152e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011530:	79fb      	ldrb	r3, [r7, #7]
 8011532:	f023 0301 	bic.w	r3, r3, #1
 8011536:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d01a      	beq.n	8011576 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011542:	785b      	ldrb	r3, [r3, #1]
 8011544:	4618      	mov	r0, r3
 8011546:	f7ff fde7 	bl	8011118 <disk_status>
 801154a:	4603      	mov	r3, r0
 801154c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011550:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011554:	f003 0301 	and.w	r3, r3, #1
 8011558:	2b00      	cmp	r3, #0
 801155a:	d10c      	bne.n	8011576 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801155c:	79fb      	ldrb	r3, [r7, #7]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d007      	beq.n	8011572 <find_volume+0x82>
 8011562:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011566:	f003 0304 	and.w	r3, r3, #4
 801156a:	2b00      	cmp	r3, #0
 801156c:	d001      	beq.n	8011572 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801156e:	230a      	movs	r3, #10
 8011570:	e1ff      	b.n	8011972 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8011572:	2300      	movs	r3, #0
 8011574:	e1fd      	b.n	8011972 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011578:	2200      	movs	r2, #0
 801157a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801157c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801157e:	b2da      	uxtb	r2, r3
 8011580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011582:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011586:	785b      	ldrb	r3, [r3, #1]
 8011588:	4618      	mov	r0, r3
 801158a:	f7ff fddf 	bl	801114c <disk_initialize>
 801158e:	4603      	mov	r3, r0
 8011590:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011594:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011598:	f003 0301 	and.w	r3, r3, #1
 801159c:	2b00      	cmp	r3, #0
 801159e:	d001      	beq.n	80115a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80115a0:	2303      	movs	r3, #3
 80115a2:	e1e6      	b.n	8011972 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80115a4:	79fb      	ldrb	r3, [r7, #7]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d007      	beq.n	80115ba <find_volume+0xca>
 80115aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80115ae:	f003 0304 	and.w	r3, r3, #4
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d001      	beq.n	80115ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80115b6:	230a      	movs	r3, #10
 80115b8:	e1db      	b.n	8011972 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80115be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80115c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80115c2:	f7ff ff3f 	bl	8011444 <check_fs>
 80115c6:	4603      	mov	r3, r0
 80115c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80115cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80115d0:	2b02      	cmp	r3, #2
 80115d2:	d149      	bne.n	8011668 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80115d4:	2300      	movs	r3, #0
 80115d6:	643b      	str	r3, [r7, #64]	; 0x40
 80115d8:	e01e      	b.n	8011618 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80115da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80115e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115e2:	011b      	lsls	r3, r3, #4
 80115e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80115e8:	4413      	add	r3, r2
 80115ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80115ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ee:	3304      	adds	r3, #4
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d006      	beq.n	8011604 <find_volume+0x114>
 80115f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f8:	3308      	adds	r3, #8
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7ff fe24 	bl	8011248 <ld_dword>
 8011600:	4602      	mov	r2, r0
 8011602:	e000      	b.n	8011606 <find_volume+0x116>
 8011604:	2200      	movs	r2, #0
 8011606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011608:	009b      	lsls	r3, r3, #2
 801160a:	3358      	adds	r3, #88	; 0x58
 801160c:	443b      	add	r3, r7
 801160e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011614:	3301      	adds	r3, #1
 8011616:	643b      	str	r3, [r7, #64]	; 0x40
 8011618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801161a:	2b03      	cmp	r3, #3
 801161c:	d9dd      	bls.n	80115da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801161e:	2300      	movs	r3, #0
 8011620:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011624:	2b00      	cmp	r3, #0
 8011626:	d002      	beq.n	801162e <find_volume+0x13e>
 8011628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801162a:	3b01      	subs	r3, #1
 801162c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801162e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	3358      	adds	r3, #88	; 0x58
 8011634:	443b      	add	r3, r7
 8011636:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801163a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801163c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801163e:	2b00      	cmp	r3, #0
 8011640:	d005      	beq.n	801164e <find_volume+0x15e>
 8011642:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011646:	f7ff fefd 	bl	8011444 <check_fs>
 801164a:	4603      	mov	r3, r0
 801164c:	e000      	b.n	8011650 <find_volume+0x160>
 801164e:	2303      	movs	r3, #3
 8011650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011658:	2b01      	cmp	r3, #1
 801165a:	d905      	bls.n	8011668 <find_volume+0x178>
 801165c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801165e:	3301      	adds	r3, #1
 8011660:	643b      	str	r3, [r7, #64]	; 0x40
 8011662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011664:	2b03      	cmp	r3, #3
 8011666:	d9e2      	bls.n	801162e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011668:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801166c:	2b04      	cmp	r3, #4
 801166e:	d101      	bne.n	8011674 <find_volume+0x184>
 8011670:	2301      	movs	r3, #1
 8011672:	e17e      	b.n	8011972 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011674:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011678:	2b01      	cmp	r3, #1
 801167a:	d901      	bls.n	8011680 <find_volume+0x190>
 801167c:	230d      	movs	r3, #13
 801167e:	e178      	b.n	8011972 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011682:	3330      	adds	r3, #48	; 0x30
 8011684:	330b      	adds	r3, #11
 8011686:	4618      	mov	r0, r3
 8011688:	f7ff fdc6 	bl	8011218 <ld_word>
 801168c:	4603      	mov	r3, r0
 801168e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011692:	d001      	beq.n	8011698 <find_volume+0x1a8>
 8011694:	230d      	movs	r3, #13
 8011696:	e16c      	b.n	8011972 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801169a:	3330      	adds	r3, #48	; 0x30
 801169c:	3316      	adds	r3, #22
 801169e:	4618      	mov	r0, r3
 80116a0:	f7ff fdba 	bl	8011218 <ld_word>
 80116a4:	4603      	mov	r3, r0
 80116a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80116a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d106      	bne.n	80116bc <find_volume+0x1cc>
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	3330      	adds	r3, #48	; 0x30
 80116b2:	3324      	adds	r3, #36	; 0x24
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7ff fdc7 	bl	8011248 <ld_dword>
 80116ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80116c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80116c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80116c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80116cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ce:	789b      	ldrb	r3, [r3, #2]
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	d005      	beq.n	80116e0 <find_volume+0x1f0>
 80116d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d6:	789b      	ldrb	r3, [r3, #2]
 80116d8:	2b02      	cmp	r3, #2
 80116da:	d001      	beq.n	80116e0 <find_volume+0x1f0>
 80116dc:	230d      	movs	r3, #13
 80116de:	e148      	b.n	8011972 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80116e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e2:	789b      	ldrb	r3, [r3, #2]
 80116e4:	461a      	mov	r2, r3
 80116e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116e8:	fb02 f303 	mul.w	r3, r2, r3
 80116ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80116ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80116f4:	b29a      	uxth	r2, r3
 80116f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80116fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fc:	895b      	ldrh	r3, [r3, #10]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d008      	beq.n	8011714 <find_volume+0x224>
 8011702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011704:	895b      	ldrh	r3, [r3, #10]
 8011706:	461a      	mov	r2, r3
 8011708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170a:	895b      	ldrh	r3, [r3, #10]
 801170c:	3b01      	subs	r3, #1
 801170e:	4013      	ands	r3, r2
 8011710:	2b00      	cmp	r3, #0
 8011712:	d001      	beq.n	8011718 <find_volume+0x228>
 8011714:	230d      	movs	r3, #13
 8011716:	e12c      	b.n	8011972 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171a:	3330      	adds	r3, #48	; 0x30
 801171c:	3311      	adds	r3, #17
 801171e:	4618      	mov	r0, r3
 8011720:	f7ff fd7a 	bl	8011218 <ld_word>
 8011724:	4603      	mov	r3, r0
 8011726:	461a      	mov	r2, r3
 8011728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801172a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801172c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801172e:	891b      	ldrh	r3, [r3, #8]
 8011730:	f003 030f 	and.w	r3, r3, #15
 8011734:	b29b      	uxth	r3, r3
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <find_volume+0x24e>
 801173a:	230d      	movs	r3, #13
 801173c:	e119      	b.n	8011972 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801173e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011740:	3330      	adds	r3, #48	; 0x30
 8011742:	3313      	adds	r3, #19
 8011744:	4618      	mov	r0, r3
 8011746:	f7ff fd67 	bl	8011218 <ld_word>
 801174a:	4603      	mov	r3, r0
 801174c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801174e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011750:	2b00      	cmp	r3, #0
 8011752:	d106      	bne.n	8011762 <find_volume+0x272>
 8011754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011756:	3330      	adds	r3, #48	; 0x30
 8011758:	3320      	adds	r3, #32
 801175a:	4618      	mov	r0, r3
 801175c:	f7ff fd74 	bl	8011248 <ld_dword>
 8011760:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011764:	3330      	adds	r3, #48	; 0x30
 8011766:	330e      	adds	r3, #14
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff fd55 	bl	8011218 <ld_word>
 801176e:	4603      	mov	r3, r0
 8011770:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011774:	2b00      	cmp	r3, #0
 8011776:	d101      	bne.n	801177c <find_volume+0x28c>
 8011778:	230d      	movs	r3, #13
 801177a:	e0fa      	b.n	8011972 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801177c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801177e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011780:	4413      	add	r3, r2
 8011782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011784:	8912      	ldrh	r2, [r2, #8]
 8011786:	0912      	lsrs	r2, r2, #4
 8011788:	b292      	uxth	r2, r2
 801178a:	4413      	add	r3, r2
 801178c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801178e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011792:	429a      	cmp	r2, r3
 8011794:	d204      	bcs.n	80117a0 <find_volume+0x2b0>
 8011796:	230d      	movs	r3, #13
 8011798:	e0eb      	b.n	8011972 <find_volume+0x482>
 801179a:	bf00      	nop
 801179c:	240089e0 	.word	0x240089e0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80117a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80117a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a4:	1ad3      	subs	r3, r2, r3
 80117a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117a8:	8952      	ldrh	r2, [r2, #10]
 80117aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80117ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80117b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d101      	bne.n	80117ba <find_volume+0x2ca>
 80117b6:	230d      	movs	r3, #13
 80117b8:	e0db      	b.n	8011972 <find_volume+0x482>
		fmt = FS_FAT32;
 80117ba:	2303      	movs	r3, #3
 80117bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80117c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d802      	bhi.n	80117d0 <find_volume+0x2e0>
 80117ca:	2302      	movs	r3, #2
 80117cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80117d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80117d6:	4293      	cmp	r3, r2
 80117d8:	d802      	bhi.n	80117e0 <find_volume+0x2f0>
 80117da:	2301      	movs	r3, #1
 80117dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80117e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e2:	1c9a      	adds	r2, r3, #2
 80117e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80117e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80117ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80117f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f2:	441a      	add	r2, r3
 80117f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80117f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fc:	441a      	add	r2, r3
 80117fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011800:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011802:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011806:	2b03      	cmp	r3, #3
 8011808:	d11e      	bne.n	8011848 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180c:	3330      	adds	r3, #48	; 0x30
 801180e:	332a      	adds	r3, #42	; 0x2a
 8011810:	4618      	mov	r0, r3
 8011812:	f7ff fd01 	bl	8011218 <ld_word>
 8011816:	4603      	mov	r3, r0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d001      	beq.n	8011820 <find_volume+0x330>
 801181c:	230d      	movs	r3, #13
 801181e:	e0a8      	b.n	8011972 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011822:	891b      	ldrh	r3, [r3, #8]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d001      	beq.n	801182c <find_volume+0x33c>
 8011828:	230d      	movs	r3, #13
 801182a:	e0a2      	b.n	8011972 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801182c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182e:	3330      	adds	r3, #48	; 0x30
 8011830:	332c      	adds	r3, #44	; 0x2c
 8011832:	4618      	mov	r0, r3
 8011834:	f7ff fd08 	bl	8011248 <ld_dword>
 8011838:	4602      	mov	r2, r0
 801183a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011840:	695b      	ldr	r3, [r3, #20]
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	647b      	str	r3, [r7, #68]	; 0x44
 8011846:	e01f      	b.n	8011888 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184a:	891b      	ldrh	r3, [r3, #8]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d101      	bne.n	8011854 <find_volume+0x364>
 8011850:	230d      	movs	r3, #13
 8011852:	e08e      	b.n	8011972 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011856:	6a1a      	ldr	r2, [r3, #32]
 8011858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801185a:	441a      	add	r2, r3
 801185c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011864:	2b02      	cmp	r3, #2
 8011866:	d103      	bne.n	8011870 <find_volume+0x380>
 8011868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186a:	695b      	ldr	r3, [r3, #20]
 801186c:	005b      	lsls	r3, r3, #1
 801186e:	e00a      	b.n	8011886 <find_volume+0x396>
 8011870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011872:	695a      	ldr	r2, [r3, #20]
 8011874:	4613      	mov	r3, r2
 8011876:	005b      	lsls	r3, r3, #1
 8011878:	4413      	add	r3, r2
 801187a:	085a      	lsrs	r2, r3, #1
 801187c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801187e:	695b      	ldr	r3, [r3, #20]
 8011880:	f003 0301 	and.w	r3, r3, #1
 8011884:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011886:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188a:	699a      	ldr	r2, [r3, #24]
 801188c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801188e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011892:	0a5b      	lsrs	r3, r3, #9
 8011894:	429a      	cmp	r2, r3
 8011896:	d201      	bcs.n	801189c <find_volume+0x3ac>
 8011898:	230d      	movs	r3, #13
 801189a:	e06a      	b.n	8011972 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801189c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189e:	f04f 32ff 	mov.w	r2, #4294967295
 80118a2:	611a      	str	r2, [r3, #16]
 80118a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a6:	691a      	ldr	r2, [r3, #16]
 80118a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80118ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ae:	2280      	movs	r2, #128	; 0x80
 80118b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80118b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118b6:	2b03      	cmp	r3, #3
 80118b8:	d149      	bne.n	801194e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80118ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118bc:	3330      	adds	r3, #48	; 0x30
 80118be:	3330      	adds	r3, #48	; 0x30
 80118c0:	4618      	mov	r0, r3
 80118c2:	f7ff fca9 	bl	8011218 <ld_word>
 80118c6:	4603      	mov	r3, r0
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d140      	bne.n	801194e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80118cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118ce:	3301      	adds	r3, #1
 80118d0:	4619      	mov	r1, r3
 80118d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80118d4:	f7ff fd44 	bl	8011360 <move_window>
 80118d8:	4603      	mov	r3, r0
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d137      	bne.n	801194e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80118de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e0:	2200      	movs	r2, #0
 80118e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80118e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e6:	3330      	adds	r3, #48	; 0x30
 80118e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7ff fc93 	bl	8011218 <ld_word>
 80118f2:	4603      	mov	r3, r0
 80118f4:	461a      	mov	r2, r3
 80118f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d127      	bne.n	801194e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80118fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011900:	3330      	adds	r3, #48	; 0x30
 8011902:	4618      	mov	r0, r3
 8011904:	f7ff fca0 	bl	8011248 <ld_dword>
 8011908:	4603      	mov	r3, r0
 801190a:	4a1c      	ldr	r2, [pc, #112]	; (801197c <find_volume+0x48c>)
 801190c:	4293      	cmp	r3, r2
 801190e:	d11e      	bne.n	801194e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011912:	3330      	adds	r3, #48	; 0x30
 8011914:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011918:	4618      	mov	r0, r3
 801191a:	f7ff fc95 	bl	8011248 <ld_dword>
 801191e:	4603      	mov	r3, r0
 8011920:	4a17      	ldr	r2, [pc, #92]	; (8011980 <find_volume+0x490>)
 8011922:	4293      	cmp	r3, r2
 8011924:	d113      	bne.n	801194e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011928:	3330      	adds	r3, #48	; 0x30
 801192a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801192e:	4618      	mov	r0, r3
 8011930:	f7ff fc8a 	bl	8011248 <ld_dword>
 8011934:	4602      	mov	r2, r0
 8011936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011938:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801193c:	3330      	adds	r3, #48	; 0x30
 801193e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011942:	4618      	mov	r0, r3
 8011944:	f7ff fc80 	bl	8011248 <ld_dword>
 8011948:	4602      	mov	r2, r0
 801194a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801194c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801194e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011950:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011954:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011956:	4b0b      	ldr	r3, [pc, #44]	; (8011984 <find_volume+0x494>)
 8011958:	881b      	ldrh	r3, [r3, #0]
 801195a:	3301      	adds	r3, #1
 801195c:	b29a      	uxth	r2, r3
 801195e:	4b09      	ldr	r3, [pc, #36]	; (8011984 <find_volume+0x494>)
 8011960:	801a      	strh	r2, [r3, #0]
 8011962:	4b08      	ldr	r3, [pc, #32]	; (8011984 <find_volume+0x494>)
 8011964:	881a      	ldrh	r2, [r3, #0]
 8011966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011968:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801196a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801196c:	f7ff fc90 	bl	8011290 <clear_lock>
#endif
	return FR_OK;
 8011970:	2300      	movs	r3, #0
}
 8011972:	4618      	mov	r0, r3
 8011974:	3758      	adds	r7, #88	; 0x58
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	41615252 	.word	0x41615252
 8011980:	61417272 	.word	0x61417272
 8011984:	240089e4 	.word	0x240089e4

08011988 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b088      	sub	sp, #32
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	4613      	mov	r3, r2
 8011994:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801199a:	f107 0310 	add.w	r3, r7, #16
 801199e:	4618      	mov	r0, r3
 80119a0:	f7ff fd0b 	bl	80113ba <get_ldnumber>
 80119a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	da01      	bge.n	80119b0 <f_mount+0x28>
 80119ac:	230b      	movs	r3, #11
 80119ae:	e02b      	b.n	8011a08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80119b0:	4a17      	ldr	r2, [pc, #92]	; (8011a10 <f_mount+0x88>)
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d005      	beq.n	80119cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80119c0:	69b8      	ldr	r0, [r7, #24]
 80119c2:	f7ff fc65 	bl	8011290 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	2200      	movs	r2, #0
 80119ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d002      	beq.n	80119d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	2200      	movs	r2, #0
 80119d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80119d8:	68fa      	ldr	r2, [r7, #12]
 80119da:	490d      	ldr	r1, [pc, #52]	; (8011a10 <f_mount+0x88>)
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d002      	beq.n	80119ee <f_mount+0x66>
 80119e8:	79fb      	ldrb	r3, [r7, #7]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d001      	beq.n	80119f2 <f_mount+0x6a>
 80119ee:	2300      	movs	r3, #0
 80119f0:	e00a      	b.n	8011a08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80119f2:	f107 010c 	add.w	r1, r7, #12
 80119f6:	f107 0308 	add.w	r3, r7, #8
 80119fa:	2200      	movs	r2, #0
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7ff fd77 	bl	80114f0 <find_volume>
 8011a02:	4603      	mov	r3, r0
 8011a04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3720      	adds	r7, #32
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	240089e0 	.word	0x240089e0

08011a14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b087      	sub	sp, #28
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	4613      	mov	r3, r2
 8011a20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011a22:	2301      	movs	r3, #1
 8011a24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011a26:	2300      	movs	r3, #0
 8011a28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011a2a:	4b1f      	ldr	r3, [pc, #124]	; (8011aa8 <FATFS_LinkDriverEx+0x94>)
 8011a2c:	7a5b      	ldrb	r3, [r3, #9]
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d131      	bne.n	8011a98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011a34:	4b1c      	ldr	r3, [pc, #112]	; (8011aa8 <FATFS_LinkDriverEx+0x94>)
 8011a36:	7a5b      	ldrb	r3, [r3, #9]
 8011a38:	b2db      	uxtb	r3, r3
 8011a3a:	461a      	mov	r2, r3
 8011a3c:	4b1a      	ldr	r3, [pc, #104]	; (8011aa8 <FATFS_LinkDriverEx+0x94>)
 8011a3e:	2100      	movs	r1, #0
 8011a40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011a42:	4b19      	ldr	r3, [pc, #100]	; (8011aa8 <FATFS_LinkDriverEx+0x94>)
 8011a44:	7a5b      	ldrb	r3, [r3, #9]
 8011a46:	b2db      	uxtb	r3, r3
 8011a48:	4a17      	ldr	r2, [pc, #92]	; (8011aa8 <FATFS_LinkDriverEx+0x94>)
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4413      	add	r3, r2
 8011a4e:	68fa      	ldr	r2, [r7, #12]
 8011a50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011a52:	4b15      	ldr	r3, [pc, #84]	; (8011aa8 <FATFS_LinkDriverEx+0x94>)
 8011a54:	7a5b      	ldrb	r3, [r3, #9]
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	461a      	mov	r2, r3
 8011a5a:	4b13      	ldr	r3, [pc, #76]	; (8011aa8 <FATFS_LinkDriverEx+0x94>)
 8011a5c:	4413      	add	r3, r2
 8011a5e:	79fa      	ldrb	r2, [r7, #7]
 8011a60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011a62:	4b11      	ldr	r3, [pc, #68]	; (8011aa8 <FATFS_LinkDriverEx+0x94>)
 8011a64:	7a5b      	ldrb	r3, [r3, #9]
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	1c5a      	adds	r2, r3, #1
 8011a6a:	b2d1      	uxtb	r1, r2
 8011a6c:	4a0e      	ldr	r2, [pc, #56]	; (8011aa8 <FATFS_LinkDriverEx+0x94>)
 8011a6e:	7251      	strb	r1, [r2, #9]
 8011a70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011a72:	7dbb      	ldrb	r3, [r7, #22]
 8011a74:	3330      	adds	r3, #48	; 0x30
 8011a76:	b2da      	uxtb	r2, r3
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	223a      	movs	r2, #58	; 0x3a
 8011a82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	3302      	adds	r3, #2
 8011a88:	222f      	movs	r2, #47	; 0x2f
 8011a8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	3303      	adds	r3, #3
 8011a90:	2200      	movs	r2, #0
 8011a92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011a94:	2300      	movs	r3, #0
 8011a96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	371c      	adds	r7, #28
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr
 8011aa6:	bf00      	nop
 8011aa8:	24008a08 	.word	0x24008a08

08011aac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b082      	sub	sp, #8
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	6839      	ldr	r1, [r7, #0]
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f7ff ffaa 	bl	8011a14 <FATFS_LinkDriverEx>
 8011ac0:	4603      	mov	r3, r0
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3708      	adds	r7, #8
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
	...

08011acc <__errno>:
 8011acc:	4b01      	ldr	r3, [pc, #4]	; (8011ad4 <__errno+0x8>)
 8011ace:	6818      	ldr	r0, [r3, #0]
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop
 8011ad4:	24000018 	.word	0x24000018

08011ad8 <__libc_init_array>:
 8011ad8:	b570      	push	{r4, r5, r6, lr}
 8011ada:	4d0d      	ldr	r5, [pc, #52]	; (8011b10 <__libc_init_array+0x38>)
 8011adc:	4c0d      	ldr	r4, [pc, #52]	; (8011b14 <__libc_init_array+0x3c>)
 8011ade:	1b64      	subs	r4, r4, r5
 8011ae0:	10a4      	asrs	r4, r4, #2
 8011ae2:	2600      	movs	r6, #0
 8011ae4:	42a6      	cmp	r6, r4
 8011ae6:	d109      	bne.n	8011afc <__libc_init_array+0x24>
 8011ae8:	4d0b      	ldr	r5, [pc, #44]	; (8011b18 <__libc_init_array+0x40>)
 8011aea:	4c0c      	ldr	r4, [pc, #48]	; (8011b1c <__libc_init_array+0x44>)
 8011aec:	f000 fc8e 	bl	801240c <_init>
 8011af0:	1b64      	subs	r4, r4, r5
 8011af2:	10a4      	asrs	r4, r4, #2
 8011af4:	2600      	movs	r6, #0
 8011af6:	42a6      	cmp	r6, r4
 8011af8:	d105      	bne.n	8011b06 <__libc_init_array+0x2e>
 8011afa:	bd70      	pop	{r4, r5, r6, pc}
 8011afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b00:	4798      	blx	r3
 8011b02:	3601      	adds	r6, #1
 8011b04:	e7ee      	b.n	8011ae4 <__libc_init_array+0xc>
 8011b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b0a:	4798      	blx	r3
 8011b0c:	3601      	adds	r6, #1
 8011b0e:	e7f2      	b.n	8011af6 <__libc_init_array+0x1e>
 8011b10:	08012504 	.word	0x08012504
 8011b14:	08012504 	.word	0x08012504
 8011b18:	08012504 	.word	0x08012504
 8011b1c:	08012508 	.word	0x08012508

08011b20 <memset>:
 8011b20:	4402      	add	r2, r0
 8011b22:	4603      	mov	r3, r0
 8011b24:	4293      	cmp	r3, r2
 8011b26:	d100      	bne.n	8011b2a <memset+0xa>
 8011b28:	4770      	bx	lr
 8011b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8011b2e:	e7f9      	b.n	8011b24 <memset+0x4>

08011b30 <siprintf>:
 8011b30:	b40e      	push	{r1, r2, r3}
 8011b32:	b500      	push	{lr}
 8011b34:	b09c      	sub	sp, #112	; 0x70
 8011b36:	ab1d      	add	r3, sp, #116	; 0x74
 8011b38:	9002      	str	r0, [sp, #8]
 8011b3a:	9006      	str	r0, [sp, #24]
 8011b3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b40:	4809      	ldr	r0, [pc, #36]	; (8011b68 <siprintf+0x38>)
 8011b42:	9107      	str	r1, [sp, #28]
 8011b44:	9104      	str	r1, [sp, #16]
 8011b46:	4909      	ldr	r1, [pc, #36]	; (8011b6c <siprintf+0x3c>)
 8011b48:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b4c:	9105      	str	r1, [sp, #20]
 8011b4e:	6800      	ldr	r0, [r0, #0]
 8011b50:	9301      	str	r3, [sp, #4]
 8011b52:	a902      	add	r1, sp, #8
 8011b54:	f000 f868 	bl	8011c28 <_svfiprintf_r>
 8011b58:	9b02      	ldr	r3, [sp, #8]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	701a      	strb	r2, [r3, #0]
 8011b5e:	b01c      	add	sp, #112	; 0x70
 8011b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b64:	b003      	add	sp, #12
 8011b66:	4770      	bx	lr
 8011b68:	24000018 	.word	0x24000018
 8011b6c:	ffff0208 	.word	0xffff0208

08011b70 <__ssputs_r>:
 8011b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b74:	688e      	ldr	r6, [r1, #8]
 8011b76:	429e      	cmp	r6, r3
 8011b78:	4682      	mov	sl, r0
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	4690      	mov	r8, r2
 8011b7e:	461f      	mov	r7, r3
 8011b80:	d838      	bhi.n	8011bf4 <__ssputs_r+0x84>
 8011b82:	898a      	ldrh	r2, [r1, #12]
 8011b84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b88:	d032      	beq.n	8011bf0 <__ssputs_r+0x80>
 8011b8a:	6825      	ldr	r5, [r4, #0]
 8011b8c:	6909      	ldr	r1, [r1, #16]
 8011b8e:	eba5 0901 	sub.w	r9, r5, r1
 8011b92:	6965      	ldr	r5, [r4, #20]
 8011b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	444b      	add	r3, r9
 8011ba0:	106d      	asrs	r5, r5, #1
 8011ba2:	429d      	cmp	r5, r3
 8011ba4:	bf38      	it	cc
 8011ba6:	461d      	movcc	r5, r3
 8011ba8:	0553      	lsls	r3, r2, #21
 8011baa:	d531      	bpl.n	8011c10 <__ssputs_r+0xa0>
 8011bac:	4629      	mov	r1, r5
 8011bae:	f000 fb63 	bl	8012278 <_malloc_r>
 8011bb2:	4606      	mov	r6, r0
 8011bb4:	b950      	cbnz	r0, 8011bcc <__ssputs_r+0x5c>
 8011bb6:	230c      	movs	r3, #12
 8011bb8:	f8ca 3000 	str.w	r3, [sl]
 8011bbc:	89a3      	ldrh	r3, [r4, #12]
 8011bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bc2:	81a3      	strh	r3, [r4, #12]
 8011bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bcc:	6921      	ldr	r1, [r4, #16]
 8011bce:	464a      	mov	r2, r9
 8011bd0:	f000 fabe 	bl	8012150 <memcpy>
 8011bd4:	89a3      	ldrh	r3, [r4, #12]
 8011bd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bde:	81a3      	strh	r3, [r4, #12]
 8011be0:	6126      	str	r6, [r4, #16]
 8011be2:	6165      	str	r5, [r4, #20]
 8011be4:	444e      	add	r6, r9
 8011be6:	eba5 0509 	sub.w	r5, r5, r9
 8011bea:	6026      	str	r6, [r4, #0]
 8011bec:	60a5      	str	r5, [r4, #8]
 8011bee:	463e      	mov	r6, r7
 8011bf0:	42be      	cmp	r6, r7
 8011bf2:	d900      	bls.n	8011bf6 <__ssputs_r+0x86>
 8011bf4:	463e      	mov	r6, r7
 8011bf6:	6820      	ldr	r0, [r4, #0]
 8011bf8:	4632      	mov	r2, r6
 8011bfa:	4641      	mov	r1, r8
 8011bfc:	f000 fab6 	bl	801216c <memmove>
 8011c00:	68a3      	ldr	r3, [r4, #8]
 8011c02:	1b9b      	subs	r3, r3, r6
 8011c04:	60a3      	str	r3, [r4, #8]
 8011c06:	6823      	ldr	r3, [r4, #0]
 8011c08:	4433      	add	r3, r6
 8011c0a:	6023      	str	r3, [r4, #0]
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	e7db      	b.n	8011bc8 <__ssputs_r+0x58>
 8011c10:	462a      	mov	r2, r5
 8011c12:	f000 fba5 	bl	8012360 <_realloc_r>
 8011c16:	4606      	mov	r6, r0
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	d1e1      	bne.n	8011be0 <__ssputs_r+0x70>
 8011c1c:	6921      	ldr	r1, [r4, #16]
 8011c1e:	4650      	mov	r0, sl
 8011c20:	f000 fabe 	bl	80121a0 <_free_r>
 8011c24:	e7c7      	b.n	8011bb6 <__ssputs_r+0x46>
	...

08011c28 <_svfiprintf_r>:
 8011c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c2c:	4698      	mov	r8, r3
 8011c2e:	898b      	ldrh	r3, [r1, #12]
 8011c30:	061b      	lsls	r3, r3, #24
 8011c32:	b09d      	sub	sp, #116	; 0x74
 8011c34:	4607      	mov	r7, r0
 8011c36:	460d      	mov	r5, r1
 8011c38:	4614      	mov	r4, r2
 8011c3a:	d50e      	bpl.n	8011c5a <_svfiprintf_r+0x32>
 8011c3c:	690b      	ldr	r3, [r1, #16]
 8011c3e:	b963      	cbnz	r3, 8011c5a <_svfiprintf_r+0x32>
 8011c40:	2140      	movs	r1, #64	; 0x40
 8011c42:	f000 fb19 	bl	8012278 <_malloc_r>
 8011c46:	6028      	str	r0, [r5, #0]
 8011c48:	6128      	str	r0, [r5, #16]
 8011c4a:	b920      	cbnz	r0, 8011c56 <_svfiprintf_r+0x2e>
 8011c4c:	230c      	movs	r3, #12
 8011c4e:	603b      	str	r3, [r7, #0]
 8011c50:	f04f 30ff 	mov.w	r0, #4294967295
 8011c54:	e0d1      	b.n	8011dfa <_svfiprintf_r+0x1d2>
 8011c56:	2340      	movs	r3, #64	; 0x40
 8011c58:	616b      	str	r3, [r5, #20]
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8011c5e:	2320      	movs	r3, #32
 8011c60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c68:	2330      	movs	r3, #48	; 0x30
 8011c6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011e14 <_svfiprintf_r+0x1ec>
 8011c6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c72:	f04f 0901 	mov.w	r9, #1
 8011c76:	4623      	mov	r3, r4
 8011c78:	469a      	mov	sl, r3
 8011c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c7e:	b10a      	cbz	r2, 8011c84 <_svfiprintf_r+0x5c>
 8011c80:	2a25      	cmp	r2, #37	; 0x25
 8011c82:	d1f9      	bne.n	8011c78 <_svfiprintf_r+0x50>
 8011c84:	ebba 0b04 	subs.w	fp, sl, r4
 8011c88:	d00b      	beq.n	8011ca2 <_svfiprintf_r+0x7a>
 8011c8a:	465b      	mov	r3, fp
 8011c8c:	4622      	mov	r2, r4
 8011c8e:	4629      	mov	r1, r5
 8011c90:	4638      	mov	r0, r7
 8011c92:	f7ff ff6d 	bl	8011b70 <__ssputs_r>
 8011c96:	3001      	adds	r0, #1
 8011c98:	f000 80aa 	beq.w	8011df0 <_svfiprintf_r+0x1c8>
 8011c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c9e:	445a      	add	r2, fp
 8011ca0:	9209      	str	r2, [sp, #36]	; 0x24
 8011ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	f000 80a2 	beq.w	8011df0 <_svfiprintf_r+0x1c8>
 8011cac:	2300      	movs	r3, #0
 8011cae:	f04f 32ff 	mov.w	r2, #4294967295
 8011cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cb6:	f10a 0a01 	add.w	sl, sl, #1
 8011cba:	9304      	str	r3, [sp, #16]
 8011cbc:	9307      	str	r3, [sp, #28]
 8011cbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011cc2:	931a      	str	r3, [sp, #104]	; 0x68
 8011cc4:	4654      	mov	r4, sl
 8011cc6:	2205      	movs	r2, #5
 8011cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ccc:	4851      	ldr	r0, [pc, #324]	; (8011e14 <_svfiprintf_r+0x1ec>)
 8011cce:	f7ee fb0f 	bl	80002f0 <memchr>
 8011cd2:	9a04      	ldr	r2, [sp, #16]
 8011cd4:	b9d8      	cbnz	r0, 8011d0e <_svfiprintf_r+0xe6>
 8011cd6:	06d0      	lsls	r0, r2, #27
 8011cd8:	bf44      	itt	mi
 8011cda:	2320      	movmi	r3, #32
 8011cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ce0:	0711      	lsls	r1, r2, #28
 8011ce2:	bf44      	itt	mi
 8011ce4:	232b      	movmi	r3, #43	; 0x2b
 8011ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cea:	f89a 3000 	ldrb.w	r3, [sl]
 8011cee:	2b2a      	cmp	r3, #42	; 0x2a
 8011cf0:	d015      	beq.n	8011d1e <_svfiprintf_r+0xf6>
 8011cf2:	9a07      	ldr	r2, [sp, #28]
 8011cf4:	4654      	mov	r4, sl
 8011cf6:	2000      	movs	r0, #0
 8011cf8:	f04f 0c0a 	mov.w	ip, #10
 8011cfc:	4621      	mov	r1, r4
 8011cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d02:	3b30      	subs	r3, #48	; 0x30
 8011d04:	2b09      	cmp	r3, #9
 8011d06:	d94e      	bls.n	8011da6 <_svfiprintf_r+0x17e>
 8011d08:	b1b0      	cbz	r0, 8011d38 <_svfiprintf_r+0x110>
 8011d0a:	9207      	str	r2, [sp, #28]
 8011d0c:	e014      	b.n	8011d38 <_svfiprintf_r+0x110>
 8011d0e:	eba0 0308 	sub.w	r3, r0, r8
 8011d12:	fa09 f303 	lsl.w	r3, r9, r3
 8011d16:	4313      	orrs	r3, r2
 8011d18:	9304      	str	r3, [sp, #16]
 8011d1a:	46a2      	mov	sl, r4
 8011d1c:	e7d2      	b.n	8011cc4 <_svfiprintf_r+0x9c>
 8011d1e:	9b03      	ldr	r3, [sp, #12]
 8011d20:	1d19      	adds	r1, r3, #4
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	9103      	str	r1, [sp, #12]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	bfbb      	ittet	lt
 8011d2a:	425b      	neglt	r3, r3
 8011d2c:	f042 0202 	orrlt.w	r2, r2, #2
 8011d30:	9307      	strge	r3, [sp, #28]
 8011d32:	9307      	strlt	r3, [sp, #28]
 8011d34:	bfb8      	it	lt
 8011d36:	9204      	strlt	r2, [sp, #16]
 8011d38:	7823      	ldrb	r3, [r4, #0]
 8011d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8011d3c:	d10c      	bne.n	8011d58 <_svfiprintf_r+0x130>
 8011d3e:	7863      	ldrb	r3, [r4, #1]
 8011d40:	2b2a      	cmp	r3, #42	; 0x2a
 8011d42:	d135      	bne.n	8011db0 <_svfiprintf_r+0x188>
 8011d44:	9b03      	ldr	r3, [sp, #12]
 8011d46:	1d1a      	adds	r2, r3, #4
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	9203      	str	r2, [sp, #12]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	bfb8      	it	lt
 8011d50:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d54:	3402      	adds	r4, #2
 8011d56:	9305      	str	r3, [sp, #20]
 8011d58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011e24 <_svfiprintf_r+0x1fc>
 8011d5c:	7821      	ldrb	r1, [r4, #0]
 8011d5e:	2203      	movs	r2, #3
 8011d60:	4650      	mov	r0, sl
 8011d62:	f7ee fac5 	bl	80002f0 <memchr>
 8011d66:	b140      	cbz	r0, 8011d7a <_svfiprintf_r+0x152>
 8011d68:	2340      	movs	r3, #64	; 0x40
 8011d6a:	eba0 000a 	sub.w	r0, r0, sl
 8011d6e:	fa03 f000 	lsl.w	r0, r3, r0
 8011d72:	9b04      	ldr	r3, [sp, #16]
 8011d74:	4303      	orrs	r3, r0
 8011d76:	3401      	adds	r4, #1
 8011d78:	9304      	str	r3, [sp, #16]
 8011d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d7e:	4826      	ldr	r0, [pc, #152]	; (8011e18 <_svfiprintf_r+0x1f0>)
 8011d80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d84:	2206      	movs	r2, #6
 8011d86:	f7ee fab3 	bl	80002f0 <memchr>
 8011d8a:	2800      	cmp	r0, #0
 8011d8c:	d038      	beq.n	8011e00 <_svfiprintf_r+0x1d8>
 8011d8e:	4b23      	ldr	r3, [pc, #140]	; (8011e1c <_svfiprintf_r+0x1f4>)
 8011d90:	bb1b      	cbnz	r3, 8011dda <_svfiprintf_r+0x1b2>
 8011d92:	9b03      	ldr	r3, [sp, #12]
 8011d94:	3307      	adds	r3, #7
 8011d96:	f023 0307 	bic.w	r3, r3, #7
 8011d9a:	3308      	adds	r3, #8
 8011d9c:	9303      	str	r3, [sp, #12]
 8011d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011da0:	4433      	add	r3, r6
 8011da2:	9309      	str	r3, [sp, #36]	; 0x24
 8011da4:	e767      	b.n	8011c76 <_svfiprintf_r+0x4e>
 8011da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011daa:	460c      	mov	r4, r1
 8011dac:	2001      	movs	r0, #1
 8011dae:	e7a5      	b.n	8011cfc <_svfiprintf_r+0xd4>
 8011db0:	2300      	movs	r3, #0
 8011db2:	3401      	adds	r4, #1
 8011db4:	9305      	str	r3, [sp, #20]
 8011db6:	4619      	mov	r1, r3
 8011db8:	f04f 0c0a 	mov.w	ip, #10
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dc2:	3a30      	subs	r2, #48	; 0x30
 8011dc4:	2a09      	cmp	r2, #9
 8011dc6:	d903      	bls.n	8011dd0 <_svfiprintf_r+0x1a8>
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d0c5      	beq.n	8011d58 <_svfiprintf_r+0x130>
 8011dcc:	9105      	str	r1, [sp, #20]
 8011dce:	e7c3      	b.n	8011d58 <_svfiprintf_r+0x130>
 8011dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dd4:	4604      	mov	r4, r0
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	e7f0      	b.n	8011dbc <_svfiprintf_r+0x194>
 8011dda:	ab03      	add	r3, sp, #12
 8011ddc:	9300      	str	r3, [sp, #0]
 8011dde:	462a      	mov	r2, r5
 8011de0:	4b0f      	ldr	r3, [pc, #60]	; (8011e20 <_svfiprintf_r+0x1f8>)
 8011de2:	a904      	add	r1, sp, #16
 8011de4:	4638      	mov	r0, r7
 8011de6:	f3af 8000 	nop.w
 8011dea:	1c42      	adds	r2, r0, #1
 8011dec:	4606      	mov	r6, r0
 8011dee:	d1d6      	bne.n	8011d9e <_svfiprintf_r+0x176>
 8011df0:	89ab      	ldrh	r3, [r5, #12]
 8011df2:	065b      	lsls	r3, r3, #25
 8011df4:	f53f af2c 	bmi.w	8011c50 <_svfiprintf_r+0x28>
 8011df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dfa:	b01d      	add	sp, #116	; 0x74
 8011dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e00:	ab03      	add	r3, sp, #12
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	462a      	mov	r2, r5
 8011e06:	4b06      	ldr	r3, [pc, #24]	; (8011e20 <_svfiprintf_r+0x1f8>)
 8011e08:	a904      	add	r1, sp, #16
 8011e0a:	4638      	mov	r0, r7
 8011e0c:	f000 f87a 	bl	8011f04 <_printf_i>
 8011e10:	e7eb      	b.n	8011dea <_svfiprintf_r+0x1c2>
 8011e12:	bf00      	nop
 8011e14:	080124c8 	.word	0x080124c8
 8011e18:	080124d2 	.word	0x080124d2
 8011e1c:	00000000 	.word	0x00000000
 8011e20:	08011b71 	.word	0x08011b71
 8011e24:	080124ce 	.word	0x080124ce

08011e28 <_printf_common>:
 8011e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e2c:	4616      	mov	r6, r2
 8011e2e:	4699      	mov	r9, r3
 8011e30:	688a      	ldr	r2, [r1, #8]
 8011e32:	690b      	ldr	r3, [r1, #16]
 8011e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e38:	4293      	cmp	r3, r2
 8011e3a:	bfb8      	it	lt
 8011e3c:	4613      	movlt	r3, r2
 8011e3e:	6033      	str	r3, [r6, #0]
 8011e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e44:	4607      	mov	r7, r0
 8011e46:	460c      	mov	r4, r1
 8011e48:	b10a      	cbz	r2, 8011e4e <_printf_common+0x26>
 8011e4a:	3301      	adds	r3, #1
 8011e4c:	6033      	str	r3, [r6, #0]
 8011e4e:	6823      	ldr	r3, [r4, #0]
 8011e50:	0699      	lsls	r1, r3, #26
 8011e52:	bf42      	ittt	mi
 8011e54:	6833      	ldrmi	r3, [r6, #0]
 8011e56:	3302      	addmi	r3, #2
 8011e58:	6033      	strmi	r3, [r6, #0]
 8011e5a:	6825      	ldr	r5, [r4, #0]
 8011e5c:	f015 0506 	ands.w	r5, r5, #6
 8011e60:	d106      	bne.n	8011e70 <_printf_common+0x48>
 8011e62:	f104 0a19 	add.w	sl, r4, #25
 8011e66:	68e3      	ldr	r3, [r4, #12]
 8011e68:	6832      	ldr	r2, [r6, #0]
 8011e6a:	1a9b      	subs	r3, r3, r2
 8011e6c:	42ab      	cmp	r3, r5
 8011e6e:	dc26      	bgt.n	8011ebe <_printf_common+0x96>
 8011e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e74:	1e13      	subs	r3, r2, #0
 8011e76:	6822      	ldr	r2, [r4, #0]
 8011e78:	bf18      	it	ne
 8011e7a:	2301      	movne	r3, #1
 8011e7c:	0692      	lsls	r2, r2, #26
 8011e7e:	d42b      	bmi.n	8011ed8 <_printf_common+0xb0>
 8011e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e84:	4649      	mov	r1, r9
 8011e86:	4638      	mov	r0, r7
 8011e88:	47c0      	blx	r8
 8011e8a:	3001      	adds	r0, #1
 8011e8c:	d01e      	beq.n	8011ecc <_printf_common+0xa4>
 8011e8e:	6823      	ldr	r3, [r4, #0]
 8011e90:	68e5      	ldr	r5, [r4, #12]
 8011e92:	6832      	ldr	r2, [r6, #0]
 8011e94:	f003 0306 	and.w	r3, r3, #6
 8011e98:	2b04      	cmp	r3, #4
 8011e9a:	bf08      	it	eq
 8011e9c:	1aad      	subeq	r5, r5, r2
 8011e9e:	68a3      	ldr	r3, [r4, #8]
 8011ea0:	6922      	ldr	r2, [r4, #16]
 8011ea2:	bf0c      	ite	eq
 8011ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ea8:	2500      	movne	r5, #0
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	bfc4      	itt	gt
 8011eae:	1a9b      	subgt	r3, r3, r2
 8011eb0:	18ed      	addgt	r5, r5, r3
 8011eb2:	2600      	movs	r6, #0
 8011eb4:	341a      	adds	r4, #26
 8011eb6:	42b5      	cmp	r5, r6
 8011eb8:	d11a      	bne.n	8011ef0 <_printf_common+0xc8>
 8011eba:	2000      	movs	r0, #0
 8011ebc:	e008      	b.n	8011ed0 <_printf_common+0xa8>
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	4652      	mov	r2, sl
 8011ec2:	4649      	mov	r1, r9
 8011ec4:	4638      	mov	r0, r7
 8011ec6:	47c0      	blx	r8
 8011ec8:	3001      	adds	r0, #1
 8011eca:	d103      	bne.n	8011ed4 <_printf_common+0xac>
 8011ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed4:	3501      	adds	r5, #1
 8011ed6:	e7c6      	b.n	8011e66 <_printf_common+0x3e>
 8011ed8:	18e1      	adds	r1, r4, r3
 8011eda:	1c5a      	adds	r2, r3, #1
 8011edc:	2030      	movs	r0, #48	; 0x30
 8011ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ee2:	4422      	add	r2, r4
 8011ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011eec:	3302      	adds	r3, #2
 8011eee:	e7c7      	b.n	8011e80 <_printf_common+0x58>
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	4622      	mov	r2, r4
 8011ef4:	4649      	mov	r1, r9
 8011ef6:	4638      	mov	r0, r7
 8011ef8:	47c0      	blx	r8
 8011efa:	3001      	adds	r0, #1
 8011efc:	d0e6      	beq.n	8011ecc <_printf_common+0xa4>
 8011efe:	3601      	adds	r6, #1
 8011f00:	e7d9      	b.n	8011eb6 <_printf_common+0x8e>
	...

08011f04 <_printf_i>:
 8011f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f08:	7e0f      	ldrb	r7, [r1, #24]
 8011f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011f0c:	2f78      	cmp	r7, #120	; 0x78
 8011f0e:	4691      	mov	r9, r2
 8011f10:	4680      	mov	r8, r0
 8011f12:	460c      	mov	r4, r1
 8011f14:	469a      	mov	sl, r3
 8011f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011f1a:	d807      	bhi.n	8011f2c <_printf_i+0x28>
 8011f1c:	2f62      	cmp	r7, #98	; 0x62
 8011f1e:	d80a      	bhi.n	8011f36 <_printf_i+0x32>
 8011f20:	2f00      	cmp	r7, #0
 8011f22:	f000 80d8 	beq.w	80120d6 <_printf_i+0x1d2>
 8011f26:	2f58      	cmp	r7, #88	; 0x58
 8011f28:	f000 80a3 	beq.w	8012072 <_printf_i+0x16e>
 8011f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f34:	e03a      	b.n	8011fac <_printf_i+0xa8>
 8011f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f3a:	2b15      	cmp	r3, #21
 8011f3c:	d8f6      	bhi.n	8011f2c <_printf_i+0x28>
 8011f3e:	a101      	add	r1, pc, #4	; (adr r1, 8011f44 <_printf_i+0x40>)
 8011f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f44:	08011f9d 	.word	0x08011f9d
 8011f48:	08011fb1 	.word	0x08011fb1
 8011f4c:	08011f2d 	.word	0x08011f2d
 8011f50:	08011f2d 	.word	0x08011f2d
 8011f54:	08011f2d 	.word	0x08011f2d
 8011f58:	08011f2d 	.word	0x08011f2d
 8011f5c:	08011fb1 	.word	0x08011fb1
 8011f60:	08011f2d 	.word	0x08011f2d
 8011f64:	08011f2d 	.word	0x08011f2d
 8011f68:	08011f2d 	.word	0x08011f2d
 8011f6c:	08011f2d 	.word	0x08011f2d
 8011f70:	080120bd 	.word	0x080120bd
 8011f74:	08011fe1 	.word	0x08011fe1
 8011f78:	0801209f 	.word	0x0801209f
 8011f7c:	08011f2d 	.word	0x08011f2d
 8011f80:	08011f2d 	.word	0x08011f2d
 8011f84:	080120df 	.word	0x080120df
 8011f88:	08011f2d 	.word	0x08011f2d
 8011f8c:	08011fe1 	.word	0x08011fe1
 8011f90:	08011f2d 	.word	0x08011f2d
 8011f94:	08011f2d 	.word	0x08011f2d
 8011f98:	080120a7 	.word	0x080120a7
 8011f9c:	682b      	ldr	r3, [r5, #0]
 8011f9e:	1d1a      	adds	r2, r3, #4
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	602a      	str	r2, [r5, #0]
 8011fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fac:	2301      	movs	r3, #1
 8011fae:	e0a3      	b.n	80120f8 <_printf_i+0x1f4>
 8011fb0:	6820      	ldr	r0, [r4, #0]
 8011fb2:	6829      	ldr	r1, [r5, #0]
 8011fb4:	0606      	lsls	r6, r0, #24
 8011fb6:	f101 0304 	add.w	r3, r1, #4
 8011fba:	d50a      	bpl.n	8011fd2 <_printf_i+0xce>
 8011fbc:	680e      	ldr	r6, [r1, #0]
 8011fbe:	602b      	str	r3, [r5, #0]
 8011fc0:	2e00      	cmp	r6, #0
 8011fc2:	da03      	bge.n	8011fcc <_printf_i+0xc8>
 8011fc4:	232d      	movs	r3, #45	; 0x2d
 8011fc6:	4276      	negs	r6, r6
 8011fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fcc:	485e      	ldr	r0, [pc, #376]	; (8012148 <_printf_i+0x244>)
 8011fce:	230a      	movs	r3, #10
 8011fd0:	e019      	b.n	8012006 <_printf_i+0x102>
 8011fd2:	680e      	ldr	r6, [r1, #0]
 8011fd4:	602b      	str	r3, [r5, #0]
 8011fd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011fda:	bf18      	it	ne
 8011fdc:	b236      	sxthne	r6, r6
 8011fde:	e7ef      	b.n	8011fc0 <_printf_i+0xbc>
 8011fe0:	682b      	ldr	r3, [r5, #0]
 8011fe2:	6820      	ldr	r0, [r4, #0]
 8011fe4:	1d19      	adds	r1, r3, #4
 8011fe6:	6029      	str	r1, [r5, #0]
 8011fe8:	0601      	lsls	r1, r0, #24
 8011fea:	d501      	bpl.n	8011ff0 <_printf_i+0xec>
 8011fec:	681e      	ldr	r6, [r3, #0]
 8011fee:	e002      	b.n	8011ff6 <_printf_i+0xf2>
 8011ff0:	0646      	lsls	r6, r0, #25
 8011ff2:	d5fb      	bpl.n	8011fec <_printf_i+0xe8>
 8011ff4:	881e      	ldrh	r6, [r3, #0]
 8011ff6:	4854      	ldr	r0, [pc, #336]	; (8012148 <_printf_i+0x244>)
 8011ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8011ffa:	bf0c      	ite	eq
 8011ffc:	2308      	moveq	r3, #8
 8011ffe:	230a      	movne	r3, #10
 8012000:	2100      	movs	r1, #0
 8012002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012006:	6865      	ldr	r5, [r4, #4]
 8012008:	60a5      	str	r5, [r4, #8]
 801200a:	2d00      	cmp	r5, #0
 801200c:	bfa2      	ittt	ge
 801200e:	6821      	ldrge	r1, [r4, #0]
 8012010:	f021 0104 	bicge.w	r1, r1, #4
 8012014:	6021      	strge	r1, [r4, #0]
 8012016:	b90e      	cbnz	r6, 801201c <_printf_i+0x118>
 8012018:	2d00      	cmp	r5, #0
 801201a:	d04d      	beq.n	80120b8 <_printf_i+0x1b4>
 801201c:	4615      	mov	r5, r2
 801201e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012022:	fb03 6711 	mls	r7, r3, r1, r6
 8012026:	5dc7      	ldrb	r7, [r0, r7]
 8012028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801202c:	4637      	mov	r7, r6
 801202e:	42bb      	cmp	r3, r7
 8012030:	460e      	mov	r6, r1
 8012032:	d9f4      	bls.n	801201e <_printf_i+0x11a>
 8012034:	2b08      	cmp	r3, #8
 8012036:	d10b      	bne.n	8012050 <_printf_i+0x14c>
 8012038:	6823      	ldr	r3, [r4, #0]
 801203a:	07de      	lsls	r6, r3, #31
 801203c:	d508      	bpl.n	8012050 <_printf_i+0x14c>
 801203e:	6923      	ldr	r3, [r4, #16]
 8012040:	6861      	ldr	r1, [r4, #4]
 8012042:	4299      	cmp	r1, r3
 8012044:	bfde      	ittt	le
 8012046:	2330      	movle	r3, #48	; 0x30
 8012048:	f805 3c01 	strble.w	r3, [r5, #-1]
 801204c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012050:	1b52      	subs	r2, r2, r5
 8012052:	6122      	str	r2, [r4, #16]
 8012054:	f8cd a000 	str.w	sl, [sp]
 8012058:	464b      	mov	r3, r9
 801205a:	aa03      	add	r2, sp, #12
 801205c:	4621      	mov	r1, r4
 801205e:	4640      	mov	r0, r8
 8012060:	f7ff fee2 	bl	8011e28 <_printf_common>
 8012064:	3001      	adds	r0, #1
 8012066:	d14c      	bne.n	8012102 <_printf_i+0x1fe>
 8012068:	f04f 30ff 	mov.w	r0, #4294967295
 801206c:	b004      	add	sp, #16
 801206e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012072:	4835      	ldr	r0, [pc, #212]	; (8012148 <_printf_i+0x244>)
 8012074:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012078:	6829      	ldr	r1, [r5, #0]
 801207a:	6823      	ldr	r3, [r4, #0]
 801207c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012080:	6029      	str	r1, [r5, #0]
 8012082:	061d      	lsls	r5, r3, #24
 8012084:	d514      	bpl.n	80120b0 <_printf_i+0x1ac>
 8012086:	07df      	lsls	r7, r3, #31
 8012088:	bf44      	itt	mi
 801208a:	f043 0320 	orrmi.w	r3, r3, #32
 801208e:	6023      	strmi	r3, [r4, #0]
 8012090:	b91e      	cbnz	r6, 801209a <_printf_i+0x196>
 8012092:	6823      	ldr	r3, [r4, #0]
 8012094:	f023 0320 	bic.w	r3, r3, #32
 8012098:	6023      	str	r3, [r4, #0]
 801209a:	2310      	movs	r3, #16
 801209c:	e7b0      	b.n	8012000 <_printf_i+0xfc>
 801209e:	6823      	ldr	r3, [r4, #0]
 80120a0:	f043 0320 	orr.w	r3, r3, #32
 80120a4:	6023      	str	r3, [r4, #0]
 80120a6:	2378      	movs	r3, #120	; 0x78
 80120a8:	4828      	ldr	r0, [pc, #160]	; (801214c <_printf_i+0x248>)
 80120aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120ae:	e7e3      	b.n	8012078 <_printf_i+0x174>
 80120b0:	0659      	lsls	r1, r3, #25
 80120b2:	bf48      	it	mi
 80120b4:	b2b6      	uxthmi	r6, r6
 80120b6:	e7e6      	b.n	8012086 <_printf_i+0x182>
 80120b8:	4615      	mov	r5, r2
 80120ba:	e7bb      	b.n	8012034 <_printf_i+0x130>
 80120bc:	682b      	ldr	r3, [r5, #0]
 80120be:	6826      	ldr	r6, [r4, #0]
 80120c0:	6961      	ldr	r1, [r4, #20]
 80120c2:	1d18      	adds	r0, r3, #4
 80120c4:	6028      	str	r0, [r5, #0]
 80120c6:	0635      	lsls	r5, r6, #24
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	d501      	bpl.n	80120d0 <_printf_i+0x1cc>
 80120cc:	6019      	str	r1, [r3, #0]
 80120ce:	e002      	b.n	80120d6 <_printf_i+0x1d2>
 80120d0:	0670      	lsls	r0, r6, #25
 80120d2:	d5fb      	bpl.n	80120cc <_printf_i+0x1c8>
 80120d4:	8019      	strh	r1, [r3, #0]
 80120d6:	2300      	movs	r3, #0
 80120d8:	6123      	str	r3, [r4, #16]
 80120da:	4615      	mov	r5, r2
 80120dc:	e7ba      	b.n	8012054 <_printf_i+0x150>
 80120de:	682b      	ldr	r3, [r5, #0]
 80120e0:	1d1a      	adds	r2, r3, #4
 80120e2:	602a      	str	r2, [r5, #0]
 80120e4:	681d      	ldr	r5, [r3, #0]
 80120e6:	6862      	ldr	r2, [r4, #4]
 80120e8:	2100      	movs	r1, #0
 80120ea:	4628      	mov	r0, r5
 80120ec:	f7ee f900 	bl	80002f0 <memchr>
 80120f0:	b108      	cbz	r0, 80120f6 <_printf_i+0x1f2>
 80120f2:	1b40      	subs	r0, r0, r5
 80120f4:	6060      	str	r0, [r4, #4]
 80120f6:	6863      	ldr	r3, [r4, #4]
 80120f8:	6123      	str	r3, [r4, #16]
 80120fa:	2300      	movs	r3, #0
 80120fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012100:	e7a8      	b.n	8012054 <_printf_i+0x150>
 8012102:	6923      	ldr	r3, [r4, #16]
 8012104:	462a      	mov	r2, r5
 8012106:	4649      	mov	r1, r9
 8012108:	4640      	mov	r0, r8
 801210a:	47d0      	blx	sl
 801210c:	3001      	adds	r0, #1
 801210e:	d0ab      	beq.n	8012068 <_printf_i+0x164>
 8012110:	6823      	ldr	r3, [r4, #0]
 8012112:	079b      	lsls	r3, r3, #30
 8012114:	d413      	bmi.n	801213e <_printf_i+0x23a>
 8012116:	68e0      	ldr	r0, [r4, #12]
 8012118:	9b03      	ldr	r3, [sp, #12]
 801211a:	4298      	cmp	r0, r3
 801211c:	bfb8      	it	lt
 801211e:	4618      	movlt	r0, r3
 8012120:	e7a4      	b.n	801206c <_printf_i+0x168>
 8012122:	2301      	movs	r3, #1
 8012124:	4632      	mov	r2, r6
 8012126:	4649      	mov	r1, r9
 8012128:	4640      	mov	r0, r8
 801212a:	47d0      	blx	sl
 801212c:	3001      	adds	r0, #1
 801212e:	d09b      	beq.n	8012068 <_printf_i+0x164>
 8012130:	3501      	adds	r5, #1
 8012132:	68e3      	ldr	r3, [r4, #12]
 8012134:	9903      	ldr	r1, [sp, #12]
 8012136:	1a5b      	subs	r3, r3, r1
 8012138:	42ab      	cmp	r3, r5
 801213a:	dcf2      	bgt.n	8012122 <_printf_i+0x21e>
 801213c:	e7eb      	b.n	8012116 <_printf_i+0x212>
 801213e:	2500      	movs	r5, #0
 8012140:	f104 0619 	add.w	r6, r4, #25
 8012144:	e7f5      	b.n	8012132 <_printf_i+0x22e>
 8012146:	bf00      	nop
 8012148:	080124d9 	.word	0x080124d9
 801214c:	080124ea 	.word	0x080124ea

08012150 <memcpy>:
 8012150:	440a      	add	r2, r1
 8012152:	4291      	cmp	r1, r2
 8012154:	f100 33ff 	add.w	r3, r0, #4294967295
 8012158:	d100      	bne.n	801215c <memcpy+0xc>
 801215a:	4770      	bx	lr
 801215c:	b510      	push	{r4, lr}
 801215e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012166:	4291      	cmp	r1, r2
 8012168:	d1f9      	bne.n	801215e <memcpy+0xe>
 801216a:	bd10      	pop	{r4, pc}

0801216c <memmove>:
 801216c:	4288      	cmp	r0, r1
 801216e:	b510      	push	{r4, lr}
 8012170:	eb01 0402 	add.w	r4, r1, r2
 8012174:	d902      	bls.n	801217c <memmove+0x10>
 8012176:	4284      	cmp	r4, r0
 8012178:	4623      	mov	r3, r4
 801217a:	d807      	bhi.n	801218c <memmove+0x20>
 801217c:	1e43      	subs	r3, r0, #1
 801217e:	42a1      	cmp	r1, r4
 8012180:	d008      	beq.n	8012194 <memmove+0x28>
 8012182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012186:	f803 2f01 	strb.w	r2, [r3, #1]!
 801218a:	e7f8      	b.n	801217e <memmove+0x12>
 801218c:	4402      	add	r2, r0
 801218e:	4601      	mov	r1, r0
 8012190:	428a      	cmp	r2, r1
 8012192:	d100      	bne.n	8012196 <memmove+0x2a>
 8012194:	bd10      	pop	{r4, pc}
 8012196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801219a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801219e:	e7f7      	b.n	8012190 <memmove+0x24>

080121a0 <_free_r>:
 80121a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121a2:	2900      	cmp	r1, #0
 80121a4:	d044      	beq.n	8012230 <_free_r+0x90>
 80121a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121aa:	9001      	str	r0, [sp, #4]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	f1a1 0404 	sub.w	r4, r1, #4
 80121b2:	bfb8      	it	lt
 80121b4:	18e4      	addlt	r4, r4, r3
 80121b6:	f000 f913 	bl	80123e0 <__malloc_lock>
 80121ba:	4a1e      	ldr	r2, [pc, #120]	; (8012234 <_free_r+0x94>)
 80121bc:	9801      	ldr	r0, [sp, #4]
 80121be:	6813      	ldr	r3, [r2, #0]
 80121c0:	b933      	cbnz	r3, 80121d0 <_free_r+0x30>
 80121c2:	6063      	str	r3, [r4, #4]
 80121c4:	6014      	str	r4, [r2, #0]
 80121c6:	b003      	add	sp, #12
 80121c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121cc:	f000 b90e 	b.w	80123ec <__malloc_unlock>
 80121d0:	42a3      	cmp	r3, r4
 80121d2:	d908      	bls.n	80121e6 <_free_r+0x46>
 80121d4:	6825      	ldr	r5, [r4, #0]
 80121d6:	1961      	adds	r1, r4, r5
 80121d8:	428b      	cmp	r3, r1
 80121da:	bf01      	itttt	eq
 80121dc:	6819      	ldreq	r1, [r3, #0]
 80121de:	685b      	ldreq	r3, [r3, #4]
 80121e0:	1949      	addeq	r1, r1, r5
 80121e2:	6021      	streq	r1, [r4, #0]
 80121e4:	e7ed      	b.n	80121c2 <_free_r+0x22>
 80121e6:	461a      	mov	r2, r3
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	b10b      	cbz	r3, 80121f0 <_free_r+0x50>
 80121ec:	42a3      	cmp	r3, r4
 80121ee:	d9fa      	bls.n	80121e6 <_free_r+0x46>
 80121f0:	6811      	ldr	r1, [r2, #0]
 80121f2:	1855      	adds	r5, r2, r1
 80121f4:	42a5      	cmp	r5, r4
 80121f6:	d10b      	bne.n	8012210 <_free_r+0x70>
 80121f8:	6824      	ldr	r4, [r4, #0]
 80121fa:	4421      	add	r1, r4
 80121fc:	1854      	adds	r4, r2, r1
 80121fe:	42a3      	cmp	r3, r4
 8012200:	6011      	str	r1, [r2, #0]
 8012202:	d1e0      	bne.n	80121c6 <_free_r+0x26>
 8012204:	681c      	ldr	r4, [r3, #0]
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	6053      	str	r3, [r2, #4]
 801220a:	4421      	add	r1, r4
 801220c:	6011      	str	r1, [r2, #0]
 801220e:	e7da      	b.n	80121c6 <_free_r+0x26>
 8012210:	d902      	bls.n	8012218 <_free_r+0x78>
 8012212:	230c      	movs	r3, #12
 8012214:	6003      	str	r3, [r0, #0]
 8012216:	e7d6      	b.n	80121c6 <_free_r+0x26>
 8012218:	6825      	ldr	r5, [r4, #0]
 801221a:	1961      	adds	r1, r4, r5
 801221c:	428b      	cmp	r3, r1
 801221e:	bf04      	itt	eq
 8012220:	6819      	ldreq	r1, [r3, #0]
 8012222:	685b      	ldreq	r3, [r3, #4]
 8012224:	6063      	str	r3, [r4, #4]
 8012226:	bf04      	itt	eq
 8012228:	1949      	addeq	r1, r1, r5
 801222a:	6021      	streq	r1, [r4, #0]
 801222c:	6054      	str	r4, [r2, #4]
 801222e:	e7ca      	b.n	80121c6 <_free_r+0x26>
 8012230:	b003      	add	sp, #12
 8012232:	bd30      	pop	{r4, r5, pc}
 8012234:	24008a14 	.word	0x24008a14

08012238 <sbrk_aligned>:
 8012238:	b570      	push	{r4, r5, r6, lr}
 801223a:	4e0e      	ldr	r6, [pc, #56]	; (8012274 <sbrk_aligned+0x3c>)
 801223c:	460c      	mov	r4, r1
 801223e:	6831      	ldr	r1, [r6, #0]
 8012240:	4605      	mov	r5, r0
 8012242:	b911      	cbnz	r1, 801224a <sbrk_aligned+0x12>
 8012244:	f000 f8bc 	bl	80123c0 <_sbrk_r>
 8012248:	6030      	str	r0, [r6, #0]
 801224a:	4621      	mov	r1, r4
 801224c:	4628      	mov	r0, r5
 801224e:	f000 f8b7 	bl	80123c0 <_sbrk_r>
 8012252:	1c43      	adds	r3, r0, #1
 8012254:	d00a      	beq.n	801226c <sbrk_aligned+0x34>
 8012256:	1cc4      	adds	r4, r0, #3
 8012258:	f024 0403 	bic.w	r4, r4, #3
 801225c:	42a0      	cmp	r0, r4
 801225e:	d007      	beq.n	8012270 <sbrk_aligned+0x38>
 8012260:	1a21      	subs	r1, r4, r0
 8012262:	4628      	mov	r0, r5
 8012264:	f000 f8ac 	bl	80123c0 <_sbrk_r>
 8012268:	3001      	adds	r0, #1
 801226a:	d101      	bne.n	8012270 <sbrk_aligned+0x38>
 801226c:	f04f 34ff 	mov.w	r4, #4294967295
 8012270:	4620      	mov	r0, r4
 8012272:	bd70      	pop	{r4, r5, r6, pc}
 8012274:	24008a18 	.word	0x24008a18

08012278 <_malloc_r>:
 8012278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801227c:	1ccd      	adds	r5, r1, #3
 801227e:	f025 0503 	bic.w	r5, r5, #3
 8012282:	3508      	adds	r5, #8
 8012284:	2d0c      	cmp	r5, #12
 8012286:	bf38      	it	cc
 8012288:	250c      	movcc	r5, #12
 801228a:	2d00      	cmp	r5, #0
 801228c:	4607      	mov	r7, r0
 801228e:	db01      	blt.n	8012294 <_malloc_r+0x1c>
 8012290:	42a9      	cmp	r1, r5
 8012292:	d905      	bls.n	80122a0 <_malloc_r+0x28>
 8012294:	230c      	movs	r3, #12
 8012296:	603b      	str	r3, [r7, #0]
 8012298:	2600      	movs	r6, #0
 801229a:	4630      	mov	r0, r6
 801229c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122a0:	4e2e      	ldr	r6, [pc, #184]	; (801235c <_malloc_r+0xe4>)
 80122a2:	f000 f89d 	bl	80123e0 <__malloc_lock>
 80122a6:	6833      	ldr	r3, [r6, #0]
 80122a8:	461c      	mov	r4, r3
 80122aa:	bb34      	cbnz	r4, 80122fa <_malloc_r+0x82>
 80122ac:	4629      	mov	r1, r5
 80122ae:	4638      	mov	r0, r7
 80122b0:	f7ff ffc2 	bl	8012238 <sbrk_aligned>
 80122b4:	1c43      	adds	r3, r0, #1
 80122b6:	4604      	mov	r4, r0
 80122b8:	d14d      	bne.n	8012356 <_malloc_r+0xde>
 80122ba:	6834      	ldr	r4, [r6, #0]
 80122bc:	4626      	mov	r6, r4
 80122be:	2e00      	cmp	r6, #0
 80122c0:	d140      	bne.n	8012344 <_malloc_r+0xcc>
 80122c2:	6823      	ldr	r3, [r4, #0]
 80122c4:	4631      	mov	r1, r6
 80122c6:	4638      	mov	r0, r7
 80122c8:	eb04 0803 	add.w	r8, r4, r3
 80122cc:	f000 f878 	bl	80123c0 <_sbrk_r>
 80122d0:	4580      	cmp	r8, r0
 80122d2:	d13a      	bne.n	801234a <_malloc_r+0xd2>
 80122d4:	6821      	ldr	r1, [r4, #0]
 80122d6:	3503      	adds	r5, #3
 80122d8:	1a6d      	subs	r5, r5, r1
 80122da:	f025 0503 	bic.w	r5, r5, #3
 80122de:	3508      	adds	r5, #8
 80122e0:	2d0c      	cmp	r5, #12
 80122e2:	bf38      	it	cc
 80122e4:	250c      	movcc	r5, #12
 80122e6:	4629      	mov	r1, r5
 80122e8:	4638      	mov	r0, r7
 80122ea:	f7ff ffa5 	bl	8012238 <sbrk_aligned>
 80122ee:	3001      	adds	r0, #1
 80122f0:	d02b      	beq.n	801234a <_malloc_r+0xd2>
 80122f2:	6823      	ldr	r3, [r4, #0]
 80122f4:	442b      	add	r3, r5
 80122f6:	6023      	str	r3, [r4, #0]
 80122f8:	e00e      	b.n	8012318 <_malloc_r+0xa0>
 80122fa:	6822      	ldr	r2, [r4, #0]
 80122fc:	1b52      	subs	r2, r2, r5
 80122fe:	d41e      	bmi.n	801233e <_malloc_r+0xc6>
 8012300:	2a0b      	cmp	r2, #11
 8012302:	d916      	bls.n	8012332 <_malloc_r+0xba>
 8012304:	1961      	adds	r1, r4, r5
 8012306:	42a3      	cmp	r3, r4
 8012308:	6025      	str	r5, [r4, #0]
 801230a:	bf18      	it	ne
 801230c:	6059      	strne	r1, [r3, #4]
 801230e:	6863      	ldr	r3, [r4, #4]
 8012310:	bf08      	it	eq
 8012312:	6031      	streq	r1, [r6, #0]
 8012314:	5162      	str	r2, [r4, r5]
 8012316:	604b      	str	r3, [r1, #4]
 8012318:	4638      	mov	r0, r7
 801231a:	f104 060b 	add.w	r6, r4, #11
 801231e:	f000 f865 	bl	80123ec <__malloc_unlock>
 8012322:	f026 0607 	bic.w	r6, r6, #7
 8012326:	1d23      	adds	r3, r4, #4
 8012328:	1af2      	subs	r2, r6, r3
 801232a:	d0b6      	beq.n	801229a <_malloc_r+0x22>
 801232c:	1b9b      	subs	r3, r3, r6
 801232e:	50a3      	str	r3, [r4, r2]
 8012330:	e7b3      	b.n	801229a <_malloc_r+0x22>
 8012332:	6862      	ldr	r2, [r4, #4]
 8012334:	42a3      	cmp	r3, r4
 8012336:	bf0c      	ite	eq
 8012338:	6032      	streq	r2, [r6, #0]
 801233a:	605a      	strne	r2, [r3, #4]
 801233c:	e7ec      	b.n	8012318 <_malloc_r+0xa0>
 801233e:	4623      	mov	r3, r4
 8012340:	6864      	ldr	r4, [r4, #4]
 8012342:	e7b2      	b.n	80122aa <_malloc_r+0x32>
 8012344:	4634      	mov	r4, r6
 8012346:	6876      	ldr	r6, [r6, #4]
 8012348:	e7b9      	b.n	80122be <_malloc_r+0x46>
 801234a:	230c      	movs	r3, #12
 801234c:	603b      	str	r3, [r7, #0]
 801234e:	4638      	mov	r0, r7
 8012350:	f000 f84c 	bl	80123ec <__malloc_unlock>
 8012354:	e7a1      	b.n	801229a <_malloc_r+0x22>
 8012356:	6025      	str	r5, [r4, #0]
 8012358:	e7de      	b.n	8012318 <_malloc_r+0xa0>
 801235a:	bf00      	nop
 801235c:	24008a14 	.word	0x24008a14

08012360 <_realloc_r>:
 8012360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012364:	4680      	mov	r8, r0
 8012366:	4614      	mov	r4, r2
 8012368:	460e      	mov	r6, r1
 801236a:	b921      	cbnz	r1, 8012376 <_realloc_r+0x16>
 801236c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012370:	4611      	mov	r1, r2
 8012372:	f7ff bf81 	b.w	8012278 <_malloc_r>
 8012376:	b92a      	cbnz	r2, 8012384 <_realloc_r+0x24>
 8012378:	f7ff ff12 	bl	80121a0 <_free_r>
 801237c:	4625      	mov	r5, r4
 801237e:	4628      	mov	r0, r5
 8012380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012384:	f000 f838 	bl	80123f8 <_malloc_usable_size_r>
 8012388:	4284      	cmp	r4, r0
 801238a:	4607      	mov	r7, r0
 801238c:	d802      	bhi.n	8012394 <_realloc_r+0x34>
 801238e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012392:	d812      	bhi.n	80123ba <_realloc_r+0x5a>
 8012394:	4621      	mov	r1, r4
 8012396:	4640      	mov	r0, r8
 8012398:	f7ff ff6e 	bl	8012278 <_malloc_r>
 801239c:	4605      	mov	r5, r0
 801239e:	2800      	cmp	r0, #0
 80123a0:	d0ed      	beq.n	801237e <_realloc_r+0x1e>
 80123a2:	42bc      	cmp	r4, r7
 80123a4:	4622      	mov	r2, r4
 80123a6:	4631      	mov	r1, r6
 80123a8:	bf28      	it	cs
 80123aa:	463a      	movcs	r2, r7
 80123ac:	f7ff fed0 	bl	8012150 <memcpy>
 80123b0:	4631      	mov	r1, r6
 80123b2:	4640      	mov	r0, r8
 80123b4:	f7ff fef4 	bl	80121a0 <_free_r>
 80123b8:	e7e1      	b.n	801237e <_realloc_r+0x1e>
 80123ba:	4635      	mov	r5, r6
 80123bc:	e7df      	b.n	801237e <_realloc_r+0x1e>
	...

080123c0 <_sbrk_r>:
 80123c0:	b538      	push	{r3, r4, r5, lr}
 80123c2:	4d06      	ldr	r5, [pc, #24]	; (80123dc <_sbrk_r+0x1c>)
 80123c4:	2300      	movs	r3, #0
 80123c6:	4604      	mov	r4, r0
 80123c8:	4608      	mov	r0, r1
 80123ca:	602b      	str	r3, [r5, #0]
 80123cc:	f7f0 fc86 	bl	8002cdc <_sbrk>
 80123d0:	1c43      	adds	r3, r0, #1
 80123d2:	d102      	bne.n	80123da <_sbrk_r+0x1a>
 80123d4:	682b      	ldr	r3, [r5, #0]
 80123d6:	b103      	cbz	r3, 80123da <_sbrk_r+0x1a>
 80123d8:	6023      	str	r3, [r4, #0]
 80123da:	bd38      	pop	{r3, r4, r5, pc}
 80123dc:	24008a1c 	.word	0x24008a1c

080123e0 <__malloc_lock>:
 80123e0:	4801      	ldr	r0, [pc, #4]	; (80123e8 <__malloc_lock+0x8>)
 80123e2:	f000 b811 	b.w	8012408 <__retarget_lock_acquire_recursive>
 80123e6:	bf00      	nop
 80123e8:	24008a20 	.word	0x24008a20

080123ec <__malloc_unlock>:
 80123ec:	4801      	ldr	r0, [pc, #4]	; (80123f4 <__malloc_unlock+0x8>)
 80123ee:	f000 b80c 	b.w	801240a <__retarget_lock_release_recursive>
 80123f2:	bf00      	nop
 80123f4:	24008a20 	.word	0x24008a20

080123f8 <_malloc_usable_size_r>:
 80123f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123fc:	1f18      	subs	r0, r3, #4
 80123fe:	2b00      	cmp	r3, #0
 8012400:	bfbc      	itt	lt
 8012402:	580b      	ldrlt	r3, [r1, r0]
 8012404:	18c0      	addlt	r0, r0, r3
 8012406:	4770      	bx	lr

08012408 <__retarget_lock_acquire_recursive>:
 8012408:	4770      	bx	lr

0801240a <__retarget_lock_release_recursive>:
 801240a:	4770      	bx	lr

0801240c <_init>:
 801240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801240e:	bf00      	nop
 8012410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012412:	bc08      	pop	{r3}
 8012414:	469e      	mov	lr, r3
 8012416:	4770      	bx	lr

08012418 <_fini>:
 8012418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801241a:	bf00      	nop
 801241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801241e:	bc08      	pop	{r3}
 8012420:	469e      	mov	lr, r3
 8012422:	4770      	bx	lr
