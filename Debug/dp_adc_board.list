
dp_adc_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000178f0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08017ba0  08017ba0  00027ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018258  08018258  00028258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018260  08018260  00028260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018264  08018264  00028264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  08018268  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008c44  240001f0  08018458  000301f0  2**2
                  ALLOC
  8 .sdram_section 00000c00  c0000000  c0000000  00040000  2**2
                  ALLOC
  9 ._user_heap_stack 00000c04  24008e34  24008e34  00038e34  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002791b  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000044ad  00000000  00000000  00057b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001dc0  00000000  00000000  0005bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bf8  00000000  00000000  0005dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003692b  00000000  00000000  0005f9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028fce  00000000  00000000  000962cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00151c7d  00000000  00000000  000bf299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00210f16  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009118  00000000  00000000  00210f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001f0 	.word	0x240001f0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08017b88 	.word	0x08017b88

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001f4 	.word	0x240001f4
 80002ec:	08017b88 	.word	0x08017b88

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <SDRAM_Startup_Sequence>:
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];
uint32_t uwIndex = 0;
__IO uint32_t uwWriteReadStatus = 0;

void SDRAM_Startup_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  /* Program the SDRAM external device */
  SDRAM_Initialization_Sequence(hsdram, Command);
 8000ab6:	6839      	ldr	r1, [r7, #0]
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 f875 	bl	8000ba8 <SDRAM_Initialization_Sequence>

  /*##-2- SDRAM memory read/write access #####################################*/
  //*(__IO uint32_t*) (TEST_WRITE) = 0x1;

  /* Fill the buffer to write */
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0xA244250F);
 8000abe:	4a34      	ldr	r2, [pc, #208]	; (8000b90 <SDRAM_Startup_Sequence+0xe4>)
 8000ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac4:	4833      	ldr	r0, [pc, #204]	; (8000b94 <SDRAM_Startup_Sequence+0xe8>)
 8000ac6:	f000 f8cc 	bl	8000c62 <Fill_Buffer>

    /* Fill the Read buffer */
  Fill_Buffer(aRxBuffer, BUFFER_SIZE, 0xBBBBBBBB);
 8000aca:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8000ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad2:	4831      	ldr	r0, [pc, #196]	; (8000b98 <SDRAM_Startup_Sequence+0xec>)
 8000ad4:	f000 f8c5 	bl	8000c62 <Fill_Buffer>

  /* Write data to the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000ad8:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e010      	b.n	8000b02 <SDRAM_Startup_Sequence+0x56>
  {
    *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex) = aTxBuffer[uwIndex];
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000ae6:	6819      	ldr	r1, [r3, #0]
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <SDRAM_Startup_Sequence+0xf4>)
 8000aea:	440b      	add	r3, r1
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <SDRAM_Startup_Sequence+0xe8>)
 8000af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af6:	600b      	str	r3, [r1, #0]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b0a:	d3e9      	bcc.n	8000ae0 <SDRAM_Startup_Sequence+0x34>
  }

  /* Read back data from the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e010      	b.n	8000b36 <SDRAM_Startup_Sequence+0x8a>
  {
    aRxBuffer[uwIndex] = *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex);
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <SDRAM_Startup_Sequence+0xf4>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	491c      	ldr	r1, [pc, #112]	; (8000b98 <SDRAM_Startup_Sequence+0xec>)
 8000b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b3e:	d3e9      	bcc.n	8000b14 <SDRAM_Startup_Sequence+0x68>
  }

  /*##-3- Checking data integrity ############################################*/

  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e015      	b.n	8000b74 <SDRAM_Startup_Sequence+0xc8>
  {
    if (aRxBuffer[uwIndex] != aTxBuffer[uwIndex])
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <SDRAM_Startup_Sequence+0xec>)
 8000b4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	490f      	ldr	r1, [pc, #60]	; (8000b94 <SDRAM_Startup_Sequence+0xe8>)
 8000b58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d004      	beq.n	8000b6a <SDRAM_Startup_Sequence+0xbe>
    {
      uwWriteReadStatus++;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <SDRAM_Startup_Sequence+0xf8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <SDRAM_Startup_Sequence+0xf8>)
 8000b68:	6013      	str	r3, [r2, #0]
  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b7c:	d203      	bcs.n	8000b86 <SDRAM_Startup_Sequence+0xda>
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <SDRAM_Startup_Sequence+0xf8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0e0      	beq.n	8000b48 <SDRAM_Startup_Sequence+0x9c>
    }
  }
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	a244250f 	.word	0xa244250f
 8000b94:	2400020c 	.word	0x2400020c
 8000b98:	2400420c 	.word	0x2400420c
 8000b9c:	2400820c 	.word	0x2400820c
 8000ba0:	30000200 	.word	0x30000200
 8000ba4:	24008210 	.word	0x24008210

08000ba8 <SDRAM_Initialization_Sequence>:



void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f00a fffb 	bl	800bbd0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f003 f894 	bl	8003d08 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2202      	movs	r2, #2
 8000be4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2210      	movs	r2, #16
 8000bea:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfc:	6839      	ldr	r1, [r7, #0]
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f00a ffe6 	bl	800bbd0 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2203      	movs	r2, #3
 8000c08:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2208      	movs	r2, #8
 8000c14:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f00a ffd4 	bl	800bbd0 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000c28:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000c2c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2204      	movs	r2, #4
 8000c32:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2210      	movs	r2, #16
 8000c38:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4a:	6839      	ldr	r1, [r7, #0]
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f00a ffbf 	bl	800bbd0 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, 230);
 8000c52:	21e6      	movs	r1, #230	; 0xe6
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f00a fff0 	bl	800bc3a <HAL_SDRAM_ProgramRefreshRate>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <Fill_Buffer>:

void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b087      	sub	sp, #28
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e00a      	b.n	8000c8e <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	6979      	ldr	r1, [r7, #20]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	440a      	add	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3f0      	bcc.n	8000c78 <Fill_Buffer+0x16>
  }
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	371c      	adds	r7, #28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	b08f      	sub	sp, #60	; 0x3c
 8000ca8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000caa:	f002 ff9b 	bl	8003be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cae:	f000 fa39 	bl	8001124 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cb2:	f000 fab3 	bl	800121c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
//TODO: need to move DMA init everytime up after GPIO init!!
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f000 fe4f 	bl	8001958 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cba:	f000 fd9b 	bl	80017f4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cbe:	f000 fafd 	bl	80012bc <MX_SPI1_Init>
  MX_TIM1_Init();
 8000cc2:	f000 fc03 	bl	80014cc <MX_TIM1_Init>
  MX_UART4_Init();
 8000cc6:	f000 fd47 	bl	8001758 <MX_UART4_Init>
  MX_FMC_Init();
 8000cca:	f000 fdf3 	bl	80018b4 <MX_FMC_Init>
  MX_SPI2_Init();
 8000cce:	f000 fb4d 	bl	800136c <MX_SPI2_Init>
  MX_SPI4_Init();
 8000cd2:	f000 fba3 	bl	800141c <MX_SPI4_Init>
  MX_TIM2_Init();
 8000cd6:	f000 fca5 	bl	8001624 <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 8000cda:	f000 fad1 	bl	8001280 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000cde:	f011 f893 	bl	8011e08 <MX_FATFS_Init>
  MX_TIM16_Init();
 8000ce2:	f000 fd11 	bl	8001708 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // setting up timer for time measuring
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ce6:	4bc6      	ldr	r3, [pc, #792]	; (8001000 <main+0x35c>)
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	4ac5      	ldr	r2, [pc, #788]	; (8001000 <main+0x35c>)
 8000cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cf0:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000cf2:	4bc4      	ldr	r3, [pc, #784]	; (8001004 <main+0x360>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cf8:	4bc2      	ldr	r3, [pc, #776]	; (8001004 <main+0x360>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4ac1      	ldr	r2, [pc, #772]	; (8001004 <main+0x360>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 8000d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d08:	f002 fffe 	bl	8003d08 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SDRAM_Startup_Sequence(&hsdram1, &fmc_command);
 8000d0c:	49be      	ldr	r1, [pc, #760]	; (8001008 <main+0x364>)
 8000d0e:	48bf      	ldr	r0, [pc, #764]	; (800100c <main+0x368>)
 8000d10:	f7ff fecc 	bl	8000aac <SDRAM_Startup_Sequence>
  sdCardInitError = sd_card_init();
 8000d14:	f001 faac 	bl	8002270 <sd_card_init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4bbc      	ldr	r3, [pc, #752]	; (8001010 <main+0x36c>)
 8000d1e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8000d20:	2064      	movs	r0, #100	; 0x64
 8000d22:	f002 fff1 	bl	8003d08 <HAL_Delay>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 4);
 8000d26:	2204      	movs	r2, #4
 8000d28:	2104      	movs	r1, #4
 8000d2a:	2017      	movs	r0, #23
 8000d2c:	f003 f90f 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	2028      	movs	r0, #40	; 0x28
 8000d36:	f003 f90a 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000d3a:	2017      	movs	r0, #23
 8000d3c:	f003 f92f 	bl	8003f9e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f003 f92c 	bl	8003f9e <HAL_NVIC_DisableIRQ>

  // uart4 and uart5 IT enable
  HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	49b2      	ldr	r1, [pc, #712]	; (8001014 <main+0x370>)
 8000d4a:	48b3      	ldr	r0, [pc, #716]	; (8001018 <main+0x374>)
 8000d4c:	f00d fe0a 	bl	800e964 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT (&huart5, rxUart5Buffer, 1);

  // LED timer enable
  HAL_TIM_Base_Start_IT(&htim16);
 8000d50:	48b2      	ldr	r0, [pc, #712]	; (800101c <main+0x378>)
 8000d52:	f00c f847 	bl	800cde4 <HAL_TIM_Base_Start_IT>

  if (sdCardInitError == true){
 8000d56:	4bae      	ldr	r3, [pc, #696]	; (8001010 <main+0x36c>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <main+0xc2>
    setColorLED(red);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f001 f864 	bl	8001e2c <setColorLED>
 8000d64:	e005      	b.n	8000d72 <main+0xce>
  }else{
    setColorLED(blue);
 8000d66:	2002      	movs	r0, #2
 8000d68:	f001 f860 	bl	8001e2c <setColorLED>
    readConfigFile("config.txt");
 8000d6c:	48ac      	ldr	r0, [pc, #688]	; (8001020 <main+0x37c>)
 8000d6e:	f001 f8a9 	bl	8001ec4 <readConfigFile>
  }

  spi1_soft_reset();
 8000d72:	f001 fd9f 	bl	80028b4 <spi1_soft_reset>
  spi2_soft_reset();
 8000d76:	f001 fdc3 	bl	8002900 <spi2_soft_reset>
  spi4_soft_reset();
 8000d7a:	f001 fde7 	bl	800294c <spi4_soft_reset>
  spi1_adc_init(SPS_VALUE_5);
 8000d7e:	4ba9      	ldr	r3, [pc, #676]	; (8001024 <main+0x380>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fb12 	bl	80023ac <spi1_adc_init>
  spi2_adc_init(SPS_VALUE_5);
 8000d88:	4ba6      	ldr	r3, [pc, #664]	; (8001024 <main+0x380>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fbe5 	bl	800255c <spi2_adc_init>
  spi4_adc_init(SPS_VALUE_5);
 8000d92:	4ba4      	ldr	r3, [pc, #656]	; (8001024 <main+0x380>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fcb8 	bl	800270c <spi4_adc_init>

  //initial setup:
  initialSetupADC();
 8000d9c:	f001 f9da 	bl	8002154 <initialSetupADC>
  HAL_Delay(500);
 8000da0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da4:	f002 ffb0 	bl	8003d08 <HAL_Delay>

  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8000da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dac:	2220      	movs	r2, #32
 8000dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8000db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db6:	2240      	movs	r2, #64	; 0x40
 8000db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8000dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dc8:	2017      	movs	r0, #23
 8000dca:	f003 f8da 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dce:	2028      	movs	r0, #40	; 0x28
 8000dd0:	f003 f8d7 	bl	8003f82 <HAL_NVIC_EnableIRQ>

  //run all before main loop
  run_all_adc();
 8000dd4:	f001 fd52 	bl	800287c <run_all_adc>

  char stringBufferValues[39];

  floating_point_values = true;
 8000dd8:	4b93      	ldr	r3, [pc, #588]	; (8001028 <main+0x384>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
    while (1){
      if(spiCommonBufferCounter < findMin(spi1ValuesBufferCounter,spi2ValuesBufferCounter,spi4ValuesBufferCounter)){
 8000dde:	4b93      	ldr	r3, [pc, #588]	; (800102c <main+0x388>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a93      	ldr	r2, [pc, #588]	; (8001030 <main+0x38c>)
 8000de4:	6811      	ldr	r1, [r2, #0]
 8000de6:	4a93      	ldr	r2, [pc, #588]	; (8001034 <main+0x390>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 f802 	bl	8001df4 <findMin>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b91      	ldr	r3, [pc, #580]	; (8001038 <main+0x394>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d96a      	bls.n	8000ed0 <main+0x22c>
        if (floating_point_values == true){
 8000dfa:	4b8b      	ldr	r3, [pc, #556]	; (8001028 <main+0x384>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d024      	beq.n	8000e4c <main+0x1a8>
          getStringFromValuesFloat(spi1ValuesStorage[spiCommonBufferCounter],spi2ValuesStorage[spiCommonBufferCounter],spi4ValuesStorage[spiCommonBufferCounter],stringBufferValues, range_x_value, range_y_value, range_z_value);
 8000e02:	4b8d      	ldr	r3, [pc, #564]	; (8001038 <main+0x394>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a8d      	ldr	r2, [pc, #564]	; (800103c <main+0x398>)
 8000e08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e0c:	4b8a      	ldr	r3, [pc, #552]	; (8001038 <main+0x394>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a8b      	ldr	r2, [pc, #556]	; (8001040 <main+0x39c>)
 8000e12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e16:	4b88      	ldr	r3, [pc, #544]	; (8001038 <main+0x394>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a8a      	ldr	r2, [pc, #552]	; (8001044 <main+0x3a0>)
 8000e1c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8000e20:	4b89      	ldr	r3, [pc, #548]	; (8001048 <main+0x3a4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4a89      	ldr	r2, [pc, #548]	; (800104c <main+0x3a8>)
 8000e26:	7812      	ldrb	r2, [r2, #0]
 8000e28:	4989      	ldr	r1, [pc, #548]	; (8001050 <main+0x3ac>)
 8000e2a:	7809      	ldrb	r1, [r1, #0]
 8000e2c:	463e      	mov	r6, r7
 8000e2e:	9102      	str	r1, [sp, #8]
 8000e30:	9201      	str	r2, [sp, #4]
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	4633      	mov	r3, r6
 8000e36:	462a      	mov	r2, r5
 8000e38:	4621      	mov	r1, r4
 8000e3a:	f001 fddd 	bl	80029f8 <getStringFromValuesFloat>
          HAL_UART_Transmit(&huart4, stringBufferValues, 33,100);
 8000e3e:	4639      	mov	r1, r7
 8000e40:	2364      	movs	r3, #100	; 0x64
 8000e42:	2221      	movs	r2, #33	; 0x21
 8000e44:	4874      	ldr	r0, [pc, #464]	; (8001018 <main+0x374>)
 8000e46:	f00d fcf7 	bl	800e838 <HAL_UART_Transmit>
 8000e4a:	e017      	b.n	8000e7c <main+0x1d8>
        }else{
          getStringFromValues(spi1ValuesStorage[spiCommonBufferCounter],spi2ValuesStorage[spiCommonBufferCounter],spi4ValuesStorage[spiCommonBufferCounter],stringBufferValues);
 8000e4c:	4b7a      	ldr	r3, [pc, #488]	; (8001038 <main+0x394>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a7a      	ldr	r2, [pc, #488]	; (800103c <main+0x398>)
 8000e52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e56:	4b78      	ldr	r3, [pc, #480]	; (8001038 <main+0x394>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a79      	ldr	r2, [pc, #484]	; (8001040 <main+0x39c>)
 8000e5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e60:	4b75      	ldr	r3, [pc, #468]	; (8001038 <main+0x394>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a77      	ldr	r2, [pc, #476]	; (8001044 <main+0x3a0>)
 8000e66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	f001 fd92 	bl	8002994 <getStringFromValues>
          HAL_UART_Transmit(&huart4, stringBufferValues, 33,100);
 8000e70:	4639      	mov	r1, r7
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	2221      	movs	r2, #33	; 0x21
 8000e76:	4868      	ldr	r0, [pc, #416]	; (8001018 <main+0x374>)
 8000e78:	f00d fcde 	bl	800e838 <HAL_UART_Transmit>

        //sending over uart

//        HAL_UART_Transmit(&huart5, stringBufferValues, 33,100);

        if((sdCardWriteEnable == true) && (sdCardInitError == false) && (sdCardOpenFileError == false)){
 8000e7c:	4b75      	ldr	r3, [pc, #468]	; (8001054 <main+0x3b0>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d020      	beq.n	8000ec6 <main+0x222>
 8000e84:	4b62      	ldr	r3, [pc, #392]	; (8001010 <main+0x36c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f083 0301 	eor.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d019      	beq.n	8000ec6 <main+0x222>
 8000e92:	4b71      	ldr	r3, [pc, #452]	; (8001058 <main+0x3b4>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f083 0301 	eor.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d012      	beq.n	8000ec6 <main+0x222>
          sdCardWriteError = sd_card_write_to_opened_file(stringBufferValues);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fa50 	bl	8002348 <sd_card_write_to_opened_file>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b6b      	ldr	r3, [pc, #428]	; (800105c <main+0x3b8>)
 8000eae:	701a      	strb	r2, [r3, #0]
          if (sdCardWriteError == true){
 8000eb0:	4b6a      	ldr	r3, [pc, #424]	; (800105c <main+0x3b8>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <main+0x21c>
            setColorLED(red);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f000 ffb7 	bl	8001e2c <setColorLED>
 8000ebe:	e002      	b.n	8000ec6 <main+0x222>
          }else{
            setColorLED(green);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f000 ffb3 	bl	8001e2c <setColorLED>
          }
        }
      spiCommonBufferCounter++;
 8000ec6:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <main+0x394>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a5a      	ldr	r2, [pc, #360]	; (8001038 <main+0x394>)
 8000ece:	6013      	str	r3, [r2, #0]
      }


      if (uartNewCommand == true){
 8000ed0:	4b63      	ldr	r3, [pc, #396]	; (8001060 <main+0x3bc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d082      	beq.n	8000dde <main+0x13a>
        switch (uartCommand) {
 8000ed8:	4b62      	ldr	r3, [pc, #392]	; (8001064 <main+0x3c0>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3b30      	subs	r3, #48	; 0x30
 8000ede:	2b41      	cmp	r3, #65	; 0x41
 8000ee0:	f200 8106 	bhi.w	80010f0 <main+0x44c>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <main+0x248>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	080010b5 	.word	0x080010b5
 8000ef0:	080010c1 	.word	0x080010c1
 8000ef4:	080010cd 	.word	0x080010cd
 8000ef8:	080010d9 	.word	0x080010d9
 8000efc:	080010e5 	.word	0x080010e5
 8000f00:	080010f1 	.word	0x080010f1
 8000f04:	080010f1 	.word	0x080010f1
 8000f08:	080010f1 	.word	0x080010f1
 8000f0c:	080010f1 	.word	0x080010f1
 8000f10:	080010f1 	.word	0x080010f1
 8000f14:	080010f1 	.word	0x080010f1
 8000f18:	080010f1 	.word	0x080010f1
 8000f1c:	080010f1 	.word	0x080010f1
 8000f20:	080010f1 	.word	0x080010f1
 8000f24:	080010f1 	.word	0x080010f1
 8000f28:	080010f1 	.word	0x080010f1
 8000f2c:	080010f1 	.word	0x080010f1
 8000f30:	080010f1 	.word	0x080010f1
 8000f34:	080010f1 	.word	0x080010f1
 8000f38:	080010f1 	.word	0x080010f1
 8000f3c:	080010f1 	.word	0x080010f1
 8000f40:	080010f1 	.word	0x080010f1
 8000f44:	080010f1 	.word	0x080010f1
 8000f48:	080010f1 	.word	0x080010f1
 8000f4c:	080010f1 	.word	0x080010f1
 8000f50:	080010f1 	.word	0x080010f1
 8000f54:	080010f1 	.word	0x080010f1
 8000f58:	080010f1 	.word	0x080010f1
 8000f5c:	080010f1 	.word	0x080010f1
 8000f60:	080010f1 	.word	0x080010f1
 8000f64:	080010f1 	.word	0x080010f1
 8000f68:	080010f1 	.word	0x080010f1
 8000f6c:	080010f1 	.word	0x080010f1
 8000f70:	080010f1 	.word	0x080010f1
 8000f74:	080010f1 	.word	0x080010f1
 8000f78:	080010f1 	.word	0x080010f1
 8000f7c:	080010f1 	.word	0x080010f1
 8000f80:	080010f1 	.word	0x080010f1
 8000f84:	080010f1 	.word	0x080010f1
 8000f88:	080010f1 	.word	0x080010f1
 8000f8c:	080010f1 	.word	0x080010f1
 8000f90:	080010f1 	.word	0x080010f1
 8000f94:	080010f1 	.word	0x080010f1
 8000f98:	080010f1 	.word	0x080010f1
 8000f9c:	080010f1 	.word	0x080010f1
 8000fa0:	080010f1 	.word	0x080010f1
 8000fa4:	080010f1 	.word	0x080010f1
 8000fa8:	080010f1 	.word	0x080010f1
 8000fac:	080010f1 	.word	0x080010f1
 8000fb0:	08000ff5 	.word	0x08000ff5
 8000fb4:	0800106d 	.word	0x0800106d
 8000fb8:	08001079 	.word	0x08001079
 8000fbc:	08001085 	.word	0x08001085
 8000fc0:	08001091 	.word	0x08001091
 8000fc4:	0800109d 	.word	0x0800109d
 8000fc8:	080010f1 	.word	0x080010f1
 8000fcc:	080010f1 	.word	0x080010f1
 8000fd0:	080010f1 	.word	0x080010f1
 8000fd4:	080010f1 	.word	0x080010f1
 8000fd8:	080010f1 	.word	0x080010f1
 8000fdc:	080010f1 	.word	0x080010f1
 8000fe0:	080010f1 	.word	0x080010f1
 8000fe4:	080010f1 	.word	0x080010f1
 8000fe8:	080010f1 	.word	0x080010f1
 8000fec:	080010f1 	.word	0x080010f1
 8000ff0:	080010a9 	.word	0x080010a9
          case 'a': // multiplexer X -> 0
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	481b      	ldr	r0, [pc, #108]	; (8001068 <main+0x3c4>)
 8000ffa:	f006 f887 	bl	800710c <HAL_GPIO_WritePin>
            break;
 8000ffe:	e078      	b.n	80010f2 <main+0x44e>
 8001000:	e000edf0 	.word	0xe000edf0
 8001004:	e0001000 	.word	0xe0001000
 8001008:	24008918 	.word	0x24008918
 800100c:	240088e4 	.word	0x240088e4
 8001010:	24008929 	.word	0x24008929
 8001014:	2400894c 	.word	0x2400894c
 8001018:	240087dc 	.word	0x240087dc
 800101c:	24008790 	.word	0x24008790
 8001020:	08017ba0 	.word	0x08017ba0
 8001024:	24000000 	.word	0x24000000
 8001028:	2400894f 	.word	0x2400894f
 800102c:	24008930 	.word	0x24008930
 8001030:	24008934 	.word	0x24008934
 8001034:	24008938 	.word	0x24008938
 8001038:	2400893c 	.word	0x2400893c
 800103c:	c0000000 	.word	0xc0000000
 8001040:	c0000400 	.word	0xc0000400
 8001044:	c0000800 	.word	0xc0000800
 8001048:	24000005 	.word	0x24000005
 800104c:	24000006 	.word	0x24000006
 8001050:	24000007 	.word	0x24000007
 8001054:	24008928 	.word	0x24008928
 8001058:	2400892b 	.word	0x2400892b
 800105c:	2400892a 	.word	0x2400892a
 8001060:	2400894e 	.word	0x2400894e
 8001064:	2400894d 	.word	0x2400894d
 8001068:	58020000 	.word	0x58020000
          case 'b': // multiplexer X -> 1
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2120      	movs	r1, #32
 8001070:	4822      	ldr	r0, [pc, #136]	; (80010fc <main+0x458>)
 8001072:	f006 f84b 	bl	800710c <HAL_GPIO_WritePin>
            break;
 8001076:	e03c      	b.n	80010f2 <main+0x44e>

          case 'c': // multiplexer Y -> 0
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2110      	movs	r1, #16
 800107c:	4820      	ldr	r0, [pc, #128]	; (8001100 <main+0x45c>)
 800107e:	f006 f845 	bl	800710c <HAL_GPIO_WritePin>
            break;
 8001082:	e036      	b.n	80010f2 <main+0x44e>

          case 'd': // multiplexer Y -> 1
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2110      	movs	r1, #16
 8001088:	481d      	ldr	r0, [pc, #116]	; (8001100 <main+0x45c>)
 800108a:	f006 f83f 	bl	800710c <HAL_GPIO_WritePin>
            break;
 800108e:	e030      	b.n	80010f2 <main+0x44e>

          case 'e': // multiplexer Z -> 0
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2101      	movs	r1, #1
 8001094:	481b      	ldr	r0, [pc, #108]	; (8001104 <main+0x460>)
 8001096:	f006 f839 	bl	800710c <HAL_GPIO_WritePin>
            break;
 800109a:	e02a      	b.n	80010f2 <main+0x44e>

          case 'f': // multiplexer Z -> 1
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	2101      	movs	r1, #1
 80010a0:	4818      	ldr	r0, [pc, #96]	; (8001104 <main+0x460>)
 80010a2:	f006 f833 	bl	800710c <HAL_GPIO_WritePin>
            break;
 80010a6:	e024      	b.n	80010f2 <main+0x44e>
          case 'p':

            break;

          case 'q':
            sdCardWriteEnable = false;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <main+0x464>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
            sd_card_close_file();
 80010ae:	f001 f973 	bl	8002398 <sd_card_close_file>
            break;
 80010b2:	e01e      	b.n	80010f2 <main+0x44e>

         // Numbers reserved for SPS values
          case '0':
            //set SPS to 5
            setNewSPStoAllADCs(SPS_VALUE_5);
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <main+0x468>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fd53 	bl	8002b64 <setNewSPStoAllADCs>
            break;
 80010be:	e018      	b.n	80010f2 <main+0x44e>
          case '1':
            //set SPS to 20
            setNewSPStoAllADCs(SPS_VALUE_20);
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <main+0x46c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fd4d 	bl	8002b64 <setNewSPStoAllADCs>
            break;
 80010ca:	e012      	b.n	80010f2 <main+0x44e>
          case '2':
            //set SPS to 100
            setNewSPStoAllADCs(SPS_VALUE_100);
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <main+0x470>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fd47 	bl	8002b64 <setNewSPStoAllADCs>
            break;
 80010d6:	e00c      	b.n	80010f2 <main+0x44e>
          case '3':
            //set SPS to 500
            setNewSPStoAllADCs(SPS_VALUE_500);
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <main+0x474>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fd41 	bl	8002b64 <setNewSPStoAllADCs>
            break;
 80010e2:	e006      	b.n	80010f2 <main+0x44e>
          case '4':
            //set SPS to 1000
            setNewSPStoAllADCs(SPS_VALUE_1000);
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <main+0x478>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fd3b 	bl	8002b64 <setNewSPStoAllADCs>
            break;
 80010ee:	e000      	b.n	80010f2 <main+0x44e>
          default:
            break;
 80010f0:	bf00      	nop
        }
        uartNewCommand = false;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <main+0x47c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
      if(spiCommonBufferCounter < findMin(spi1ValuesBufferCounter,spi2ValuesBufferCounter,spi4ValuesBufferCounter)){
 80010f8:	e671      	b.n	8000dde <main+0x13a>
 80010fa:	bf00      	nop
 80010fc:	58020000 	.word	0x58020000
 8001100:	58020800 	.word	0x58020800
 8001104:	58020400 	.word	0x58020400
 8001108:	24008928 	.word	0x24008928
 800110c:	24000000 	.word	0x24000000
 8001110:	24000001 	.word	0x24000001
 8001114:	24000002 	.word	0x24000002
 8001118:	24000003 	.word	0x24000003
 800111c:	24000004 	.word	0x24000004
 8001120:	2400894e 	.word	0x2400894e

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09c      	sub	sp, #112	; 0x70
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	224c      	movs	r2, #76	; 0x4c
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f013 fc04 	bl	8014940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2220      	movs	r2, #32
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f013 fbfe 	bl	8014940 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001144:	4b33      	ldr	r3, [pc, #204]	; (8001214 <SystemClock_Config+0xf0>)
 8001146:	f04f 32ff 	mov.w	r2, #4294967295
 800114a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800114e:	2002      	movs	r0, #2
 8001150:	f006 f82a 	bl	80071a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001154:	2300      	movs	r3, #0
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <SystemClock_Config+0xf4>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a2e      	ldr	r2, [pc, #184]	; (8001218 <SystemClock_Config+0xf4>)
 800115e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <SystemClock_Config+0xf4>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001170:	bf00      	nop
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <SystemClock_Config+0xf4>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800117a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800117e:	d1f8      	bne.n	8001172 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <SystemClock_Config+0xf0>)
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	4a23      	ldr	r2, [pc, #140]	; (8001214 <SystemClock_Config+0xf0>)
 8001186:	f023 0303 	bic.w	r3, r3, #3
 800118a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001190:	2301      	movs	r3, #1
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2340      	movs	r3, #64	; 0x40
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119c:	2300      	movs	r3, #0
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a0:	2304      	movs	r3, #4
 80011a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80011a4:	2323      	movs	r3, #35	; 0x23
 80011a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011b4:	230c      	movs	r3, #12
 80011b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 f829 	bl	800721c <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011d0:	f001 f848 	bl	8002264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	233f      	movs	r3, #63	; 0x3f
 80011d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2303      	movs	r3, #3
 80011da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011e4:	2340      	movs	r3, #64	; 0x40
 80011e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011f2:	2340      	movs	r3, #64	; 0x40
 80011f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2107      	movs	r1, #7
 80011fa:	4618      	mov	r0, r3
 80011fc:	f006 fc14 	bl	8007a28 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001206:	f001 f82d 	bl	8002264 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3770      	adds	r7, #112	; 0x70
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	58024400 	.word	0x58024400
 8001218:	58024800 	.word	0x58024800

0800121c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0ae      	sub	sp, #184	; 0xb8
 8001220:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	22b8      	movs	r2, #184	; 0xb8
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f013 fb89 	bl	8014940 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <PeriphCommonClock_Config+0x60>)
 8001230:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001232:	2304      	movs	r3, #4
 8001234:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001236:	2308      	movs	r3, #8
 8001238:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001246:	23c0      	movs	r3, #192	; 0xc0
 8001248:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8001252:	2302      	movs	r3, #2
 8001254:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800125c:	2300      	movs	r3, #0
 800125e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4618      	mov	r0, r3
 8001264:	f006 ff6c 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800126e:	f000 fff9 	bl	8002264 <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	37b8      	adds	r7, #184	; 0xb8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	81010000 	.word	0x81010000

08001280 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_SDMMC1_SD_Init+0x34>)
 8001286:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <MX_SDMMC1_SD_Init+0x38>)
 8001288:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_SDMMC1_SD_Init+0x34>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_SDMMC1_SD_Init+0x34>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_SDMMC1_SD_Init+0x34>)
 8001298:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <MX_SDMMC1_SD_Init+0x34>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 64;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <MX_SDMMC1_SD_Init+0x34>)
 80012a6:	2240      	movs	r2, #64	; 0x40
 80012a8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	24008214 	.word	0x24008214
 80012b8:	52007000 	.word	0x52007000

080012bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <MX_SPI1_Init+0xa8>)
 80012c2:	4a29      	ldr	r2, [pc, #164]	; (8001368 <MX_SPI1_Init+0xac>)
 80012c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <MX_SPI1_Init+0xa8>)
 80012c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <MX_SPI1_Init+0xa8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <MX_SPI1_Init+0xa8>)
 80012d6:	2207      	movs	r2, #7
 80012d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012da:	4b22      	ldr	r3, [pc, #136]	; (8001364 <MX_SPI1_Init+0xa8>)
 80012dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <MX_SPI1_Init+0xa8>)
 80012e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <MX_SPI1_Init+0xa8>)
 80012ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_SPI1_Init+0xa8>)
 80012f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_SPI1_Init+0xa8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_SPI1_Init+0xa8>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_SPI1_Init+0xa8>)
 8001308:	2200      	movs	r2, #0
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_SPI1_Init+0xa8>)
 800130e:	2200      	movs	r2, #0
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_SPI1_Init+0xa8>)
 8001314:	2200      	movs	r2, #0
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_SPI1_Init+0xa8>)
 800131a:	2200      	movs	r2, #0
 800131c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_SPI1_Init+0xa8>)
 8001320:	2200      	movs	r2, #0
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI1_Init+0xa8>)
 8001326:	2200      	movs	r2, #0
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_SPI1_Init+0xa8>)
 800132c:	2200      	movs	r2, #0
 800132e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI1_Init+0xa8>)
 8001332:	2200      	movs	r2, #0
 8001334:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_SPI1_Init+0xa8>)
 8001338:	2200      	movs	r2, #0
 800133a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI1_Init+0xa8>)
 800133e:	2200      	movs	r2, #0
 8001340:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_SPI1_Init+0xa8>)
 8001344:	2200      	movs	r2, #0
 8001346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI1_Init+0xa8>)
 800134a:	2200      	movs	r2, #0
 800134c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_SPI1_Init+0xa8>)
 8001350:	f00a fc9c 	bl	800bc8c <HAL_SPI_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800135a:	f000 ff83 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	24008290 	.word	0x24008290
 8001368:	40013000 	.word	0x40013000

0800136c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001372:	4a29      	ldr	r2, [pc, #164]	; (8001418 <MX_SPI2_Init+0xac>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001378:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800137c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001386:	2207      	movs	r2, #7
 8001388:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <MX_SPI2_Init+0xa8>)
 800138c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001390:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001394:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001398:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_SPI2_Init+0xa8>)
 800139c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_SPI2_Init+0xa8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001400:	f00a fc44 	bl	800bc8c <HAL_SPI_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800140a:	f000 ff2b 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	24008318 	.word	0x24008318
 8001418:	40003800 	.word	0x40003800

0800141c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001422:	4a29      	ldr	r2, [pc, #164]	; (80014c8 <MX_SPI4_Init+0xac>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001428:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800142c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001436:	2207      	movs	r2, #7
 8001438:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MX_SPI4_Init+0xa8>)
 800143c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001440:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001448:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_SPI4_Init+0xa8>)
 800144c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001450:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001454:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001458:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_SPI4_Init+0xa8>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_SPI4_Init+0xa8>)
 800146e:	2200      	movs	r2, #0
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001474:	2200      	movs	r2, #0
 8001476:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_SPI4_Init+0xa8>)
 800147a:	2200      	movs	r2, #0
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001480:	2200      	movs	r2, #0
 8001482:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_SPI4_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_SPI4_Init+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SPI4_Init+0xa8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_SPI4_Init+0xa8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SPI4_Init+0xa8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_SPI4_Init+0xa8>)
 80014b0:	f00a fbec 	bl	800bc8c <HAL_SPI_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80014ba:	f000 fed3 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	240083a0 	.word	0x240083a0
 80014c8:	40013400 	.word	0x40013400

080014cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b09c      	sub	sp, #112	; 0x70
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2234      	movs	r2, #52	; 0x34
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f013 fa1a 	bl	8014940 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <MX_TIM1_Init+0x150>)
 800150e:	4a44      	ldr	r2, [pc, #272]	; (8001620 <MX_TIM1_Init+0x154>)
 8001510:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <MX_TIM1_Init+0x150>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b40      	ldr	r3, [pc, #256]	; (800161c <MX_TIM1_Init+0x150>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800151e:	4b3f      	ldr	r3, [pc, #252]	; (800161c <MX_TIM1_Init+0x150>)
 8001520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001524:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <MX_TIM1_Init+0x150>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800152c:	4b3b      	ldr	r3, [pc, #236]	; (800161c <MX_TIM1_Init+0x150>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b3a      	ldr	r3, [pc, #232]	; (800161c <MX_TIM1_Init+0x150>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001538:	4838      	ldr	r0, [pc, #224]	; (800161c <MX_TIM1_Init+0x150>)
 800153a:	f00b fbfc 	bl	800cd36 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001544:	f000 fe8e 	bl	8002264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800154e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001552:	4619      	mov	r1, r3
 8001554:	4831      	ldr	r0, [pc, #196]	; (800161c <MX_TIM1_Init+0x150>)
 8001556:	f00c f84f 	bl	800d5f8 <HAL_TIM_ConfigClockSource>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001560:	f000 fe80 	bl	8002264 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001564:	482d      	ldr	r0, [pc, #180]	; (800161c <MX_TIM1_Init+0x150>)
 8001566:	f00b fcb5 	bl	800ced4 <HAL_TIM_PWM_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001570:	f000 fe78 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001580:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001584:	4619      	mov	r1, r3
 8001586:	4825      	ldr	r0, [pc, #148]	; (800161c <MX_TIM1_Init+0x150>)
 8001588:	f00c ffba 	bl	800e500 <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001592:	f000 fe67 	bl	8002264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001596:	2360      	movs	r3, #96	; 0x60
 8001598:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159e:	2300      	movs	r3, #0
 80015a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a2:	2300      	movs	r3, #0
 80015a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <MX_TIM1_Init+0x150>)
 80015bc:	f00b ff08 	bl	800d3d0 <HAL_TIM_PWM_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015c6:	f000 fe4d 	bl	8002264 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM1_Init+0x150>)
 8001600:	f00d f80c 	bl	800e61c <HAL_TIMEx_ConfigBreakDeadTime>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800160a:	f000 fe2b 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM1_Init+0x150>)
 8001610:	f001 ff56 	bl	80034c0 <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3770      	adds	r7, #112	; 0x70
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	240086f8 	.word	0x240086f8
 8001620:	40010000 	.word	0x40010000

08001624 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001646:	463b      	mov	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <MX_TIM2_Init+0xe0>)
 8001654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001658:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <MX_TIM2_Init+0xe0>)
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b28      	ldr	r3, [pc, #160]	; (8001704 <MX_TIM2_Init+0xe0>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <MX_TIM2_Init+0xe0>)
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <MX_TIM2_Init+0xe0>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <MX_TIM2_Init+0xe0>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800167a:	4822      	ldr	r0, [pc, #136]	; (8001704 <MX_TIM2_Init+0xe0>)
 800167c:	f00b fb5b 	bl	800cd36 <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001686:	f000 fded 	bl	8002264 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800168a:	481e      	ldr	r0, [pc, #120]	; (8001704 <MX_TIM2_Init+0xe0>)
 800168c:	f00b fc83 	bl	800cf96 <HAL_TIM_IC_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001696:	f000 fde5 	bl	8002264 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800169a:	2307      	movs	r3, #7
 800169c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	4816      	ldr	r0, [pc, #88]	; (8001704 <MX_TIM2_Init+0xe0>)
 80016aa:	f00c f89d 	bl	800d7e8 <HAL_TIM_SlaveConfigSynchro>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016b4:	f000 fdd6 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4619      	mov	r1, r3
 80016c6:	480f      	ldr	r0, [pc, #60]	; (8001704 <MX_TIM2_Init+0xe0>)
 80016c8:	f00c ff1a 	bl	800e500 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016d2:	f000 fdc7 	bl	8002264 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016da:	2301      	movs	r3, #1
 80016dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_TIM2_Init+0xe0>)
 80016ee:	f00b fdd2 	bl	800d296 <HAL_TIM_IC_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80016f8:	f000 fdb4 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	3730      	adds	r7, #48	; 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	24008744 	.word	0x24008744

08001708 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <MX_TIM16_Init+0x48>)
 800170e:	4a11      	ldr	r2, [pc, #68]	; (8001754 <MX_TIM16_Init+0x4c>)
 8001710:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 28000-1;
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_TIM16_Init+0x48>)
 8001714:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001718:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <MX_TIM16_Init+0x48>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_TIM16_Init+0x48>)
 8001722:	f242 720f 	movw	r2, #9999	; 0x270f
 8001726:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_TIM16_Init+0x48>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_TIM16_Init+0x48>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_TIM16_Init+0x48>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_TIM16_Init+0x48>)
 800173c:	f00b fafb 	bl	800cd36 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001746:	f000 fd8d 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	24008790 	.word	0x24008790
 8001754:	40014400 	.word	0x40014400

08001758 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800175c:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <MX_UART4_Init+0x90>)
 800175e:	4a23      	ldr	r2, [pc, #140]	; (80017ec <MX_UART4_Init+0x94>)
 8001760:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 3000000;
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <MX_UART4_Init+0x90>)
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <MX_UART4_Init+0x98>)
 8001766:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_UART4_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_UART4_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_UART4_Init+0x90>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <MX_UART4_Init+0x90>)
 800177c:	220c      	movs	r2, #12
 800177e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_UART4_Init+0x90>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <MX_UART4_Init+0x90>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <MX_UART4_Init+0x90>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_UART4_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <MX_UART4_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800179e:	4812      	ldr	r0, [pc, #72]	; (80017e8 <MX_UART4_Init+0x90>)
 80017a0:	f00c fffa 	bl	800e798 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_UART4_Init+0x56>
  {
    Error_Handler();
 80017aa:	f000 fd5b 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ae:	2100      	movs	r1, #0
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_UART4_Init+0x90>)
 80017b2:	f00f fb92 	bl	8010eda <HAL_UARTEx_SetTxFifoThreshold>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 80017bc:	f000 fd52 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c0:	2100      	movs	r1, #0
 80017c2:	4809      	ldr	r0, [pc, #36]	; (80017e8 <MX_UART4_Init+0x90>)
 80017c4:	f00f fbc7 	bl	8010f56 <HAL_UARTEx_SetRxFifoThreshold>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 80017ce:	f000 fd49 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_UART4_Init+0x90>)
 80017d4:	f00f fb48 	bl	8010e68 <HAL_UARTEx_DisableFifoMode>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 80017de:	f000 fd41 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	240087dc 	.word	0x240087dc
 80017ec:	40004c00 	.word	0x40004c00
 80017f0:	002dc6c0 	.word	0x002dc6c0

080017f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <MX_DMA_Init+0xbc>)
 80017fc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001800:	4a2b      	ldr	r2, [pc, #172]	; (80018b0 <MX_DMA_Init+0xbc>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <MX_DMA_Init+0xbc>)
 800180c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <MX_DMA_Init+0xbc>)
 800181a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800181e:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <MX_DMA_Init+0xbc>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <MX_DMA_Init+0xbc>)
 800182a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	200b      	movs	r0, #11
 800183c:	f002 fb87 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001840:	200b      	movs	r0, #11
 8001842:	f002 fb9e 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	200c      	movs	r0, #12
 800184c:	f002 fb7f 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001850:	200c      	movs	r0, #12
 8001852:	f002 fb96 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	200d      	movs	r0, #13
 800185c:	f002 fb77 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001860:	200d      	movs	r0, #13
 8001862:	f002 fb8e 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	200e      	movs	r0, #14
 800186c:	f002 fb6f 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001870:	200e      	movs	r0, #14
 8001872:	f002 fb86 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	200f      	movs	r0, #15
 800187c:	f002 fb67 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001880:	200f      	movs	r0, #15
 8001882:	f002 fb7e 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	202f      	movs	r0, #47	; 0x2f
 800188c:	f002 fb5f 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001890:	202f      	movs	r0, #47	; 0x2f
 8001892:	f002 fb76 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	2038      	movs	r0, #56	; 0x38
 800189c:	f002 fb57 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018a0:	2038      	movs	r0, #56	; 0x38
 80018a2:	f002 fb6e 	bl	8003f82 <HAL_NVIC_EnableIRQ>

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	58024400 	.word	0x58024400

080018b4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	615a      	str	r2, [r3, #20]
 80018ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018cc:	4b20      	ldr	r3, [pc, #128]	; (8001950 <MX_FMC_Init+0x9c>)
 80018ce:	4a21      	ldr	r2, [pc, #132]	; (8001954 <MX_FMC_Init+0xa0>)
 80018d0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <MX_FMC_Init+0x9c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_FMC_Init+0x9c>)
 80018da:	2201      	movs	r2, #1
 80018dc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <MX_FMC_Init+0x9c>)
 80018e0:	2208      	movs	r2, #8
 80018e2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_FMC_Init+0x9c>)
 80018e6:	2210      	movs	r2, #16
 80018e8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_FMC_Init+0x9c>)
 80018ec:	2240      	movs	r2, #64	; 0x40
 80018ee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_FMC_Init+0x9c>)
 80018f2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80018f6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MX_FMC_Init+0x9c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_FMC_Init+0x9c>)
 8001900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001904:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <MX_FMC_Init+0x9c>)
 8001908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_FMC_Init+0x9c>)
 8001910:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001916:	2302      	movs	r3, #2
 8001918:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 800191a:	2309      	movs	r3, #9
 800191c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 800191e:	2306      	movs	r3, #6
 8001920:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 8001922:	2309      	movs	r3, #9
 8001924:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 8001926:	2304      	movs	r3, #4
 8001928:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 800192a:	2303      	movs	r3, #3
 800192c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 800192e:	2303      	movs	r3, #3
 8001930:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <MX_FMC_Init+0x9c>)
 8001938:	f00a f90e 	bl	800bb58 <HAL_SDRAM_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8001942:	f000 fc8f 	bl	8002264 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001946:	bf00      	nop
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	240088e4 	.word	0x240088e4
 8001954:	52004140 	.word	0x52004140

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08e      	sub	sp, #56	; 0x38
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800196e:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001970:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001974:	4a7b      	ldr	r2, [pc, #492]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001976:	f043 0310 	orr.w	r3, r3, #16
 800197a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800197e:	4b79      	ldr	r3, [pc, #484]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001980:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	623b      	str	r3, [r7, #32]
 800198a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198c:	4b75      	ldr	r3, [pc, #468]	; (8001b64 <MX_GPIO_Init+0x20c>)
 800198e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001992:	4a74      	ldr	r2, [pc, #464]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800199c:	4b71      	ldr	r3, [pc, #452]	; (8001b64 <MX_GPIO_Init+0x20c>)
 800199e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019aa:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <MX_GPIO_Init+0x20c>)
 80019ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019b0:	4a6c      	ldr	r2, [pc, #432]	; (8001b64 <MX_GPIO_Init+0x20c>)
 80019b2:	f043 0320 	orr.w	r3, r3, #32
 80019b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019ba:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <MX_GPIO_Init+0x20c>)
 80019bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c8:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <MX_GPIO_Init+0x20c>)
 80019ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019ce:	4a65      	ldr	r2, [pc, #404]	; (8001b64 <MX_GPIO_Init+0x20c>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019d8:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <MX_GPIO_Init+0x20c>)
 80019da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b5f      	ldr	r3, [pc, #380]	; (8001b64 <MX_GPIO_Init+0x20c>)
 80019e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019ec:	4a5d      	ldr	r2, [pc, #372]	; (8001b64 <MX_GPIO_Init+0x20c>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019f6:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <MX_GPIO_Init+0x20c>)
 80019f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001a06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a0a:	4a56      	ldr	r2, [pc, #344]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001a16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a22:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001a24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a28:	4a4e      	ldr	r2, [pc, #312]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a32:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001a34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a40:	4b48      	ldr	r3, [pc, #288]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001a42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a46:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a50:	4b44      	ldr	r3, [pc, #272]	; (8001b64 <MX_GPIO_Init+0x20c>)
 8001a52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2110      	movs	r1, #16
 8001a62:	4841      	ldr	r0, [pc, #260]	; (8001b68 <MX_GPIO_Init+0x210>)
 8001a64:	f005 fb52 	bl	800710c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 8001a6e:	483f      	ldr	r0, [pc, #252]	; (8001b6c <MX_GPIO_Init+0x214>)
 8001a70:	f005 fb4c 	bl	800710c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MULT_IN_Y_GPIO_Port, MULT_IN_Y_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2110      	movs	r1, #16
 8001a78:	483d      	ldr	r0, [pc, #244]	; (8001b70 <MX_GPIO_Init+0x218>)
 8001a7a:	f005 fb47 	bl	800710c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MULT_IN_Z_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f241 0101 	movw	r1, #4097	; 0x1001
 8001a84:	483b      	ldr	r0, [pc, #236]	; (8001b74 <MX_GPIO_Init+0x21c>)
 8001a86:	f005 fb41 	bl	800710c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 8001a90:	4839      	ldr	r0, [pc, #228]	; (8001b78 <MX_GPIO_Init+0x220>)
 8001a92:	f005 fb3b 	bl	800710c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a96:	2310      	movs	r3, #16
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	482e      	ldr	r0, [pc, #184]	; (8001b68 <MX_GPIO_Init+0x210>)
 8001aae:	f005 f97d 	bl	8006dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001ab2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ab8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	482c      	ldr	r0, [pc, #176]	; (8001b7c <MX_GPIO_Init+0x224>)
 8001aca:	f005 f96f 	bl	8006dac <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_X_Pin PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ace:	f44f 53f1 	mov.w	r3, #7712	; 0x1e20
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4821      	ldr	r0, [pc, #132]	; (8001b6c <MX_GPIO_Init+0x214>)
 8001ae8:	f005 f960 	bl	8006dac <HAL_GPIO_Init>

  /*Configure GPIO pin : MULT_IN_Y_Pin */
  GPIO_InitStruct.Pin = MULT_IN_Y_Pin;
 8001aec:	2310      	movs	r3, #16
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MULT_IN_Y_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b00:	4619      	mov	r1, r3
 8001b02:	481b      	ldr	r0, [pc, #108]	; (8001b70 <MX_GPIO_Init+0x218>)
 8001b04:	f005 f952 	bl	8006dac <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_Z_Pin PB12 */
  GPIO_InitStruct.Pin = MULT_IN_Z_Pin|GPIO_PIN_12;
 8001b08:	f241 0301 	movw	r3, #4097	; 0x1001
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4814      	ldr	r0, [pc, #80]	; (8001b74 <MX_GPIO_Init+0x21c>)
 8001b22:	f005 f943 	bl	8006dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b36:	4619      	mov	r1, r3
 8001b38:	4811      	ldr	r0, [pc, #68]	; (8001b80 <MX_GPIO_Init+0x228>)
 8001b3a:	f005 f937 	bl	8006dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 USB_C_Reset_Pin USB_C_Alert_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin;
 8001b3e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	4808      	ldr	r0, [pc, #32]	; (8001b78 <MX_GPIO_Init+0x220>)
 8001b58:	f005 f928 	bl	8006dac <HAL_GPIO_Init>

}
 8001b5c:	bf00      	nop
 8001b5e:	3738      	adds	r7, #56	; 0x38
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	58024400 	.word	0x58024400
 8001b68:	58021000 	.word	0x58021000
 8001b6c:	58020000 	.word	0x58020000
 8001b70:	58020800 	.word	0x58020800
 8001b74:	58020400 	.word	0x58020400
 8001b78:	58021800 	.word	0x58021800
 8001b7c:	58021400 	.word	0x58021400
 8001b80:	58020c00 	.word	0x58020c00

08001b84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// TODO:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]

  //SPI1 MISO
  if (GPIO_Pin == GPIO_PIN_6){
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	2b40      	cmp	r3, #64	; 0x40
 8001b92:	d109      	bne.n	8001ba8 <HAL_GPIO_EXTI_Callback+0x24>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001b94:	2017      	movs	r0, #23
 8001b96:	f002 fa02 	bl	8003f9e <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi1, pTxData, spi1Buffer, 4);
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	4a27      	ldr	r2, [pc, #156]	; (8001c3c <HAL_GPIO_EXTI_Callback+0xb8>)
 8001b9e:	4928      	ldr	r1, [pc, #160]	; (8001c40 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001ba0:	4828      	ldr	r0, [pc, #160]	; (8001c44 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ba2:	f00a fb6b 	bl	800c27c <HAL_SPI_TransmitReceive_DMA>
  }
  else if (GPIO_Pin == GPIO_PIN_9){
    __NOP();
    //sendToSDcard = true;
  }
}
 8001ba6:	e044      	b.n	8001c32 <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_14){
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bae:	d109      	bne.n	8001bc4 <HAL_GPIO_EXTI_Callback+0x40>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001bb0:	2028      	movs	r0, #40	; 0x28
 8001bb2:	f002 f9f4 	bl	8003f9e <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi2, pTxData, spi2Buffer, 4);
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001bba:	4921      	ldr	r1, [pc, #132]	; (8001c40 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bbc:	4823      	ldr	r0, [pc, #140]	; (8001c4c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001bbe:	f00a fb5d 	bl	800c27c <HAL_SPI_TransmitReceive_DMA>
}
 8001bc2:	e036      	b.n	8001c32 <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_5){
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	2b20      	cmp	r3, #32
 8001bc8:	d109      	bne.n	8001bde <HAL_GPIO_EXTI_Callback+0x5a>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001bca:	2017      	movs	r0, #23
 8001bcc:	f002 f9e7 	bl	8003f9e <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi4, pTxData, spi4Buffer, 4);
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001bd4:	491a      	ldr	r1, [pc, #104]	; (8001c40 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bd6:	481f      	ldr	r0, [pc, #124]	; (8001c54 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001bd8:	f00a fb50 	bl	800c27c <HAL_SPI_TransmitReceive_DMA>
}
 8001bdc:	e029      	b.n	8001c32 <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_7){
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	2b80      	cmp	r3, #128	; 0x80
 8001be2:	d121      	bne.n	8001c28 <HAL_GPIO_EXTI_Callback+0xa4>
    if(sdCardWriteEnable == false){
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d011      	beq.n	8001c16 <HAL_GPIO_EXTI_Callback+0x92>
      sdCardOpenFileError = sd_card_open_file();
 8001bf2:	f000 fb5d 	bl	80022b0 <sd_card_open_file>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bfc:	701a      	strb	r2, [r3, #0]
      if (sdCardOpenFileError == true){
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_EXTI_Callback+0x8a>
        setColorLED(red);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 f910 	bl	8001e2c <setColorLED>
}
 8001c0c:	e011      	b.n	8001c32 <HAL_GPIO_EXTI_Callback+0xae>
        sdCardWriteEnable = true;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
}
 8001c14:	e00d      	b.n	8001c32 <HAL_GPIO_EXTI_Callback+0xae>
      sdCardWriteEnable = false;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
      sd_card_close_file();
 8001c1c:	f000 fbbc 	bl	8002398 <sd_card_close_file>
      setColorLED(blue);
 8001c20:	2002      	movs	r0, #2
 8001c22:	f000 f903 	bl	8001e2c <setColorLED>
}
 8001c26:	e004      	b.n	8001c32 <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_9){
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2e:	d100      	bne.n	8001c32 <HAL_GPIO_EXTI_Callback+0xae>
    __NOP();
 8001c30:	bf00      	nop
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	24008940 	.word	0x24008940
 8001c40:	2400892c 	.word	0x2400892c
 8001c44:	24008290 	.word	0x24008290
 8001c48:	24008944 	.word	0x24008944
 8001c4c:	24008318 	.word	0x24008318
 8001c50:	24008948 	.word	0x24008948
 8001c54:	240083a0 	.word	0x240083a0
 8001c58:	24008928 	.word	0x24008928
 8001c5c:	2400892b 	.word	0x2400892b

08001c60 <HAL_SPI_TxRxCpltCallback>:

//FIXME: changed here from TxRx to Rx
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi1){
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a3b      	ldr	r2, [pc, #236]	; (8001d58 <HAL_SPI_TxRxCpltCallback+0xf8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d121      	bne.n	8001cb4 <HAL_SPI_TxRxCpltCallback+0x54>
    spi1ValuesStorage[spi1ValuesBufferCounter] = (uint32_t)spi1Buffer[3] | ((uint32_t)spi1Buffer[2] << 8) | ((uint32_t)spi1Buffer[1] << 16) | ((uint32_t)spi1Buffer[0] << 24);;
 8001c70:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001c72:	78db      	ldrb	r3, [r3, #3]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001c78:	789b      	ldrb	r3, [r3, #2]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	041b      	lsls	r3, r3, #16
 8001c84:	ea42 0103 	orr.w	r1, r2, r3
 8001c88:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	061a      	lsls	r2, r3, #24
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_SPI_TxRxCpltCallback+0x100>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	4933      	ldr	r1, [pc, #204]	; (8001d64 <HAL_SPI_TxRxCpltCallback+0x104>)
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ca4:	2017      	movs	r0, #23
 8001ca6:	f002 f96c 	bl	8003f82 <HAL_NVIC_EnableIRQ>
    spi1ValuesBufferCounter++;
 8001caa:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_SPI_TxRxCpltCallback+0x100>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a2b      	ldr	r2, [pc, #172]	; (8001d60 <HAL_SPI_TxRxCpltCallback+0x100>)
 8001cb2:	6013      	str	r3, [r2, #0]
  }

  if (hspi == &hspi2){
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <HAL_SPI_TxRxCpltCallback+0x108>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d122      	bne.n	8001d02 <HAL_SPI_TxRxCpltCallback+0xa2>
    spi2ValuesStorage[spi2ValuesBufferCounter] = (uint32_t)spi2Buffer[3] | ((uint32_t)spi2Buffer[2] << 8) | ((uint32_t)spi2Buffer[1] << 16) | ((uint32_t)spi2Buffer[0] << 24);
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001cbe:	78db      	ldrb	r3, [r3, #3]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001cc4:	789b      	ldrb	r3, [r3, #2]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	041b      	lsls	r3, r3, #16
 8001cd0:	ea42 0103 	orr.w	r1, r2, r3
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	061a      	lsls	r2, r3, #24
 8001cda:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_SPI_TxRxCpltCallback+0x110>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	4924      	ldr	r1, [pc, #144]	; (8001d74 <HAL_SPI_TxRxCpltCallback+0x114>)
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cf2:	2028      	movs	r0, #40	; 0x28
 8001cf4:	f002 f945 	bl	8003f82 <HAL_NVIC_EnableIRQ>
    spi2ValuesBufferCounter++;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_SPI_TxRxCpltCallback+0x110>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <HAL_SPI_TxRxCpltCallback+0x110>)
 8001d00:	6013      	str	r3, [r2, #0]
  }

  if (hspi == &hspi4){
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <HAL_SPI_TxRxCpltCallback+0x118>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d121      	bne.n	8001d4e <HAL_SPI_TxRxCpltCallback+0xee>
    spi4ValuesStorage[spi4ValuesBufferCounter] = (uint32_t)spi4Buffer[3] | ((uint32_t)spi4Buffer[2] << 8) | ((uint32_t)spi4Buffer[1] << 16) | ((uint32_t)spi4Buffer[0] << 24);
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001d0c:	78db      	ldrb	r3, [r3, #3]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001d12:	789b      	ldrb	r3, [r3, #2]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	431a      	orrs	r2, r3
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001d1a:	785b      	ldrb	r3, [r3, #1]
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	ea42 0103 	orr.w	r1, r2, r3
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	061a      	lsls	r2, r3, #24
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_SPI_TxRxCpltCallback+0x120>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	4915      	ldr	r1, [pc, #84]	; (8001d84 <HAL_SPI_TxRxCpltCallback+0x124>)
 8001d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d3e:	2017      	movs	r0, #23
 8001d40:	f002 f91f 	bl	8003f82 <HAL_NVIC_EnableIRQ>
    spi4ValuesBufferCounter++;
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_SPI_TxRxCpltCallback+0x120>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <HAL_SPI_TxRxCpltCallback+0x120>)
 8001d4c:	6013      	str	r3, [r2, #0]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	24008290 	.word	0x24008290
 8001d5c:	24008940 	.word	0x24008940
 8001d60:	24008930 	.word	0x24008930
 8001d64:	c0000000 	.word	0xc0000000
 8001d68:	24008318 	.word	0x24008318
 8001d6c:	24008944 	.word	0x24008944
 8001d70:	24008934 	.word	0x24008934
 8001d74:	c0000400 	.word	0xc0000400
 8001d78:	240083a0 	.word	0x240083a0
 8001d7c:	24008948 	.word	0x24008948
 8001d80:	24008938 	.word	0x24008938
 8001d84:	c0000800 	.word	0xc0000800

08001d88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if (huart == &huart4){
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_UART_RxCpltCallback+0x30>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d10b      	bne.n	8001db0 <HAL_UART_RxCpltCallback+0x28>
    HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <HAL_UART_RxCpltCallback+0x34>)
 8001d9c:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_UART_RxCpltCallback+0x30>)
 8001d9e:	f00c fde1 	bl	800e964 <HAL_UART_Receive_IT>
    uartCommand = rxUart4Buffer[0];
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_UART_RxCpltCallback+0x34>)
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_UART_RxCpltCallback+0x38>)
 8001da8:	701a      	strb	r2, [r3, #0]
    uartNewCommand = true;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_UART_RxCpltCallback+0x3c>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
//  else if (huart == &huart5){
//      HAL_UART_Receive_IT (&huart5, rxUart5Buffer, 1);
//      uartCommand = rxUart5Buffer[0];
//      uartNewCommand = true;
//  }
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	240087dc 	.word	0x240087dc
 8001dbc:	2400894c 	.word	0x2400894c
 8001dc0:	2400894d 	.word	0x2400894d
 8001dc4:	2400894e 	.word	0x2400894e

08001dc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(htim == &htim16){
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a06      	ldr	r2, [pc, #24]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d104      	bne.n	8001de2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ddc:	4804      	ldr	r0, [pc, #16]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001dde:	f005 f9ae 	bl	800713e <HAL_GPIO_TogglePin>
  }
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	24008790 	.word	0x24008790
 8001df0:	58020000 	.word	0x58020000

08001df4 <findMin>:

uint32_t findMin(uint32_t a, uint32_t b, uint32_t c) {
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
    uint32_t min = a;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	617b      	str	r3, [r7, #20]
    if (b < min) {
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d201      	bcs.n	8001e10 <findMin+0x1c>
        min = b;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	617b      	str	r3, [r7, #20]
    }
    if (c < min) {
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d201      	bcs.n	8001e1c <findMin+0x28>
        min = c;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	617b      	str	r3, [r7, #20]
    }
    return min;
 8001e1c:	697b      	ldr	r3, [r7, #20]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <setColorLED>:

void setColorLED(colorLED color){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if(color == red){
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d112      	bne.n	8001e62 <setColorLED+0x36>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e42:	481f      	ldr	r0, [pc, #124]	; (8001ec0 <setColorLED+0x94>)
 8001e44:	f005 f962 	bl	800710c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4e:	481c      	ldr	r0, [pc, #112]	; (8001ec0 <setColorLED+0x94>)
 8001e50:	f005 f95c 	bl	800710c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e5a:	4819      	ldr	r0, [pc, #100]	; (8001ec0 <setColorLED+0x94>)
 8001e5c:	f005 f956 	bl	800710c <HAL_GPIO_WritePin>
  } else if (color == green){
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
  }
}
 8001e60:	e02a      	b.n	8001eb8 <setColorLED+0x8c>
  }else if(color == blue){
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d112      	bne.n	8001e8e <setColorLED+0x62>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e6e:	4814      	ldr	r0, [pc, #80]	; (8001ec0 <setColorLED+0x94>)
 8001e70:	f005 f94c 	bl	800710c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e74:	2201      	movs	r2, #1
 8001e76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e7a:	4811      	ldr	r0, [pc, #68]	; (8001ec0 <setColorLED+0x94>)
 8001e7c:	f005 f946 	bl	800710c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e86:	480e      	ldr	r0, [pc, #56]	; (8001ec0 <setColorLED+0x94>)
 8001e88:	f005 f940 	bl	800710c <HAL_GPIO_WritePin>
}
 8001e8c:	e014      	b.n	8001eb8 <setColorLED+0x8c>
  } else if (color == green){
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d111      	bne.n	8001eb8 <setColorLED+0x8c>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e9a:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <setColorLED+0x94>)
 8001e9c:	f005 f936 	bl	800710c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <setColorLED+0x94>)
 8001ea8:	f005 f930 	bl	800710c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <setColorLED+0x94>)
 8001eb4:	f005 f92a 	bl	800710c <HAL_GPIO_WritePin>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	58020000 	.word	0x58020000

08001ec4 <readConfigFile>:

void readConfigFile(const char* filename) {
 8001ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec8:	b088      	sub	sp, #32
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	466b      	mov	r3, sp
 8001ed0:	469a      	mov	sl, r3
  uint8_t bufferSize =128;
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	77fb      	strb	r3, [r7, #31]
  FRESULT result;
  char buffer[bufferSize];
 8001ed6:	7ffe      	ldrb	r6, [r7, #31]
 8001ed8:	4633      	mov	r3, r6
 8001eda:	3b01      	subs	r3, #1
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	b2f3      	uxtb	r3, r6
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4698      	mov	r8, r3
 8001ee4:	4691      	mov	r9, r2
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001efa:	b2f3      	uxtb	r3, r6
 8001efc:	2200      	movs	r2, #0
 8001efe:	461c      	mov	r4, r3
 8001f00:	4615      	mov	r5, r2
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	00eb      	lsls	r3, r5, #3
 8001f0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f10:	00e2      	lsls	r2, r4, #3
 8001f12:	4633      	mov	r3, r6
 8001f14:	3307      	adds	r3, #7
 8001f16:	08db      	lsrs	r3, r3, #3
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	ebad 0d03 	sub.w	sp, sp, r3
 8001f1e:	466b      	mov	r3, sp
 8001f20:	3300      	adds	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  // Open the file
  result = f_open(&SDFile, filename, FA_READ);
 8001f24:	2201      	movs	r2, #1
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4870      	ldr	r0, [pc, #448]	; (80020ec <readConfigFile+0x228>)
 8001f2a:	f011 ff25 	bl	8013d78 <f_open>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	74fb      	strb	r3, [r7, #19]
  if (result != FR_OK) {
      // Handle file open error
  }

  // Read and parse each line
  while (f_gets(buffer, sizeof(buffer), &SDFile) != NULL) {
 8001f32:	e0c7      	b.n	80020c4 <readConfigFile+0x200>
      // Split the line into key and value
      char* key = strtok(buffer, ": ");
 8001f34:	496e      	ldr	r1, [pc, #440]	; (80020f0 <readConfigFile+0x22c>)
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f013 fb08 	bl	801554c <strtok>
 8001f3c:	60f8      	str	r0, [r7, #12]
      char* value = strtok(NULL, ": ");
 8001f3e:	496c      	ldr	r1, [pc, #432]	; (80020f0 <readConfigFile+0x22c>)
 8001f40:	2000      	movs	r0, #0
 8001f42:	f013 fb03 	bl	801554c <strtok>
 8001f46:	60b8      	str	r0, [r7, #8]

      // Handle each key-value pair
      if (strcmp(key, "range_x") == 0) {
 8001f48:	496a      	ldr	r1, [pc, #424]	; (80020f4 <readConfigFile+0x230>)
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7fe f9d0 	bl	80002f0 <strcmp>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d104      	bne.n	8001f60 <readConfigFile+0x9c>
        // Save value for range_x
        range_x_value = value[0];
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	4b67      	ldr	r3, [pc, #412]	; (80020f8 <readConfigFile+0x234>)
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e0ab      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "range_y") == 0) {
 8001f60:	4966      	ldr	r1, [pc, #408]	; (80020fc <readConfigFile+0x238>)
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7fe f9c4 	bl	80002f0 <strcmp>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d104      	bne.n	8001f78 <readConfigFile+0xb4>
        // Save value for range_y
        range_y_value = value[0];
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <readConfigFile+0x23c>)
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e09f      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "range_z") == 0) {
 8001f78:	4962      	ldr	r1, [pc, #392]	; (8002104 <readConfigFile+0x240>)
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f7fe f9b8 	bl	80002f0 <strcmp>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d104      	bne.n	8001f90 <readConfigFile+0xcc>
        // Save value for range_z
        range_z_value = value[0];
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b5f      	ldr	r3, [pc, #380]	; (8002108 <readConfigFile+0x244>)
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e093      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "sps") == 0) {
 8001f90:	495e      	ldr	r1, [pc, #376]	; (800210c <readConfigFile+0x248>)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7fe f9ac 	bl	80002f0 <strcmp>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <readConfigFile+0xea>
        // Save value for sps
        sps = atoi(value);
 8001f9e:	68b8      	ldr	r0, [r7, #8]
 8001fa0:	f012 fca0 	bl	80148e4 <atoi>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b59      	ldr	r3, [pc, #356]	; (8002110 <readConfigFile+0x24c>)
 8001faa:	801a      	strh	r2, [r3, #0]
 8001fac:	e084      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "floating_point_values") == 0) {
 8001fae:	4959      	ldr	r1, [pc, #356]	; (8002114 <readConfigFile+0x250>)
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7fe f99d 	bl	80002f0 <strcmp>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <readConfigFile+0x110>
        // Save value for floating_point_values
        floating_point_values = atoi(value) != 0;
 8001fbc:	68b8      	ldr	r0, [r7, #8]
 8001fbe:	f012 fc91 	bl	80148e4 <atoi>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b52      	ldr	r3, [pc, #328]	; (8002118 <readConfigFile+0x254>)
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e071      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "saving_to_sd_card") == 0) {
 8001fd4:	4951      	ldr	r1, [pc, #324]	; (800211c <readConfigFile+0x258>)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7fe f98a 	bl	80002f0 <strcmp>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10b      	bne.n	8001ffa <readConfigFile+0x136>
        // Save value for saving_to_sd_card
        saving_to_sd_card =  atoi(value) != 0;
 8001fe2:	68b8      	ldr	r0, [r7, #8]
 8001fe4:	f012 fc7e 	bl	80148e4 <atoi>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <readConfigFile+0x25c>)
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	e05e      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "gain_x") == 0) {
 8001ffa:	494a      	ldr	r1, [pc, #296]	; (8002124 <readConfigFile+0x260>)
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7fe f977 	bl	80002f0 <strcmp>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <readConfigFile+0x15a>
        // Save value for gain_x
        gain_x = atof(value);
 8002008:	68b8      	ldr	r0, [r7, #8]
 800200a:	f012 fc68 	bl	80148de <atof>
 800200e:	eeb0 7b40 	vmov.f64	d7, d0
 8002012:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002016:	4b44      	ldr	r3, [pc, #272]	; (8002128 <readConfigFile+0x264>)
 8002018:	edc3 7a00 	vstr	s15, [r3]
 800201c:	e04c      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "gain_y") == 0) {
 800201e:	4943      	ldr	r1, [pc, #268]	; (800212c <readConfigFile+0x268>)
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7fe f965 	bl	80002f0 <strcmp>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <readConfigFile+0x17e>
        // Save value for gain_y
        gain_y = atof(value);
 800202c:	68b8      	ldr	r0, [r7, #8]
 800202e:	f012 fc56 	bl	80148de <atof>
 8002032:	eeb0 7b40 	vmov.f64	d7, d0
 8002036:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <readConfigFile+0x26c>)
 800203c:	edc3 7a00 	vstr	s15, [r3]
 8002040:	e03a      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "gain_z") == 0) {
 8002042:	493c      	ldr	r1, [pc, #240]	; (8002134 <readConfigFile+0x270>)
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7fe f953 	bl	80002f0 <strcmp>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <readConfigFile+0x1a2>
        // Save value for gain_z
        gain_z = atof(value);
 8002050:	68b8      	ldr	r0, [r7, #8]
 8002052:	f012 fc44 	bl	80148de <atof>
 8002056:	eeb0 7b40 	vmov.f64	d7, d0
 800205a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <readConfigFile+0x274>)
 8002060:	edc3 7a00 	vstr	s15, [r3]
 8002064:	e028      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "offset_x") == 0) {
 8002066:	4935      	ldr	r1, [pc, #212]	; (800213c <readConfigFile+0x278>)
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7fe f941 	bl	80002f0 <strcmp>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d106      	bne.n	8002082 <readConfigFile+0x1be>
        // Save value for offset_x
        offset_x = atoi(value);
 8002074:	68b8      	ldr	r0, [r7, #8]
 8002076:	f012 fc35 	bl	80148e4 <atoi>
 800207a:	4603      	mov	r3, r0
 800207c:	4a30      	ldr	r2, [pc, #192]	; (8002140 <readConfigFile+0x27c>)
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	e01a      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "offset_y") == 0) {
 8002082:	4930      	ldr	r1, [pc, #192]	; (8002144 <readConfigFile+0x280>)
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f7fe f933 	bl	80002f0 <strcmp>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d106      	bne.n	800209e <readConfigFile+0x1da>
        // Save value for offset_y
        offset_y = atoi(value);
 8002090:	68b8      	ldr	r0, [r7, #8]
 8002092:	f012 fc27 	bl	80148e4 <atoi>
 8002096:	4603      	mov	r3, r0
 8002098:	4a2b      	ldr	r2, [pc, #172]	; (8002148 <readConfigFile+0x284>)
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e00c      	b.n	80020b8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "offset_z") == 0) {
 800209e:	492b      	ldr	r1, [pc, #172]	; (800214c <readConfigFile+0x288>)
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7fe f925 	bl	80002f0 <strcmp>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <readConfigFile+0x1f4>
        // Save value for offset_z
        offset_z = atoi(value);
 80020ac:	68b8      	ldr	r0, [r7, #8]
 80020ae:	f012 fc19 	bl	80148e4 <atoi>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a26      	ldr	r2, [pc, #152]	; (8002150 <readConfigFile+0x28c>)
 80020b6:	6013      	str	r3, [r2, #0]
      }
      // Add more key comparisons as needed

      // Clear buffer for the next line
      memset(buffer, 0, sizeof(buffer));
 80020b8:	4633      	mov	r3, r6
 80020ba:	461a      	mov	r2, r3
 80020bc:	2100      	movs	r1, #0
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f012 fc3e 	bl	8014940 <memset>
  while (f_gets(buffer, sizeof(buffer), &SDFile) != NULL) {
 80020c4:	4633      	mov	r3, r6
 80020c6:	4a09      	ldr	r2, [pc, #36]	; (80020ec <readConfigFile+0x228>)
 80020c8:	4619      	mov	r1, r3
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f012 fb6e 	bl	80147ac <f_gets>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f47f af2e 	bne.w	8001f34 <readConfigFile+0x70>
  }

  // Close the file
  f_close(&SDFile);
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <readConfigFile+0x228>)
 80020da:	f012 fb3d 	bl	8014758 <f_close>
 80020de:	46d5      	mov	sp, sl
}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020ea:	bf00      	nop
 80020ec:	24008bb8 	.word	0x24008bb8
 80020f0:	08017bac 	.word	0x08017bac
 80020f4:	08017bb0 	.word	0x08017bb0
 80020f8:	24000005 	.word	0x24000005
 80020fc:	08017bb8 	.word	0x08017bb8
 8002100:	24000006 	.word	0x24000006
 8002104:	08017bc0 	.word	0x08017bc0
 8002108:	24000007 	.word	0x24000007
 800210c:	08017bc8 	.word	0x08017bc8
 8002110:	24000008 	.word	0x24000008
 8002114:	08017bcc 	.word	0x08017bcc
 8002118:	2400894f 	.word	0x2400894f
 800211c:	08017be4 	.word	0x08017be4
 8002120:	24008950 	.word	0x24008950
 8002124:	08017bf8 	.word	0x08017bf8
 8002128:	24008954 	.word	0x24008954
 800212c:	08017c00 	.word	0x08017c00
 8002130:	24008958 	.word	0x24008958
 8002134:	08017c08 	.word	0x08017c08
 8002138:	2400895c 	.word	0x2400895c
 800213c:	08017c10 	.word	0x08017c10
 8002140:	24008960 	.word	0x24008960
 8002144:	08017c1c 	.word	0x08017c1c
 8002148:	24008964 	.word	0x24008964
 800214c:	08017c28 	.word	0x08017c28
 8002150:	24008968 	.word	0x24008968

08002154 <initialSetupADC>:

void initialSetupADC(void){
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  if(range_x_value == 'H'){
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <initialSetupADC+0xe4>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b48      	cmp	r3, #72	; 0x48
 8002160:	d105      	bne.n	800216e <initialSetupADC+0x1a>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	2120      	movs	r1, #32
 8002166:	4835      	ldr	r0, [pc, #212]	; (800223c <initialSetupADC+0xe8>)
 8002168:	f004 ffd0 	bl	800710c <HAL_GPIO_WritePin>
 800216c:	e004      	b.n	8002178 <initialSetupADC+0x24>
  }else{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	2120      	movs	r1, #32
 8002172:	4832      	ldr	r0, [pc, #200]	; (800223c <initialSetupADC+0xe8>)
 8002174:	f004 ffca 	bl	800710c <HAL_GPIO_WritePin>
  }
  if(range_y_value == 'H'){
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <initialSetupADC+0xec>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b48      	cmp	r3, #72	; 0x48
 800217e:	d105      	bne.n	800218c <initialSetupADC+0x38>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	2110      	movs	r1, #16
 8002184:	482f      	ldr	r0, [pc, #188]	; (8002244 <initialSetupADC+0xf0>)
 8002186:	f004 ffc1 	bl	800710c <HAL_GPIO_WritePin>
 800218a:	e004      	b.n	8002196 <initialSetupADC+0x42>
  }else{
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800218c:	2201      	movs	r2, #1
 800218e:	2110      	movs	r1, #16
 8002190:	482c      	ldr	r0, [pc, #176]	; (8002244 <initialSetupADC+0xf0>)
 8002192:	f004 ffbb 	bl	800710c <HAL_GPIO_WritePin>
  }
  if(range_y_value == 'H'){
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <initialSetupADC+0xec>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b48      	cmp	r3, #72	; 0x48
 800219c:	d105      	bne.n	80021aa <initialSetupADC+0x56>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	2101      	movs	r1, #1
 80021a2:	4829      	ldr	r0, [pc, #164]	; (8002248 <initialSetupADC+0xf4>)
 80021a4:	f004 ffb2 	bl	800710c <HAL_GPIO_WritePin>
 80021a8:	e004      	b.n	80021b4 <initialSetupADC+0x60>
  }else{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	2101      	movs	r1, #1
 80021ae:	4826      	ldr	r0, [pc, #152]	; (8002248 <initialSetupADC+0xf4>)
 80021b0:	f004 ffac 	bl	800710c <HAL_GPIO_WritePin>
  }


  spi1_soft_reset();
 80021b4:	f000 fb7e 	bl	80028b4 <spi1_soft_reset>
  spi2_soft_reset();
 80021b8:	f000 fba2 	bl	8002900 <spi2_soft_reset>
  spi4_soft_reset();
 80021bc:	f000 fbc6 	bl	800294c <spi4_soft_reset>
  uint8_t spsHex = SPS_VALUE_5;
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <initialSetupADC+0xf8>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	71fb      	strb	r3, [r7, #7]
  if (sps == 5){
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <initialSetupADC+0xfc>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d103      	bne.n	80021d6 <initialSetupADC+0x82>
    spsHex = SPS_VALUE_5;
 80021ce:	4b1f      	ldr	r3, [pc, #124]	; (800224c <initialSetupADC+0xf8>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	e020      	b.n	8002218 <initialSetupADC+0xc4>
  }else if(sps == 20){
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <initialSetupADC+0xfc>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	2b14      	cmp	r3, #20
 80021dc:	d103      	bne.n	80021e6 <initialSetupADC+0x92>
    spsHex = SPS_VALUE_20;
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <initialSetupADC+0x100>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	71fb      	strb	r3, [r7, #7]
 80021e4:	e018      	b.n	8002218 <initialSetupADC+0xc4>
  }else if(sps == 100){
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <initialSetupADC+0xfc>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d103      	bne.n	80021f6 <initialSetupADC+0xa2>
    spsHex = SPS_VALUE_100;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <initialSetupADC+0x104>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	e010      	b.n	8002218 <initialSetupADC+0xc4>
  }else if(sps == 500){
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <initialSetupADC+0xfc>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021fe:	d103      	bne.n	8002208 <initialSetupADC+0xb4>
    spsHex = SPS_VALUE_500;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <initialSetupADC+0x108>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	71fb      	strb	r3, [r7, #7]
 8002206:	e007      	b.n	8002218 <initialSetupADC+0xc4>
  }else if(sps == 1000){
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <initialSetupADC+0xfc>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002210:	d102      	bne.n	8002218 <initialSetupADC+0xc4>
    spsHex = SPS_VALUE_1000;
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <initialSetupADC+0x10c>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  }

  spi1_adc_init(spsHex);
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f8c6 	bl	80023ac <spi1_adc_init>
  spi2_adc_init(spsHex);
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f99a 	bl	800255c <spi2_adc_init>
  spi4_adc_init(spsHex);
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fa6e 	bl	800270c <spi4_adc_init>


}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	24000005 	.word	0x24000005
 800223c:	58020000 	.word	0x58020000
 8002240:	24000006 	.word	0x24000006
 8002244:	58020800 	.word	0x58020800
 8002248:	58020400 	.word	0x58020400
 800224c:	24000000 	.word	0x24000000
 8002250:	24000008 	.word	0x24000008
 8002254:	24000001 	.word	0x24000001
 8002258:	24000002 	.word	0x24000002
 800225c:	24000003 	.word	0x24000003
 8002260:	24000004 	.word	0x24000004

08002264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800226c:	e7fe      	b.n	800226c <Error_Handler+0x8>
	...

08002270 <sd_card_init>:
FILINFO fno;
uint8_t nameFileNumber = 1;
bool newMeasurement = false;

bool sd_card_init (void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  bool initError = false;
 8002276:	2300      	movs	r3, #0
 8002278:	71fb      	strb	r3, [r7, #7]
  res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	4909      	ldr	r1, [pc, #36]	; (80022a4 <sd_card_init+0x34>)
 800227e:	480a      	ldr	r0, [pc, #40]	; (80022a8 <sd_card_init+0x38>)
 8002280:	f011 fd34 	bl	8013cec <f_mount>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <sd_card_init+0x3c>)
 800228a:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK){
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <sd_card_init+0x3c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <sd_card_init+0x28>
    initError = true;
 8002294:	2301      	movs	r3, #1
 8002296:	71fb      	strb	r3, [r7, #7]
  }
  return initError;
 8002298:	79fb      	ldrb	r3, [r7, #7]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	24008984 	.word	0x24008984
 80022a8:	24008988 	.word	0x24008988
 80022ac:	2400896c 	.word	0x2400896c

080022b0 <sd_card_open_file>:
   f_close(&SDFile);

}


bool sd_card_open_file(void){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
  FRESULT localRes;
  uint8_t fileNumber = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75bb      	strb	r3, [r7, #22]
  char filename0[] = {'a', 'd', 'c', '.', 't', 'x', 't', '\0'};
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <sd_card_open_file+0x88>)
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022c4:	e883 0003 	stmia.w	r3, {r0, r1}
  char filename1[] = {'a', 'd', 'c', '1', '.', 't', 'x', 't', '\0'};
 80022c8:	4a1c      	ldr	r2, [pc, #112]	; (800233c <sd_card_open_file+0x8c>)
 80022ca:	463b      	mov	r3, r7
 80022cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80022ce:	c303      	stmia	r3!, {r0, r1}
 80022d0:	701a      	strb	r2, [r3, #0]
  bool openFileError = false;
 80022d2:	2300      	movs	r3, #0
 80022d4:	757b      	strb	r3, [r7, #21]
  do {
      if (fileNumber == 0) {
 80022d6:	7dbb      	ldrb	r3, [r7, #22]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <sd_card_open_file+0x40>
        localRes = f_open(&SDFile, filename0, FA_WRITE | FA_CREATE_NEW); // Create the file if it doesn't exist
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	2206      	movs	r2, #6
 80022e2:	4619      	mov	r1, r3
 80022e4:	4816      	ldr	r0, [pc, #88]	; (8002340 <sd_card_open_file+0x90>)
 80022e6:	f011 fd47 	bl	8013d78 <f_open>
 80022ea:	4603      	mov	r3, r0
 80022ec:	75fb      	strb	r3, [r7, #23]
 80022ee:	e00c      	b.n	800230a <sd_card_open_file+0x5a>
      } else{
        filename1[3] = nameFileNumber + '0';
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <sd_card_open_file+0x94>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	3330      	adds	r3, #48	; 0x30
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	70fb      	strb	r3, [r7, #3]
        localRes = f_open(&SDFile, filename1, FA_WRITE | FA_CREATE_NEW); // Create the file if it doesn't exist
 80022fa:	463b      	mov	r3, r7
 80022fc:	2206      	movs	r2, #6
 80022fe:	4619      	mov	r1, r3
 8002300:	480f      	ldr	r0, [pc, #60]	; (8002340 <sd_card_open_file+0x90>)
 8002302:	f011 fd39 	bl	8013d78 <f_open>
 8002306:	4603      	mov	r3, r0
 8002308:	75fb      	strb	r3, [r7, #23]
      }

      if (localRes == FR_EXIST) {
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d105      	bne.n	800231c <sd_card_open_file+0x6c>
          f_close(&SDFile); // Close the file if it already exists
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <sd_card_open_file+0x90>)
 8002312:	f012 fa21 	bl	8014758 <f_close>
          fileNumber++;   // Increment the file number to create a new name
 8002316:	7dbb      	ldrb	r3, [r7, #22]
 8002318:	3301      	adds	r3, #1
 800231a:	75bb      	strb	r3, [r7, #22]
      }
  } while (localRes == FR_EXIST);
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d0d9      	beq.n	80022d6 <sd_card_open_file+0x26>

  if (localRes != FR_OK){
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <sd_card_open_file+0x7c>
    openFileError = true;
 8002328:	2301      	movs	r3, #1
 800232a:	757b      	strb	r3, [r7, #21]
  }

  return openFileError;
 800232c:	7d7b      	ldrb	r3, [r7, #21]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	08017c34 	.word	0x08017c34
 800233c:	08017c3c 	.word	0x08017c3c
 8002340:	24008bb8 	.word	0x24008bb8
 8002344:	2400000a 	.word	0x2400000a

08002348 <sd_card_write_to_opened_file>:



bool sd_card_write_to_opened_file(char * buffer){
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  bool writeToFileError = false;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  res = f_write(&SDFile, buffer, strlen((char *)buffer), (void *)&byteswritten);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7fd ffd5 	bl	8000304 <strlen>
 800235a:	4602      	mov	r2, r0
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <sd_card_write_to_opened_file+0x44>)
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	480b      	ldr	r0, [pc, #44]	; (8002390 <sd_card_write_to_opened_file+0x48>)
 8002362:	f012 f806 	bl	8014372 <f_write>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <sd_card_write_to_opened_file+0x4c>)
 800236c:	701a      	strb	r2, [r3, #0]

   if((byteswritten == 0) || (res != FR_OK))
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <sd_card_write_to_opened_file+0x44>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <sd_card_write_to_opened_file+0x36>
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <sd_card_write_to_opened_file+0x4c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <sd_card_write_to_opened_file+0x3a>
   {
     writeToFileError = true;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
   }
   return writeToFileError;
 8002382:	7bfb      	ldrb	r3, [r7, #15]

}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	24008970 	.word	0x24008970
 8002390:	24008bb8 	.word	0x24008bb8
 8002394:	2400896c 	.word	0x2400896c

08002398 <sd_card_close_file>:

void sd_card_close_file(void){
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0

  f_close(&SDFile);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <sd_card_close_file+0x10>)
 800239e:	f012 f9db 	bl	8014758 <f_close>
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	24008bb8 	.word	0x24008bb8

080023ac <spi1_adc_init>:


uint32_t readIndex=0;
uint8_t adc_values[80];

void spi1_adc_init(uint8_t spsValue){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08e      	sub	sp, #56	; 0x38
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  //GPIOG->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 80023b6:	2320      	movs	r3, #32
 80023b8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 80023bc:	2310      	movs	r3, #16
 80023be:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 80023c6:	2300      	movs	r3, #0
 80023c8:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 80023ca:	2310      	movs	r3, #16
 80023cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 80023d0:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80023d4:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 80023d6:	2302      	movs	r3, #2
 80023d8:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 80023da:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80023de:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 80023e0:	2328      	movs	r3, #40	; 0x28
 80023e2:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 80023e4:	2305      	movs	r3, #5
 80023e6:	743b      	strb	r3, [r7, #16]
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 80023ec:	2306      	movs	r3, #6
 80023ee:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 80023f0:	2300      	movs	r3, #0
 80023f2:	813b      	strh	r3, [r7, #8]

  /*Start init ADC1*/
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023fa:	4856      	ldr	r0, [pc, #344]	; (8002554 <spi1_adc_init+0x1a8>)
 80023fc:	f004 fe86 	bl	800710c <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi1, adcChannelRegister, 1, 100);
 8002400:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002404:	2364      	movs	r3, #100	; 0x64
 8002406:	2201      	movs	r2, #1
 8002408:	4853      	ldr	r0, [pc, #332]	; (8002558 <spi1_adc_init+0x1ac>)
 800240a:	f009 fd45 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcChannel, 2, 100);
 800240e:	f107 0120 	add.w	r1, r7, #32
 8002412:	2364      	movs	r3, #100	; 0x64
 8002414:	2202      	movs	r2, #2
 8002416:	4850      	ldr	r0, [pc, #320]	; (8002558 <spi1_adc_init+0x1ac>)
 8002418:	f009 fd3e 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800241c:	2201      	movs	r2, #1
 800241e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002422:	484c      	ldr	r0, [pc, #304]	; (8002554 <spi1_adc_init+0x1a8>)
 8002424:	f004 fe72 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002428:	2001      	movs	r0, #1
 800242a:	f001 fc6d 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002434:	4847      	ldr	r0, [pc, #284]	; (8002554 <spi1_adc_init+0x1a8>)
 8002436:	f004 fe69 	bl	800710c <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi1, setupConfigurationRegister, 1, 100);
 800243a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800243e:	2364      	movs	r3, #100	; 0x64
 8002440:	2201      	movs	r2, #1
 8002442:	4845      	ldr	r0, [pc, #276]	; (8002558 <spi1_adc_init+0x1ac>)
 8002444:	f009 fd28 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, setupConfiguration, 2, 100);
 8002448:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800244c:	2364      	movs	r3, #100	; 0x64
 800244e:	2202      	movs	r2, #2
 8002450:	4841      	ldr	r0, [pc, #260]	; (8002558 <spi1_adc_init+0x1ac>)
 8002452:	f009 fd21 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002456:	2201      	movs	r2, #1
 8002458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800245c:	483d      	ldr	r0, [pc, #244]	; (8002554 <spi1_adc_init+0x1a8>)
 800245e:	f004 fe55 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002462:	2001      	movs	r0, #1
 8002464:	f001 fc50 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800246e:	4839      	ldr	r0, [pc, #228]	; (8002554 <spi1_adc_init+0x1a8>)
 8002470:	f004 fe4c 	bl	800710c <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi1, adcModeRegister, 1, 100);
 8002474:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002478:	2364      	movs	r3, #100	; 0x64
 800247a:	2201      	movs	r2, #1
 800247c:	4836      	ldr	r0, [pc, #216]	; (8002558 <spi1_adc_init+0x1ac>)
 800247e:	f009 fd0b 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcMode, 2, 100);
 8002482:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002486:	2364      	movs	r3, #100	; 0x64
 8002488:	2202      	movs	r2, #2
 800248a:	4833      	ldr	r0, [pc, #204]	; (8002558 <spi1_adc_init+0x1ac>)
 800248c:	f009 fd04 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002496:	482f      	ldr	r0, [pc, #188]	; (8002554 <spi1_adc_init+0x1a8>)
 8002498:	f004 fe38 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800249c:	2001      	movs	r0, #1
 800249e:	f001 fc33 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024a8:	482a      	ldr	r0, [pc, #168]	; (8002554 <spi1_adc_init+0x1a8>)
 80024aa:	f004 fe2f 	bl	800710c <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi1, dataWriteSPS_REGISTER, 1, 100);
 80024ae:	f107 0114 	add.w	r1, r7, #20
 80024b2:	2364      	movs	r3, #100	; 0x64
 80024b4:	2201      	movs	r2, #1
 80024b6:	4828      	ldr	r0, [pc, #160]	; (8002558 <spi1_adc_init+0x1ac>)
 80024b8:	f009 fcee 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSPS, 2, 100);
 80024bc:	f107 0110 	add.w	r1, r7, #16
 80024c0:	2364      	movs	r3, #100	; 0x64
 80024c2:	2202      	movs	r2, #2
 80024c4:	4824      	ldr	r0, [pc, #144]	; (8002558 <spi1_adc_init+0x1ac>)
 80024c6:	f009 fce7 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80024ca:	2201      	movs	r2, #1
 80024cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024d0:	4820      	ldr	r0, [pc, #128]	; (8002554 <spi1_adc_init+0x1a8>)
 80024d2:	f004 fe1b 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f001 fc16 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024e2:	481c      	ldr	r0, [pc, #112]	; (8002554 <spi1_adc_init+0x1a8>)
 80024e4:	f004 fe12 	bl	800710c <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError_REGISTER, 1, 100);
 80024e8:	f107 010c 	add.w	r1, r7, #12
 80024ec:	2364      	movs	r3, #100	; 0x64
 80024ee:	2201      	movs	r2, #1
 80024f0:	4819      	ldr	r0, [pc, #100]	; (8002558 <spi1_adc_init+0x1ac>)
 80024f2:	f009 fcd1 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError, 2, 100);
 80024f6:	f107 0108 	add.w	r1, r7, #8
 80024fa:	2364      	movs	r3, #100	; 0x64
 80024fc:	2202      	movs	r2, #2
 80024fe:	4816      	ldr	r0, [pc, #88]	; (8002558 <spi1_adc_init+0x1ac>)
 8002500:	f009 fcca 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002504:	2201      	movs	r2, #1
 8002506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800250a:	4812      	ldr	r0, [pc, #72]	; (8002554 <spi1_adc_init+0x1a8>)
 800250c:	f004 fdfe 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f001 fbf9 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800251c:	480d      	ldr	r0, [pc, #52]	; (8002554 <spi1_adc_init+0x1a8>)
 800251e:	f004 fdf5 	bl	800710c <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi1, continuousConvEnableRegister, 1, 100);
 8002522:	f107 011c 	add.w	r1, r7, #28
 8002526:	2364      	movs	r3, #100	; 0x64
 8002528:	2201      	movs	r2, #1
 800252a:	480b      	ldr	r0, [pc, #44]	; (8002558 <spi1_adc_init+0x1ac>)
 800252c:	f009 fcb4 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, continuousConvEnable, 2, 100);
 8002530:	f107 0118 	add.w	r1, r7, #24
 8002534:	2364      	movs	r3, #100	; 0x64
 8002536:	2202      	movs	r2, #2
 8002538:	4807      	ldr	r0, [pc, #28]	; (8002558 <spi1_adc_init+0x1ac>)
 800253a:	f009 fcad 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800253e:	2201      	movs	r2, #1
 8002540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <spi1_adc_init+0x1a8>)
 8002546:	f004 fde1 	bl	800710c <HAL_GPIO_WritePin>
}
 800254a:	bf00      	nop
 800254c:	3738      	adds	r7, #56	; 0x38
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	58021800 	.word	0x58021800
 8002558:	24008290 	.word	0x24008290

0800255c <spi2_adc_init>:

void spi2_adc_init(uint8_t spsValue){
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	; 0x38
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8002566:	2320      	movs	r3, #32
 8002568:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 800256c:	2310      	movs	r3, #16
 800256e:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8002570:	2301      	movs	r3, #1
 8002572:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8002576:	2300      	movs	r3, #0
 8002578:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 800257a:	2310      	movs	r3, #16
 800257c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8002580:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8002584:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8002586:	2302      	movs	r3, #2
 8002588:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 800258a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800258e:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8002590:	2328      	movs	r3, #40	; 0x28
 8002592:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8002594:	2305      	movs	r3, #5
 8002596:	743b      	strb	r3, [r7, #16]
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 800259c:	2306      	movs	r3, #6
 800259e:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 80025a0:	2300      	movs	r3, #0
 80025a2:	813b      	strh	r3, [r7, #8]

  /*Start init ADC2*/
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025aa:	4856      	ldr	r0, [pc, #344]	; (8002704 <spi2_adc_init+0x1a8>)
 80025ac:	f004 fdae 	bl	800710c <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi2, adcChannelRegister, 1, 100);
 80025b0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80025b4:	2364      	movs	r3, #100	; 0x64
 80025b6:	2201      	movs	r2, #1
 80025b8:	4853      	ldr	r0, [pc, #332]	; (8002708 <spi2_adc_init+0x1ac>)
 80025ba:	f009 fc6d 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcChannel, 2, 100);
 80025be:	f107 0120 	add.w	r1, r7, #32
 80025c2:	2364      	movs	r3, #100	; 0x64
 80025c4:	2202      	movs	r2, #2
 80025c6:	4850      	ldr	r0, [pc, #320]	; (8002708 <spi2_adc_init+0x1ac>)
 80025c8:	f009 fc66 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 80025cc:	2201      	movs	r2, #1
 80025ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d2:	484c      	ldr	r0, [pc, #304]	; (8002704 <spi2_adc_init+0x1a8>)
 80025d4:	f004 fd9a 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80025d8:	2001      	movs	r0, #1
 80025da:	f001 fb95 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025e4:	4847      	ldr	r0, [pc, #284]	; (8002704 <spi2_adc_init+0x1a8>)
 80025e6:	f004 fd91 	bl	800710c <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi2, setupConfigurationRegister, 1, 100);
 80025ea:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80025ee:	2364      	movs	r3, #100	; 0x64
 80025f0:	2201      	movs	r2, #1
 80025f2:	4845      	ldr	r0, [pc, #276]	; (8002708 <spi2_adc_init+0x1ac>)
 80025f4:	f009 fc50 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, setupConfiguration, 2, 100);
 80025f8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80025fc:	2364      	movs	r3, #100	; 0x64
 80025fe:	2202      	movs	r2, #2
 8002600:	4841      	ldr	r0, [pc, #260]	; (8002708 <spi2_adc_init+0x1ac>)
 8002602:	f009 fc49 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002606:	2201      	movs	r2, #1
 8002608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800260c:	483d      	ldr	r0, [pc, #244]	; (8002704 <spi2_adc_init+0x1a8>)
 800260e:	f004 fd7d 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002612:	2001      	movs	r0, #1
 8002614:	f001 fb78 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800261e:	4839      	ldr	r0, [pc, #228]	; (8002704 <spi2_adc_init+0x1a8>)
 8002620:	f004 fd74 	bl	800710c <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi2, adcModeRegister, 1, 100);
 8002624:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002628:	2364      	movs	r3, #100	; 0x64
 800262a:	2201      	movs	r2, #1
 800262c:	4836      	ldr	r0, [pc, #216]	; (8002708 <spi2_adc_init+0x1ac>)
 800262e:	f009 fc33 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcMode, 2, 100);
 8002632:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002636:	2364      	movs	r3, #100	; 0x64
 8002638:	2202      	movs	r2, #2
 800263a:	4833      	ldr	r0, [pc, #204]	; (8002708 <spi2_adc_init+0x1ac>)
 800263c:	f009 fc2c 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002640:	2201      	movs	r2, #1
 8002642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002646:	482f      	ldr	r0, [pc, #188]	; (8002704 <spi2_adc_init+0x1a8>)
 8002648:	f004 fd60 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800264c:	2001      	movs	r0, #1
 800264e:	f001 fb5b 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002658:	482a      	ldr	r0, [pc, #168]	; (8002704 <spi2_adc_init+0x1a8>)
 800265a:	f004 fd57 	bl	800710c <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi2, dataWriteSPS_REGISTER, 1, 100);
 800265e:	f107 0114 	add.w	r1, r7, #20
 8002662:	2364      	movs	r3, #100	; 0x64
 8002664:	2201      	movs	r2, #1
 8002666:	4828      	ldr	r0, [pc, #160]	; (8002708 <spi2_adc_init+0x1ac>)
 8002668:	f009 fc16 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSPS, 2, 100);
 800266c:	f107 0110 	add.w	r1, r7, #16
 8002670:	2364      	movs	r3, #100	; 0x64
 8002672:	2202      	movs	r2, #2
 8002674:	4824      	ldr	r0, [pc, #144]	; (8002708 <spi2_adc_init+0x1ac>)
 8002676:	f009 fc0f 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 800267a:	2201      	movs	r2, #1
 800267c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002680:	4820      	ldr	r0, [pc, #128]	; (8002704 <spi2_adc_init+0x1a8>)
 8002682:	f004 fd43 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002686:	2001      	movs	r0, #1
 8002688:	f001 fb3e 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002692:	481c      	ldr	r0, [pc, #112]	; (8002704 <spi2_adc_init+0x1a8>)
 8002694:	f004 fd3a 	bl	800710c <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError_REGISTER, 1, 100);
 8002698:	f107 010c 	add.w	r1, r7, #12
 800269c:	2364      	movs	r3, #100	; 0x64
 800269e:	2201      	movs	r2, #1
 80026a0:	4819      	ldr	r0, [pc, #100]	; (8002708 <spi2_adc_init+0x1ac>)
 80026a2:	f009 fbf9 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError, 2, 100);
 80026a6:	f107 0108 	add.w	r1, r7, #8
 80026aa:	2364      	movs	r3, #100	; 0x64
 80026ac:	2202      	movs	r2, #2
 80026ae:	4816      	ldr	r0, [pc, #88]	; (8002708 <spi2_adc_init+0x1ac>)
 80026b0:	f009 fbf2 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 80026b4:	2201      	movs	r2, #1
 80026b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ba:	4812      	ldr	r0, [pc, #72]	; (8002704 <spi2_adc_init+0x1a8>)
 80026bc:	f004 fd26 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f001 fb21 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026cc:	480d      	ldr	r0, [pc, #52]	; (8002704 <spi2_adc_init+0x1a8>)
 80026ce:	f004 fd1d 	bl	800710c <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi2, continuousConvEnableRegister, 1, 100);
 80026d2:	f107 011c 	add.w	r1, r7, #28
 80026d6:	2364      	movs	r3, #100	; 0x64
 80026d8:	2201      	movs	r2, #1
 80026da:	480b      	ldr	r0, [pc, #44]	; (8002708 <spi2_adc_init+0x1ac>)
 80026dc:	f009 fbdc 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, continuousConvEnable, 2, 100);
 80026e0:	f107 0118 	add.w	r1, r7, #24
 80026e4:	2364      	movs	r3, #100	; 0x64
 80026e6:	2202      	movs	r2, #2
 80026e8:	4807      	ldr	r0, [pc, #28]	; (8002708 <spi2_adc_init+0x1ac>)
 80026ea:	f009 fbd5 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026f4:	4803      	ldr	r0, [pc, #12]	; (8002704 <spi2_adc_init+0x1a8>)
 80026f6:	f004 fd09 	bl	800710c <HAL_GPIO_WritePin>
}
 80026fa:	bf00      	nop
 80026fc:	3738      	adds	r7, #56	; 0x38
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	58020400 	.word	0x58020400
 8002708:	24008318 	.word	0x24008318

0800270c <spi4_adc_init>:

void spi4_adc_init(uint8_t spsValue){
 800270c:	b580      	push	{r7, lr}
 800270e:	b08e      	sub	sp, #56	; 0x38
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8002716:	2320      	movs	r3, #32
 8002718:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 800271c:	2310      	movs	r3, #16
 800271e:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8002720:	2301      	movs	r3, #1
 8002722:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8002726:	2300      	movs	r3, #0
 8002728:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 800272a:	2310      	movs	r3, #16
 800272c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8002730:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8002734:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8002736:	2302      	movs	r3, #2
 8002738:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 800273a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800273e:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8002740:	2328      	movs	r3, #40	; 0x28
 8002742:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8002744:	2305      	movs	r3, #5
 8002746:	743b      	strb	r3, [r7, #16]
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 800274c:	2306      	movs	r3, #6
 800274e:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8002750:	2300      	movs	r3, #0
 8002752:	813b      	strh	r3, [r7, #8]
//
//  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
//  HAL_SPI_Transmit(&hspi4, adcChannelRegister, 1, 100);
//  HAL_SPI_Transmit(&hspi4, adcChannel, 2, 100);

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002754:	2201      	movs	r2, #1
 8002756:	2110      	movs	r1, #16
 8002758:	4846      	ldr	r0, [pc, #280]	; (8002874 <spi4_adc_init+0x168>)
 800275a:	f004 fcd7 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800275e:	2001      	movs	r0, #1
 8002760:	f001 fad2 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8002764:	2200      	movs	r2, #0
 8002766:	2110      	movs	r1, #16
 8002768:	4842      	ldr	r0, [pc, #264]	; (8002874 <spi4_adc_init+0x168>)
 800276a:	f004 fccf 	bl	800710c <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi4, setupConfigurationRegister, 1, 100);
 800276e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002772:	2364      	movs	r3, #100	; 0x64
 8002774:	2201      	movs	r2, #1
 8002776:	4840      	ldr	r0, [pc, #256]	; (8002878 <spi4_adc_init+0x16c>)
 8002778:	f009 fb8e 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, setupConfiguration, 2, 100);
 800277c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002780:	2364      	movs	r3, #100	; 0x64
 8002782:	2202      	movs	r2, #2
 8002784:	483c      	ldr	r0, [pc, #240]	; (8002878 <spi4_adc_init+0x16c>)
 8002786:	f009 fb87 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 800278a:	2201      	movs	r2, #1
 800278c:	2110      	movs	r1, #16
 800278e:	4839      	ldr	r0, [pc, #228]	; (8002874 <spi4_adc_init+0x168>)
 8002790:	f004 fcbc 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002794:	2001      	movs	r0, #1
 8002796:	f001 fab7 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2110      	movs	r1, #16
 800279e:	4835      	ldr	r0, [pc, #212]	; (8002874 <spi4_adc_init+0x168>)
 80027a0:	f004 fcb4 	bl	800710c <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi4, adcModeRegister, 1, 100);
 80027a4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80027a8:	2364      	movs	r3, #100	; 0x64
 80027aa:	2201      	movs	r2, #1
 80027ac:	4832      	ldr	r0, [pc, #200]	; (8002878 <spi4_adc_init+0x16c>)
 80027ae:	f009 fb73 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcMode, 2, 100);
 80027b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027b6:	2364      	movs	r3, #100	; 0x64
 80027b8:	2202      	movs	r2, #2
 80027ba:	482f      	ldr	r0, [pc, #188]	; (8002878 <spi4_adc_init+0x16c>)
 80027bc:	f009 fb6c 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 80027c0:	2201      	movs	r2, #1
 80027c2:	2110      	movs	r1, #16
 80027c4:	482b      	ldr	r0, [pc, #172]	; (8002874 <spi4_adc_init+0x168>)
 80027c6:	f004 fca1 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80027ca:	2001      	movs	r0, #1
 80027cc:	f001 fa9c 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2110      	movs	r1, #16
 80027d4:	4827      	ldr	r0, [pc, #156]	; (8002874 <spi4_adc_init+0x168>)
 80027d6:	f004 fc99 	bl	800710c <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi4, dataWriteSPS_REGISTER, 1, 100);
 80027da:	f107 0114 	add.w	r1, r7, #20
 80027de:	2364      	movs	r3, #100	; 0x64
 80027e0:	2201      	movs	r2, #1
 80027e2:	4825      	ldr	r0, [pc, #148]	; (8002878 <spi4_adc_init+0x16c>)
 80027e4:	f009 fb58 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSPS, 2, 100);
 80027e8:	f107 0110 	add.w	r1, r7, #16
 80027ec:	2364      	movs	r3, #100	; 0x64
 80027ee:	2202      	movs	r2, #2
 80027f0:	4821      	ldr	r0, [pc, #132]	; (8002878 <spi4_adc_init+0x16c>)
 80027f2:	f009 fb51 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 80027f6:	2201      	movs	r2, #1
 80027f8:	2110      	movs	r1, #16
 80027fa:	481e      	ldr	r0, [pc, #120]	; (8002874 <spi4_adc_init+0x168>)
 80027fc:	f004 fc86 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002800:	2001      	movs	r0, #1
 8002802:	f001 fa81 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2110      	movs	r1, #16
 800280a:	481a      	ldr	r0, [pc, #104]	; (8002874 <spi4_adc_init+0x168>)
 800280c:	f004 fc7e 	bl	800710c <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError_REGISTER, 1, 100);
 8002810:	f107 010c 	add.w	r1, r7, #12
 8002814:	2364      	movs	r3, #100	; 0x64
 8002816:	2201      	movs	r2, #1
 8002818:	4817      	ldr	r0, [pc, #92]	; (8002878 <spi4_adc_init+0x16c>)
 800281a:	f009 fb3d 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError, 2, 100);
 800281e:	f107 0108 	add.w	r1, r7, #8
 8002822:	2364      	movs	r3, #100	; 0x64
 8002824:	2202      	movs	r2, #2
 8002826:	4814      	ldr	r0, [pc, #80]	; (8002878 <spi4_adc_init+0x16c>)
 8002828:	f009 fb36 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 800282c:	2201      	movs	r2, #1
 800282e:	2110      	movs	r1, #16
 8002830:	4810      	ldr	r0, [pc, #64]	; (8002874 <spi4_adc_init+0x168>)
 8002832:	f004 fc6b 	bl	800710c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002836:	2001      	movs	r0, #1
 8002838:	f001 fa66 	bl	8003d08 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	2110      	movs	r1, #16
 8002840:	480c      	ldr	r0, [pc, #48]	; (8002874 <spi4_adc_init+0x168>)
 8002842:	f004 fc63 	bl	800710c <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi4, continuousConvEnableRegister, 1, 100);
 8002846:	f107 011c 	add.w	r1, r7, #28
 800284a:	2364      	movs	r3, #100	; 0x64
 800284c:	2201      	movs	r2, #1
 800284e:	480a      	ldr	r0, [pc, #40]	; (8002878 <spi4_adc_init+0x16c>)
 8002850:	f009 fb22 	bl	800be98 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, continuousConvEnable, 2, 100);
 8002854:	f107 0118 	add.w	r1, r7, #24
 8002858:	2364      	movs	r3, #100	; 0x64
 800285a:	2202      	movs	r2, #2
 800285c:	4806      	ldr	r0, [pc, #24]	; (8002878 <spi4_adc_init+0x16c>)
 800285e:	f009 fb1b 	bl	800be98 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002862:	2201      	movs	r2, #1
 8002864:	2110      	movs	r1, #16
 8002866:	4803      	ldr	r0, [pc, #12]	; (8002874 <spi4_adc_init+0x168>)
 8002868:	f004 fc50 	bl	800710c <HAL_GPIO_WritePin>
}
 800286c:	bf00      	nop
 800286e:	3738      	adds	r7, #56	; 0x38
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	58021000 	.word	0x58021000
 8002878:	240083a0 	.word	0x240083a0

0800287c <run_all_adc>:


void run_all_adc(void){
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002886:	4808      	ldr	r0, [pc, #32]	; (80028a8 <run_all_adc+0x2c>)
 8002888:	f004 fc40 	bl	800710c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002892:	4806      	ldr	r0, [pc, #24]	; (80028ac <run_all_adc+0x30>)
 8002894:	f004 fc3a 	bl	800710c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2110      	movs	r1, #16
 800289c:	4804      	ldr	r0, [pc, #16]	; (80028b0 <run_all_adc+0x34>)
 800289e:	f004 fc35 	bl	800710c <HAL_GPIO_WritePin>
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	58021800 	.word	0x58021800
 80028ac:	58020400 	.word	0x58020400
 80028b0:	58021000 	.word	0x58021000

080028b4 <spi1_soft_reset>:
      HAL_UART_Transmit(&huart5, (uint8_t*)", ", 2, 10);
      HAL_Delay(10);
  }
}

void spi1_soft_reset(void){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <spi1_soft_reset+0x40>)
 80028bc:	463b      	mov	r3, r7
 80028be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028c2:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028cc:	480a      	ldr	r0, [pc, #40]	; (80028f8 <spi1_soft_reset+0x44>)
 80028ce:	f004 fc1d 	bl	800710c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, softResetValue, 8, 100);
 80028d2:	4639      	mov	r1, r7
 80028d4:	2364      	movs	r3, #100	; 0x64
 80028d6:	2208      	movs	r2, #8
 80028d8:	4808      	ldr	r0, [pc, #32]	; (80028fc <spi1_soft_reset+0x48>)
 80028da:	f009 fadd 	bl	800be98 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80028de:	2201      	movs	r2, #1
 80028e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <spi1_soft_reset+0x44>)
 80028e6:	f004 fc11 	bl	800710c <HAL_GPIO_WritePin>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	08017c5c 	.word	0x08017c5c
 80028f8:	58021800 	.word	0x58021800
 80028fc:	24008290 	.word	0x24008290

08002900 <spi2_soft_reset>:

void spi2_soft_reset(void){
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <spi2_soft_reset+0x40>)
 8002908:	463b      	mov	r3, r7
 800290a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800290e:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002918:	480a      	ldr	r0, [pc, #40]	; (8002944 <spi2_soft_reset+0x44>)
 800291a:	f004 fbf7 	bl	800710c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, softResetValue, 8, 100);
 800291e:	4639      	mov	r1, r7
 8002920:	2364      	movs	r3, #100	; 0x64
 8002922:	2208      	movs	r2, #8
 8002924:	4808      	ldr	r0, [pc, #32]	; (8002948 <spi2_soft_reset+0x48>)
 8002926:	f009 fab7 	bl	800be98 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 800292a:	2201      	movs	r2, #1
 800292c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002930:	4804      	ldr	r0, [pc, #16]	; (8002944 <spi2_soft_reset+0x44>)
 8002932:	f004 fbeb 	bl	800710c <HAL_GPIO_WritePin>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	08017c5c 	.word	0x08017c5c
 8002944:	58020400 	.word	0x58020400
 8002948:	24008318 	.word	0x24008318

0800294c <spi4_soft_reset>:

void spi4_soft_reset(void){
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8002952:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <spi4_soft_reset+0x3c>)
 8002954:	463b      	mov	r3, r7
 8002956:	e892 0003 	ldmia.w	r2, {r0, r1}
 800295a:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2110      	movs	r1, #16
 8002962:	480a      	ldr	r0, [pc, #40]	; (800298c <spi4_soft_reset+0x40>)
 8002964:	f004 fbd2 	bl	800710c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, softResetValue, 8, 100);
 8002968:	4639      	mov	r1, r7
 800296a:	2364      	movs	r3, #100	; 0x64
 800296c:	2208      	movs	r2, #8
 800296e:	4808      	ldr	r0, [pc, #32]	; (8002990 <spi4_soft_reset+0x44>)
 8002970:	f009 fa92 	bl	800be98 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002974:	2201      	movs	r2, #1
 8002976:	2110      	movs	r1, #16
 8002978:	4804      	ldr	r0, [pc, #16]	; (800298c <spi4_soft_reset+0x40>)
 800297a:	f004 fbc7 	bl	800710c <HAL_GPIO_WritePin>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	08017c5c 	.word	0x08017c5c
 800298c:	58021000 	.word	0x58021000
 8002990:	240083a0 	.word	0x240083a0

08002994 <getStringFromValues>:
  }
  HAL_UART_Transmit(&huart4, (uint8_t*)"\n\r", 2, 10);
}


void getStringFromValues(uint32_t adcRawValue_x, uint32_t adcRawValue_y, uint32_t adcRawValue_z, char* concatenatedBuffer){
 8002994:	b580      	push	{r7, lr}
 8002996:	b092      	sub	sp, #72	; 0x48
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  uint8_t uartBuffer_x[14];
  uint8_t uartBuffer_y[14];
  uint8_t uartBuffer_z[14];

  (void)sprintf((char *)uartBuffer_x, "%10lu", adcRawValue_x);
 80029a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4910      	ldr	r1, [pc, #64]	; (80029ec <getStringFromValues+0x58>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f011 ffd0 	bl	8014950 <siprintf>
  (void)sprintf((char *)uartBuffer_y, "%10lu", adcRawValue_y);
 80029b0:	f107 0320 	add.w	r3, r7, #32
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	490d      	ldr	r1, [pc, #52]	; (80029ec <getStringFromValues+0x58>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f011 ffc9 	bl	8014950 <siprintf>
  (void)sprintf((char *)uartBuffer_z, "%10lu", adcRawValue_z);
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4909      	ldr	r1, [pc, #36]	; (80029ec <getStringFromValues+0x58>)
 80029c6:	4618      	mov	r0, r3
 80029c8:	f011 ffc2 	bl	8014950 <siprintf>

  (void)sprintf((char *)concatenatedBuffer, "%s %s %s\n", (char*)uartBuffer_x, (char*)uartBuffer_y, (char*)uartBuffer_z);
 80029cc:	f107 0120 	add.w	r1, r7, #32
 80029d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	460b      	mov	r3, r1
 80029dc:	4904      	ldr	r1, [pc, #16]	; (80029f0 <getStringFromValues+0x5c>)
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f011 ffb6 	bl	8014950 <siprintf>

//  HAL_UART_Transmit(&huart4, concatenatedBuffer, 34,100);
}
 80029e4:	bf00      	nop
 80029e6:	3740      	adds	r7, #64	; 0x40
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	08017c84 	.word	0x08017c84
 80029f0:	08017c8c 	.word	0x08017c8c
 80029f4:	00000000 	.word	0x00000000

080029f8 <getStringFromValuesFloat>:

void getStringFromValuesFloat(uint32_t adcRawValue_x, uint32_t adcRawValue_y, uint32_t adcRawValue_z, char* concatenatedBuffer, char resolutionX, char resolutionY, char resolutionZ){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b098      	sub	sp, #96	; 0x60
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  char uartBuffer_y[20];
  char uartBuffer_z[20];
  float convertedValueX;
  float convertedValueY;
  float convertedValueZ;
  if(resolutionX == 'H'){
 8002a06:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002a0a:	2b48      	cmp	r3, #72	; 0x48
 8002a0c:	d115      	bne.n	8002a3a <getStringFromValuesFloat+0x42>
    convertedValueX = (20* (double)adcRawValue_x / (pow(2,32))) - 10 ;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002a18:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002a1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a20:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8002b58 <getStringFromValuesFloat+0x160>
 8002a24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a28:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002a2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a34:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8002a38:	e010      	b.n	8002a5c <getStringFromValuesFloat+0x64>
  }else{
    convertedValueX = ((double)adcRawValue_x / (pow(2,32))) - 0.5 ;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	ee07 3a90 	vmov	s15, r3
 8002a40:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002a44:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8002b58 <getStringFromValuesFloat+0x160>
 8002a48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a4c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002a50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a58:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  }

  if(resolutionY == 'H'){
 8002a5c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002a60:	2b48      	cmp	r3, #72	; 0x48
 8002a62:	d115      	bne.n	8002a90 <getStringFromValuesFloat+0x98>
    convertedValueY = (20* (double)adcRawValue_y / (pow(2,32))) - 10 ;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002a6e:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002a72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a76:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8002b58 <getStringFromValuesFloat+0x160>
 8002a7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a7e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002a82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a8a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002a8e:	e010      	b.n	8002ab2 <getStringFromValuesFloat+0xba>
  }else{
    convertedValueY = ((double)adcRawValue_y / (pow(2,32))) - 0.5 ;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002a9a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8002b58 <getStringFromValuesFloat+0x160>
 8002a9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002aa2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002aa6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002aaa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002aae:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  }

  if(resolutionZ == 'H'){
 8002ab2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002ab6:	2b48      	cmp	r3, #72	; 0x48
 8002ab8:	d115      	bne.n	8002ae6 <getStringFromValuesFloat+0xee>
    convertedValueZ = (20* (double)adcRawValue_z / (pow(2,32))) - 10 ;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002ac4:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002ac8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002acc:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002b58 <getStringFromValuesFloat+0x160>
 8002ad0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ad4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002ad8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002adc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ae0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8002ae4:	e010      	b.n	8002b08 <getStringFromValuesFloat+0x110>
  }else{
    convertedValueZ = ((double)adcRawValue_z / (pow(2,32))) - 0.5 ;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002af0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8002b58 <getStringFromValuesFloat+0x160>
 8002af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002af8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002afc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b04:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  }

  formatFloatString(uartBuffer_x,convertedValueX);
 8002b08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b0c:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f87b 	bl	8002c0c <formatFloatString>
  formatFloatString(uartBuffer_y,convertedValueY);
 8002b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1a:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f874 	bl	8002c0c <formatFloatString>
  formatFloatString(uartBuffer_z,convertedValueZ);
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f86d 	bl	8002c0c <formatFloatString>
  //(void)sprintf(uartBuffer_x, "%6.3f", convertedValueX);
//  (void)snprintf((char *)uartBuffer_x, 10, "%f", convertedValueX);
//  (void)sprintf((char *)uartBuffer_y, "%.10f", convertedValueY);
//  (void)sprintf((char *)uartBuffer_z, "%.10f", convertedValueZ);

  (void)sprintf((char *)concatenatedBuffer, "%s %s %s\n", (char*)uartBuffer_x, (char*)uartBuffer_y, (char*)uartBuffer_z);
 8002b32:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002b36:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	460b      	mov	r3, r1
 8002b42:	4907      	ldr	r1, [pc, #28]	; (8002b60 <getStringFromValuesFloat+0x168>)
 8002b44:	6838      	ldr	r0, [r7, #0]
 8002b46:	f011 ff03 	bl	8014950 <siprintf>

}
 8002b4a:	bf00      	nop
 8002b4c:	3758      	adds	r7, #88	; 0x58
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	f3af 8000 	nop.w
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	41f00000 	.word	0x41f00000
 8002b60:	08017c8c 	.word	0x08017c8c

08002b64 <setNewSPStoAllADCs>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}



void setNewSPStoAllADCs(uint8_t spsValue){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002b6e:	2017      	movs	r0, #23
 8002b70:	f001 fa15 	bl	8003f9e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002b74:	2028      	movs	r0, #40	; 0x28
 8002b76:	f001 fa12 	bl	8003f9e <HAL_NVIC_DisableIRQ>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b80:	481f      	ldr	r0, [pc, #124]	; (8002c00 <setNewSPStoAllADCs+0x9c>)
 8002b82:	f004 fac3 	bl	800710c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002b86:	2201      	movs	r2, #1
 8002b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b8c:	481d      	ldr	r0, [pc, #116]	; (8002c04 <setNewSPStoAllADCs+0xa0>)
 8002b8e:	f004 fabd 	bl	800710c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002b92:	2201      	movs	r2, #1
 8002b94:	2110      	movs	r1, #16
 8002b96:	481c      	ldr	r0, [pc, #112]	; (8002c08 <setNewSPStoAllADCs+0xa4>)
 8002b98:	f004 fab8 	bl	800710c <HAL_GPIO_WritePin>
  spi1_soft_reset();
 8002b9c:	f7ff fe8a 	bl	80028b4 <spi1_soft_reset>
  spi2_soft_reset();
 8002ba0:	f7ff feae 	bl	8002900 <spi2_soft_reset>
  spi4_soft_reset();
 8002ba4:	f7ff fed2 	bl	800294c <spi4_soft_reset>
  spi1_adc_init(spsValue);
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fbfe 	bl	80023ac <spi1_adc_init>
  spi2_adc_init(spsValue);
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fcd2 	bl	800255c <spi2_adc_init>
  spi4_adc_init(spsValue);
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fda6 	bl	800270c <spi4_adc_init>
  run_all_adc();
 8002bc0:	f7ff fe5c 	bl	800287c <run_all_adc>
  HAL_Delay(1);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f001 f89f 	bl	8003d08 <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd8:	2240      	movs	r2, #64	; 0x40
 8002bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bea:	2017      	movs	r0, #23
 8002bec:	f001 f9c9 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002bf0:	2028      	movs	r0, #40	; 0x28
 8002bf2:	f001 f9c6 	bl	8003f82 <HAL_NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	58021800 	.word	0x58021800
 8002c04:	58020400 	.word	0x58020400
 8002c08:	58021000 	.word	0x58021000

08002c0c <formatFloatString>:
  HAL_SPI_TransmitReceive(&hspi4, pTxData, pRxData,3,100);
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
  __NOP();
}

void formatFloatString(char* str, float floatValue) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	ed87 0a00 	vstr	s0, [r7]
    char *tmpSign = (floatValue < 0) ? "-" : "";
 8002c18:	edd7 7a00 	vldr	s15, [r7]
 8002c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c24:	d501      	bpl.n	8002c2a <formatFloatString+0x1e>
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <formatFloatString+0x94>)
 8002c28:	e000      	b.n	8002c2c <formatFloatString+0x20>
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <formatFloatString+0x98>)
 8002c2c:	61fb      	str	r3, [r7, #28]
    float tmpVal = (floatValue < 0) ? -floatValue : floatValue;
 8002c2e:	edd7 7a00 	vldr	s15, [r7]
 8002c32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	d504      	bpl.n	8002c46 <formatFloatString+0x3a>
 8002c3c:	edd7 7a00 	vldr	s15, [r7]
 8002c40:	eef1 7a67 	vneg.f32	s15, s15
 8002c44:	e001      	b.n	8002c4a <formatFloatString+0x3e>
 8002c46:	edd7 7a00 	vldr	s15, [r7]
 8002c4a:	edc7 7a06 	vstr	s15, [r7, #24]
    int tmpInt1 = (int)tmpVal;                  // Get the integer part.
 8002c4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c56:	ee17 3a90 	vmov	r3, s15
 8002c5a:	617b      	str	r3, [r7, #20]
    float tmpFrac = tmpVal - tmpInt1;           // Get the fractional part.
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c66:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6e:	edc7 7a04 	vstr	s15, [r7, #16]
    int tmpInt2 = (int)(tmpFrac * 10000000);    // Turn into integer.
 8002c72:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c76:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002ca8 <formatFloatString+0x9c>
 8002c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c82:	ee17 3a90 	vmov	r3, s15
 8002c86:	60fb      	str	r3, [r7, #12]
    sprintf(str, "%s%d.%07d", tmpSign, tmpInt1, tmpInt2);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	4906      	ldr	r1, [pc, #24]	; (8002cac <formatFloatString+0xa0>)
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f011 fe5c 	bl	8014950 <siprintf>
}
 8002c98:	bf00      	nop
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	08017ca0 	.word	0x08017ca0
 8002ca4:	08017ca4 	.word	0x08017ca4
 8002ca8:	4b189680 	.word	0x4b189680
 8002cac:	08017ca8 	.word	0x08017ca8

08002cb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_MspInit+0x30>)
 8002cb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002cbc:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <HAL_MspInit+0x30>)
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_MspInit+0x30>)
 8002cc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	58024400 	.word	0x58024400

08002ce4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a3e      	ldr	r2, [pc, #248]	; (8002dfc <HAL_SD_MspInit+0x118>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d175      	bne.n	8002df2 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d06:	4b3e      	ldr	r3, [pc, #248]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d08:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002d0c:	4a3c      	ldr	r2, [pc, #240]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d12:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002d16:	4b3a      	ldr	r3, [pc, #232]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d18:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d24:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d2a:	4a35      	ldr	r2, [pc, #212]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002d34:	4b32      	ldr	r3, [pc, #200]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d48:	4a2d      	ldr	r2, [pc, #180]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d66:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d68:	f043 0308 	orr.w	r3, r3, #8
 8002d6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_SD_MspInit+0x11c>)
 8002d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d90:	230c      	movs	r3, #12
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4619      	mov	r1, r3
 8002d9a:	481a      	ldr	r0, [pc, #104]	; (8002e04 <HAL_SD_MspInit+0x120>)
 8002d9c:	f004 f806 	bl	8006dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002da0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002db2:	230c      	movs	r3, #12
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db6:	f107 031c 	add.w	r3, r7, #28
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4812      	ldr	r0, [pc, #72]	; (8002e08 <HAL_SD_MspInit+0x124>)
 8002dbe:	f003 fff5 	bl	8006dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd6:	f107 031c 	add.w	r3, r7, #28
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480b      	ldr	r0, [pc, #44]	; (8002e0c <HAL_SD_MspInit+0x128>)
 8002dde:	f003 ffe5 	bl	8006dac <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	2031      	movs	r0, #49	; 0x31
 8002de8:	f001 f8b1 	bl	8003f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002dec:	2031      	movs	r0, #49	; 0x31
 8002dee:	f001 f8c8 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002df2:	bf00      	nop
 8002df4:	3730      	adds	r7, #48	; 0x30
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	52007000 	.word	0x52007000
 8002e00:	58024400 	.word	0x58024400
 8002e04:	58020400 	.word	0x58020400
 8002e08:	58020800 	.word	0x58020800
 8002e0c:	58020c00 	.word	0x58020c00

08002e10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b0be      	sub	sp, #248	; 0xf8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e2c:	22b8      	movs	r2, #184	; 0xb8
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f011 fd85 	bl	8014940 <memset>
  if(hspi->Instance==SPI1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a72      	ldr	r2, [pc, #456]	; (8003004 <HAL_SPI_MspInit+0x1f4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	f040 80f3 	bne.w	8003028 <HAL_SPI_MspInit+0x218>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002e48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e54:	4618      	mov	r0, r3
 8002e56:	f005 f973 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002e60:	f7ff fa00 	bl	8002264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e64:	4b68      	ldr	r3, [pc, #416]	; (8003008 <HAL_SPI_MspInit+0x1f8>)
 8002e66:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002e6a:	4a67      	ldr	r2, [pc, #412]	; (8003008 <HAL_SPI_MspInit+0x1f8>)
 8002e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e70:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002e74:	4b64      	ldr	r3, [pc, #400]	; (8003008 <HAL_SPI_MspInit+0x1f8>)
 8002e76:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	4b61      	ldr	r3, [pc, #388]	; (8003008 <HAL_SPI_MspInit+0x1f8>)
 8002e84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e88:	4a5f      	ldr	r2, [pc, #380]	; (8003008 <HAL_SPI_MspInit+0x1f8>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002e92:	4b5d      	ldr	r3, [pc, #372]	; (8003008 <HAL_SPI_MspInit+0x1f8>)
 8002e94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ea0:	4b59      	ldr	r3, [pc, #356]	; (8003008 <HAL_SPI_MspInit+0x1f8>)
 8002ea2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ea6:	4a58      	ldr	r2, [pc, #352]	; (8003008 <HAL_SPI_MspInit+0x1f8>)
 8002ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002eb0:	4b55      	ldr	r3, [pc, #340]	; (8003008 <HAL_SPI_MspInit+0x1f8>)
 8002eb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	623b      	str	r3, [r7, #32]
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ebe:	23c0      	movs	r3, #192	; 0xc0
 8002ec0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ed6:	2305      	movs	r3, #5
 8002ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002edc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	484a      	ldr	r0, [pc, #296]	; (800300c <HAL_SPI_MspInit+0x1fc>)
 8002ee4:	f003 ff62 	bl	8006dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f02:	2305      	movs	r3, #5
 8002f04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4840      	ldr	r0, [pc, #256]	; (8003010 <HAL_SPI_MspInit+0x200>)
 8002f10:	f003 ff4c 	bl	8006dac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002f14:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f16:	4a40      	ldr	r2, [pc, #256]	; (8003018 <HAL_SPI_MspInit+0x208>)
 8002f18:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f1c:	2225      	movs	r2, #37	; 0x25
 8002f1e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f20:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f2c:	4b39      	ldr	r3, [pc, #228]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f32:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f34:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f3a:	4b36      	ldr	r3, [pc, #216]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002f40:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f46:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f4c:	4b31      	ldr	r3, [pc, #196]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002f52:	4830      	ldr	r0, [pc, #192]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f54:	f001 f83e 	bl	8003fd4 <HAL_DMA_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 8002f5e:	f7ff f981 	bl	8002264 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2b      	ldr	r2, [pc, #172]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f66:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f68:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <HAL_SPI_MspInit+0x204>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002f70:	4a2b      	ldr	r2, [pc, #172]	; (8003020 <HAL_SPI_MspInit+0x210>)
 8002f72:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002f76:	2226      	movs	r2, #38	; 0x26
 8002f78:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f7a:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002f7c:	2240      	movs	r2, #64	; 0x40
 8002f7e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f80:	4b26      	ldr	r3, [pc, #152]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f86:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f8c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f94:	4b21      	ldr	r3, [pc, #132]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002fac:	481b      	ldr	r0, [pc, #108]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002fae:	f001 f811 	bl	8003fd4 <HAL_DMA_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 8002fb8:	f7ff f954 	bl	8002264 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002fc0:	679a      	str	r2, [r3, #120]	; 0x78
 8002fc2:	4a16      	ldr	r2, [pc, #88]	; (800301c <HAL_SPI_MspInit+0x20c>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	2023      	movs	r0, #35	; 0x23
 8002fce:	f000 ffbe 	bl	8003f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002fd2:	2023      	movs	r0, #35	; 0x23
 8002fd4:	f000 ffd5 	bl	8003f82 <HAL_NVIC_EnableIRQ>
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
//    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

    // SPI1 MISO interrupt setting FIXME
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fd8:	2340      	movs	r3, #64	; 0x40
 8002fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING; //GPIO_MODE_AF_PP  | TRIGGER_RISING | TRIGGER_FALLING;
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <HAL_SPI_MspInit+0x214>)
 8002fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ff0:	2305      	movs	r3, #5
 8002ff2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4803      	ldr	r0, [pc, #12]	; (800300c <HAL_SPI_MspInit+0x1fc>)
 8002ffe:	f003 fed5 	bl	8006dac <HAL_GPIO_Init>


  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003002:	e1cb      	b.n	800339c <HAL_SPI_MspInit+0x58c>
 8003004:	40013000 	.word	0x40013000
 8003008:	58024400 	.word	0x58024400
 800300c:	58020000 	.word	0x58020000
 8003010:	58021800 	.word	0x58021800
 8003014:	24008428 	.word	0x24008428
 8003018:	40020010 	.word	0x40020010
 800301c:	240084a0 	.word	0x240084a0
 8003020:	40020028 	.word	0x40020028
 8003024:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a72      	ldr	r2, [pc, #456]	; (80031f8 <HAL_SPI_MspInit+0x3e8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	f040 80f4 	bne.w	800321c <HAL_SPI_MspInit+0x40c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800303a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800303e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003046:	4618      	mov	r0, r3
 8003048:	f005 f87a 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 8003052:	f7ff f907 	bl	8002264 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003056:	4b69      	ldr	r3, [pc, #420]	; (80031fc <HAL_SPI_MspInit+0x3ec>)
 8003058:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800305c:	4a67      	ldr	r2, [pc, #412]	; (80031fc <HAL_SPI_MspInit+0x3ec>)
 800305e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003062:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003066:	4b65      	ldr	r3, [pc, #404]	; (80031fc <HAL_SPI_MspInit+0x3ec>)
 8003068:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800306c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003074:	4b61      	ldr	r3, [pc, #388]	; (80031fc <HAL_SPI_MspInit+0x3ec>)
 8003076:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800307a:	4a60      	ldr	r2, [pc, #384]	; (80031fc <HAL_SPI_MspInit+0x3ec>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003084:	4b5d      	ldr	r3, [pc, #372]	; (80031fc <HAL_SPI_MspInit+0x3ec>)
 8003086:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003092:	4b5a      	ldr	r3, [pc, #360]	; (80031fc <HAL_SPI_MspInit+0x3ec>)
 8003094:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <HAL_SPI_MspInit+0x3ec>)
 800309a:	f043 0302 	orr.w	r3, r3, #2
 800309e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80030a2:	4b56      	ldr	r3, [pc, #344]	; (80031fc <HAL_SPI_MspInit+0x3ec>)
 80030a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030b0:	2302      	movs	r3, #2
 80030b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	2302      	movs	r3, #2
 80030b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030c8:	2305      	movs	r3, #5
 80030ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030d2:	4619      	mov	r1, r3
 80030d4:	484a      	ldr	r0, [pc, #296]	; (8003200 <HAL_SPI_MspInit+0x3f0>)
 80030d6:	f003 fe69 	bl	8006dac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 80030da:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80030de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030f4:	2305      	movs	r3, #5
 80030f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030fe:	4619      	mov	r1, r3
 8003100:	4840      	ldr	r0, [pc, #256]	; (8003204 <HAL_SPI_MspInit+0x3f4>)
 8003102:	f003 fe53 	bl	8006dac <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream7;
 8003106:	4b40      	ldr	r3, [pc, #256]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 8003108:	4a40      	ldr	r2, [pc, #256]	; (800320c <HAL_SPI_MspInit+0x3fc>)
 800310a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800310c:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 800310e:	2227      	movs	r2, #39	; 0x27
 8003110:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003118:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 800311a:	2200      	movs	r2, #0
 800311c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800311e:	4b3a      	ldr	r3, [pc, #232]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 8003120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003124:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003126:	4b38      	ldr	r3, [pc, #224]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 8003128:	2200      	movs	r2, #0
 800312a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 800312e:	2200      	movs	r2, #0
 8003130:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003132:	4b35      	ldr	r3, [pc, #212]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 8003134:	2200      	movs	r2, #0
 8003136:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003138:	4b33      	ldr	r3, [pc, #204]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 800313a:	2200      	movs	r2, #0
 800313c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800313e:	4b32      	ldr	r3, [pc, #200]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 8003140:	2200      	movs	r2, #0
 8003142:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003144:	4830      	ldr	r0, [pc, #192]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 8003146:	f000 ff45 	bl	8003fd4 <HAL_DMA_Init>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_SPI_MspInit+0x344>
      Error_Handler();
 8003150:	f7ff f888 	bl	8002264 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 8003158:	67da      	str	r2, [r3, #124]	; 0x7c
 800315a:	4a2b      	ldr	r2, [pc, #172]	; (8003208 <HAL_SPI_MspInit+0x3f8>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA2_Stream0;
 8003160:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_SPI_MspInit+0x400>)
 8003162:	4a2c      	ldr	r2, [pc, #176]	; (8003214 <HAL_SPI_MspInit+0x404>)
 8003164:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003166:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_SPI_MspInit+0x400>)
 8003168:	2228      	movs	r2, #40	; 0x28
 800316a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800316c:	4b28      	ldr	r3, [pc, #160]	; (8003210 <HAL_SPI_MspInit+0x400>)
 800316e:	2240      	movs	r2, #64	; 0x40
 8003170:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003172:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_SPI_MspInit+0x400>)
 8003174:	2200      	movs	r2, #0
 8003176:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_SPI_MspInit+0x400>)
 800317a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800317e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <HAL_SPI_MspInit+0x400>)
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003186:	4b22      	ldr	r3, [pc, #136]	; (8003210 <HAL_SPI_MspInit+0x400>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_SPI_MspInit+0x400>)
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_SPI_MspInit+0x400>)
 8003194:	2200      	movs	r2, #0
 8003196:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_SPI_MspInit+0x400>)
 800319a:	2200      	movs	r2, #0
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800319e:	481c      	ldr	r0, [pc, #112]	; (8003210 <HAL_SPI_MspInit+0x400>)
 80031a0:	f000 ff18 	bl	8003fd4 <HAL_DMA_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_SPI_MspInit+0x39e>
      Error_Handler();
 80031aa:	f7ff f85b 	bl	8002264 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_SPI_MspInit+0x400>)
 80031b2:	679a      	str	r2, [r3, #120]	; 0x78
 80031b4:	4a16      	ldr	r2, [pc, #88]	; (8003210 <HAL_SPI_MspInit+0x400>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	2024      	movs	r0, #36	; 0x24
 80031c0:	f000 fec5 	bl	8003f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80031c4:	2024      	movs	r0, #36	; 0x24
 80031c6:	f000 fedc 	bl	8003f82 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80031ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_SPI_MspInit+0x408>)
 80031d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031e4:	2305      	movs	r3, #5
 80031e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <HAL_SPI_MspInit+0x3f4>)
 80031f2:	f003 fddb 	bl	8006dac <HAL_GPIO_Init>
}
 80031f6:	e0d1      	b.n	800339c <HAL_SPI_MspInit+0x58c>
 80031f8:	40003800 	.word	0x40003800
 80031fc:	58024400 	.word	0x58024400
 8003200:	58020800 	.word	0x58020800
 8003204:	58020400 	.word	0x58020400
 8003208:	24008518 	.word	0x24008518
 800320c:	400200b8 	.word	0x400200b8
 8003210:	24008590 	.word	0x24008590
 8003214:	40020410 	.word	0x40020410
 8003218:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI4)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a60      	ldr	r2, [pc, #384]	; (80033a4 <HAL_SPI_MspInit+0x594>)
 8003222:	4293      	cmp	r3, r2
 8003224:	f040 80ba 	bne.w	800339c <HAL_SPI_MspInit+0x58c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8003228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003238:	4618      	mov	r0, r3
 800323a:	f004 ff81 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_SPI_MspInit+0x438>
      Error_Handler();
 8003244:	f7ff f80e 	bl	8002264 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003248:	4b57      	ldr	r3, [pc, #348]	; (80033a8 <HAL_SPI_MspInit+0x598>)
 800324a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800324e:	4a56      	ldr	r2, [pc, #344]	; (80033a8 <HAL_SPI_MspInit+0x598>)
 8003250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003254:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_SPI_MspInit+0x598>)
 800325a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800325e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003266:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <HAL_SPI_MspInit+0x598>)
 8003268:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800326c:	4a4e      	ldr	r2, [pc, #312]	; (80033a8 <HAL_SPI_MspInit+0x598>)
 800326e:	f043 0310 	orr.w	r3, r3, #16
 8003272:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003276:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <HAL_SPI_MspInit+0x598>)
 8003278:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003284:	2364      	movs	r3, #100	; 0x64
 8003286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800329c:	2305      	movs	r3, #5
 800329e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032a6:	4619      	mov	r1, r3
 80032a8:	4840      	ldr	r0, [pc, #256]	; (80033ac <HAL_SPI_MspInit+0x59c>)
 80032aa:	f003 fd7f 	bl	8006dac <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream2;
 80032ae:	4b40      	ldr	r3, [pc, #256]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032b0:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <HAL_SPI_MspInit+0x5a4>)
 80032b2:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80032b4:	4b3e      	ldr	r3, [pc, #248]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032b6:	2253      	movs	r2, #83	; 0x53
 80032b8:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ba:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032c6:	4b3a      	ldr	r3, [pc, #232]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032cc:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ce:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80032da:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032dc:	2200      	movs	r2, #0
 80032de:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032e0:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032e6:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80032ec:	4830      	ldr	r0, [pc, #192]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 80032ee:	f000 fe71 	bl	8003fd4 <HAL_DMA_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_SPI_MspInit+0x4ec>
      Error_Handler();
 80032f8:	f7fe ffb4 	bl	8002264 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 8003300:	67da      	str	r2, [r3, #124]	; 0x7c
 8003302:	4a2b      	ldr	r2, [pc, #172]	; (80033b0 <HAL_SPI_MspInit+0x5a0>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream3;
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 800330a:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <HAL_SPI_MspInit+0x5ac>)
 800330c:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 8003310:	2254      	movs	r2, #84	; 0x54
 8003312:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003314:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 8003316:	2240      	movs	r2, #64	; 0x40
 8003318:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800331a:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 800331c:	2200      	movs	r2, #0
 800331e:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 8003322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003326:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003328:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 800332a:	2200      	movs	r2, #0
 800332c:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800333a:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 800333c:	2200      	movs	r2, #0
 800333e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 8003342:	2200      	movs	r2, #0
 8003344:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8003346:	481c      	ldr	r0, [pc, #112]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 8003348:	f000 fe44 	bl	8003fd4 <HAL_DMA_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_SPI_MspInit+0x546>
      Error_Handler();
 8003352:	f7fe ff87 	bl	8002264 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 800335a:	679a      	str	r2, [r3, #120]	; 0x78
 800335c:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <HAL_SPI_MspInit+0x5a8>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	2100      	movs	r1, #0
 8003366:	2054      	movs	r0, #84	; 0x54
 8003368:	f000 fdf1 	bl	8003f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800336c:	2054      	movs	r0, #84	; 0x54
 800336e:	f000 fe08 	bl	8003f82 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003372:	2320      	movs	r3, #32
 8003374:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_SPI_MspInit+0x5b0>)
 800337a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800338a:	2305      	movs	r3, #5
 800338c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003390:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003394:	4619      	mov	r1, r3
 8003396:	4805      	ldr	r0, [pc, #20]	; (80033ac <HAL_SPI_MspInit+0x59c>)
 8003398:	f003 fd08 	bl	8006dac <HAL_GPIO_Init>
}
 800339c:	bf00      	nop
 800339e:	37f8      	adds	r7, #248	; 0xf8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40013400 	.word	0x40013400
 80033a8:	58024400 	.word	0x58024400
 80033ac:	58021000 	.word	0x58021000
 80033b0:	24008608 	.word	0x24008608
 80033b4:	40020040 	.word	0x40020040
 80033b8:	24008680 	.word	0x24008680
 80033bc:	40020058 	.word	0x40020058
 80033c0:	00210002 	.word	0x00210002

080033c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08c      	sub	sp, #48	; 0x30
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 031c 	add.w	r3, r7, #28
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a33      	ldr	r2, [pc, #204]	; (80034b0 <HAL_TIM_Base_MspInit+0xec>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10f      	bne.n	8003406 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033e6:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 80033e8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80033ec:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80033f6:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 80033f8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003404:	e050      	b.n	80034a8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340e:	d12f      	bne.n	8003470 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003410:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 8003412:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003416:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 8003422:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 8003430:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800343e:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 8003440:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800344c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345a:	2300      	movs	r3, #0
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800345e:	2301      	movs	r3, #1
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003462:	f107 031c 	add.w	r3, r7, #28
 8003466:	4619      	mov	r1, r3
 8003468:	4813      	ldr	r0, [pc, #76]	; (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 800346a:	f003 fc9f 	bl	8006dac <HAL_GPIO_Init>
}
 800346e:	e01b      	b.n	80034a8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM16)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a11      	ldr	r2, [pc, #68]	; (80034bc <HAL_TIM_Base_MspInit+0xf8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d116      	bne.n	80034a8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 800347c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003480:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 8003482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003486:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_TIM_Base_MspInit+0xf0>)
 800348c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003498:	2200      	movs	r2, #0
 800349a:	2100      	movs	r1, #0
 800349c:	2075      	movs	r0, #117	; 0x75
 800349e:	f000 fd56 	bl	8003f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80034a2:	2075      	movs	r0, #117	; 0x75
 80034a4:	f000 fd6d 	bl	8003f82 <HAL_NVIC_EnableIRQ>
}
 80034a8:	bf00      	nop
 80034aa:	3730      	adds	r7, #48	; 0x30
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40010000 	.word	0x40010000
 80034b4:	58024400 	.word	0x58024400
 80034b8:	58020000 	.word	0x58020000
 80034bc:	40014400 	.word	0x40014400

080034c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a13      	ldr	r2, [pc, #76]	; (800352c <HAL_TIM_MspPostInit+0x6c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d11f      	bne.n	8003522 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e2:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_TIM_MspPostInit+0x70>)
 80034e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034e8:	4a11      	ldr	r2, [pc, #68]	; (8003530 <HAL_TIM_MspPostInit+0x70>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_TIM_MspPostInit+0x70>)
 80034f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003504:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	2302      	movs	r3, #2
 8003508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003512:	2301      	movs	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003516:	f107 030c 	add.w	r3, r7, #12
 800351a:	4619      	mov	r1, r3
 800351c:	4805      	ldr	r0, [pc, #20]	; (8003534 <HAL_TIM_MspPostInit+0x74>)
 800351e:	f003 fc45 	bl	8006dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003522:	bf00      	nop
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	58024400 	.word	0x58024400
 8003534:	58020000 	.word	0x58020000

08003538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b0b8      	sub	sp, #224	; 0xe0
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	22b8      	movs	r2, #184	; 0xb8
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f011 f9f1 	bl	8014940 <memset>
  if(huart->Instance==UART4)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a3f      	ldr	r2, [pc, #252]	; (8003660 <HAL_UART_MspInit+0x128>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d176      	bne.n	8003656 <HAL_UART_MspInit+0x11e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003568:	2302      	movs	r3, #2
 800356a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4618      	mov	r0, r3
 8003578:	f004 fde2 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003582:	f7fe fe6f 	bl	8002264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003586:	4b37      	ldr	r3, [pc, #220]	; (8003664 <HAL_UART_MspInit+0x12c>)
 8003588:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800358c:	4a35      	ldr	r2, [pc, #212]	; (8003664 <HAL_UART_MspInit+0x12c>)
 800358e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003592:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003596:	4b33      	ldr	r3, [pc, #204]	; (8003664 <HAL_UART_MspInit+0x12c>)
 8003598:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800359c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a4:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_UART_MspInit+0x12c>)
 80035a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035aa:	4a2e      	ldr	r2, [pc, #184]	; (8003664 <HAL_UART_MspInit+0x12c>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_UART_MspInit+0x12c>)
 80035b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035c2:	2303      	movs	r3, #3
 80035c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	2302      	movs	r3, #2
 80035ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035da:	2308      	movs	r3, #8
 80035dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035e4:	4619      	mov	r1, r3
 80035e6:	4820      	ldr	r0, [pc, #128]	; (8003668 <HAL_UART_MspInit+0x130>)
 80035e8:	f003 fbe0 	bl	8006dac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80035ec:	4b1f      	ldr	r3, [pc, #124]	; (800366c <HAL_UART_MspInit+0x134>)
 80035ee:	4a20      	ldr	r2, [pc, #128]	; (8003670 <HAL_UART_MspInit+0x138>)
 80035f0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80035f2:	4b1e      	ldr	r3, [pc, #120]	; (800366c <HAL_UART_MspInit+0x134>)
 80035f4:	2240      	movs	r2, #64	; 0x40
 80035f6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_UART_MspInit+0x134>)
 80035fa:	2240      	movs	r2, #64	; 0x40
 80035fc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_UART_MspInit+0x134>)
 8003600:	2200      	movs	r2, #0
 8003602:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_UART_MspInit+0x134>)
 8003606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800360a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800360c:	4b17      	ldr	r3, [pc, #92]	; (800366c <HAL_UART_MspInit+0x134>)
 800360e:	2200      	movs	r2, #0
 8003610:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003612:	4b16      	ldr	r3, [pc, #88]	; (800366c <HAL_UART_MspInit+0x134>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <HAL_UART_MspInit+0x134>)
 800361a:	2200      	movs	r2, #0
 800361c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <HAL_UART_MspInit+0x134>)
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_UART_MspInit+0x134>)
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800362a:	4810      	ldr	r0, [pc, #64]	; (800366c <HAL_UART_MspInit+0x134>)
 800362c:	f000 fcd2 	bl	8003fd4 <HAL_DMA_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8003636:	f7fe fe15 	bl	8002264 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a0b      	ldr	r2, [pc, #44]	; (800366c <HAL_UART_MspInit+0x134>)
 800363e:	679a      	str	r2, [r3, #120]	; 0x78
 8003640:	4a0a      	ldr	r2, [pc, #40]	; (800366c <HAL_UART_MspInit+0x134>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003646:	2200      	movs	r2, #0
 8003648:	2100      	movs	r1, #0
 800364a:	2034      	movs	r0, #52	; 0x34
 800364c:	f000 fc7f 	bl	8003f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003650:	2034      	movs	r0, #52	; 0x34
 8003652:	f000 fc96 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003656:	bf00      	nop
 8003658:	37e0      	adds	r7, #224	; 0xe0
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40004c00 	.word	0x40004c00
 8003664:	58024400 	.word	0x58024400
 8003668:	58020000 	.word	0x58020000
 800366c:	2400886c 	.word	0x2400886c
 8003670:	40020070 	.word	0x40020070

08003674 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003688:	4b34      	ldr	r3, [pc, #208]	; (800375c <HAL_FMC_MspInit+0xe8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d161      	bne.n	8003754 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <HAL_FMC_MspInit+0xe8>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003696:	4b32      	ldr	r3, [pc, #200]	; (8003760 <HAL_FMC_MspInit+0xec>)
 8003698:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800369c:	4a30      	ldr	r2, [pc, #192]	; (8003760 <HAL_FMC_MspInit+0xec>)
 800369e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80036a6:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <HAL_FMC_MspInit+0xec>)
 80036a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80036ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80036b4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80036b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036c6:	230c      	movs	r3, #12
 80036c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4825      	ldr	r0, [pc, #148]	; (8003764 <HAL_FMC_MspInit+0xf0>)
 80036d0:	f003 fb6c 	bl	8006dac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80036d4:	230d      	movs	r3, #13
 80036d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e0:	2303      	movs	r3, #3
 80036e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036e4:	230c      	movs	r3, #12
 80036e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e8:	1d3b      	adds	r3, r7, #4
 80036ea:	4619      	mov	r1, r3
 80036ec:	481e      	ldr	r0, [pc, #120]	; (8003768 <HAL_FMC_MspInit+0xf4>)
 80036ee:	f003 fb5d 	bl	8006dac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80036f2:	f248 1337 	movw	r3, #33079	; 0x8137
 80036f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003700:	2303      	movs	r3, #3
 8003702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003704:	230c      	movs	r3, #12
 8003706:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	4619      	mov	r1, r3
 800370c:	4817      	ldr	r0, [pc, #92]	; (800376c <HAL_FMC_MspInit+0xf8>)
 800370e:	f003 fb4d 	bl	8006dac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003712:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003716:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	2302      	movs	r3, #2
 800371a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003720:	2303      	movs	r3, #3
 8003722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003724:	230c      	movs	r3, #12
 8003726:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4810      	ldr	r0, [pc, #64]	; (8003770 <HAL_FMC_MspInit+0xfc>)
 800372e:	f003 fb3d 	bl	8006dac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003732:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003736:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	2302      	movs	r3, #2
 800373a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003740:	2303      	movs	r3, #3
 8003742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003744:	230c      	movs	r3, #12
 8003746:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	4619      	mov	r1, r3
 800374c:	4809      	ldr	r0, [pc, #36]	; (8003774 <HAL_FMC_MspInit+0x100>)
 800374e:	f003 fb2d 	bl	8006dac <HAL_GPIO_Init>
 8003752:	e000      	b.n	8003756 <HAL_FMC_MspInit+0xe2>
    return;
 8003754:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	24008974 	.word	0x24008974
 8003760:	58024400 	.word	0x58024400
 8003764:	58021400 	.word	0x58021400
 8003768:	58020800 	.word	0x58020800
 800376c:	58021800 	.word	0x58021800
 8003770:	58021000 	.word	0x58021000
 8003774:	58020c00 	.word	0x58020c00

08003778 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003780:	f7ff ff78 	bl	8003674 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003790:	e7fe      	b.n	8003790 <NMI_Handler+0x4>

08003792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003792:	b480      	push	{r7}
 8003794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003796:	e7fe      	b.n	8003796 <HardFault_Handler+0x4>

08003798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800379c:	e7fe      	b.n	800379c <MemManage_Handler+0x4>

0800379e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037a2:	e7fe      	b.n	80037a2 <BusFault_Handler+0x4>

080037a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037a8:	e7fe      	b.n	80037a8 <UsageFault_Handler+0x4>

080037aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037d8:	f000 fa76 	bl	8003cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}

080037e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80037e4:	4802      	ldr	r0, [pc, #8]	; (80037f0 <DMA1_Stream0_IRQHandler+0x10>)
 80037e6:	f001 ff53 	bl	8005690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	24008428 	.word	0x24008428

080037f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80037f8:	4802      	ldr	r0, [pc, #8]	; (8003804 <DMA1_Stream1_IRQHandler+0x10>)
 80037fa:	f001 ff49 	bl	8005690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	240084a0 	.word	0x240084a0

08003808 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800380c:	4802      	ldr	r0, [pc, #8]	; (8003818 <DMA1_Stream2_IRQHandler+0x10>)
 800380e:	f001 ff3f 	bl	8005690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	24008608 	.word	0x24008608

0800381c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <DMA1_Stream3_IRQHandler+0x10>)
 8003822:	f001 ff35 	bl	8005690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	24008680 	.word	0x24008680

08003830 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <DMA1_Stream4_IRQHandler+0x10>)
 8003836:	f001 ff2b 	bl	8005690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	2400886c 	.word	0x2400886c

08003844 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <SPI1_IRQHandler+0x10>)
 800384a:	f008 feed 	bl	800c628 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	24008290 	.word	0x24008290

08003858 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <SPI2_IRQHandler+0x10>)
 800385e:	f008 fee3 	bl	800c628 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	24008318 	.word	0x24008318

0800386c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <DMA1_Stream7_IRQHandler+0x10>)
 8003872:	f001 ff0d 	bl	8005690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	24008518 	.word	0x24008518

08003880 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <SDMMC1_IRQHandler+0x10>)
 8003886:	f006 ff73 	bl	800a770 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	24008214 	.word	0x24008214

08003894 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <UART4_IRQHandler+0x10>)
 800389a:	f00b f8b9 	bl	800ea10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	240087dc 	.word	0x240087dc

080038a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <DMA2_Stream0_IRQHandler+0x10>)
 80038ae:	f001 feef 	bl	8005690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	24008590 	.word	0x24008590

080038bc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <SPI4_IRQHandler+0x10>)
 80038c2:	f008 feb1 	bl	800c628 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	240083a0 	.word	0x240083a0

080038d0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <TIM16_IRQHandler+0x10>)
 80038d6:	f009 fbbf 	bl	800d058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	24008790 	.word	0x24008790

080038e4 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80038e8:	2020      	movs	r0, #32
 80038ea:	f003 fc42 	bl	8007172 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80038ee:	2040      	movs	r0, #64	; 0x40
 80038f0:	f003 fc3f 	bl	8007172 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80038f4:	2080      	movs	r0, #128	; 0x80
 80038f6:	f003 fc3c 	bl	8007172 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80038fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80038fe:	f003 fc38 	bl	8007172 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}

08003906 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800390a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800390e:	f003 fc30 	bl	8007172 <HAL_GPIO_EXTI_IRQHandler>

}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}

08003916 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
	return 1;
 800391a:	2301      	movs	r3, #1
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <_kill>:

int _kill(int pid, int sig)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003930:	f010 ffdc 	bl	80148ec <__errno>
 8003934:	4603      	mov	r3, r0
 8003936:	2216      	movs	r2, #22
 8003938:	601a      	str	r2, [r3, #0]
	return -1;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <_exit>:

void _exit (int status)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800394e:	f04f 31ff 	mov.w	r1, #4294967295
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ffe7 	bl	8003926 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003958:	e7fe      	b.n	8003958 <_exit+0x12>

0800395a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e00a      	b.n	8003982 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800396c:	f3af 8000 	nop.w
 8003970:	4601      	mov	r1, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	60ba      	str	r2, [r7, #8]
 8003978:	b2ca      	uxtb	r2, r1
 800397a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	3301      	adds	r3, #1
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	dbf0      	blt.n	800396c <_read+0x12>
	}

return len;
 800398a:	687b      	ldr	r3, [r7, #4]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e009      	b.n	80039ba <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	60ba      	str	r2, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3301      	adds	r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	dbf1      	blt.n	80039a6 <_write+0x12>
	}
	return len;
 80039c2:	687b      	ldr	r3, [r7, #4]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <_close>:

int _close(int file)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	return -1;
 80039d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039f4:	605a      	str	r2, [r3, #4]
	return 0;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <_isatty>:

int _isatty(int file)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	return 1;
 8003a0c:	2301      	movs	r3, #1
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
	return 0;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <_sbrk+0x5c>)
 8003a3e:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <_sbrk+0x60>)
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <_sbrk+0x64>)
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <_sbrk+0x68>)
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <_sbrk+0x64>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d207      	bcs.n	8003a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a64:	f010 ff42 	bl	80148ec <__errno>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a72:	e009      	b.n	8003a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <_sbrk+0x64>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <_sbrk+0x64>)
 8003a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	24100000 	.word	0x24100000
 8003a94:	00000800 	.word	0x00000800
 8003a98:	24008978 	.word	0x24008978
 8003a9c:	24008e38 	.word	0x24008e38

08003aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <SystemInit+0xd0>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	4a31      	ldr	r2, [pc, #196]	; (8003b70 <SystemInit+0xd0>)
 8003aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ab4:	4b2f      	ldr	r3, [pc, #188]	; (8003b74 <SystemInit+0xd4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d807      	bhi.n	8003ad0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ac0:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <SystemInit+0xd4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 030f 	bic.w	r3, r3, #15
 8003ac8:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <SystemInit+0xd4>)
 8003aca:	f043 0303 	orr.w	r3, r3, #3
 8003ace:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ad0:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <SystemInit+0xd8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a28      	ldr	r2, [pc, #160]	; (8003b78 <SystemInit+0xd8>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003adc:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <SystemInit+0xd8>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ae2:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <SystemInit+0xd8>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4924      	ldr	r1, [pc, #144]	; (8003b78 <SystemInit+0xd8>)
 8003ae8:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <SystemInit+0xdc>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003aee:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <SystemInit+0xd4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <SystemInit+0xd4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 030f 	bic.w	r3, r3, #15
 8003b02:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <SystemInit+0xd4>)
 8003b04:	f043 0303 	orr.w	r3, r3, #3
 8003b08:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <SystemInit+0xd8>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <SystemInit+0xd8>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <SystemInit+0xd8>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <SystemInit+0xd8>)
 8003b1e:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <SystemInit+0xe0>)
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <SystemInit+0xd8>)
 8003b24:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <SystemInit+0xe4>)
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <SystemInit+0xd8>)
 8003b2a:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <SystemInit+0xe8>)
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <SystemInit+0xd8>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b34:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <SystemInit+0xd8>)
 8003b36:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <SystemInit+0xe8>)
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <SystemInit+0xd8>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b40:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <SystemInit+0xd8>)
 8003b42:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <SystemInit+0xe8>)
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <SystemInit+0xd8>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <SystemInit+0xd8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <SystemInit+0xd8>)
 8003b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b58:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <SystemInit+0xd8>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <SystemInit+0xec>)
 8003b60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000ed00 	.word	0xe000ed00
 8003b74:	52002000 	.word	0x52002000
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003b80:	02020200 	.word	0x02020200
 8003b84:	01ff0000 	.word	0x01ff0000
 8003b88:	01010280 	.word	0x01010280
 8003b8c:	52004000 	.word	0x52004000

08003b90 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8003b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b94:	f7ff ff84 	bl	8003aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b98:	480c      	ldr	r0, [pc, #48]	; (8003bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b9a:	490d      	ldr	r1, [pc, #52]	; (8003bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ba0:	e002      	b.n	8003ba8 <LoopCopyDataInit>

08003ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ba6:	3304      	adds	r3, #4

08003ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bac:	d3f9      	bcc.n	8003ba2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bae:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bb0:	4c0a      	ldr	r4, [pc, #40]	; (8003bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bb4:	e001      	b.n	8003bba <LoopFillZerobss>

08003bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bb8:	3204      	adds	r2, #4

08003bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bbc:	d3fb      	bcc.n	8003bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bbe:	f010 fe9b 	bl	80148f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bc2:	f7fd f86f 	bl	8000ca4 <main>
  bx  lr
 8003bc6:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8003bc8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003bcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003bd0:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8003bd4:	08018268 	.word	0x08018268
  ldr r2, =_sbss
 8003bd8:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8003bdc:	24008e34 	.word	0x24008e34

08003be0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003be0:	e7fe      	b.n	8003be0 <ADC_IRQHandler>
	...

08003be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bea:	2003      	movs	r0, #3
 8003bec:	f000 f9a4 	bl	8003f38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003bf0:	f004 f8d0 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <HAL_Init+0x68>)
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	4913      	ldr	r1, [pc, #76]	; (8003c50 <HAL_Init+0x6c>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_Init+0x68>)
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	4a0e      	ldr	r2, [pc, #56]	; (8003c50 <HAL_Init+0x6c>)
 8003c18:	5cd3      	ldrb	r3, [r2, r3]
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
 8003c24:	4a0b      	ldr	r2, [pc, #44]	; (8003c54 <HAL_Init+0x70>)
 8003c26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c28:	4a0b      	ldr	r2, [pc, #44]	; (8003c58 <HAL_Init+0x74>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c2e:	200e      	movs	r0, #14
 8003c30:	f000 f814 	bl	8003c5c <HAL_InitTick>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e002      	b.n	8003c44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c3e:	f7ff f837 	bl	8002cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	08017cf8 	.word	0x08017cf8
 8003c54:	24000010 	.word	0x24000010
 8003c58:	2400000c 	.word	0x2400000c

08003c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c64:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <HAL_InitTick+0x60>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e021      	b.n	8003cb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_InitTick+0x64>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <HAL_InitTick+0x60>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f997 	bl	8003fba <HAL_SYSTICK_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e00e      	b.n	8003cb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b0f      	cmp	r3, #15
 8003c9a:	d80a      	bhi.n	8003cb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	f000 f953 	bl	8003f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ca8:	4a06      	ldr	r2, [pc, #24]	; (8003cc4 <HAL_InitTick+0x68>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e000      	b.n	8003cb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	24000018 	.word	0x24000018
 8003cc0:	2400000c 	.word	0x2400000c
 8003cc4:	24000014 	.word	0x24000014

08003cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_IncTick+0x20>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_IncTick+0x24>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <HAL_IncTick+0x24>)
 8003cda:	6013      	str	r3, [r2, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	24000018 	.word	0x24000018
 8003cec:	2400897c 	.word	0x2400897c

08003cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <HAL_GetTick+0x14>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2400897c 	.word	0x2400897c

08003d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d10:	f7ff ffee 	bl	8003cf0 <HAL_GetTick>
 8003d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d005      	beq.n	8003d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <HAL_Delay+0x44>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d2e:	bf00      	nop
 8003d30:	f7ff ffde 	bl	8003cf0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d8f7      	bhi.n	8003d30 <HAL_Delay+0x28>
  {
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	24000018 	.word	0x24000018

08003d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <__NVIC_SetPriorityGrouping+0x40>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <__NVIC_SetPriorityGrouping+0x44>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d7e:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <__NVIC_SetPriorityGrouping+0x40>)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	60d3      	str	r3, [r2, #12]
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000ed00 	.word	0xe000ed00
 8003d94:	05fa0000 	.word	0x05fa0000

08003d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <__NVIC_GetPriorityGrouping+0x18>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	0a1b      	lsrs	r3, r3, #8
 8003da2:	f003 0307 	and.w	r3, r3, #7
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	db0b      	blt.n	8003dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	f003 021f 	and.w	r2, r3, #31
 8003dcc:	4907      	ldr	r1, [pc, #28]	; (8003dec <__NVIC_EnableIRQ+0x38>)
 8003dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	e000e100 	.word	0xe000e100

08003df0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	db12      	blt.n	8003e28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	f003 021f 	and.w	r2, r3, #31
 8003e08:	490a      	ldr	r1, [pc, #40]	; (8003e34 <__NVIC_DisableIRQ+0x44>)
 8003e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2001      	movs	r0, #1
 8003e12:	fa00 f202 	lsl.w	r2, r0, r2
 8003e16:	3320      	adds	r3, #32
 8003e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e1c:	f3bf 8f4f 	dsb	sy
}
 8003e20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e22:	f3bf 8f6f 	isb	sy
}
 8003e26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000e100 	.word	0xe000e100

08003e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db0a      	blt.n	8003e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	490c      	ldr	r1, [pc, #48]	; (8003e84 <__NVIC_SetPriority+0x4c>)
 8003e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e60:	e00a      	b.n	8003e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4908      	ldr	r1, [pc, #32]	; (8003e88 <__NVIC_SetPriority+0x50>)
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	3b04      	subs	r3, #4
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	440b      	add	r3, r1
 8003e76:	761a      	strb	r2, [r3, #24]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000e100 	.word	0xe000e100
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f1c3 0307 	rsb	r3, r3, #7
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	bf28      	it	cs
 8003eaa:	2304      	movcs	r3, #4
 8003eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d902      	bls.n	8003ebc <NVIC_EncodePriority+0x30>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3b03      	subs	r3, #3
 8003eba:	e000      	b.n	8003ebe <NVIC_EncodePriority+0x32>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	401a      	ands	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	43d9      	mvns	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee4:	4313      	orrs	r3, r2
         );
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3724      	adds	r7, #36	; 0x24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f04:	d301      	bcc.n	8003f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f06:	2301      	movs	r3, #1
 8003f08:	e00f      	b.n	8003f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <SysTick_Config+0x40>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f12:	210f      	movs	r1, #15
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	f7ff ff8e 	bl	8003e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <SysTick_Config+0x40>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <SysTick_Config+0x40>)
 8003f24:	2207      	movs	r2, #7
 8003f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	e000e010 	.word	0xe000e010

08003f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ff05 	bl	8003d50 <__NVIC_SetPriorityGrouping>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	4603      	mov	r3, r0
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f5c:	f7ff ff1c 	bl	8003d98 <__NVIC_GetPriorityGrouping>
 8003f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff90 	bl	8003e8c <NVIC_EncodePriority>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff5f 	bl	8003e38 <__NVIC_SetPriority>
}
 8003f7a:	bf00      	nop
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	4603      	mov	r3, r0
 8003f8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff0f 	bl	8003db4 <__NVIC_EnableIRQ>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff ff1f 	bl	8003df0 <__NVIC_DisableIRQ>
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ff96 	bl	8003ef4 <SysTick_Config>
 8003fc8:	4603      	mov	r3, r0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7ff fe88 	bl	8003cf0 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e37f      	b.n	80046ec <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a66      	ldr	r2, [pc, #408]	; (800418c <HAL_DMA_Init+0x1b8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d04a      	beq.n	800408c <HAL_DMA_Init+0xb8>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a65      	ldr	r2, [pc, #404]	; (8004190 <HAL_DMA_Init+0x1bc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d045      	beq.n	800408c <HAL_DMA_Init+0xb8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a63      	ldr	r2, [pc, #396]	; (8004194 <HAL_DMA_Init+0x1c0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d040      	beq.n	800408c <HAL_DMA_Init+0xb8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a62      	ldr	r2, [pc, #392]	; (8004198 <HAL_DMA_Init+0x1c4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d03b      	beq.n	800408c <HAL_DMA_Init+0xb8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a60      	ldr	r2, [pc, #384]	; (800419c <HAL_DMA_Init+0x1c8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d036      	beq.n	800408c <HAL_DMA_Init+0xb8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a5f      	ldr	r2, [pc, #380]	; (80041a0 <HAL_DMA_Init+0x1cc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d031      	beq.n	800408c <HAL_DMA_Init+0xb8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a5d      	ldr	r2, [pc, #372]	; (80041a4 <HAL_DMA_Init+0x1d0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02c      	beq.n	800408c <HAL_DMA_Init+0xb8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a5c      	ldr	r2, [pc, #368]	; (80041a8 <HAL_DMA_Init+0x1d4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d027      	beq.n	800408c <HAL_DMA_Init+0xb8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a5a      	ldr	r2, [pc, #360]	; (80041ac <HAL_DMA_Init+0x1d8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d022      	beq.n	800408c <HAL_DMA_Init+0xb8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a59      	ldr	r2, [pc, #356]	; (80041b0 <HAL_DMA_Init+0x1dc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d01d      	beq.n	800408c <HAL_DMA_Init+0xb8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a57      	ldr	r2, [pc, #348]	; (80041b4 <HAL_DMA_Init+0x1e0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d018      	beq.n	800408c <HAL_DMA_Init+0xb8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a56      	ldr	r2, [pc, #344]	; (80041b8 <HAL_DMA_Init+0x1e4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <HAL_DMA_Init+0xb8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a54      	ldr	r2, [pc, #336]	; (80041bc <HAL_DMA_Init+0x1e8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_DMA_Init+0xb8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a53      	ldr	r2, [pc, #332]	; (80041c0 <HAL_DMA_Init+0x1ec>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_DMA_Init+0xb8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a51      	ldr	r2, [pc, #324]	; (80041c4 <HAL_DMA_Init+0x1f0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_DMA_Init+0xb8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a50      	ldr	r2, [pc, #320]	; (80041c8 <HAL_DMA_Init+0x1f4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d101      	bne.n	8004090 <HAL_DMA_Init+0xbc>
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <HAL_DMA_Init+0xbe>
 8004090:	2300      	movs	r3, #0
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 813c 	beq.w	8004310 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a37      	ldr	r2, [pc, #220]	; (800418c <HAL_DMA_Init+0x1b8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04a      	beq.n	8004148 <HAL_DMA_Init+0x174>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a36      	ldr	r2, [pc, #216]	; (8004190 <HAL_DMA_Init+0x1bc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d045      	beq.n	8004148 <HAL_DMA_Init+0x174>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a34      	ldr	r2, [pc, #208]	; (8004194 <HAL_DMA_Init+0x1c0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d040      	beq.n	8004148 <HAL_DMA_Init+0x174>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a33      	ldr	r2, [pc, #204]	; (8004198 <HAL_DMA_Init+0x1c4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d03b      	beq.n	8004148 <HAL_DMA_Init+0x174>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a31      	ldr	r2, [pc, #196]	; (800419c <HAL_DMA_Init+0x1c8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d036      	beq.n	8004148 <HAL_DMA_Init+0x174>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a30      	ldr	r2, [pc, #192]	; (80041a0 <HAL_DMA_Init+0x1cc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d031      	beq.n	8004148 <HAL_DMA_Init+0x174>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2e      	ldr	r2, [pc, #184]	; (80041a4 <HAL_DMA_Init+0x1d0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d02c      	beq.n	8004148 <HAL_DMA_Init+0x174>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2d      	ldr	r2, [pc, #180]	; (80041a8 <HAL_DMA_Init+0x1d4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d027      	beq.n	8004148 <HAL_DMA_Init+0x174>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <HAL_DMA_Init+0x1d8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d022      	beq.n	8004148 <HAL_DMA_Init+0x174>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <HAL_DMA_Init+0x1dc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d01d      	beq.n	8004148 <HAL_DMA_Init+0x174>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a28      	ldr	r2, [pc, #160]	; (80041b4 <HAL_DMA_Init+0x1e0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d018      	beq.n	8004148 <HAL_DMA_Init+0x174>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a27      	ldr	r2, [pc, #156]	; (80041b8 <HAL_DMA_Init+0x1e4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <HAL_DMA_Init+0x174>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a25      	ldr	r2, [pc, #148]	; (80041bc <HAL_DMA_Init+0x1e8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_DMA_Init+0x174>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a24      	ldr	r2, [pc, #144]	; (80041c0 <HAL_DMA_Init+0x1ec>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_DMA_Init+0x174>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a22      	ldr	r2, [pc, #136]	; (80041c4 <HAL_DMA_Init+0x1f0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_DMA_Init+0x174>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a21      	ldr	r2, [pc, #132]	; (80041c8 <HAL_DMA_Init+0x1f4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <HAL_DMA_Init+0x186>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e007      	b.n	800416a <HAL_DMA_Init+0x196>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800416a:	e02f      	b.n	80041cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800416c:	f7ff fdc0 	bl	8003cf0 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b05      	cmp	r3, #5
 8004178:	d928      	bls.n	80041cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2203      	movs	r2, #3
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e2af      	b.n	80046ec <HAL_DMA_Init+0x718>
 800418c:	40020010 	.word	0x40020010
 8004190:	40020028 	.word	0x40020028
 8004194:	40020040 	.word	0x40020040
 8004198:	40020058 	.word	0x40020058
 800419c:	40020070 	.word	0x40020070
 80041a0:	40020088 	.word	0x40020088
 80041a4:	400200a0 	.word	0x400200a0
 80041a8:	400200b8 	.word	0x400200b8
 80041ac:	40020410 	.word	0x40020410
 80041b0:	40020428 	.word	0x40020428
 80041b4:	40020440 	.word	0x40020440
 80041b8:	40020458 	.word	0x40020458
 80041bc:	40020470 	.word	0x40020470
 80041c0:	40020488 	.word	0x40020488
 80041c4:	400204a0 	.word	0x400204a0
 80041c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1c8      	bne.n	800416c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4b73      	ldr	r3, [pc, #460]	; (80043b4 <HAL_DMA_Init+0x3e0>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80041f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b04      	cmp	r3, #4
 800421e:	d107      	bne.n	8004230 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	4313      	orrs	r3, r2
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b28      	cmp	r3, #40	; 0x28
 8004236:	d903      	bls.n	8004240 <HAL_DMA_Init+0x26c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b2e      	cmp	r3, #46	; 0x2e
 800423e:	d91f      	bls.n	8004280 <HAL_DMA_Init+0x2ac>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b3e      	cmp	r3, #62	; 0x3e
 8004246:	d903      	bls.n	8004250 <HAL_DMA_Init+0x27c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b42      	cmp	r3, #66	; 0x42
 800424e:	d917      	bls.n	8004280 <HAL_DMA_Init+0x2ac>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b46      	cmp	r3, #70	; 0x46
 8004256:	d903      	bls.n	8004260 <HAL_DMA_Init+0x28c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b48      	cmp	r3, #72	; 0x48
 800425e:	d90f      	bls.n	8004280 <HAL_DMA_Init+0x2ac>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b4e      	cmp	r3, #78	; 0x4e
 8004266:	d903      	bls.n	8004270 <HAL_DMA_Init+0x29c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b52      	cmp	r3, #82	; 0x52
 800426e:	d907      	bls.n	8004280 <HAL_DMA_Init+0x2ac>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b73      	cmp	r3, #115	; 0x73
 8004276:	d905      	bls.n	8004284 <HAL_DMA_Init+0x2b0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b77      	cmp	r3, #119	; 0x77
 800427e:	d801      	bhi.n	8004284 <HAL_DMA_Init+0x2b0>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_DMA_Init+0x2b2>
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004290:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f023 0307 	bic.w	r3, r3, #7
 80042a8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d117      	bne.n	80042ec <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00e      	beq.n	80042ec <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f002 fbe2 	bl	8006a98 <DMA_CheckFifoParam>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2240      	movs	r2, #64	; 0x40
 80042de:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e1ff      	b.n	80046ec <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f002 fb1d 	bl	8006934 <DMA_CalcBaseAndBitshift>
 80042fa:	4603      	mov	r3, r0
 80042fc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	223f      	movs	r2, #63	; 0x3f
 8004308:	409a      	lsls	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	e0fe      	b.n	800450e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a28      	ldr	r2, [pc, #160]	; (80043b8 <HAL_DMA_Init+0x3e4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d04a      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a27      	ldr	r2, [pc, #156]	; (80043bc <HAL_DMA_Init+0x3e8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d045      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <HAL_DMA_Init+0x3ec>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d040      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <HAL_DMA_Init+0x3f0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d03b      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <HAL_DMA_Init+0x3f4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d036      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a21      	ldr	r2, [pc, #132]	; (80043cc <HAL_DMA_Init+0x3f8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d031      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1f      	ldr	r2, [pc, #124]	; (80043d0 <HAL_DMA_Init+0x3fc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02c      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1e      	ldr	r2, [pc, #120]	; (80043d4 <HAL_DMA_Init+0x400>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d027      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <HAL_DMA_Init+0x404>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d022      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <HAL_DMA_Init+0x408>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d01d      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <HAL_DMA_Init+0x40c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <HAL_DMA_Init+0x410>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <HAL_DMA_Init+0x414>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a15      	ldr	r2, [pc, #84]	; (80043ec <HAL_DMA_Init+0x418>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <HAL_DMA_Init+0x41c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_DMA_Init+0x3dc>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <HAL_DMA_Init+0x420>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d123      	bne.n	80043f8 <HAL_DMA_Init+0x424>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e022      	b.n	80043fa <HAL_DMA_Init+0x426>
 80043b4:	fe10803f 	.word	0xfe10803f
 80043b8:	48022c08 	.word	0x48022c08
 80043bc:	48022c1c 	.word	0x48022c1c
 80043c0:	48022c30 	.word	0x48022c30
 80043c4:	48022c44 	.word	0x48022c44
 80043c8:	48022c58 	.word	0x48022c58
 80043cc:	48022c6c 	.word	0x48022c6c
 80043d0:	48022c80 	.word	0x48022c80
 80043d4:	48022c94 	.word	0x48022c94
 80043d8:	58025408 	.word	0x58025408
 80043dc:	5802541c 	.word	0x5802541c
 80043e0:	58025430 	.word	0x58025430
 80043e4:	58025444 	.word	0x58025444
 80043e8:	58025458 	.word	0x58025458
 80043ec:	5802546c 	.word	0x5802546c
 80043f0:	58025480 	.word	0x58025480
 80043f4:	58025494 	.word	0x58025494
 80043f8:	2300      	movs	r3, #0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d07e      	beq.n	80044fc <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a80      	ldr	r2, [pc, #512]	; (8004604 <HAL_DMA_Init+0x630>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d021      	beq.n	800444c <HAL_DMA_Init+0x478>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a7e      	ldr	r2, [pc, #504]	; (8004608 <HAL_DMA_Init+0x634>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d01c      	beq.n	800444c <HAL_DMA_Init+0x478>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a7d      	ldr	r2, [pc, #500]	; (800460c <HAL_DMA_Init+0x638>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d017      	beq.n	800444c <HAL_DMA_Init+0x478>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a7b      	ldr	r2, [pc, #492]	; (8004610 <HAL_DMA_Init+0x63c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d012      	beq.n	800444c <HAL_DMA_Init+0x478>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a7a      	ldr	r2, [pc, #488]	; (8004614 <HAL_DMA_Init+0x640>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00d      	beq.n	800444c <HAL_DMA_Init+0x478>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a78      	ldr	r2, [pc, #480]	; (8004618 <HAL_DMA_Init+0x644>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d008      	beq.n	800444c <HAL_DMA_Init+0x478>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a77      	ldr	r2, [pc, #476]	; (800461c <HAL_DMA_Init+0x648>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d003      	beq.n	800444c <HAL_DMA_Init+0x478>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a75      	ldr	r2, [pc, #468]	; (8004620 <HAL_DMA_Init+0x64c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4b6e      	ldr	r3, [pc, #440]	; (8004624 <HAL_DMA_Init+0x650>)
 800446a:	4013      	ands	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d008      	beq.n	8004488 <HAL_DMA_Init+0x4b4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b80      	cmp	r3, #128	; 0x80
 800447c:	d102      	bne.n	8004484 <HAL_DMA_Init+0x4b0>
 800447e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004482:	e002      	b.n	800448a <HAL_DMA_Init+0x4b6>
 8004484:	2300      	movs	r3, #0
 8004486:	e000      	b.n	800448a <HAL_DMA_Init+0x4b6>
 8004488:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68d2      	ldr	r2, [r2, #12]
 800448e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004490:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004498:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80044a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80044b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80044b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	4b56      	ldr	r3, [pc, #344]	; (8004628 <HAL_DMA_Init+0x654>)
 80044d0:	4413      	add	r3, r2
 80044d2:	4a56      	ldr	r2, [pc, #344]	; (800462c <HAL_DMA_Init+0x658>)
 80044d4:	fba2 2303 	umull	r2, r3, r2, r3
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	009a      	lsls	r2, r3, #2
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f002 fa27 	bl	8006934 <DMA_CalcBaseAndBitshift>
 80044e6:	4603      	mov	r3, r0
 80044e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	2201      	movs	r2, #1
 80044f4:	409a      	lsls	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	e008      	b.n	800450e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2240      	movs	r2, #64	; 0x40
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2203      	movs	r2, #3
 8004506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e0ee      	b.n	80046ec <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a47      	ldr	r2, [pc, #284]	; (8004630 <HAL_DMA_Init+0x65c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d072      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a45      	ldr	r2, [pc, #276]	; (8004634 <HAL_DMA_Init+0x660>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d06d      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a44      	ldr	r2, [pc, #272]	; (8004638 <HAL_DMA_Init+0x664>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d068      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a42      	ldr	r2, [pc, #264]	; (800463c <HAL_DMA_Init+0x668>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d063      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a41      	ldr	r2, [pc, #260]	; (8004640 <HAL_DMA_Init+0x66c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d05e      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a3f      	ldr	r2, [pc, #252]	; (8004644 <HAL_DMA_Init+0x670>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d059      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a3e      	ldr	r2, [pc, #248]	; (8004648 <HAL_DMA_Init+0x674>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d054      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a3c      	ldr	r2, [pc, #240]	; (800464c <HAL_DMA_Init+0x678>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d04f      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a3b      	ldr	r2, [pc, #236]	; (8004650 <HAL_DMA_Init+0x67c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d04a      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a39      	ldr	r2, [pc, #228]	; (8004654 <HAL_DMA_Init+0x680>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d045      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a38      	ldr	r2, [pc, #224]	; (8004658 <HAL_DMA_Init+0x684>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d040      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a36      	ldr	r2, [pc, #216]	; (800465c <HAL_DMA_Init+0x688>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d03b      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a35      	ldr	r2, [pc, #212]	; (8004660 <HAL_DMA_Init+0x68c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d036      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a33      	ldr	r2, [pc, #204]	; (8004664 <HAL_DMA_Init+0x690>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d031      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a32      	ldr	r2, [pc, #200]	; (8004668 <HAL_DMA_Init+0x694>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d02c      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a30      	ldr	r2, [pc, #192]	; (800466c <HAL_DMA_Init+0x698>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d027      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a14      	ldr	r2, [pc, #80]	; (8004604 <HAL_DMA_Init+0x630>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d022      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a12      	ldr	r2, [pc, #72]	; (8004608 <HAL_DMA_Init+0x634>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01d      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a11      	ldr	r2, [pc, #68]	; (800460c <HAL_DMA_Init+0x638>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d018      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <HAL_DMA_Init+0x63c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <HAL_DMA_Init+0x640>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00e      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <HAL_DMA_Init+0x644>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a0b      	ldr	r2, [pc, #44]	; (800461c <HAL_DMA_Init+0x648>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <HAL_DMA_Init+0x62a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_DMA_Init+0x64c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d138      	bne.n	8004670 <HAL_DMA_Init+0x69c>
 80045fe:	2301      	movs	r3, #1
 8004600:	e037      	b.n	8004672 <HAL_DMA_Init+0x69e>
 8004602:	bf00      	nop
 8004604:	58025408 	.word	0x58025408
 8004608:	5802541c 	.word	0x5802541c
 800460c:	58025430 	.word	0x58025430
 8004610:	58025444 	.word	0x58025444
 8004614:	58025458 	.word	0x58025458
 8004618:	5802546c 	.word	0x5802546c
 800461c:	58025480 	.word	0x58025480
 8004620:	58025494 	.word	0x58025494
 8004624:	fffe000f 	.word	0xfffe000f
 8004628:	a7fdabf8 	.word	0xa7fdabf8
 800462c:	cccccccd 	.word	0xcccccccd
 8004630:	40020010 	.word	0x40020010
 8004634:	40020028 	.word	0x40020028
 8004638:	40020040 	.word	0x40020040
 800463c:	40020058 	.word	0x40020058
 8004640:	40020070 	.word	0x40020070
 8004644:	40020088 	.word	0x40020088
 8004648:	400200a0 	.word	0x400200a0
 800464c:	400200b8 	.word	0x400200b8
 8004650:	40020410 	.word	0x40020410
 8004654:	40020428 	.word	0x40020428
 8004658:	40020440 	.word	0x40020440
 800465c:	40020458 	.word	0x40020458
 8004660:	40020470 	.word	0x40020470
 8004664:	40020488 	.word	0x40020488
 8004668:	400204a0 	.word	0x400204a0
 800466c:	400204b8 	.word	0x400204b8
 8004670:	2300      	movs	r3, #0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d032      	beq.n	80046dc <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f002 fa8a 	bl	8006b90 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b80      	cmp	r3, #128	; 0x80
 8004682:	d102      	bne.n	800468a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800469e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d010      	beq.n	80046ca <HAL_DMA_Init+0x6f6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d80c      	bhi.n	80046ca <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f002 fb07 	bl	8006cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046c6:	605a      	str	r2, [r3, #4]
 80046c8:	e008      	b.n	80046dc <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e226      	b.n	8004b5e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_DMA_Start_IT+0x2a>
 800471a:	2302      	movs	r3, #2
 800471c:	e21f      	b.n	8004b5e <HAL_DMA_Start_IT+0x46a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b01      	cmp	r3, #1
 8004730:	f040 820a 	bne.w	8004b48 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a68      	ldr	r2, [pc, #416]	; (80048e8 <HAL_DMA_Start_IT+0x1f4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04a      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a66      	ldr	r2, [pc, #408]	; (80048ec <HAL_DMA_Start_IT+0x1f8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d045      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a65      	ldr	r2, [pc, #404]	; (80048f0 <HAL_DMA_Start_IT+0x1fc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d040      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a63      	ldr	r2, [pc, #396]	; (80048f4 <HAL_DMA_Start_IT+0x200>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d03b      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a62      	ldr	r2, [pc, #392]	; (80048f8 <HAL_DMA_Start_IT+0x204>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d036      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a60      	ldr	r2, [pc, #384]	; (80048fc <HAL_DMA_Start_IT+0x208>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d031      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a5f      	ldr	r2, [pc, #380]	; (8004900 <HAL_DMA_Start_IT+0x20c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d02c      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a5d      	ldr	r2, [pc, #372]	; (8004904 <HAL_DMA_Start_IT+0x210>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d027      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a5c      	ldr	r2, [pc, #368]	; (8004908 <HAL_DMA_Start_IT+0x214>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d022      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a5a      	ldr	r2, [pc, #360]	; (800490c <HAL_DMA_Start_IT+0x218>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a59      	ldr	r2, [pc, #356]	; (8004910 <HAL_DMA_Start_IT+0x21c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d018      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a57      	ldr	r2, [pc, #348]	; (8004914 <HAL_DMA_Start_IT+0x220>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a56      	ldr	r2, [pc, #344]	; (8004918 <HAL_DMA_Start_IT+0x224>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a54      	ldr	r2, [pc, #336]	; (800491c <HAL_DMA_Start_IT+0x228>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a53      	ldr	r2, [pc, #332]	; (8004920 <HAL_DMA_Start_IT+0x22c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_DMA_Start_IT+0xee>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a51      	ldr	r2, [pc, #324]	; (8004924 <HAL_DMA_Start_IT+0x230>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d108      	bne.n	80047f4 <HAL_DMA_Start_IT+0x100>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e007      	b.n	8004804 <HAL_DMA_Start_IT+0x110>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f001 feae 	bl	800656c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a34      	ldr	r2, [pc, #208]	; (80048e8 <HAL_DMA_Start_IT+0x1f4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d04a      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a33      	ldr	r2, [pc, #204]	; (80048ec <HAL_DMA_Start_IT+0x1f8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d045      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a31      	ldr	r2, [pc, #196]	; (80048f0 <HAL_DMA_Start_IT+0x1fc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d040      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a30      	ldr	r2, [pc, #192]	; (80048f4 <HAL_DMA_Start_IT+0x200>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d03b      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2e      	ldr	r2, [pc, #184]	; (80048f8 <HAL_DMA_Start_IT+0x204>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d036      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2d      	ldr	r2, [pc, #180]	; (80048fc <HAL_DMA_Start_IT+0x208>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d031      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <HAL_DMA_Start_IT+0x20c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d02c      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <HAL_DMA_Start_IT+0x210>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d027      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a28      	ldr	r2, [pc, #160]	; (8004908 <HAL_DMA_Start_IT+0x214>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d022      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a27      	ldr	r2, [pc, #156]	; (800490c <HAL_DMA_Start_IT+0x218>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d01d      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <HAL_DMA_Start_IT+0x21c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d018      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a24      	ldr	r2, [pc, #144]	; (8004914 <HAL_DMA_Start_IT+0x220>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d013      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a22      	ldr	r2, [pc, #136]	; (8004918 <HAL_DMA_Start_IT+0x224>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a21      	ldr	r2, [pc, #132]	; (800491c <HAL_DMA_Start_IT+0x228>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <HAL_DMA_Start_IT+0x22c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_DMA_Start_IT+0x1bc>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1e      	ldr	r2, [pc, #120]	; (8004924 <HAL_DMA_Start_IT+0x230>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_DMA_Start_IT+0x1c0>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_DMA_Start_IT+0x1c2>
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d036      	beq.n	8004928 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 021e 	bic.w	r2, r3, #30
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0216 	orr.w	r2, r2, #22
 80048cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d03e      	beq.n	8004954 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0208 	orr.w	r2, r2, #8
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e035      	b.n	8004954 <HAL_DMA_Start_IT+0x260>
 80048e8:	40020010 	.word	0x40020010
 80048ec:	40020028 	.word	0x40020028
 80048f0:	40020040 	.word	0x40020040
 80048f4:	40020058 	.word	0x40020058
 80048f8:	40020070 	.word	0x40020070
 80048fc:	40020088 	.word	0x40020088
 8004900:	400200a0 	.word	0x400200a0
 8004904:	400200b8 	.word	0x400200b8
 8004908:	40020410 	.word	0x40020410
 800490c:	40020428 	.word	0x40020428
 8004910:	40020440 	.word	0x40020440
 8004914:	40020458 	.word	0x40020458
 8004918:	40020470 	.word	0x40020470
 800491c:	40020488 	.word	0x40020488
 8004920:	400204a0 	.word	0x400204a0
 8004924:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 020e 	bic.w	r2, r3, #14
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 020a 	orr.w	r2, r2, #10
 800493a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0204 	orr.w	r2, r2, #4
 8004952:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a83      	ldr	r2, [pc, #524]	; (8004b68 <HAL_DMA_Start_IT+0x474>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d072      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a82      	ldr	r2, [pc, #520]	; (8004b6c <HAL_DMA_Start_IT+0x478>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d06d      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a80      	ldr	r2, [pc, #512]	; (8004b70 <HAL_DMA_Start_IT+0x47c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d068      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7f      	ldr	r2, [pc, #508]	; (8004b74 <HAL_DMA_Start_IT+0x480>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d063      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a7d      	ldr	r2, [pc, #500]	; (8004b78 <HAL_DMA_Start_IT+0x484>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d05e      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a7c      	ldr	r2, [pc, #496]	; (8004b7c <HAL_DMA_Start_IT+0x488>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d059      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a7a      	ldr	r2, [pc, #488]	; (8004b80 <HAL_DMA_Start_IT+0x48c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d054      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a79      	ldr	r2, [pc, #484]	; (8004b84 <HAL_DMA_Start_IT+0x490>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d04f      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a77      	ldr	r2, [pc, #476]	; (8004b88 <HAL_DMA_Start_IT+0x494>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d04a      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a76      	ldr	r2, [pc, #472]	; (8004b8c <HAL_DMA_Start_IT+0x498>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d045      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a74      	ldr	r2, [pc, #464]	; (8004b90 <HAL_DMA_Start_IT+0x49c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d040      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a73      	ldr	r2, [pc, #460]	; (8004b94 <HAL_DMA_Start_IT+0x4a0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d03b      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a71      	ldr	r2, [pc, #452]	; (8004b98 <HAL_DMA_Start_IT+0x4a4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d036      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a70      	ldr	r2, [pc, #448]	; (8004b9c <HAL_DMA_Start_IT+0x4a8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d031      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a6e      	ldr	r2, [pc, #440]	; (8004ba0 <HAL_DMA_Start_IT+0x4ac>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02c      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a6d      	ldr	r2, [pc, #436]	; (8004ba4 <HAL_DMA_Start_IT+0x4b0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d027      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a6b      	ldr	r2, [pc, #428]	; (8004ba8 <HAL_DMA_Start_IT+0x4b4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d022      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6a      	ldr	r2, [pc, #424]	; (8004bac <HAL_DMA_Start_IT+0x4b8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d01d      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a68      	ldr	r2, [pc, #416]	; (8004bb0 <HAL_DMA_Start_IT+0x4bc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d018      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a67      	ldr	r2, [pc, #412]	; (8004bb4 <HAL_DMA_Start_IT+0x4c0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d013      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a65      	ldr	r2, [pc, #404]	; (8004bb8 <HAL_DMA_Start_IT+0x4c4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00e      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a64      	ldr	r2, [pc, #400]	; (8004bbc <HAL_DMA_Start_IT+0x4c8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d009      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a62      	ldr	r2, [pc, #392]	; (8004bc0 <HAL_DMA_Start_IT+0x4cc>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_DMA_Start_IT+0x350>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a61      	ldr	r2, [pc, #388]	; (8004bc4 <HAL_DMA_Start_IT+0x4d0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_DMA_Start_IT+0x354>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_DMA_Start_IT+0x356>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01a      	beq.n	8004a84 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a6a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a82:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a37      	ldr	r2, [pc, #220]	; (8004b68 <HAL_DMA_Start_IT+0x474>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d04a      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a36      	ldr	r2, [pc, #216]	; (8004b6c <HAL_DMA_Start_IT+0x478>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d045      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a34      	ldr	r2, [pc, #208]	; (8004b70 <HAL_DMA_Start_IT+0x47c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d040      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a33      	ldr	r2, [pc, #204]	; (8004b74 <HAL_DMA_Start_IT+0x480>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d03b      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a31      	ldr	r2, [pc, #196]	; (8004b78 <HAL_DMA_Start_IT+0x484>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d036      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a30      	ldr	r2, [pc, #192]	; (8004b7c <HAL_DMA_Start_IT+0x488>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d031      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2e      	ldr	r2, [pc, #184]	; (8004b80 <HAL_DMA_Start_IT+0x48c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02c      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a2d      	ldr	r2, [pc, #180]	; (8004b84 <HAL_DMA_Start_IT+0x490>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d027      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2b      	ldr	r2, [pc, #172]	; (8004b88 <HAL_DMA_Start_IT+0x494>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2a      	ldr	r2, [pc, #168]	; (8004b8c <HAL_DMA_Start_IT+0x498>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d01d      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a28      	ldr	r2, [pc, #160]	; (8004b90 <HAL_DMA_Start_IT+0x49c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a27      	ldr	r2, [pc, #156]	; (8004b94 <HAL_DMA_Start_IT+0x4a0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a25      	ldr	r2, [pc, #148]	; (8004b98 <HAL_DMA_Start_IT+0x4a4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a24      	ldr	r2, [pc, #144]	; (8004b9c <HAL_DMA_Start_IT+0x4a8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a22      	ldr	r2, [pc, #136]	; (8004ba0 <HAL_DMA_Start_IT+0x4ac>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_DMA_Start_IT+0x430>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a21      	ldr	r2, [pc, #132]	; (8004ba4 <HAL_DMA_Start_IT+0x4b0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d108      	bne.n	8004b36 <HAL_DMA_Start_IT+0x442>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	e012      	b.n	8004b5c <HAL_DMA_Start_IT+0x468>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e009      	b.n	8004b5c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40020010 	.word	0x40020010
 8004b6c:	40020028 	.word	0x40020028
 8004b70:	40020040 	.word	0x40020040
 8004b74:	40020058 	.word	0x40020058
 8004b78:	40020070 	.word	0x40020070
 8004b7c:	40020088 	.word	0x40020088
 8004b80:	400200a0 	.word	0x400200a0
 8004b84:	400200b8 	.word	0x400200b8
 8004b88:	40020410 	.word	0x40020410
 8004b8c:	40020428 	.word	0x40020428
 8004b90:	40020440 	.word	0x40020440
 8004b94:	40020458 	.word	0x40020458
 8004b98:	40020470 	.word	0x40020470
 8004b9c:	40020488 	.word	0x40020488
 8004ba0:	400204a0 	.word	0x400204a0
 8004ba4:	400204b8 	.word	0x400204b8
 8004ba8:	58025408 	.word	0x58025408
 8004bac:	5802541c 	.word	0x5802541c
 8004bb0:	58025430 	.word	0x58025430
 8004bb4:	58025444 	.word	0x58025444
 8004bb8:	58025458 	.word	0x58025458
 8004bbc:	5802546c 	.word	0x5802546c
 8004bc0:	58025480 	.word	0x58025480
 8004bc4:	58025494 	.word	0x58025494

08004bc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004bd0:	f7ff f88e 	bl	8003cf0 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e2dc      	b.n	800519a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d008      	beq.n	8004bfe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e2cd      	b.n	800519a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a76      	ldr	r2, [pc, #472]	; (8004ddc <HAL_DMA_Abort+0x214>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d04a      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a74      	ldr	r2, [pc, #464]	; (8004de0 <HAL_DMA_Abort+0x218>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d045      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a73      	ldr	r2, [pc, #460]	; (8004de4 <HAL_DMA_Abort+0x21c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d040      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a71      	ldr	r2, [pc, #452]	; (8004de8 <HAL_DMA_Abort+0x220>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d03b      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a70      	ldr	r2, [pc, #448]	; (8004dec <HAL_DMA_Abort+0x224>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d036      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a6e      	ldr	r2, [pc, #440]	; (8004df0 <HAL_DMA_Abort+0x228>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d031      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6d      	ldr	r2, [pc, #436]	; (8004df4 <HAL_DMA_Abort+0x22c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d02c      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6b      	ldr	r2, [pc, #428]	; (8004df8 <HAL_DMA_Abort+0x230>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d027      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6a      	ldr	r2, [pc, #424]	; (8004dfc <HAL_DMA_Abort+0x234>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d022      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a68      	ldr	r2, [pc, #416]	; (8004e00 <HAL_DMA_Abort+0x238>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01d      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a67      	ldr	r2, [pc, #412]	; (8004e04 <HAL_DMA_Abort+0x23c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a65      	ldr	r2, [pc, #404]	; (8004e08 <HAL_DMA_Abort+0x240>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a64      	ldr	r2, [pc, #400]	; (8004e0c <HAL_DMA_Abort+0x244>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a62      	ldr	r2, [pc, #392]	; (8004e10 <HAL_DMA_Abort+0x248>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a61      	ldr	r2, [pc, #388]	; (8004e14 <HAL_DMA_Abort+0x24c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_DMA_Abort+0xd6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a5f      	ldr	r2, [pc, #380]	; (8004e18 <HAL_DMA_Abort+0x250>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <HAL_DMA_Abort+0xda>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <HAL_DMA_Abort+0xdc>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d013      	beq.n	8004cd0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 021e 	bic.w	r2, r2, #30
 8004cb6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e00a      	b.n	8004ce6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 020e 	bic.w	r2, r2, #14
 8004cde:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3c      	ldr	r2, [pc, #240]	; (8004ddc <HAL_DMA_Abort+0x214>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d072      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a3a      	ldr	r2, [pc, #232]	; (8004de0 <HAL_DMA_Abort+0x218>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d06d      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a39      	ldr	r2, [pc, #228]	; (8004de4 <HAL_DMA_Abort+0x21c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d068      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a37      	ldr	r2, [pc, #220]	; (8004de8 <HAL_DMA_Abort+0x220>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d063      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a36      	ldr	r2, [pc, #216]	; (8004dec <HAL_DMA_Abort+0x224>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d05e      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a34      	ldr	r2, [pc, #208]	; (8004df0 <HAL_DMA_Abort+0x228>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d059      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a33      	ldr	r2, [pc, #204]	; (8004df4 <HAL_DMA_Abort+0x22c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d054      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a31      	ldr	r2, [pc, #196]	; (8004df8 <HAL_DMA_Abort+0x230>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d04f      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a30      	ldr	r2, [pc, #192]	; (8004dfc <HAL_DMA_Abort+0x234>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d04a      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2e      	ldr	r2, [pc, #184]	; (8004e00 <HAL_DMA_Abort+0x238>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d045      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2d      	ldr	r2, [pc, #180]	; (8004e04 <HAL_DMA_Abort+0x23c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d040      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2b      	ldr	r2, [pc, #172]	; (8004e08 <HAL_DMA_Abort+0x240>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d03b      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <HAL_DMA_Abort+0x244>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d036      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a28      	ldr	r2, [pc, #160]	; (8004e10 <HAL_DMA_Abort+0x248>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d031      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <HAL_DMA_Abort+0x24c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d02c      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <HAL_DMA_Abort+0x250>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d027      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a24      	ldr	r2, [pc, #144]	; (8004e1c <HAL_DMA_Abort+0x254>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d022      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a22      	ldr	r2, [pc, #136]	; (8004e20 <HAL_DMA_Abort+0x258>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01d      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a21      	ldr	r2, [pc, #132]	; (8004e24 <HAL_DMA_Abort+0x25c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d018      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1f      	ldr	r2, [pc, #124]	; (8004e28 <HAL_DMA_Abort+0x260>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <HAL_DMA_Abort+0x264>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00e      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <HAL_DMA_Abort+0x268>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1b      	ldr	r2, [pc, #108]	; (8004e34 <HAL_DMA_Abort+0x26c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d004      	beq.n	8004dd6 <HAL_DMA_Abort+0x20e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <HAL_DMA_Abort+0x270>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d132      	bne.n	8004e3c <HAL_DMA_Abort+0x274>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e031      	b.n	8004e3e <HAL_DMA_Abort+0x276>
 8004dda:	bf00      	nop
 8004ddc:	40020010 	.word	0x40020010
 8004de0:	40020028 	.word	0x40020028
 8004de4:	40020040 	.word	0x40020040
 8004de8:	40020058 	.word	0x40020058
 8004dec:	40020070 	.word	0x40020070
 8004df0:	40020088 	.word	0x40020088
 8004df4:	400200a0 	.word	0x400200a0
 8004df8:	400200b8 	.word	0x400200b8
 8004dfc:	40020410 	.word	0x40020410
 8004e00:	40020428 	.word	0x40020428
 8004e04:	40020440 	.word	0x40020440
 8004e08:	40020458 	.word	0x40020458
 8004e0c:	40020470 	.word	0x40020470
 8004e10:	40020488 	.word	0x40020488
 8004e14:	400204a0 	.word	0x400204a0
 8004e18:	400204b8 	.word	0x400204b8
 8004e1c:	58025408 	.word	0x58025408
 8004e20:	5802541c 	.word	0x5802541c
 8004e24:	58025430 	.word	0x58025430
 8004e28:	58025444 	.word	0x58025444
 8004e2c:	58025458 	.word	0x58025458
 8004e30:	5802546c 	.word	0x5802546c
 8004e34:	58025480 	.word	0x58025480
 8004e38:	58025494 	.word	0x58025494
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a6d      	ldr	r2, [pc, #436]	; (800500c <HAL_DMA_Abort+0x444>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d04a      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6b      	ldr	r2, [pc, #428]	; (8005010 <HAL_DMA_Abort+0x448>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d045      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6a      	ldr	r2, [pc, #424]	; (8005014 <HAL_DMA_Abort+0x44c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d040      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a68      	ldr	r2, [pc, #416]	; (8005018 <HAL_DMA_Abort+0x450>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d03b      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a67      	ldr	r2, [pc, #412]	; (800501c <HAL_DMA_Abort+0x454>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d036      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a65      	ldr	r2, [pc, #404]	; (8005020 <HAL_DMA_Abort+0x458>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d031      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a64      	ldr	r2, [pc, #400]	; (8005024 <HAL_DMA_Abort+0x45c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d02c      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a62      	ldr	r2, [pc, #392]	; (8005028 <HAL_DMA_Abort+0x460>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d027      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a61      	ldr	r2, [pc, #388]	; (800502c <HAL_DMA_Abort+0x464>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d022      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a5f      	ldr	r2, [pc, #380]	; (8005030 <HAL_DMA_Abort+0x468>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a5e      	ldr	r2, [pc, #376]	; (8005034 <HAL_DMA_Abort+0x46c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d018      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a5c      	ldr	r2, [pc, #368]	; (8005038 <HAL_DMA_Abort+0x470>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a5b      	ldr	r2, [pc, #364]	; (800503c <HAL_DMA_Abort+0x474>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a59      	ldr	r2, [pc, #356]	; (8005040 <HAL_DMA_Abort+0x478>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a58      	ldr	r2, [pc, #352]	; (8005044 <HAL_DMA_Abort+0x47c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <HAL_DMA_Abort+0x32a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a56      	ldr	r2, [pc, #344]	; (8005048 <HAL_DMA_Abort+0x480>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d108      	bne.n	8004f04 <HAL_DMA_Abort+0x33c>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e007      	b.n	8004f14 <HAL_DMA_Abort+0x34c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f14:	e013      	b.n	8004f3e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f16:	f7fe feeb 	bl	8003cf0 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b05      	cmp	r3, #5
 8004f22:	d90c      	bls.n	8004f3e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e12d      	b.n	800519a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e5      	bne.n	8004f16 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2f      	ldr	r2, [pc, #188]	; (800500c <HAL_DMA_Abort+0x444>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d04a      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2d      	ldr	r2, [pc, #180]	; (8005010 <HAL_DMA_Abort+0x448>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d045      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <HAL_DMA_Abort+0x44c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d040      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2a      	ldr	r2, [pc, #168]	; (8005018 <HAL_DMA_Abort+0x450>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d03b      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a29      	ldr	r2, [pc, #164]	; (800501c <HAL_DMA_Abort+0x454>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d036      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a27      	ldr	r2, [pc, #156]	; (8005020 <HAL_DMA_Abort+0x458>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d031      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a26      	ldr	r2, [pc, #152]	; (8005024 <HAL_DMA_Abort+0x45c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d02c      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a24      	ldr	r2, [pc, #144]	; (8005028 <HAL_DMA_Abort+0x460>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d027      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a23      	ldr	r2, [pc, #140]	; (800502c <HAL_DMA_Abort+0x464>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d022      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a21      	ldr	r2, [pc, #132]	; (8005030 <HAL_DMA_Abort+0x468>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01d      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a20      	ldr	r2, [pc, #128]	; (8005034 <HAL_DMA_Abort+0x46c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d018      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_DMA_Abort+0x470>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1d      	ldr	r2, [pc, #116]	; (800503c <HAL_DMA_Abort+0x474>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00e      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <HAL_DMA_Abort+0x478>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d009      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1a      	ldr	r2, [pc, #104]	; (8005044 <HAL_DMA_Abort+0x47c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d004      	beq.n	8004fea <HAL_DMA_Abort+0x422>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a18      	ldr	r2, [pc, #96]	; (8005048 <HAL_DMA_Abort+0x480>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d101      	bne.n	8004fee <HAL_DMA_Abort+0x426>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <HAL_DMA_Abort+0x428>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02b      	beq.n	800504c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	223f      	movs	r2, #63	; 0x3f
 8005004:	409a      	lsls	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	609a      	str	r2, [r3, #8]
 800500a:	e02a      	b.n	8005062 <HAL_DMA_Abort+0x49a>
 800500c:	40020010 	.word	0x40020010
 8005010:	40020028 	.word	0x40020028
 8005014:	40020040 	.word	0x40020040
 8005018:	40020058 	.word	0x40020058
 800501c:	40020070 	.word	0x40020070
 8005020:	40020088 	.word	0x40020088
 8005024:	400200a0 	.word	0x400200a0
 8005028:	400200b8 	.word	0x400200b8
 800502c:	40020410 	.word	0x40020410
 8005030:	40020428 	.word	0x40020428
 8005034:	40020440 	.word	0x40020440
 8005038:	40020458 	.word	0x40020458
 800503c:	40020470 	.word	0x40020470
 8005040:	40020488 	.word	0x40020488
 8005044:	400204a0 	.word	0x400204a0
 8005048:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	2201      	movs	r2, #1
 800505c:	409a      	lsls	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a4f      	ldr	r2, [pc, #316]	; (80051a4 <HAL_DMA_Abort+0x5dc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d072      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a4d      	ldr	r2, [pc, #308]	; (80051a8 <HAL_DMA_Abort+0x5e0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d06d      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a4c      	ldr	r2, [pc, #304]	; (80051ac <HAL_DMA_Abort+0x5e4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d068      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a4a      	ldr	r2, [pc, #296]	; (80051b0 <HAL_DMA_Abort+0x5e8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d063      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a49      	ldr	r2, [pc, #292]	; (80051b4 <HAL_DMA_Abort+0x5ec>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d05e      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a47      	ldr	r2, [pc, #284]	; (80051b8 <HAL_DMA_Abort+0x5f0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d059      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a46      	ldr	r2, [pc, #280]	; (80051bc <HAL_DMA_Abort+0x5f4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d054      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a44      	ldr	r2, [pc, #272]	; (80051c0 <HAL_DMA_Abort+0x5f8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d04f      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a43      	ldr	r2, [pc, #268]	; (80051c4 <HAL_DMA_Abort+0x5fc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d04a      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a41      	ldr	r2, [pc, #260]	; (80051c8 <HAL_DMA_Abort+0x600>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d045      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a40      	ldr	r2, [pc, #256]	; (80051cc <HAL_DMA_Abort+0x604>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d040      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a3e      	ldr	r2, [pc, #248]	; (80051d0 <HAL_DMA_Abort+0x608>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d03b      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a3d      	ldr	r2, [pc, #244]	; (80051d4 <HAL_DMA_Abort+0x60c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d036      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a3b      	ldr	r2, [pc, #236]	; (80051d8 <HAL_DMA_Abort+0x610>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d031      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a3a      	ldr	r2, [pc, #232]	; (80051dc <HAL_DMA_Abort+0x614>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d02c      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a38      	ldr	r2, [pc, #224]	; (80051e0 <HAL_DMA_Abort+0x618>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d027      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a37      	ldr	r2, [pc, #220]	; (80051e4 <HAL_DMA_Abort+0x61c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d022      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a35      	ldr	r2, [pc, #212]	; (80051e8 <HAL_DMA_Abort+0x620>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01d      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a34      	ldr	r2, [pc, #208]	; (80051ec <HAL_DMA_Abort+0x624>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d018      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a32      	ldr	r2, [pc, #200]	; (80051f0 <HAL_DMA_Abort+0x628>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a31      	ldr	r2, [pc, #196]	; (80051f4 <HAL_DMA_Abort+0x62c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00e      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2f      	ldr	r2, [pc, #188]	; (80051f8 <HAL_DMA_Abort+0x630>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d009      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2e      	ldr	r2, [pc, #184]	; (80051fc <HAL_DMA_Abort+0x634>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <HAL_DMA_Abort+0x58a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <HAL_DMA_Abort+0x638>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d101      	bne.n	8005156 <HAL_DMA_Abort+0x58e>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <HAL_DMA_Abort+0x590>
 8005156:	2300      	movs	r3, #0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d015      	beq.n	8005188 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005164:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005186:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40020010 	.word	0x40020010
 80051a8:	40020028 	.word	0x40020028
 80051ac:	40020040 	.word	0x40020040
 80051b0:	40020058 	.word	0x40020058
 80051b4:	40020070 	.word	0x40020070
 80051b8:	40020088 	.word	0x40020088
 80051bc:	400200a0 	.word	0x400200a0
 80051c0:	400200b8 	.word	0x400200b8
 80051c4:	40020410 	.word	0x40020410
 80051c8:	40020428 	.word	0x40020428
 80051cc:	40020440 	.word	0x40020440
 80051d0:	40020458 	.word	0x40020458
 80051d4:	40020470 	.word	0x40020470
 80051d8:	40020488 	.word	0x40020488
 80051dc:	400204a0 	.word	0x400204a0
 80051e0:	400204b8 	.word	0x400204b8
 80051e4:	58025408 	.word	0x58025408
 80051e8:	5802541c 	.word	0x5802541c
 80051ec:	58025430 	.word	0x58025430
 80051f0:	58025444 	.word	0x58025444
 80051f4:	58025458 	.word	0x58025458
 80051f8:	5802546c 	.word	0x5802546c
 80051fc:	58025480 	.word	0x58025480
 8005200:	58025494 	.word	0x58025494

08005204 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e237      	b.n	8005686 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d004      	beq.n	800522c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2280      	movs	r2, #128	; 0x80
 8005226:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e22c      	b.n	8005686 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a5c      	ldr	r2, [pc, #368]	; (80053a4 <HAL_DMA_Abort_IT+0x1a0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d04a      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a5b      	ldr	r2, [pc, #364]	; (80053a8 <HAL_DMA_Abort_IT+0x1a4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d045      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a59      	ldr	r2, [pc, #356]	; (80053ac <HAL_DMA_Abort_IT+0x1a8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d040      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a58      	ldr	r2, [pc, #352]	; (80053b0 <HAL_DMA_Abort_IT+0x1ac>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d03b      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a56      	ldr	r2, [pc, #344]	; (80053b4 <HAL_DMA_Abort_IT+0x1b0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d036      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a55      	ldr	r2, [pc, #340]	; (80053b8 <HAL_DMA_Abort_IT+0x1b4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d031      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a53      	ldr	r2, [pc, #332]	; (80053bc <HAL_DMA_Abort_IT+0x1b8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d02c      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a52      	ldr	r2, [pc, #328]	; (80053c0 <HAL_DMA_Abort_IT+0x1bc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d027      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a50      	ldr	r2, [pc, #320]	; (80053c4 <HAL_DMA_Abort_IT+0x1c0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d022      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a4f      	ldr	r2, [pc, #316]	; (80053c8 <HAL_DMA_Abort_IT+0x1c4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d01d      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a4d      	ldr	r2, [pc, #308]	; (80053cc <HAL_DMA_Abort_IT+0x1c8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d018      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a4c      	ldr	r2, [pc, #304]	; (80053d0 <HAL_DMA_Abort_IT+0x1cc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d013      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a4a      	ldr	r2, [pc, #296]	; (80053d4 <HAL_DMA_Abort_IT+0x1d0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00e      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a49      	ldr	r2, [pc, #292]	; (80053d8 <HAL_DMA_Abort_IT+0x1d4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d009      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a47      	ldr	r2, [pc, #284]	; (80053dc <HAL_DMA_Abort_IT+0x1d8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_DMA_Abort_IT+0xc8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a46      	ldr	r2, [pc, #280]	; (80053e0 <HAL_DMA_Abort_IT+0x1dc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d101      	bne.n	80052d0 <HAL_DMA_Abort_IT+0xcc>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <HAL_DMA_Abort_IT+0xce>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8086 	beq.w	80053e4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2204      	movs	r2, #4
 80052dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2f      	ldr	r2, [pc, #188]	; (80053a4 <HAL_DMA_Abort_IT+0x1a0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d04a      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2e      	ldr	r2, [pc, #184]	; (80053a8 <HAL_DMA_Abort_IT+0x1a4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d045      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2c      	ldr	r2, [pc, #176]	; (80053ac <HAL_DMA_Abort_IT+0x1a8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d040      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2b      	ldr	r2, [pc, #172]	; (80053b0 <HAL_DMA_Abort_IT+0x1ac>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d03b      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a29      	ldr	r2, [pc, #164]	; (80053b4 <HAL_DMA_Abort_IT+0x1b0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d036      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a28      	ldr	r2, [pc, #160]	; (80053b8 <HAL_DMA_Abort_IT+0x1b4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d031      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a26      	ldr	r2, [pc, #152]	; (80053bc <HAL_DMA_Abort_IT+0x1b8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d02c      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <HAL_DMA_Abort_IT+0x1bc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d027      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a23      	ldr	r2, [pc, #140]	; (80053c4 <HAL_DMA_Abort_IT+0x1c0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d022      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <HAL_DMA_Abort_IT+0x1c4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d01d      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a20      	ldr	r2, [pc, #128]	; (80053cc <HAL_DMA_Abort_IT+0x1c8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d018      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <HAL_DMA_Abort_IT+0x1cc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <HAL_DMA_Abort_IT+0x1d0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00e      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <HAL_DMA_Abort_IT+0x1d4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1a      	ldr	r2, [pc, #104]	; (80053dc <HAL_DMA_Abort_IT+0x1d8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_DMA_Abort_IT+0x17c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <HAL_DMA_Abort_IT+0x1dc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d108      	bne.n	8005392 <HAL_DMA_Abort_IT+0x18e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e178      	b.n	8005684 <HAL_DMA_Abort_IT+0x480>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e16f      	b.n	8005684 <HAL_DMA_Abort_IT+0x480>
 80053a4:	40020010 	.word	0x40020010
 80053a8:	40020028 	.word	0x40020028
 80053ac:	40020040 	.word	0x40020040
 80053b0:	40020058 	.word	0x40020058
 80053b4:	40020070 	.word	0x40020070
 80053b8:	40020088 	.word	0x40020088
 80053bc:	400200a0 	.word	0x400200a0
 80053c0:	400200b8 	.word	0x400200b8
 80053c4:	40020410 	.word	0x40020410
 80053c8:	40020428 	.word	0x40020428
 80053cc:	40020440 	.word	0x40020440
 80053d0:	40020458 	.word	0x40020458
 80053d4:	40020470 	.word	0x40020470
 80053d8:	40020488 	.word	0x40020488
 80053dc:	400204a0 	.word	0x400204a0
 80053e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 020e 	bic.w	r2, r2, #14
 80053f2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a6c      	ldr	r2, [pc, #432]	; (80055ac <HAL_DMA_Abort_IT+0x3a8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d04a      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a6b      	ldr	r2, [pc, #428]	; (80055b0 <HAL_DMA_Abort_IT+0x3ac>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d045      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a69      	ldr	r2, [pc, #420]	; (80055b4 <HAL_DMA_Abort_IT+0x3b0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d040      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a68      	ldr	r2, [pc, #416]	; (80055b8 <HAL_DMA_Abort_IT+0x3b4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d03b      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a66      	ldr	r2, [pc, #408]	; (80055bc <HAL_DMA_Abort_IT+0x3b8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d036      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a65      	ldr	r2, [pc, #404]	; (80055c0 <HAL_DMA_Abort_IT+0x3bc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d031      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a63      	ldr	r2, [pc, #396]	; (80055c4 <HAL_DMA_Abort_IT+0x3c0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d02c      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a62      	ldr	r2, [pc, #392]	; (80055c8 <HAL_DMA_Abort_IT+0x3c4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d027      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a60      	ldr	r2, [pc, #384]	; (80055cc <HAL_DMA_Abort_IT+0x3c8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d022      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a5f      	ldr	r2, [pc, #380]	; (80055d0 <HAL_DMA_Abort_IT+0x3cc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d01d      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a5d      	ldr	r2, [pc, #372]	; (80055d4 <HAL_DMA_Abort_IT+0x3d0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d018      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a5c      	ldr	r2, [pc, #368]	; (80055d8 <HAL_DMA_Abort_IT+0x3d4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a5a      	ldr	r2, [pc, #360]	; (80055dc <HAL_DMA_Abort_IT+0x3d8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00e      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a59      	ldr	r2, [pc, #356]	; (80055e0 <HAL_DMA_Abort_IT+0x3dc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a57      	ldr	r2, [pc, #348]	; (80055e4 <HAL_DMA_Abort_IT+0x3e0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_DMA_Abort_IT+0x290>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a56      	ldr	r2, [pc, #344]	; (80055e8 <HAL_DMA_Abort_IT+0x3e4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d108      	bne.n	80054a6 <HAL_DMA_Abort_IT+0x2a2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0201 	bic.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e007      	b.n	80054b6 <HAL_DMA_Abort_IT+0x2b2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a3c      	ldr	r2, [pc, #240]	; (80055ac <HAL_DMA_Abort_IT+0x3a8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d072      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a3a      	ldr	r2, [pc, #232]	; (80055b0 <HAL_DMA_Abort_IT+0x3ac>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d06d      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a39      	ldr	r2, [pc, #228]	; (80055b4 <HAL_DMA_Abort_IT+0x3b0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d068      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a37      	ldr	r2, [pc, #220]	; (80055b8 <HAL_DMA_Abort_IT+0x3b4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d063      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a36      	ldr	r2, [pc, #216]	; (80055bc <HAL_DMA_Abort_IT+0x3b8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d05e      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a34      	ldr	r2, [pc, #208]	; (80055c0 <HAL_DMA_Abort_IT+0x3bc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d059      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a33      	ldr	r2, [pc, #204]	; (80055c4 <HAL_DMA_Abort_IT+0x3c0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d054      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a31      	ldr	r2, [pc, #196]	; (80055c8 <HAL_DMA_Abort_IT+0x3c4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d04f      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a30      	ldr	r2, [pc, #192]	; (80055cc <HAL_DMA_Abort_IT+0x3c8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d04a      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2e      	ldr	r2, [pc, #184]	; (80055d0 <HAL_DMA_Abort_IT+0x3cc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d045      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2d      	ldr	r2, [pc, #180]	; (80055d4 <HAL_DMA_Abort_IT+0x3d0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d040      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2b      	ldr	r2, [pc, #172]	; (80055d8 <HAL_DMA_Abort_IT+0x3d4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d03b      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <HAL_DMA_Abort_IT+0x3d8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d036      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <HAL_DMA_Abort_IT+0x3dc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d031      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a27      	ldr	r2, [pc, #156]	; (80055e4 <HAL_DMA_Abort_IT+0x3e0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d02c      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <HAL_DMA_Abort_IT+0x3e4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d027      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a24      	ldr	r2, [pc, #144]	; (80055ec <HAL_DMA_Abort_IT+0x3e8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d022      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a22      	ldr	r2, [pc, #136]	; (80055f0 <HAL_DMA_Abort_IT+0x3ec>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01d      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a21      	ldr	r2, [pc, #132]	; (80055f4 <HAL_DMA_Abort_IT+0x3f0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d018      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <HAL_DMA_Abort_IT+0x3f4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <HAL_DMA_Abort_IT+0x3f8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00e      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1c      	ldr	r2, [pc, #112]	; (8005600 <HAL_DMA_Abort_IT+0x3fc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d009      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <HAL_DMA_Abort_IT+0x400>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <HAL_DMA_Abort_IT+0x3a2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a19      	ldr	r2, [pc, #100]	; (8005608 <HAL_DMA_Abort_IT+0x404>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d132      	bne.n	800560c <HAL_DMA_Abort_IT+0x408>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e031      	b.n	800560e <HAL_DMA_Abort_IT+0x40a>
 80055aa:	bf00      	nop
 80055ac:	40020010 	.word	0x40020010
 80055b0:	40020028 	.word	0x40020028
 80055b4:	40020040 	.word	0x40020040
 80055b8:	40020058 	.word	0x40020058
 80055bc:	40020070 	.word	0x40020070
 80055c0:	40020088 	.word	0x40020088
 80055c4:	400200a0 	.word	0x400200a0
 80055c8:	400200b8 	.word	0x400200b8
 80055cc:	40020410 	.word	0x40020410
 80055d0:	40020428 	.word	0x40020428
 80055d4:	40020440 	.word	0x40020440
 80055d8:	40020458 	.word	0x40020458
 80055dc:	40020470 	.word	0x40020470
 80055e0:	40020488 	.word	0x40020488
 80055e4:	400204a0 	.word	0x400204a0
 80055e8:	400204b8 	.word	0x400204b8
 80055ec:	58025408 	.word	0x58025408
 80055f0:	5802541c 	.word	0x5802541c
 80055f4:	58025430 	.word	0x58025430
 80055f8:	58025444 	.word	0x58025444
 80055fc:	58025458 	.word	0x58025458
 8005600:	5802546c 	.word	0x5802546c
 8005604:	58025480 	.word	0x58025480
 8005608:	58025494 	.word	0x58025494
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d028      	beq.n	8005664 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005620:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005626:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	2201      	movs	r2, #1
 8005632:	409a      	lsls	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005640:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00c      	beq.n	8005664 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005658:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005662:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop

08005690 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800569c:	4b67      	ldr	r3, [pc, #412]	; (800583c <HAL_DMA_IRQHandler+0x1ac>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a67      	ldr	r2, [pc, #412]	; (8005840 <HAL_DMA_IRQHandler+0x1b0>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	0a9b      	lsrs	r3, r3, #10
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a5f      	ldr	r2, [pc, #380]	; (8005844 <HAL_DMA_IRQHandler+0x1b4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d04a      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a5d      	ldr	r2, [pc, #372]	; (8005848 <HAL_DMA_IRQHandler+0x1b8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d045      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a5c      	ldr	r2, [pc, #368]	; (800584c <HAL_DMA_IRQHandler+0x1bc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d040      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a5a      	ldr	r2, [pc, #360]	; (8005850 <HAL_DMA_IRQHandler+0x1c0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d03b      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a59      	ldr	r2, [pc, #356]	; (8005854 <HAL_DMA_IRQHandler+0x1c4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d036      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a57      	ldr	r2, [pc, #348]	; (8005858 <HAL_DMA_IRQHandler+0x1c8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d031      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a56      	ldr	r2, [pc, #344]	; (800585c <HAL_DMA_IRQHandler+0x1cc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d02c      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a54      	ldr	r2, [pc, #336]	; (8005860 <HAL_DMA_IRQHandler+0x1d0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d027      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a53      	ldr	r2, [pc, #332]	; (8005864 <HAL_DMA_IRQHandler+0x1d4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d022      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a51      	ldr	r2, [pc, #324]	; (8005868 <HAL_DMA_IRQHandler+0x1d8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01d      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a50      	ldr	r2, [pc, #320]	; (800586c <HAL_DMA_IRQHandler+0x1dc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d018      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a4e      	ldr	r2, [pc, #312]	; (8005870 <HAL_DMA_IRQHandler+0x1e0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a4d      	ldr	r2, [pc, #308]	; (8005874 <HAL_DMA_IRQHandler+0x1e4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a4b      	ldr	r2, [pc, #300]	; (8005878 <HAL_DMA_IRQHandler+0x1e8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a4a      	ldr	r2, [pc, #296]	; (800587c <HAL_DMA_IRQHandler+0x1ec>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_DMA_IRQHandler+0xd2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a48      	ldr	r2, [pc, #288]	; (8005880 <HAL_DMA_IRQHandler+0x1f0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d101      	bne.n	8005766 <HAL_DMA_IRQHandler+0xd6>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <HAL_DMA_IRQHandler+0xd8>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 842b 	beq.w	8005fc4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2208      	movs	r2, #8
 8005778:	409a      	lsls	r2, r3
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 80a2 	beq.w	80058c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a2e      	ldr	r2, [pc, #184]	; (8005844 <HAL_DMA_IRQHandler+0x1b4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d04a      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2d      	ldr	r2, [pc, #180]	; (8005848 <HAL_DMA_IRQHandler+0x1b8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d045      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a2b      	ldr	r2, [pc, #172]	; (800584c <HAL_DMA_IRQHandler+0x1bc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d040      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2a      	ldr	r2, [pc, #168]	; (8005850 <HAL_DMA_IRQHandler+0x1c0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d03b      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a28      	ldr	r2, [pc, #160]	; (8005854 <HAL_DMA_IRQHandler+0x1c4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d036      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a27      	ldr	r2, [pc, #156]	; (8005858 <HAL_DMA_IRQHandler+0x1c8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d031      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a25      	ldr	r2, [pc, #148]	; (800585c <HAL_DMA_IRQHandler+0x1cc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d02c      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a24      	ldr	r2, [pc, #144]	; (8005860 <HAL_DMA_IRQHandler+0x1d0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d027      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a22      	ldr	r2, [pc, #136]	; (8005864 <HAL_DMA_IRQHandler+0x1d4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d022      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a21      	ldr	r2, [pc, #132]	; (8005868 <HAL_DMA_IRQHandler+0x1d8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d01d      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1f      	ldr	r2, [pc, #124]	; (800586c <HAL_DMA_IRQHandler+0x1dc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d018      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <HAL_DMA_IRQHandler+0x1e0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d013      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1c      	ldr	r2, [pc, #112]	; (8005874 <HAL_DMA_IRQHandler+0x1e4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00e      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <HAL_DMA_IRQHandler+0x1e8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d009      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a19      	ldr	r2, [pc, #100]	; (800587c <HAL_DMA_IRQHandler+0x1ec>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d004      	beq.n	8005824 <HAL_DMA_IRQHandler+0x194>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a18      	ldr	r2, [pc, #96]	; (8005880 <HAL_DMA_IRQHandler+0x1f0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d12f      	bne.n	8005884 <HAL_DMA_IRQHandler+0x1f4>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	bf14      	ite	ne
 8005832:	2301      	movne	r3, #1
 8005834:	2300      	moveq	r3, #0
 8005836:	b2db      	uxtb	r3, r3
 8005838:	e02e      	b.n	8005898 <HAL_DMA_IRQHandler+0x208>
 800583a:	bf00      	nop
 800583c:	2400000c 	.word	0x2400000c
 8005840:	1b4e81b5 	.word	0x1b4e81b5
 8005844:	40020010 	.word	0x40020010
 8005848:	40020028 	.word	0x40020028
 800584c:	40020040 	.word	0x40020040
 8005850:	40020058 	.word	0x40020058
 8005854:	40020070 	.word	0x40020070
 8005858:	40020088 	.word	0x40020088
 800585c:	400200a0 	.word	0x400200a0
 8005860:	400200b8 	.word	0x400200b8
 8005864:	40020410 	.word	0x40020410
 8005868:	40020428 	.word	0x40020428
 800586c:	40020440 	.word	0x40020440
 8005870:	40020458 	.word	0x40020458
 8005874:	40020470 	.word	0x40020470
 8005878:	40020488 	.word	0x40020488
 800587c:	400204a0 	.word	0x400204a0
 8005880:	400204b8 	.word	0x400204b8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	bf14      	ite	ne
 8005892:	2301      	movne	r3, #1
 8005894:	2300      	moveq	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d015      	beq.n	80058c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0204 	bic.w	r2, r2, #4
 80058aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2208      	movs	r2, #8
 80058b6:	409a      	lsls	r2, r3
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c0:	f043 0201 	orr.w	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	fa22 f303 	lsr.w	r3, r2, r3
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d06e      	beq.n	80059bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a69      	ldr	r2, [pc, #420]	; (8005a88 <HAL_DMA_IRQHandler+0x3f8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d04a      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a67      	ldr	r2, [pc, #412]	; (8005a8c <HAL_DMA_IRQHandler+0x3fc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d045      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a66      	ldr	r2, [pc, #408]	; (8005a90 <HAL_DMA_IRQHandler+0x400>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d040      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a64      	ldr	r2, [pc, #400]	; (8005a94 <HAL_DMA_IRQHandler+0x404>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d03b      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a63      	ldr	r2, [pc, #396]	; (8005a98 <HAL_DMA_IRQHandler+0x408>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d036      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a61      	ldr	r2, [pc, #388]	; (8005a9c <HAL_DMA_IRQHandler+0x40c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d031      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a60      	ldr	r2, [pc, #384]	; (8005aa0 <HAL_DMA_IRQHandler+0x410>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d02c      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a5e      	ldr	r2, [pc, #376]	; (8005aa4 <HAL_DMA_IRQHandler+0x414>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d027      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a5d      	ldr	r2, [pc, #372]	; (8005aa8 <HAL_DMA_IRQHandler+0x418>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a5b      	ldr	r2, [pc, #364]	; (8005aac <HAL_DMA_IRQHandler+0x41c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01d      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a5a      	ldr	r2, [pc, #360]	; (8005ab0 <HAL_DMA_IRQHandler+0x420>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d018      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a58      	ldr	r2, [pc, #352]	; (8005ab4 <HAL_DMA_IRQHandler+0x424>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a57      	ldr	r2, [pc, #348]	; (8005ab8 <HAL_DMA_IRQHandler+0x428>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a55      	ldr	r2, [pc, #340]	; (8005abc <HAL_DMA_IRQHandler+0x42c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a54      	ldr	r2, [pc, #336]	; (8005ac0 <HAL_DMA_IRQHandler+0x430>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ee>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a52      	ldr	r2, [pc, #328]	; (8005ac4 <HAL_DMA_IRQHandler+0x434>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d10a      	bne.n	8005994 <HAL_DMA_IRQHandler+0x304>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf14      	ite	ne
 800598c:	2301      	movne	r3, #1
 800598e:	2300      	moveq	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	e003      	b.n	800599c <HAL_DMA_IRQHandler+0x30c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00d      	beq.n	80059bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2201      	movs	r2, #1
 80059aa:	409a      	lsls	r2, r3
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b4:	f043 0202 	orr.w	r2, r3, #2
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	2204      	movs	r2, #4
 80059c6:	409a      	lsls	r2, r3
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 808f 	beq.w	8005af0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a2c      	ldr	r2, [pc, #176]	; (8005a88 <HAL_DMA_IRQHandler+0x3f8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d04a      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a2a      	ldr	r2, [pc, #168]	; (8005a8c <HAL_DMA_IRQHandler+0x3fc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d045      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a29      	ldr	r2, [pc, #164]	; (8005a90 <HAL_DMA_IRQHandler+0x400>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d040      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <HAL_DMA_IRQHandler+0x404>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d03b      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a26      	ldr	r2, [pc, #152]	; (8005a98 <HAL_DMA_IRQHandler+0x408>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d036      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a24      	ldr	r2, [pc, #144]	; (8005a9c <HAL_DMA_IRQHandler+0x40c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d031      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a23      	ldr	r2, [pc, #140]	; (8005aa0 <HAL_DMA_IRQHandler+0x410>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d02c      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a21      	ldr	r2, [pc, #132]	; (8005aa4 <HAL_DMA_IRQHandler+0x414>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d027      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a20      	ldr	r2, [pc, #128]	; (8005aa8 <HAL_DMA_IRQHandler+0x418>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d022      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <HAL_DMA_IRQHandler+0x41c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d01d      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <HAL_DMA_IRQHandler+0x420>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d018      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <HAL_DMA_IRQHandler+0x424>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1a      	ldr	r2, [pc, #104]	; (8005ab8 <HAL_DMA_IRQHandler+0x428>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00e      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a18      	ldr	r2, [pc, #96]	; (8005abc <HAL_DMA_IRQHandler+0x42c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d009      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a17      	ldr	r2, [pc, #92]	; (8005ac0 <HAL_DMA_IRQHandler+0x430>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3e2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <HAL_DMA_IRQHandler+0x434>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d12a      	bne.n	8005ac8 <HAL_DMA_IRQHandler+0x438>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf14      	ite	ne
 8005a80:	2301      	movne	r3, #1
 8005a82:	2300      	moveq	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e023      	b.n	8005ad0 <HAL_DMA_IRQHandler+0x440>
 8005a88:	40020010 	.word	0x40020010
 8005a8c:	40020028 	.word	0x40020028
 8005a90:	40020040 	.word	0x40020040
 8005a94:	40020058 	.word	0x40020058
 8005a98:	40020070 	.word	0x40020070
 8005a9c:	40020088 	.word	0x40020088
 8005aa0:	400200a0 	.word	0x400200a0
 8005aa4:	400200b8 	.word	0x400200b8
 8005aa8:	40020410 	.word	0x40020410
 8005aac:	40020428 	.word	0x40020428
 8005ab0:	40020440 	.word	0x40020440
 8005ab4:	40020458 	.word	0x40020458
 8005ab8:	40020470 	.word	0x40020470
 8005abc:	40020488 	.word	0x40020488
 8005ac0:	400204a0 	.word	0x400204a0
 8005ac4:	400204b8 	.word	0x400204b8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00d      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	2204      	movs	r2, #4
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae8:	f043 0204 	orr.w	r2, r3, #4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	2210      	movs	r2, #16
 8005afa:	409a      	lsls	r2, r3
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 80a6 	beq.w	8005c52 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a85      	ldr	r2, [pc, #532]	; (8005d20 <HAL_DMA_IRQHandler+0x690>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d04a      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a83      	ldr	r2, [pc, #524]	; (8005d24 <HAL_DMA_IRQHandler+0x694>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d045      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a82      	ldr	r2, [pc, #520]	; (8005d28 <HAL_DMA_IRQHandler+0x698>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d040      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a80      	ldr	r2, [pc, #512]	; (8005d2c <HAL_DMA_IRQHandler+0x69c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d03b      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a7f      	ldr	r2, [pc, #508]	; (8005d30 <HAL_DMA_IRQHandler+0x6a0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d036      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a7d      	ldr	r2, [pc, #500]	; (8005d34 <HAL_DMA_IRQHandler+0x6a4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d031      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a7c      	ldr	r2, [pc, #496]	; (8005d38 <HAL_DMA_IRQHandler+0x6a8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d02c      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a7a      	ldr	r2, [pc, #488]	; (8005d3c <HAL_DMA_IRQHandler+0x6ac>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d027      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a79      	ldr	r2, [pc, #484]	; (8005d40 <HAL_DMA_IRQHandler+0x6b0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d022      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a77      	ldr	r2, [pc, #476]	; (8005d44 <HAL_DMA_IRQHandler+0x6b4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01d      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a76      	ldr	r2, [pc, #472]	; (8005d48 <HAL_DMA_IRQHandler+0x6b8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d018      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a74      	ldr	r2, [pc, #464]	; (8005d4c <HAL_DMA_IRQHandler+0x6bc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a73      	ldr	r2, [pc, #460]	; (8005d50 <HAL_DMA_IRQHandler+0x6c0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00e      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a71      	ldr	r2, [pc, #452]	; (8005d54 <HAL_DMA_IRQHandler+0x6c4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d009      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a70      	ldr	r2, [pc, #448]	; (8005d58 <HAL_DMA_IRQHandler+0x6c8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x516>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a6e      	ldr	r2, [pc, #440]	; (8005d5c <HAL_DMA_IRQHandler+0x6cc>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d10a      	bne.n	8005bbc <HAL_DMA_IRQHandler+0x52c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf14      	ite	ne
 8005bb4:	2301      	movne	r3, #1
 8005bb6:	2300      	moveq	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	e009      	b.n	8005bd0 <HAL_DMA_IRQHandler+0x540>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bf14      	ite	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d03e      	beq.n	8005c52 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd8:	f003 031f 	and.w	r3, r3, #31
 8005bdc:	2210      	movs	r2, #16
 8005bde:	409a      	lsls	r2, r3
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d018      	beq.n	8005c24 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d108      	bne.n	8005c12 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d024      	beq.n	8005c52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
 8005c10:	e01f      	b.n	8005c52 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01b      	beq.n	8005c52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
 8005c22:	e016      	b.n	8005c52 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d107      	bne.n	8005c42 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0208 	bic.w	r2, r2, #8
 8005c40:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	409a      	lsls	r2, r3
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8110 	beq.w	8005e88 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2c      	ldr	r2, [pc, #176]	; (8005d20 <HAL_DMA_IRQHandler+0x690>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d04a      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2b      	ldr	r2, [pc, #172]	; (8005d24 <HAL_DMA_IRQHandler+0x694>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d045      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a29      	ldr	r2, [pc, #164]	; (8005d28 <HAL_DMA_IRQHandler+0x698>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d040      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a28      	ldr	r2, [pc, #160]	; (8005d2c <HAL_DMA_IRQHandler+0x69c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d03b      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a26      	ldr	r2, [pc, #152]	; (8005d30 <HAL_DMA_IRQHandler+0x6a0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d036      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a25      	ldr	r2, [pc, #148]	; (8005d34 <HAL_DMA_IRQHandler+0x6a4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d031      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a23      	ldr	r2, [pc, #140]	; (8005d38 <HAL_DMA_IRQHandler+0x6a8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d02c      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a22      	ldr	r2, [pc, #136]	; (8005d3c <HAL_DMA_IRQHandler+0x6ac>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d027      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a20      	ldr	r2, [pc, #128]	; (8005d40 <HAL_DMA_IRQHandler+0x6b0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d022      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1f      	ldr	r2, [pc, #124]	; (8005d44 <HAL_DMA_IRQHandler+0x6b4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d01d      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1d      	ldr	r2, [pc, #116]	; (8005d48 <HAL_DMA_IRQHandler+0x6b8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d018      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1c      	ldr	r2, [pc, #112]	; (8005d4c <HAL_DMA_IRQHandler+0x6bc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d013      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1a      	ldr	r2, [pc, #104]	; (8005d50 <HAL_DMA_IRQHandler+0x6c0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00e      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a19      	ldr	r2, [pc, #100]	; (8005d54 <HAL_DMA_IRQHandler+0x6c4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d009      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <HAL_DMA_IRQHandler+0x6c8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x678>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <HAL_DMA_IRQHandler+0x6cc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d12b      	bne.n	8005d60 <HAL_DMA_IRQHandler+0x6d0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	bf14      	ite	ne
 8005d16:	2301      	movne	r3, #1
 8005d18:	2300      	moveq	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	e02a      	b.n	8005d74 <HAL_DMA_IRQHandler+0x6e4>
 8005d1e:	bf00      	nop
 8005d20:	40020010 	.word	0x40020010
 8005d24:	40020028 	.word	0x40020028
 8005d28:	40020040 	.word	0x40020040
 8005d2c:	40020058 	.word	0x40020058
 8005d30:	40020070 	.word	0x40020070
 8005d34:	40020088 	.word	0x40020088
 8005d38:	400200a0 	.word	0x400200a0
 8005d3c:	400200b8 	.word	0x400200b8
 8005d40:	40020410 	.word	0x40020410
 8005d44:	40020428 	.word	0x40020428
 8005d48:	40020440 	.word	0x40020440
 8005d4c:	40020458 	.word	0x40020458
 8005d50:	40020470 	.word	0x40020470
 8005d54:	40020488 	.word	0x40020488
 8005d58:	400204a0 	.word	0x400204a0
 8005d5c:	400204b8 	.word	0x400204b8
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bf14      	ite	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	2300      	moveq	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8087 	beq.w	8005e88 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7e:	f003 031f 	and.w	r3, r3, #31
 8005d82:	2220      	movs	r2, #32
 8005d84:	409a      	lsls	r2, r3
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d139      	bne.n	8005e0a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0216 	bic.w	r2, r2, #22
 8005da4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695a      	ldr	r2, [r3, #20]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005db4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d103      	bne.n	8005dc6 <HAL_DMA_IRQHandler+0x736>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0208 	bic.w	r2, r2, #8
 8005dd4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	223f      	movs	r2, #63	; 0x3f
 8005de0:	409a      	lsls	r2, r3
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8382 	beq.w	8006504 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
          }
          return;
 8005e08:	e37c      	b.n	8006504 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d018      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d108      	bne.n	8005e38 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d02c      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	4798      	blx	r3
 8005e36:	e027      	b.n	8005e88 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d023      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
 8005e48:	e01e      	b.n	8005e88 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10f      	bne.n	8005e78 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0210 	bic.w	r2, r2, #16
 8005e66:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 833e 	beq.w	800650e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8088 	beq.w	8005fb0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a89      	ldr	r2, [pc, #548]	; (80060d4 <HAL_DMA_IRQHandler+0xa44>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d04a      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a88      	ldr	r2, [pc, #544]	; (80060d8 <HAL_DMA_IRQHandler+0xa48>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d045      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a86      	ldr	r2, [pc, #536]	; (80060dc <HAL_DMA_IRQHandler+0xa4c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d040      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a85      	ldr	r2, [pc, #532]	; (80060e0 <HAL_DMA_IRQHandler+0xa50>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d03b      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a83      	ldr	r2, [pc, #524]	; (80060e4 <HAL_DMA_IRQHandler+0xa54>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d036      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a82      	ldr	r2, [pc, #520]	; (80060e8 <HAL_DMA_IRQHandler+0xa58>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d031      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a80      	ldr	r2, [pc, #512]	; (80060ec <HAL_DMA_IRQHandler+0xa5c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d02c      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a7f      	ldr	r2, [pc, #508]	; (80060f0 <HAL_DMA_IRQHandler+0xa60>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d027      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a7d      	ldr	r2, [pc, #500]	; (80060f4 <HAL_DMA_IRQHandler+0xa64>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d022      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a7c      	ldr	r2, [pc, #496]	; (80060f8 <HAL_DMA_IRQHandler+0xa68>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d01d      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a7a      	ldr	r2, [pc, #488]	; (80060fc <HAL_DMA_IRQHandler+0xa6c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d018      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a79      	ldr	r2, [pc, #484]	; (8006100 <HAL_DMA_IRQHandler+0xa70>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d013      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a77      	ldr	r2, [pc, #476]	; (8006104 <HAL_DMA_IRQHandler+0xa74>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00e      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a76      	ldr	r2, [pc, #472]	; (8006108 <HAL_DMA_IRQHandler+0xa78>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d009      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a74      	ldr	r2, [pc, #464]	; (800610c <HAL_DMA_IRQHandler+0xa7c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x8b8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a73      	ldr	r2, [pc, #460]	; (8006110 <HAL_DMA_IRQHandler+0xa80>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d108      	bne.n	8005f5a <HAL_DMA_IRQHandler+0x8ca>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	e007      	b.n	8005f6a <HAL_DMA_IRQHandler+0x8da>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0201 	bic.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d307      	bcc.n	8005f86 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1f2      	bne.n	8005f6a <HAL_DMA_IRQHandler+0x8da>
 8005f84:	e000      	b.n	8005f88 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f86:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2203      	movs	r2, #3
 8005f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005f9e:	e003      	b.n	8005fa8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 82aa 	beq.w	800650e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
 8005fc2:	e2a4      	b.n	800650e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a52      	ldr	r2, [pc, #328]	; (8006114 <HAL_DMA_IRQHandler+0xa84>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d04a      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a51      	ldr	r2, [pc, #324]	; (8006118 <HAL_DMA_IRQHandler+0xa88>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d045      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a4f      	ldr	r2, [pc, #316]	; (800611c <HAL_DMA_IRQHandler+0xa8c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d040      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a4e      	ldr	r2, [pc, #312]	; (8006120 <HAL_DMA_IRQHandler+0xa90>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d03b      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a4c      	ldr	r2, [pc, #304]	; (8006124 <HAL_DMA_IRQHandler+0xa94>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d036      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a4b      	ldr	r2, [pc, #300]	; (8006128 <HAL_DMA_IRQHandler+0xa98>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d031      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a49      	ldr	r2, [pc, #292]	; (800612c <HAL_DMA_IRQHandler+0xa9c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02c      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a48      	ldr	r2, [pc, #288]	; (8006130 <HAL_DMA_IRQHandler+0xaa0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d027      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a46      	ldr	r2, [pc, #280]	; (8006134 <HAL_DMA_IRQHandler+0xaa4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d022      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a45      	ldr	r2, [pc, #276]	; (8006138 <HAL_DMA_IRQHandler+0xaa8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d01d      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a43      	ldr	r2, [pc, #268]	; (800613c <HAL_DMA_IRQHandler+0xaac>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d018      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a42      	ldr	r2, [pc, #264]	; (8006140 <HAL_DMA_IRQHandler+0xab0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a40      	ldr	r2, [pc, #256]	; (8006144 <HAL_DMA_IRQHandler+0xab4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a3f      	ldr	r2, [pc, #252]	; (8006148 <HAL_DMA_IRQHandler+0xab8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a3d      	ldr	r2, [pc, #244]	; (800614c <HAL_DMA_IRQHandler+0xabc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_DMA_IRQHandler+0x9d4>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a3c      	ldr	r2, [pc, #240]	; (8006150 <HAL_DMA_IRQHandler+0xac0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d101      	bne.n	8006068 <HAL_DMA_IRQHandler+0x9d8>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <HAL_DMA_IRQHandler+0x9da>
 8006068:	2300      	movs	r3, #0
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 824f 	beq.w	800650e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2204      	movs	r2, #4
 8006082:	409a      	lsls	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4013      	ands	r3, r2
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80dd 	beq.w	8006248 <HAL_DMA_IRQHandler+0xbb8>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80d7 	beq.w	8006248 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609e:	f003 031f 	and.w	r3, r3, #31
 80060a2:	2204      	movs	r2, #4
 80060a4:	409a      	lsls	r2, r3
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d059      	beq.n	8006168 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d14a      	bne.n	8006154 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 8220 	beq.w	8006508 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060d0:	e21a      	b.n	8006508 <HAL_DMA_IRQHandler+0xe78>
 80060d2:	bf00      	nop
 80060d4:	40020010 	.word	0x40020010
 80060d8:	40020028 	.word	0x40020028
 80060dc:	40020040 	.word	0x40020040
 80060e0:	40020058 	.word	0x40020058
 80060e4:	40020070 	.word	0x40020070
 80060e8:	40020088 	.word	0x40020088
 80060ec:	400200a0 	.word	0x400200a0
 80060f0:	400200b8 	.word	0x400200b8
 80060f4:	40020410 	.word	0x40020410
 80060f8:	40020428 	.word	0x40020428
 80060fc:	40020440 	.word	0x40020440
 8006100:	40020458 	.word	0x40020458
 8006104:	40020470 	.word	0x40020470
 8006108:	40020488 	.word	0x40020488
 800610c:	400204a0 	.word	0x400204a0
 8006110:	400204b8 	.word	0x400204b8
 8006114:	48022c08 	.word	0x48022c08
 8006118:	48022c1c 	.word	0x48022c1c
 800611c:	48022c30 	.word	0x48022c30
 8006120:	48022c44 	.word	0x48022c44
 8006124:	48022c58 	.word	0x48022c58
 8006128:	48022c6c 	.word	0x48022c6c
 800612c:	48022c80 	.word	0x48022c80
 8006130:	48022c94 	.word	0x48022c94
 8006134:	58025408 	.word	0x58025408
 8006138:	5802541c 	.word	0x5802541c
 800613c:	58025430 	.word	0x58025430
 8006140:	58025444 	.word	0x58025444
 8006144:	58025458 	.word	0x58025458
 8006148:	5802546c 	.word	0x5802546c
 800614c:	58025480 	.word	0x58025480
 8006150:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 81d5 	beq.w	8006508 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006166:	e1cf      	b.n	8006508 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d160      	bne.n	8006234 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a7f      	ldr	r2, [pc, #508]	; (8006374 <HAL_DMA_IRQHandler+0xce4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d04a      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a7d      	ldr	r2, [pc, #500]	; (8006378 <HAL_DMA_IRQHandler+0xce8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d045      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a7c      	ldr	r2, [pc, #496]	; (800637c <HAL_DMA_IRQHandler+0xcec>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d040      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a7a      	ldr	r2, [pc, #488]	; (8006380 <HAL_DMA_IRQHandler+0xcf0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d03b      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a79      	ldr	r2, [pc, #484]	; (8006384 <HAL_DMA_IRQHandler+0xcf4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d036      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a77      	ldr	r2, [pc, #476]	; (8006388 <HAL_DMA_IRQHandler+0xcf8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d031      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a76      	ldr	r2, [pc, #472]	; (800638c <HAL_DMA_IRQHandler+0xcfc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d02c      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a74      	ldr	r2, [pc, #464]	; (8006390 <HAL_DMA_IRQHandler+0xd00>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d027      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a73      	ldr	r2, [pc, #460]	; (8006394 <HAL_DMA_IRQHandler+0xd04>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d022      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a71      	ldr	r2, [pc, #452]	; (8006398 <HAL_DMA_IRQHandler+0xd08>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01d      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a70      	ldr	r2, [pc, #448]	; (800639c <HAL_DMA_IRQHandler+0xd0c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d018      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a6e      	ldr	r2, [pc, #440]	; (80063a0 <HAL_DMA_IRQHandler+0xd10>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d013      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a6d      	ldr	r2, [pc, #436]	; (80063a4 <HAL_DMA_IRQHandler+0xd14>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00e      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a6b      	ldr	r2, [pc, #428]	; (80063a8 <HAL_DMA_IRQHandler+0xd18>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d009      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a6a      	ldr	r2, [pc, #424]	; (80063ac <HAL_DMA_IRQHandler+0xd1c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb82>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a68      	ldr	r2, [pc, #416]	; (80063b0 <HAL_DMA_IRQHandler+0xd20>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d108      	bne.n	8006224 <HAL_DMA_IRQHandler+0xb94>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0208 	bic.w	r2, r2, #8
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e007      	b.n	8006234 <HAL_DMA_IRQHandler+0xba4>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0204 	bic.w	r2, r2, #4
 8006232:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8165 	beq.w	8006508 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006246:	e15f      	b.n	8006508 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	2202      	movs	r2, #2
 8006252:	409a      	lsls	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4013      	ands	r3, r2
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80c5 	beq.w	80063e8 <HAL_DMA_IRQHandler+0xd58>
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80bf 	beq.w	80063e8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2202      	movs	r2, #2
 8006274:	409a      	lsls	r2, r3
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d018      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 813a 	beq.w	800650c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062a0:	e134      	b.n	800650c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 8130 	beq.w	800650c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062b4:	e12a      	b.n	800650c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f040 8089 	bne.w	80063d4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2b      	ldr	r2, [pc, #172]	; (8006374 <HAL_DMA_IRQHandler+0xce4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d04a      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a29      	ldr	r2, [pc, #164]	; (8006378 <HAL_DMA_IRQHandler+0xce8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d045      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a28      	ldr	r2, [pc, #160]	; (800637c <HAL_DMA_IRQHandler+0xcec>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d040      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a26      	ldr	r2, [pc, #152]	; (8006380 <HAL_DMA_IRQHandler+0xcf0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d03b      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a25      	ldr	r2, [pc, #148]	; (8006384 <HAL_DMA_IRQHandler+0xcf4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d036      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a23      	ldr	r2, [pc, #140]	; (8006388 <HAL_DMA_IRQHandler+0xcf8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d031      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a22      	ldr	r2, [pc, #136]	; (800638c <HAL_DMA_IRQHandler+0xcfc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d02c      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a20      	ldr	r2, [pc, #128]	; (8006390 <HAL_DMA_IRQHandler+0xd00>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d027      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <HAL_DMA_IRQHandler+0xd04>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d022      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <HAL_DMA_IRQHandler+0xd08>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01d      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1c      	ldr	r2, [pc, #112]	; (800639c <HAL_DMA_IRQHandler+0xd0c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d018      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1a      	ldr	r2, [pc, #104]	; (80063a0 <HAL_DMA_IRQHandler+0xd10>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d013      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a19      	ldr	r2, [pc, #100]	; (80063a4 <HAL_DMA_IRQHandler+0xd14>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <HAL_DMA_IRQHandler+0xd18>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a16      	ldr	r2, [pc, #88]	; (80063ac <HAL_DMA_IRQHandler+0xd1c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_DMA_IRQHandler+0xcd2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <HAL_DMA_IRQHandler+0xd20>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d128      	bne.n	80063b4 <HAL_DMA_IRQHandler+0xd24>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0214 	bic.w	r2, r2, #20
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e027      	b.n	80063c4 <HAL_DMA_IRQHandler+0xd34>
 8006374:	40020010 	.word	0x40020010
 8006378:	40020028 	.word	0x40020028
 800637c:	40020040 	.word	0x40020040
 8006380:	40020058 	.word	0x40020058
 8006384:	40020070 	.word	0x40020070
 8006388:	40020088 	.word	0x40020088
 800638c:	400200a0 	.word	0x400200a0
 8006390:	400200b8 	.word	0x400200b8
 8006394:	40020410 	.word	0x40020410
 8006398:	40020428 	.word	0x40020428
 800639c:	40020440 	.word	0x40020440
 80063a0:	40020458 	.word	0x40020458
 80063a4:	40020470 	.word	0x40020470
 80063a8:	40020488 	.word	0x40020488
 80063ac:	400204a0 	.word	0x400204a0
 80063b0:	400204b8 	.word	0x400204b8
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 020a 	bic.w	r2, r2, #10
 80063c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8097 	beq.w	800650c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063e6:	e091      	b.n	800650c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2208      	movs	r2, #8
 80063f2:	409a      	lsls	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8088 	beq.w	800650e <HAL_DMA_IRQHandler+0xe7e>
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 8082 	beq.w	800650e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a41      	ldr	r2, [pc, #260]	; (8006514 <HAL_DMA_IRQHandler+0xe84>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d04a      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a3f      	ldr	r2, [pc, #252]	; (8006518 <HAL_DMA_IRQHandler+0xe88>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d045      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a3e      	ldr	r2, [pc, #248]	; (800651c <HAL_DMA_IRQHandler+0xe8c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d040      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a3c      	ldr	r2, [pc, #240]	; (8006520 <HAL_DMA_IRQHandler+0xe90>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d03b      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a3b      	ldr	r2, [pc, #236]	; (8006524 <HAL_DMA_IRQHandler+0xe94>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d036      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a39      	ldr	r2, [pc, #228]	; (8006528 <HAL_DMA_IRQHandler+0xe98>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d031      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a38      	ldr	r2, [pc, #224]	; (800652c <HAL_DMA_IRQHandler+0xe9c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d02c      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a36      	ldr	r2, [pc, #216]	; (8006530 <HAL_DMA_IRQHandler+0xea0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d027      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a35      	ldr	r2, [pc, #212]	; (8006534 <HAL_DMA_IRQHandler+0xea4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a33      	ldr	r2, [pc, #204]	; (8006538 <HAL_DMA_IRQHandler+0xea8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a32      	ldr	r2, [pc, #200]	; (800653c <HAL_DMA_IRQHandler+0xeac>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a30      	ldr	r2, [pc, #192]	; (8006540 <HAL_DMA_IRQHandler+0xeb0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2f      	ldr	r2, [pc, #188]	; (8006544 <HAL_DMA_IRQHandler+0xeb4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2d      	ldr	r2, [pc, #180]	; (8006548 <HAL_DMA_IRQHandler+0xeb8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2c      	ldr	r2, [pc, #176]	; (800654c <HAL_DMA_IRQHandler+0xebc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe1a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2a      	ldr	r2, [pc, #168]	; (8006550 <HAL_DMA_IRQHandler+0xec0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d108      	bne.n	80064bc <HAL_DMA_IRQHandler+0xe2c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 021c 	bic.w	r2, r2, #28
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e007      	b.n	80064cc <HAL_DMA_IRQHandler+0xe3c>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 020e 	bic.w	r2, r2, #14
 80064ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2201      	movs	r2, #1
 80064d6:	409a      	lsls	r2, r3
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
 8006502:	e004      	b.n	800650e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006504:	bf00      	nop
 8006506:	e002      	b.n	800650e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006508:	bf00      	nop
 800650a:	e000      	b.n	800650e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800650c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800650e:	3728      	adds	r7, #40	; 0x28
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40020010 	.word	0x40020010
 8006518:	40020028 	.word	0x40020028
 800651c:	40020040 	.word	0x40020040
 8006520:	40020058 	.word	0x40020058
 8006524:	40020070 	.word	0x40020070
 8006528:	40020088 	.word	0x40020088
 800652c:	400200a0 	.word	0x400200a0
 8006530:	400200b8 	.word	0x400200b8
 8006534:	40020410 	.word	0x40020410
 8006538:	40020428 	.word	0x40020428
 800653c:	40020440 	.word	0x40020440
 8006540:	40020458 	.word	0x40020458
 8006544:	40020470 	.word	0x40020470
 8006548:	40020488 	.word	0x40020488
 800654c:	400204a0 	.word	0x400204a0
 8006550:	400204b8 	.word	0x400204b8

08006554 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006584:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a7f      	ldr	r2, [pc, #508]	; (8006788 <DMA_SetConfig+0x21c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d072      	beq.n	8006676 <DMA_SetConfig+0x10a>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a7d      	ldr	r2, [pc, #500]	; (800678c <DMA_SetConfig+0x220>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d06d      	beq.n	8006676 <DMA_SetConfig+0x10a>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a7c      	ldr	r2, [pc, #496]	; (8006790 <DMA_SetConfig+0x224>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d068      	beq.n	8006676 <DMA_SetConfig+0x10a>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a7a      	ldr	r2, [pc, #488]	; (8006794 <DMA_SetConfig+0x228>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d063      	beq.n	8006676 <DMA_SetConfig+0x10a>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a79      	ldr	r2, [pc, #484]	; (8006798 <DMA_SetConfig+0x22c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d05e      	beq.n	8006676 <DMA_SetConfig+0x10a>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a77      	ldr	r2, [pc, #476]	; (800679c <DMA_SetConfig+0x230>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d059      	beq.n	8006676 <DMA_SetConfig+0x10a>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a76      	ldr	r2, [pc, #472]	; (80067a0 <DMA_SetConfig+0x234>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d054      	beq.n	8006676 <DMA_SetConfig+0x10a>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a74      	ldr	r2, [pc, #464]	; (80067a4 <DMA_SetConfig+0x238>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d04f      	beq.n	8006676 <DMA_SetConfig+0x10a>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a73      	ldr	r2, [pc, #460]	; (80067a8 <DMA_SetConfig+0x23c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d04a      	beq.n	8006676 <DMA_SetConfig+0x10a>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a71      	ldr	r2, [pc, #452]	; (80067ac <DMA_SetConfig+0x240>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d045      	beq.n	8006676 <DMA_SetConfig+0x10a>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a70      	ldr	r2, [pc, #448]	; (80067b0 <DMA_SetConfig+0x244>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d040      	beq.n	8006676 <DMA_SetConfig+0x10a>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a6e      	ldr	r2, [pc, #440]	; (80067b4 <DMA_SetConfig+0x248>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d03b      	beq.n	8006676 <DMA_SetConfig+0x10a>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a6d      	ldr	r2, [pc, #436]	; (80067b8 <DMA_SetConfig+0x24c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d036      	beq.n	8006676 <DMA_SetConfig+0x10a>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a6b      	ldr	r2, [pc, #428]	; (80067bc <DMA_SetConfig+0x250>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d031      	beq.n	8006676 <DMA_SetConfig+0x10a>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a6a      	ldr	r2, [pc, #424]	; (80067c0 <DMA_SetConfig+0x254>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d02c      	beq.n	8006676 <DMA_SetConfig+0x10a>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a68      	ldr	r2, [pc, #416]	; (80067c4 <DMA_SetConfig+0x258>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d027      	beq.n	8006676 <DMA_SetConfig+0x10a>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a67      	ldr	r2, [pc, #412]	; (80067c8 <DMA_SetConfig+0x25c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d022      	beq.n	8006676 <DMA_SetConfig+0x10a>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a65      	ldr	r2, [pc, #404]	; (80067cc <DMA_SetConfig+0x260>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01d      	beq.n	8006676 <DMA_SetConfig+0x10a>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a64      	ldr	r2, [pc, #400]	; (80067d0 <DMA_SetConfig+0x264>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d018      	beq.n	8006676 <DMA_SetConfig+0x10a>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a62      	ldr	r2, [pc, #392]	; (80067d4 <DMA_SetConfig+0x268>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <DMA_SetConfig+0x10a>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a61      	ldr	r2, [pc, #388]	; (80067d8 <DMA_SetConfig+0x26c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00e      	beq.n	8006676 <DMA_SetConfig+0x10a>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5f      	ldr	r2, [pc, #380]	; (80067dc <DMA_SetConfig+0x270>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d009      	beq.n	8006676 <DMA_SetConfig+0x10a>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a5e      	ldr	r2, [pc, #376]	; (80067e0 <DMA_SetConfig+0x274>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d004      	beq.n	8006676 <DMA_SetConfig+0x10a>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5c      	ldr	r2, [pc, #368]	; (80067e4 <DMA_SetConfig+0x278>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d101      	bne.n	800667a <DMA_SetConfig+0x10e>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <DMA_SetConfig+0x110>
 800667a:	2300      	movs	r3, #0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00d      	beq.n	800669c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006688:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800669a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a39      	ldr	r2, [pc, #228]	; (8006788 <DMA_SetConfig+0x21c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d04a      	beq.n	800673c <DMA_SetConfig+0x1d0>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a38      	ldr	r2, [pc, #224]	; (800678c <DMA_SetConfig+0x220>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d045      	beq.n	800673c <DMA_SetConfig+0x1d0>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a36      	ldr	r2, [pc, #216]	; (8006790 <DMA_SetConfig+0x224>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d040      	beq.n	800673c <DMA_SetConfig+0x1d0>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a35      	ldr	r2, [pc, #212]	; (8006794 <DMA_SetConfig+0x228>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d03b      	beq.n	800673c <DMA_SetConfig+0x1d0>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a33      	ldr	r2, [pc, #204]	; (8006798 <DMA_SetConfig+0x22c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d036      	beq.n	800673c <DMA_SetConfig+0x1d0>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a32      	ldr	r2, [pc, #200]	; (800679c <DMA_SetConfig+0x230>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d031      	beq.n	800673c <DMA_SetConfig+0x1d0>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a30      	ldr	r2, [pc, #192]	; (80067a0 <DMA_SetConfig+0x234>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d02c      	beq.n	800673c <DMA_SetConfig+0x1d0>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a2f      	ldr	r2, [pc, #188]	; (80067a4 <DMA_SetConfig+0x238>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d027      	beq.n	800673c <DMA_SetConfig+0x1d0>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a2d      	ldr	r2, [pc, #180]	; (80067a8 <DMA_SetConfig+0x23c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d022      	beq.n	800673c <DMA_SetConfig+0x1d0>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a2c      	ldr	r2, [pc, #176]	; (80067ac <DMA_SetConfig+0x240>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d01d      	beq.n	800673c <DMA_SetConfig+0x1d0>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a2a      	ldr	r2, [pc, #168]	; (80067b0 <DMA_SetConfig+0x244>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d018      	beq.n	800673c <DMA_SetConfig+0x1d0>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a29      	ldr	r2, [pc, #164]	; (80067b4 <DMA_SetConfig+0x248>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d013      	beq.n	800673c <DMA_SetConfig+0x1d0>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a27      	ldr	r2, [pc, #156]	; (80067b8 <DMA_SetConfig+0x24c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00e      	beq.n	800673c <DMA_SetConfig+0x1d0>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a26      	ldr	r2, [pc, #152]	; (80067bc <DMA_SetConfig+0x250>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d009      	beq.n	800673c <DMA_SetConfig+0x1d0>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a24      	ldr	r2, [pc, #144]	; (80067c0 <DMA_SetConfig+0x254>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d004      	beq.n	800673c <DMA_SetConfig+0x1d0>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a23      	ldr	r2, [pc, #140]	; (80067c4 <DMA_SetConfig+0x258>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d101      	bne.n	8006740 <DMA_SetConfig+0x1d4>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <DMA_SetConfig+0x1d6>
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d059      	beq.n	80067fa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674a:	f003 031f 	and.w	r3, r3, #31
 800674e:	223f      	movs	r2, #63	; 0x3f
 8006750:	409a      	lsls	r2, r3
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006764:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d138      	bne.n	80067e8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006786:	e0ae      	b.n	80068e6 <DMA_SetConfig+0x37a>
 8006788:	40020010 	.word	0x40020010
 800678c:	40020028 	.word	0x40020028
 8006790:	40020040 	.word	0x40020040
 8006794:	40020058 	.word	0x40020058
 8006798:	40020070 	.word	0x40020070
 800679c:	40020088 	.word	0x40020088
 80067a0:	400200a0 	.word	0x400200a0
 80067a4:	400200b8 	.word	0x400200b8
 80067a8:	40020410 	.word	0x40020410
 80067ac:	40020428 	.word	0x40020428
 80067b0:	40020440 	.word	0x40020440
 80067b4:	40020458 	.word	0x40020458
 80067b8:	40020470 	.word	0x40020470
 80067bc:	40020488 	.word	0x40020488
 80067c0:	400204a0 	.word	0x400204a0
 80067c4:	400204b8 	.word	0x400204b8
 80067c8:	58025408 	.word	0x58025408
 80067cc:	5802541c 	.word	0x5802541c
 80067d0:	58025430 	.word	0x58025430
 80067d4:	58025444 	.word	0x58025444
 80067d8:	58025458 	.word	0x58025458
 80067dc:	5802546c 	.word	0x5802546c
 80067e0:	58025480 	.word	0x58025480
 80067e4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	60da      	str	r2, [r3, #12]
}
 80067f8:	e075      	b.n	80068e6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a3d      	ldr	r2, [pc, #244]	; (80068f4 <DMA_SetConfig+0x388>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d04a      	beq.n	800689a <DMA_SetConfig+0x32e>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a3b      	ldr	r2, [pc, #236]	; (80068f8 <DMA_SetConfig+0x38c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d045      	beq.n	800689a <DMA_SetConfig+0x32e>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a3a      	ldr	r2, [pc, #232]	; (80068fc <DMA_SetConfig+0x390>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d040      	beq.n	800689a <DMA_SetConfig+0x32e>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a38      	ldr	r2, [pc, #224]	; (8006900 <DMA_SetConfig+0x394>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d03b      	beq.n	800689a <DMA_SetConfig+0x32e>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a37      	ldr	r2, [pc, #220]	; (8006904 <DMA_SetConfig+0x398>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d036      	beq.n	800689a <DMA_SetConfig+0x32e>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a35      	ldr	r2, [pc, #212]	; (8006908 <DMA_SetConfig+0x39c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d031      	beq.n	800689a <DMA_SetConfig+0x32e>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a34      	ldr	r2, [pc, #208]	; (800690c <DMA_SetConfig+0x3a0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d02c      	beq.n	800689a <DMA_SetConfig+0x32e>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a32      	ldr	r2, [pc, #200]	; (8006910 <DMA_SetConfig+0x3a4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d027      	beq.n	800689a <DMA_SetConfig+0x32e>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a31      	ldr	r2, [pc, #196]	; (8006914 <DMA_SetConfig+0x3a8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d022      	beq.n	800689a <DMA_SetConfig+0x32e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a2f      	ldr	r2, [pc, #188]	; (8006918 <DMA_SetConfig+0x3ac>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d01d      	beq.n	800689a <DMA_SetConfig+0x32e>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a2e      	ldr	r2, [pc, #184]	; (800691c <DMA_SetConfig+0x3b0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d018      	beq.n	800689a <DMA_SetConfig+0x32e>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a2c      	ldr	r2, [pc, #176]	; (8006920 <DMA_SetConfig+0x3b4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d013      	beq.n	800689a <DMA_SetConfig+0x32e>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a2b      	ldr	r2, [pc, #172]	; (8006924 <DMA_SetConfig+0x3b8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00e      	beq.n	800689a <DMA_SetConfig+0x32e>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a29      	ldr	r2, [pc, #164]	; (8006928 <DMA_SetConfig+0x3bc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d009      	beq.n	800689a <DMA_SetConfig+0x32e>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a28      	ldr	r2, [pc, #160]	; (800692c <DMA_SetConfig+0x3c0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <DMA_SetConfig+0x32e>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a26      	ldr	r2, [pc, #152]	; (8006930 <DMA_SetConfig+0x3c4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d101      	bne.n	800689e <DMA_SetConfig+0x332>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <DMA_SetConfig+0x334>
 800689e:	2300      	movs	r3, #0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d020      	beq.n	80068e6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	2201      	movs	r2, #1
 80068ae:	409a      	lsls	r2, r3
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	2b40      	cmp	r3, #64	; 0x40
 80068c2:	d108      	bne.n	80068d6 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	60da      	str	r2, [r3, #12]
}
 80068d4:	e007      	b.n	80068e6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	60da      	str	r2, [r3, #12]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	48022c08 	.word	0x48022c08
 80068f8:	48022c1c 	.word	0x48022c1c
 80068fc:	48022c30 	.word	0x48022c30
 8006900:	48022c44 	.word	0x48022c44
 8006904:	48022c58 	.word	0x48022c58
 8006908:	48022c6c 	.word	0x48022c6c
 800690c:	48022c80 	.word	0x48022c80
 8006910:	48022c94 	.word	0x48022c94
 8006914:	58025408 	.word	0x58025408
 8006918:	5802541c 	.word	0x5802541c
 800691c:	58025430 	.word	0x58025430
 8006920:	58025444 	.word	0x58025444
 8006924:	58025458 	.word	0x58025458
 8006928:	5802546c 	.word	0x5802546c
 800692c:	58025480 	.word	0x58025480
 8006930:	58025494 	.word	0x58025494

08006934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a42      	ldr	r2, [pc, #264]	; (8006a4c <DMA_CalcBaseAndBitshift+0x118>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d04a      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a41      	ldr	r2, [pc, #260]	; (8006a50 <DMA_CalcBaseAndBitshift+0x11c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d045      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a3f      	ldr	r2, [pc, #252]	; (8006a54 <DMA_CalcBaseAndBitshift+0x120>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d040      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a3e      	ldr	r2, [pc, #248]	; (8006a58 <DMA_CalcBaseAndBitshift+0x124>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d03b      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a3c      	ldr	r2, [pc, #240]	; (8006a5c <DMA_CalcBaseAndBitshift+0x128>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d036      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a3b      	ldr	r2, [pc, #236]	; (8006a60 <DMA_CalcBaseAndBitshift+0x12c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d031      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a39      	ldr	r2, [pc, #228]	; (8006a64 <DMA_CalcBaseAndBitshift+0x130>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d02c      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a38      	ldr	r2, [pc, #224]	; (8006a68 <DMA_CalcBaseAndBitshift+0x134>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d027      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a36      	ldr	r2, [pc, #216]	; (8006a6c <DMA_CalcBaseAndBitshift+0x138>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d022      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a35      	ldr	r2, [pc, #212]	; (8006a70 <DMA_CalcBaseAndBitshift+0x13c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d01d      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a33      	ldr	r2, [pc, #204]	; (8006a74 <DMA_CalcBaseAndBitshift+0x140>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d018      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a32      	ldr	r2, [pc, #200]	; (8006a78 <DMA_CalcBaseAndBitshift+0x144>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d013      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a30      	ldr	r2, [pc, #192]	; (8006a7c <DMA_CalcBaseAndBitshift+0x148>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00e      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2f      	ldr	r2, [pc, #188]	; (8006a80 <DMA_CalcBaseAndBitshift+0x14c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d009      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a2d      	ldr	r2, [pc, #180]	; (8006a84 <DMA_CalcBaseAndBitshift+0x150>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <DMA_CalcBaseAndBitshift+0xa8>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a2c      	ldr	r2, [pc, #176]	; (8006a88 <DMA_CalcBaseAndBitshift+0x154>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d101      	bne.n	80069e0 <DMA_CalcBaseAndBitshift+0xac>
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <DMA_CalcBaseAndBitshift+0xae>
 80069e0:	2300      	movs	r3, #0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d024      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	3b10      	subs	r3, #16
 80069ee:	4a27      	ldr	r2, [pc, #156]	; (8006a8c <DMA_CalcBaseAndBitshift+0x158>)
 80069f0:	fba2 2303 	umull	r2, r3, r2, r3
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	4a24      	ldr	r2, [pc, #144]	; (8006a90 <DMA_CalcBaseAndBitshift+0x15c>)
 8006a00:	5cd3      	ldrb	r3, [r2, r3]
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d908      	bls.n	8006a20 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	4b1f      	ldr	r3, [pc, #124]	; (8006a94 <DMA_CalcBaseAndBitshift+0x160>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	1d1a      	adds	r2, r3, #4
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	659a      	str	r2, [r3, #88]	; 0x58
 8006a1e:	e00d      	b.n	8006a3c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	461a      	mov	r2, r3
 8006a26:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <DMA_CalcBaseAndBitshift+0x160>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8006a2e:	e005      	b.n	8006a3c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	40020010 	.word	0x40020010
 8006a50:	40020028 	.word	0x40020028
 8006a54:	40020040 	.word	0x40020040
 8006a58:	40020058 	.word	0x40020058
 8006a5c:	40020070 	.word	0x40020070
 8006a60:	40020088 	.word	0x40020088
 8006a64:	400200a0 	.word	0x400200a0
 8006a68:	400200b8 	.word	0x400200b8
 8006a6c:	40020410 	.word	0x40020410
 8006a70:	40020428 	.word	0x40020428
 8006a74:	40020440 	.word	0x40020440
 8006a78:	40020458 	.word	0x40020458
 8006a7c:	40020470 	.word	0x40020470
 8006a80:	40020488 	.word	0x40020488
 8006a84:	400204a0 	.word	0x400204a0
 8006a88:	400204b8 	.word	0x400204b8
 8006a8c:	aaaaaaab 	.word	0xaaaaaaab
 8006a90:	08017d08 	.word	0x08017d08
 8006a94:	fffffc00 	.word	0xfffffc00

08006a98 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d120      	bne.n	8006aee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d858      	bhi.n	8006b66 <DMA_CheckFifoParam+0xce>
 8006ab4:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <DMA_CheckFifoParam+0x24>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006acd 	.word	0x08006acd
 8006ac0:	08006adf 	.word	0x08006adf
 8006ac4:	08006acd 	.word	0x08006acd
 8006ac8:	08006b67 	.word	0x08006b67
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d048      	beq.n	8006b6a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006adc:	e045      	b.n	8006b6a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ae6:	d142      	bne.n	8006b6e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006aec:	e03f      	b.n	8006b6e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af6:	d123      	bne.n	8006b40 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d838      	bhi.n	8006b72 <DMA_CheckFifoParam+0xda>
 8006b00:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <DMA_CheckFifoParam+0x70>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006b19 	.word	0x08006b19
 8006b0c:	08006b1f 	.word	0x08006b1f
 8006b10:	08006b19 	.word	0x08006b19
 8006b14:	08006b31 	.word	0x08006b31
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	73fb      	strb	r3, [r7, #15]
        break;
 8006b1c:	e030      	b.n	8006b80 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d025      	beq.n	8006b76 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b2e:	e022      	b.n	8006b76 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b38:	d11f      	bne.n	8006b7a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b3e:	e01c      	b.n	8006b7a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d902      	bls.n	8006b4e <DMA_CheckFifoParam+0xb6>
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d003      	beq.n	8006b54 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006b4c:	e018      	b.n	8006b80 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	73fb      	strb	r3, [r7, #15]
        break;
 8006b52:	e015      	b.n	8006b80 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	73fb      	strb	r3, [r7, #15]
    break;
 8006b64:	e00b      	b.n	8006b7e <DMA_CheckFifoParam+0xe6>
        break;
 8006b66:	bf00      	nop
 8006b68:	e00a      	b.n	8006b80 <DMA_CheckFifoParam+0xe8>
        break;
 8006b6a:	bf00      	nop
 8006b6c:	e008      	b.n	8006b80 <DMA_CheckFifoParam+0xe8>
        break;
 8006b6e:	bf00      	nop
 8006b70:	e006      	b.n	8006b80 <DMA_CheckFifoParam+0xe8>
        break;
 8006b72:	bf00      	nop
 8006b74:	e004      	b.n	8006b80 <DMA_CheckFifoParam+0xe8>
        break;
 8006b76:	bf00      	nop
 8006b78:	e002      	b.n	8006b80 <DMA_CheckFifoParam+0xe8>
        break;
 8006b7a:	bf00      	nop
 8006b7c:	e000      	b.n	8006b80 <DMA_CheckFifoParam+0xe8>
    break;
 8006b7e:	bf00      	nop
    }
  }

  return status;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop

08006b90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a38      	ldr	r2, [pc, #224]	; (8006c84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d022      	beq.n	8006bee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a36      	ldr	r2, [pc, #216]	; (8006c88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d01d      	beq.n	8006bee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a35      	ldr	r2, [pc, #212]	; (8006c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d018      	beq.n	8006bee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a33      	ldr	r2, [pc, #204]	; (8006c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a32      	ldr	r2, [pc, #200]	; (8006c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00e      	beq.n	8006bee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a30      	ldr	r2, [pc, #192]	; (8006c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d009      	beq.n	8006bee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a2f      	ldr	r2, [pc, #188]	; (8006c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a2d      	ldr	r2, [pc, #180]	; (8006ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d101      	bne.n	8006bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01a      	beq.n	8006c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	3b08      	subs	r3, #8
 8006c00:	4a28      	ldr	r2, [pc, #160]	; (8006ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	091b      	lsrs	r3, r3, #4
 8006c08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4b26      	ldr	r3, [pc, #152]	; (8006ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	461a      	mov	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a24      	ldr	r2, [pc, #144]	; (8006cac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006c1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	2201      	movs	r2, #1
 8006c26:	409a      	lsls	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006c2c:	e024      	b.n	8006c78 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	3b10      	subs	r3, #16
 8006c36:	4a1e      	ldr	r2, [pc, #120]	; (8006cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006c38:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3c:	091b      	lsrs	r3, r3, #4
 8006c3e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4a1c      	ldr	r2, [pc, #112]	; (8006cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d806      	bhi.n	8006c56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4a1b      	ldr	r2, [pc, #108]	; (8006cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d902      	bls.n	8006c56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3308      	adds	r3, #8
 8006c54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a16      	ldr	r2, [pc, #88]	; (8006cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006c68:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2201      	movs	r2, #1
 8006c72:	409a      	lsls	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c78:	bf00      	nop
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	58025408 	.word	0x58025408
 8006c88:	5802541c 	.word	0x5802541c
 8006c8c:	58025430 	.word	0x58025430
 8006c90:	58025444 	.word	0x58025444
 8006c94:	58025458 	.word	0x58025458
 8006c98:	5802546c 	.word	0x5802546c
 8006c9c:	58025480 	.word	0x58025480
 8006ca0:	58025494 	.word	0x58025494
 8006ca4:	cccccccd 	.word	0xcccccccd
 8006ca8:	16009600 	.word	0x16009600
 8006cac:	58025880 	.word	0x58025880
 8006cb0:	aaaaaaab 	.word	0xaaaaaaab
 8006cb4:	400204b8 	.word	0x400204b8
 8006cb8:	4002040f 	.word	0x4002040f
 8006cbc:	10008200 	.word	0x10008200
 8006cc0:	40020880 	.word	0x40020880

08006cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d04a      	beq.n	8006d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d847      	bhi.n	8006d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a25      	ldr	r2, [pc, #148]	; (8006d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d022      	beq.n	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a24      	ldr	r2, [pc, #144]	; (8006d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d01d      	beq.n	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a22      	ldr	r2, [pc, #136]	; (8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d018      	beq.n	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a21      	ldr	r2, [pc, #132]	; (8006d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a1f      	ldr	r2, [pc, #124]	; (8006d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1e      	ldr	r2, [pc, #120]	; (8006d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1c      	ldr	r2, [pc, #112]	; (8006d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1b      	ldr	r2, [pc, #108]	; (8006d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d101      	bne.n	8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006d34:	2300      	movs	r3, #0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	461a      	mov	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a15      	ldr	r2, [pc, #84]	; (8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006d4c:	671a      	str	r2, [r3, #112]	; 0x70
 8006d4e:	e009      	b.n	8006d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4b14      	ldr	r3, [pc, #80]	; (8006da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	461a      	mov	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a11      	ldr	r2, [pc, #68]	; (8006da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006d62:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	2201      	movs	r2, #1
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	58025408 	.word	0x58025408
 8006d80:	5802541c 	.word	0x5802541c
 8006d84:	58025430 	.word	0x58025430
 8006d88:	58025444 	.word	0x58025444
 8006d8c:	58025458 	.word	0x58025458
 8006d90:	5802546c 	.word	0x5802546c
 8006d94:	58025480 	.word	0x58025480
 8006d98:	58025494 	.word	0x58025494
 8006d9c:	1600963f 	.word	0x1600963f
 8006da0:	58025940 	.word	0x58025940
 8006da4:	1000823f 	.word	0x1000823f
 8006da8:	40020940 	.word	0x40020940

08006dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b089      	sub	sp, #36	; 0x24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006dba:	4b89      	ldr	r3, [pc, #548]	; (8006fe0 <HAL_GPIO_Init+0x234>)
 8006dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006dbe:	e194      	b.n	80070ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	4013      	ands	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8186 	beq.w	80070e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d005      	beq.n	8006df0 <HAL_GPIO_Init+0x44>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d130      	bne.n	8006e52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	2203      	movs	r2, #3
 8006dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006e00:	43db      	mvns	r3, r3
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	4013      	ands	r3, r2
 8006e06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	fa02 f303 	lsl.w	r3, r2, r3
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e26:	2201      	movs	r2, #1
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	43db      	mvns	r3, r3
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	4013      	ands	r3, r2
 8006e34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	091b      	lsrs	r3, r3, #4
 8006e3c:	f003 0201 	and.w	r2, r3, #1
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d017      	beq.n	8006e8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	2203      	movs	r2, #3
 8006e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6e:	43db      	mvns	r3, r3
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	4013      	ands	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d123      	bne.n	8006ee2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	08da      	lsrs	r2, r3, #3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3208      	adds	r2, #8
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	220f      	movs	r2, #15
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	43db      	mvns	r3, r3
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	08da      	lsrs	r2, r3, #3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3208      	adds	r2, #8
 8006edc:	69b9      	ldr	r1, [r7, #24]
 8006ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	2203      	movs	r2, #3
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	43db      	mvns	r3, r3
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f003 0203 	and.w	r2, r3, #3
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 80e0 	beq.w	80070e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f24:	4b2f      	ldr	r3, [pc, #188]	; (8006fe4 <HAL_GPIO_Init+0x238>)
 8006f26:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006f2a:	4a2e      	ldr	r2, [pc, #184]	; (8006fe4 <HAL_GPIO_Init+0x238>)
 8006f2c:	f043 0302 	orr.w	r3, r3, #2
 8006f30:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006f34:	4b2b      	ldr	r3, [pc, #172]	; (8006fe4 <HAL_GPIO_Init+0x238>)
 8006f36:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f42:	4a29      	ldr	r2, [pc, #164]	; (8006fe8 <HAL_GPIO_Init+0x23c>)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	089b      	lsrs	r3, r3, #2
 8006f48:	3302      	adds	r3, #2
 8006f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	220f      	movs	r2, #15
 8006f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5e:	43db      	mvns	r3, r3
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	4013      	ands	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a20      	ldr	r2, [pc, #128]	; (8006fec <HAL_GPIO_Init+0x240>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d052      	beq.n	8007014 <HAL_GPIO_Init+0x268>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1f      	ldr	r2, [pc, #124]	; (8006ff0 <HAL_GPIO_Init+0x244>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d031      	beq.n	8006fda <HAL_GPIO_Init+0x22e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a1e      	ldr	r2, [pc, #120]	; (8006ff4 <HAL_GPIO_Init+0x248>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d02b      	beq.n	8006fd6 <HAL_GPIO_Init+0x22a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1d      	ldr	r2, [pc, #116]	; (8006ff8 <HAL_GPIO_Init+0x24c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d025      	beq.n	8006fd2 <HAL_GPIO_Init+0x226>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1c      	ldr	r2, [pc, #112]	; (8006ffc <HAL_GPIO_Init+0x250>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d01f      	beq.n	8006fce <HAL_GPIO_Init+0x222>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <HAL_GPIO_Init+0x254>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d019      	beq.n	8006fca <HAL_GPIO_Init+0x21e>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a1a      	ldr	r2, [pc, #104]	; (8007004 <HAL_GPIO_Init+0x258>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_GPIO_Init+0x21a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a19      	ldr	r2, [pc, #100]	; (8007008 <HAL_GPIO_Init+0x25c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00d      	beq.n	8006fc2 <HAL_GPIO_Init+0x216>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a18      	ldr	r2, [pc, #96]	; (800700c <HAL_GPIO_Init+0x260>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d007      	beq.n	8006fbe <HAL_GPIO_Init+0x212>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a17      	ldr	r2, [pc, #92]	; (8007010 <HAL_GPIO_Init+0x264>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d101      	bne.n	8006fba <HAL_GPIO_Init+0x20e>
 8006fb6:	2309      	movs	r3, #9
 8006fb8:	e02d      	b.n	8007016 <HAL_GPIO_Init+0x26a>
 8006fba:	230a      	movs	r3, #10
 8006fbc:	e02b      	b.n	8007016 <HAL_GPIO_Init+0x26a>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	e029      	b.n	8007016 <HAL_GPIO_Init+0x26a>
 8006fc2:	2307      	movs	r3, #7
 8006fc4:	e027      	b.n	8007016 <HAL_GPIO_Init+0x26a>
 8006fc6:	2306      	movs	r3, #6
 8006fc8:	e025      	b.n	8007016 <HAL_GPIO_Init+0x26a>
 8006fca:	2305      	movs	r3, #5
 8006fcc:	e023      	b.n	8007016 <HAL_GPIO_Init+0x26a>
 8006fce:	2304      	movs	r3, #4
 8006fd0:	e021      	b.n	8007016 <HAL_GPIO_Init+0x26a>
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e01f      	b.n	8007016 <HAL_GPIO_Init+0x26a>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e01d      	b.n	8007016 <HAL_GPIO_Init+0x26a>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e01b      	b.n	8007016 <HAL_GPIO_Init+0x26a>
 8006fde:	bf00      	nop
 8006fe0:	58000080 	.word	0x58000080
 8006fe4:	58024400 	.word	0x58024400
 8006fe8:	58000400 	.word	0x58000400
 8006fec:	58020000 	.word	0x58020000
 8006ff0:	58020400 	.word	0x58020400
 8006ff4:	58020800 	.word	0x58020800
 8006ff8:	58020c00 	.word	0x58020c00
 8006ffc:	58021000 	.word	0x58021000
 8007000:	58021400 	.word	0x58021400
 8007004:	58021800 	.word	0x58021800
 8007008:	58021c00 	.word	0x58021c00
 800700c:	58022000 	.word	0x58022000
 8007010:	58022400 	.word	0x58022400
 8007014:	2300      	movs	r3, #0
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	f002 0203 	and.w	r2, r2, #3
 800701c:	0092      	lsls	r2, r2, #2
 800701e:	4093      	lsls	r3, r2
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	4313      	orrs	r3, r2
 8007024:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007026:	4938      	ldr	r1, [pc, #224]	; (8007108 <HAL_GPIO_Init+0x35c>)
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	089b      	lsrs	r3, r3, #2
 800702c:	3302      	adds	r3, #2
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	43db      	mvns	r3, r3
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	4013      	ands	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800705a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	43db      	mvns	r3, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4013      	ands	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	43db      	mvns	r3, r3
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	4013      	ands	r3, r2
 800709e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	43db      	mvns	r3, r3
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	4013      	ands	r3, r2
 80070c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	3301      	adds	r3, #1
 80070e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f47f ae63 	bne.w	8006dc0 <HAL_GPIO_Init+0x14>
  }
}
 80070fa:	bf00      	nop
 80070fc:	bf00      	nop
 80070fe:	3724      	adds	r7, #36	; 0x24
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	58000400 	.word	0x58000400

0800710c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	807b      	strh	r3, [r7, #2]
 8007118:	4613      	mov	r3, r2
 800711a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800711c:	787b      	ldrb	r3, [r7, #1]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007122:	887a      	ldrh	r2, [r7, #2]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007128:	e003      	b.n	8007132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800712a:	887b      	ldrh	r3, [r7, #2]
 800712c:	041a      	lsls	r2, r3, #16
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	619a      	str	r2, [r3, #24]
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	460b      	mov	r3, r1
 8007148:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007150:	887a      	ldrh	r2, [r7, #2]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4013      	ands	r3, r2
 8007156:	041a      	lsls	r2, r3, #16
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	43d9      	mvns	r1, r3
 800715c:	887b      	ldrh	r3, [r7, #2]
 800715e:	400b      	ands	r3, r1
 8007160:	431a      	orrs	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	619a      	str	r2, [r3, #24]
}
 8007166:	bf00      	nop
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	4603      	mov	r3, r0
 800717a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800717c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007180:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800718c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	4618      	mov	r0, r3
 800719a:	f7fa fcf3 	bl	8001b84 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80071b0:	4b19      	ldr	r3, [pc, #100]	; (8007218 <HAL_PWREx_ConfigSupply+0x70>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d00a      	beq.n	80071d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071bc:	4b16      	ldr	r3, [pc, #88]	; (8007218 <HAL_PWREx_ConfigSupply+0x70>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d001      	beq.n	80071ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e01f      	b.n	800720e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e01d      	b.n	800720e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80071d2:	4b11      	ldr	r3, [pc, #68]	; (8007218 <HAL_PWREx_ConfigSupply+0x70>)
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f023 0207 	bic.w	r2, r3, #7
 80071da:	490f      	ldr	r1, [pc, #60]	; (8007218 <HAL_PWREx_ConfigSupply+0x70>)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80071e2:	f7fc fd85 	bl	8003cf0 <HAL_GetTick>
 80071e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80071e8:	e009      	b.n	80071fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80071ea:	f7fc fd81 	bl	8003cf0 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071f8:	d901      	bls.n	80071fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e007      	b.n	800720e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80071fe:	4b06      	ldr	r3, [pc, #24]	; (8007218 <HAL_PWREx_ConfigSupply+0x70>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720a:	d1ee      	bne.n	80071ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	58024800 	.word	0x58024800

0800721c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08c      	sub	sp, #48	; 0x30
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e3f6      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 80b5 	beq.w	80073a6 <HAL_RCC_OscConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800723c:	4b96      	ldr	r3, [pc, #600]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007244:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007246:	4b94      	ldr	r3, [pc, #592]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	2b10      	cmp	r3, #16
 8007250:	d007      	beq.n	8007262 <HAL_RCC_OscConfig+0x46>
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	2b18      	cmp	r3, #24
 8007256:	d112      	bne.n	800727e <HAL_RCC_OscConfig+0x62>
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d10d      	bne.n	800727e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007262:	4b8d      	ldr	r3, [pc, #564]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 809a 	beq.w	80073a4 <HAL_RCC_OscConfig+0x188>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f040 8095 	bne.w	80073a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e3ce      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007286:	d106      	bne.n	8007296 <HAL_RCC_OscConfig+0x7a>
 8007288:	4b83      	ldr	r3, [pc, #524]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a82      	ldr	r2, [pc, #520]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800728e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	e058      	b.n	8007348 <HAL_RCC_OscConfig+0x12c>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d112      	bne.n	80072c4 <HAL_RCC_OscConfig+0xa8>
 800729e:	4b7e      	ldr	r3, [pc, #504]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a7d      	ldr	r2, [pc, #500]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	4b7b      	ldr	r3, [pc, #492]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a7a      	ldr	r2, [pc, #488]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	4b78      	ldr	r3, [pc, #480]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a77      	ldr	r2, [pc, #476]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	e041      	b.n	8007348 <HAL_RCC_OscConfig+0x12c>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072cc:	d112      	bne.n	80072f4 <HAL_RCC_OscConfig+0xd8>
 80072ce:	4b72      	ldr	r3, [pc, #456]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a71      	ldr	r2, [pc, #452]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	4b6f      	ldr	r3, [pc, #444]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a6e      	ldr	r2, [pc, #440]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	4b6c      	ldr	r3, [pc, #432]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a6b      	ldr	r2, [pc, #428]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80072ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	e029      	b.n	8007348 <HAL_RCC_OscConfig+0x12c>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80072fc:	d112      	bne.n	8007324 <HAL_RCC_OscConfig+0x108>
 80072fe:	4b66      	ldr	r3, [pc, #408]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a65      	ldr	r2, [pc, #404]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	4b63      	ldr	r3, [pc, #396]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a62      	ldr	r2, [pc, #392]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	4b60      	ldr	r3, [pc, #384]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a5f      	ldr	r2, [pc, #380]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800731c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e011      	b.n	8007348 <HAL_RCC_OscConfig+0x12c>
 8007324:	4b5c      	ldr	r3, [pc, #368]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a5b      	ldr	r2, [pc, #364]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800732a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	4b59      	ldr	r3, [pc, #356]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a58      	ldr	r2, [pc, #352]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	4b56      	ldr	r3, [pc, #344]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a55      	ldr	r2, [pc, #340]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007342:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d014      	beq.n	800737a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007350:	f7fc fcce 	bl	8003cf0 <HAL_GetTick>
 8007354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007356:	e009      	b.n	800736c <HAL_RCC_OscConfig+0x150>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007358:	f7fc fcca 	bl	8003cf0 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e357      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800736c:	4b4a      	ldr	r3, [pc, #296]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0ef      	beq.n	8007358 <HAL_RCC_OscConfig+0x13c>
 8007378:	e015      	b.n	80073a6 <HAL_RCC_OscConfig+0x18a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737a:	f7fc fcb9 	bl	8003cf0 <HAL_GetTick>
 800737e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007380:	e009      	b.n	8007396 <HAL_RCC_OscConfig+0x17a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007382:	f7fc fcb5 	bl	8003cf0 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e342      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007396:	4b40      	ldr	r3, [pc, #256]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1ef      	bne.n	8007382 <HAL_RCC_OscConfig+0x166>
 80073a2:	e000      	b.n	80073a6 <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 808d 	beq.w	80074ce <HAL_RCC_OscConfig+0x2b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073b4:	4b38      	ldr	r3, [pc, #224]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073be:	4b36      	ldr	r3, [pc, #216]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <HAL_RCC_OscConfig+0x1be>
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	2b18      	cmp	r3, #24
 80073ce:	d137      	bne.n	8007440 <HAL_RCC_OscConfig+0x224>
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d132      	bne.n	8007440 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073da:	4b2f      	ldr	r3, [pc, #188]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <HAL_RCC_OscConfig+0x1d6>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e314      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073f2:	4b29      	ldr	r3, [pc, #164]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f023 0219 	bic.w	r2, r3, #25
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	4926      	ldr	r1, [pc, #152]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007400:	4313      	orrs	r3, r2
 8007402:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007404:	f7fc fc74 	bl	8003cf0 <HAL_GetTick>
 8007408:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800740a:	e008      	b.n	800741e <HAL_RCC_OscConfig+0x202>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800740c:	f7fc fc70 	bl	8003cf0 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x202>
            {
              return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e2fe      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800741e:	4b1e      	ldr	r3, [pc, #120]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0f0      	beq.n	800740c <HAL_RCC_OscConfig+0x1f0>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800742a:	4b1b      	ldr	r3, [pc, #108]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	061b      	lsls	r3, r3, #24
 8007438:	4917      	ldr	r1, [pc, #92]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800743a:	4313      	orrs	r3, r2
 800743c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800743e:	e046      	b.n	80074ce <HAL_RCC_OscConfig+0x2b2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d029      	beq.n	800749c <HAL_RCC_OscConfig+0x280>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007448:	4b13      	ldr	r3, [pc, #76]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f023 0219 	bic.w	r2, r3, #25
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	4910      	ldr	r1, [pc, #64]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007456:	4313      	orrs	r3, r2
 8007458:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745a:	f7fc fc49 	bl	8003cf0 <HAL_GetTick>
 800745e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007460:	e008      	b.n	8007474 <HAL_RCC_OscConfig+0x258>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007462:	f7fc fc45 	bl	8003cf0 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x258>
          {
            return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e2d3      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007474:	4b08      	ldr	r3, [pc, #32]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0f0      	beq.n	8007462 <HAL_RCC_OscConfig+0x246>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007480:	4b05      	ldr	r3, [pc, #20]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	061b      	lsls	r3, r3, #24
 800748e:	4902      	ldr	r1, [pc, #8]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007490:	4313      	orrs	r3, r2
 8007492:	604b      	str	r3, [r1, #4]
 8007494:	e01b      	b.n	80074ce <HAL_RCC_OscConfig+0x2b2>
 8007496:	bf00      	nop
 8007498:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800749c:	4b97      	ldr	r3, [pc, #604]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a96      	ldr	r2, [pc, #600]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80074a2:	f023 0301 	bic.w	r3, r3, #1
 80074a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fc fc22 	bl	8003cf0 <HAL_GetTick>
 80074ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x2a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074b0:	f7fc fc1e 	bl	8003cf0 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e2ac      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074c2:	4b8e      	ldr	r3, [pc, #568]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1f0      	bne.n	80074b0 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d06a      	beq.n	80075b0 <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074da:	4b88      	ldr	r3, [pc, #544]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074e4:	4b85      	ldr	r3, [pc, #532]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d007      	beq.n	8007500 <HAL_RCC_OscConfig+0x2e4>
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	2b18      	cmp	r3, #24
 80074f4:	d11b      	bne.n	800752e <HAL_RCC_OscConfig+0x312>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d116      	bne.n	800752e <HAL_RCC_OscConfig+0x312>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007500:	4b7e      	ldr	r3, [pc, #504]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_RCC_OscConfig+0x2fc>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d001      	beq.n	8007518 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e281      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007518:	4b78      	ldr	r3, [pc, #480]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	061b      	lsls	r3, r3, #24
 8007526:	4975      	ldr	r1, [pc, #468]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007528:	4313      	orrs	r3, r2
 800752a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800752c:	e040      	b.n	80075b0 <HAL_RCC_OscConfig+0x394>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d023      	beq.n	800757e <HAL_RCC_OscConfig+0x362>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007536:	4b71      	ldr	r3, [pc, #452]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a70      	ldr	r2, [pc, #448]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007542:	f7fc fbd5 	bl	8003cf0 <HAL_GetTick>
 8007546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007548:	e008      	b.n	800755c <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800754a:	f7fc fbd1 	bl	8003cf0 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x340>
          {
            return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e25f      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800755c:	4b67      	ldr	r3, [pc, #412]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0f0      	beq.n	800754a <HAL_RCC_OscConfig+0x32e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007568:	4b64      	ldr	r3, [pc, #400]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	061b      	lsls	r3, r3, #24
 8007576:	4961      	ldr	r1, [pc, #388]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007578:	4313      	orrs	r3, r2
 800757a:	60cb      	str	r3, [r1, #12]
 800757c:	e018      	b.n	80075b0 <HAL_RCC_OscConfig+0x394>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800757e:	4b5f      	ldr	r3, [pc, #380]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a5e      	ldr	r2, [pc, #376]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758a:	f7fc fbb1 	bl	8003cf0 <HAL_GetTick>
 800758e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007590:	e008      	b.n	80075a4 <HAL_RCC_OscConfig+0x388>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007592:	f7fc fbad 	bl	8003cf0 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x388>
          {
            return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e23b      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075a4:	4b55      	ldr	r3, [pc, #340]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f0      	bne.n	8007592 <HAL_RCC_OscConfig+0x376>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d036      	beq.n	800762a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d019      	beq.n	80075f8 <HAL_RCC_OscConfig+0x3dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075c4:	4b4d      	ldr	r3, [pc, #308]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80075c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c8:	4a4c      	ldr	r2, [pc, #304]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80075ca:	f043 0301 	orr.w	r3, r3, #1
 80075ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d0:	f7fc fb8e 	bl	8003cf0 <HAL_GetTick>
 80075d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x3ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075d8:	f7fc fb8a 	bl	8003cf0 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e218      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075ea:	4b44      	ldr	r3, [pc, #272]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80075ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x3bc>
 80075f6:	e018      	b.n	800762a <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075f8:	4b40      	ldr	r3, [pc, #256]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80075fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075fc:	4a3f      	ldr	r2, [pc, #252]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80075fe:	f023 0301 	bic.w	r3, r3, #1
 8007602:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007604:	f7fc fb74 	bl	8003cf0 <HAL_GetTick>
 8007608:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800760a:	e008      	b.n	800761e <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800760c:	f7fc fb70 	bl	8003cf0 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e1fe      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800761e:	4b37      	ldr	r3, [pc, #220]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1f0      	bne.n	800760c <HAL_RCC_OscConfig+0x3f0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d036      	beq.n	80076a4 <HAL_RCC_OscConfig+0x488>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d019      	beq.n	8007672 <HAL_RCC_OscConfig+0x456>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800763e:	4b2f      	ldr	r3, [pc, #188]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a2e      	ldr	r2, [pc, #184]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007648:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800764a:	f7fc fb51 	bl	8003cf0 <HAL_GetTick>
 800764e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007650:	e008      	b.n	8007664 <HAL_RCC_OscConfig+0x448>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007652:	f7fc fb4d 	bl	8003cf0 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x448>
        {
          return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e1db      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007664:	4b25      	ldr	r3, [pc, #148]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0f0      	beq.n	8007652 <HAL_RCC_OscConfig+0x436>
 8007670:	e018      	b.n	80076a4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007672:	4b22      	ldr	r3, [pc, #136]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a21      	ldr	r2, [pc, #132]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 8007678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800767c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800767e:	f7fc fb37 	bl	8003cf0 <HAL_GetTick>
 8007682:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007684:	e008      	b.n	8007698 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007686:	f7fc fb33 	bl	8003cf0 <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d901      	bls.n	8007698 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e1c1      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007698:	4b18      	ldr	r3, [pc, #96]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1f0      	bne.n	8007686 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 80af 	beq.w	8007810 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076b2:	4b13      	ldr	r3, [pc, #76]	; (8007700 <HAL_RCC_OscConfig+0x4e4>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a12      	ldr	r2, [pc, #72]	; (8007700 <HAL_RCC_OscConfig+0x4e4>)
 80076b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076be:	f7fc fb17 	bl	8003cf0 <HAL_GetTick>
 80076c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076c4:	e008      	b.n	80076d8 <HAL_RCC_OscConfig+0x4bc>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80076c6:	f7fc fb13 	bl	8003cf0 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	2b64      	cmp	r3, #100	; 0x64
 80076d2:	d901      	bls.n	80076d8 <HAL_RCC_OscConfig+0x4bc>
      {
        return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e1a1      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076d8:	4b09      	ldr	r3, [pc, #36]	; (8007700 <HAL_RCC_OscConfig+0x4e4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d0f0      	beq.n	80076c6 <HAL_RCC_OscConfig+0x4aa>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d10b      	bne.n	8007704 <HAL_RCC_OscConfig+0x4e8>
 80076ec:	4b03      	ldr	r3, [pc, #12]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80076ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f0:	4a02      	ldr	r2, [pc, #8]	; (80076fc <HAL_RCC_OscConfig+0x4e0>)
 80076f2:	f043 0301 	orr.w	r3, r3, #1
 80076f6:	6713      	str	r3, [r2, #112]	; 0x70
 80076f8:	e05b      	b.n	80077b2 <HAL_RCC_OscConfig+0x596>
 80076fa:	bf00      	nop
 80076fc:	58024400 	.word	0x58024400
 8007700:	58024800 	.word	0x58024800
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d112      	bne.n	8007732 <HAL_RCC_OscConfig+0x516>
 800770c:	4b9d      	ldr	r3, [pc, #628]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800770e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007710:	4a9c      	ldr	r2, [pc, #624]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007712:	f023 0301 	bic.w	r3, r3, #1
 8007716:	6713      	str	r3, [r2, #112]	; 0x70
 8007718:	4b9a      	ldr	r3, [pc, #616]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800771a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771c:	4a99      	ldr	r2, [pc, #612]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800771e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007722:	6713      	str	r3, [r2, #112]	; 0x70
 8007724:	4b97      	ldr	r3, [pc, #604]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007728:	4a96      	ldr	r2, [pc, #600]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800772a:	f023 0304 	bic.w	r3, r3, #4
 800772e:	6713      	str	r3, [r2, #112]	; 0x70
 8007730:	e03f      	b.n	80077b2 <HAL_RCC_OscConfig+0x596>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	2b05      	cmp	r3, #5
 8007738:	d112      	bne.n	8007760 <HAL_RCC_OscConfig+0x544>
 800773a:	4b92      	ldr	r3, [pc, #584]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800773c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773e:	4a91      	ldr	r2, [pc, #580]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007740:	f043 0304 	orr.w	r3, r3, #4
 8007744:	6713      	str	r3, [r2, #112]	; 0x70
 8007746:	4b8f      	ldr	r3, [pc, #572]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774a:	4a8e      	ldr	r2, [pc, #568]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800774c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007750:	6713      	str	r3, [r2, #112]	; 0x70
 8007752:	4b8c      	ldr	r3, [pc, #560]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007756:	4a8b      	ldr	r2, [pc, #556]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007758:	f043 0301 	orr.w	r3, r3, #1
 800775c:	6713      	str	r3, [r2, #112]	; 0x70
 800775e:	e028      	b.n	80077b2 <HAL_RCC_OscConfig+0x596>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b85      	cmp	r3, #133	; 0x85
 8007766:	d112      	bne.n	800778e <HAL_RCC_OscConfig+0x572>
 8007768:	4b86      	ldr	r3, [pc, #536]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800776a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776c:	4a85      	ldr	r2, [pc, #532]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800776e:	f043 0304 	orr.w	r3, r3, #4
 8007772:	6713      	str	r3, [r2, #112]	; 0x70
 8007774:	4b83      	ldr	r3, [pc, #524]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007778:	4a82      	ldr	r2, [pc, #520]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800777a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777e:	6713      	str	r3, [r2, #112]	; 0x70
 8007780:	4b80      	ldr	r3, [pc, #512]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007784:	4a7f      	ldr	r2, [pc, #508]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	6713      	str	r3, [r2, #112]	; 0x70
 800778c:	e011      	b.n	80077b2 <HAL_RCC_OscConfig+0x596>
 800778e:	4b7d      	ldr	r3, [pc, #500]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	4a7c      	ldr	r2, [pc, #496]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	6713      	str	r3, [r2, #112]	; 0x70
 800779a:	4b7a      	ldr	r3, [pc, #488]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800779c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779e:	4a79      	ldr	r2, [pc, #484]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80077a0:	f023 0304 	bic.w	r3, r3, #4
 80077a4:	6713      	str	r3, [r2, #112]	; 0x70
 80077a6:	4b77      	ldr	r3, [pc, #476]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80077a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077aa:	4a76      	ldr	r2, [pc, #472]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80077ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d015      	beq.n	80077e6 <HAL_RCC_OscConfig+0x5ca>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ba:	f7fc fa99 	bl	8003cf0 <HAL_GetTick>
 80077be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077c0:	e00a      	b.n	80077d8 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077c2:	f7fc fa95 	bl	8003cf0 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d901      	bls.n	80077d8 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e121      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077d8:	4b6a      	ldr	r3, [pc, #424]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80077da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0ee      	beq.n	80077c2 <HAL_RCC_OscConfig+0x5a6>
 80077e4:	e014      	b.n	8007810 <HAL_RCC_OscConfig+0x5f4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e6:	f7fc fa83 	bl	8003cf0 <HAL_GetTick>
 80077ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077ec:	e00a      	b.n	8007804 <HAL_RCC_OscConfig+0x5e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077ee:	f7fc fa7f 	bl	8003cf0 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x5e8>
        {
          return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e10b      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007804:	4b5f      	ldr	r3, [pc, #380]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1ee      	bne.n	80077ee <HAL_RCC_OscConfig+0x5d2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8100 	beq.w	8007a1a <HAL_RCC_OscConfig+0x7fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800781a:	4b5a      	ldr	r3, [pc, #360]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007822:	2b18      	cmp	r3, #24
 8007824:	f000 80bb 	beq.w	800799e <HAL_RCC_OscConfig+0x782>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	2b02      	cmp	r3, #2
 800782e:	f040 8095 	bne.w	800795c <HAL_RCC_OscConfig+0x740>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007832:	4b54      	ldr	r3, [pc, #336]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a53      	ldr	r2, [pc, #332]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800783c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783e:	f7fc fa57 	bl	8003cf0 <HAL_GetTick>
 8007842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007844:	e008      	b.n	8007858 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007846:	f7fc fa53 	bl	8003cf0 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e0e1      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007858:	4b4a      	ldr	r3, [pc, #296]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1f0      	bne.n	8007846 <HAL_RCC_OscConfig+0x62a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007864:	4b47      	ldr	r3, [pc, #284]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007868:	4b47      	ldr	r3, [pc, #284]	; (8007988 <HAL_RCC_OscConfig+0x76c>)
 800786a:	4013      	ands	r3, r2
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007874:	0112      	lsls	r2, r2, #4
 8007876:	430a      	orrs	r2, r1
 8007878:	4942      	ldr	r1, [pc, #264]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800787a:	4313      	orrs	r3, r2
 800787c:	628b      	str	r3, [r1, #40]	; 0x28
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	3b01      	subs	r3, #1
 8007884:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788c:	3b01      	subs	r3, #1
 800788e:	025b      	lsls	r3, r3, #9
 8007890:	b29b      	uxth	r3, r3
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	3b01      	subs	r3, #1
 800789a:	041b      	lsls	r3, r3, #16
 800789c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a6:	3b01      	subs	r3, #1
 80078a8:	061b      	lsls	r3, r3, #24
 80078aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078ae:	4935      	ldr	r1, [pc, #212]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80078b4:	4b33      	ldr	r3, [pc, #204]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	4a32      	ldr	r2, [pc, #200]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078ba:	f023 0301 	bic.w	r3, r3, #1
 80078be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80078c0:	4b30      	ldr	r3, [pc, #192]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c4:	4b31      	ldr	r3, [pc, #196]	; (800798c <HAL_RCC_OscConfig+0x770>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078cc:	00d2      	lsls	r2, r2, #3
 80078ce:	492d      	ldr	r1, [pc, #180]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80078d4:	4b2b      	ldr	r3, [pc, #172]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	f023 020c 	bic.w	r2, r3, #12
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e0:	4928      	ldr	r1, [pc, #160]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80078e6:	4b27      	ldr	r3, [pc, #156]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	f023 0202 	bic.w	r2, r3, #2
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	4924      	ldr	r1, [pc, #144]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078f8:	4b22      	ldr	r3, [pc, #136]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	4a21      	ldr	r2, [pc, #132]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 80078fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007904:	4b1f      	ldr	r3, [pc, #124]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	4a1e      	ldr	r2, [pc, #120]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800790a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800790e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007910:	4b1c      	ldr	r3, [pc, #112]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	4a1b      	ldr	r2, [pc, #108]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800791a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800791c:	4b19      	ldr	r3, [pc, #100]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800791e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007920:	4a18      	ldr	r2, [pc, #96]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007922:	f043 0301 	orr.w	r3, r3, #1
 8007926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007928:	4b16      	ldr	r3, [pc, #88]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a15      	ldr	r2, [pc, #84]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800792e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007934:	f7fc f9dc 	bl	8003cf0 <HAL_GetTick>
 8007938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800793a:	e008      	b.n	800794e <HAL_RCC_OscConfig+0x732>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800793c:	f7fc f9d8 	bl	8003cf0 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b02      	cmp	r3, #2
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0x732>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e066      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800794e:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0f0      	beq.n	800793c <HAL_RCC_OscConfig+0x720>
 800795a:	e05e      	b.n	8007a1a <HAL_RCC_OscConfig+0x7fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800795c:	4b09      	ldr	r3, [pc, #36]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a08      	ldr	r2, [pc, #32]	; (8007984 <HAL_RCC_OscConfig+0x768>)
 8007962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007968:	f7fc f9c2 	bl	8003cf0 <HAL_GetTick>
 800796c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800796e:	e00f      	b.n	8007990 <HAL_RCC_OscConfig+0x774>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007970:	f7fc f9be 	bl	8003cf0 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d908      	bls.n	8007990 <HAL_RCC_OscConfig+0x774>
          {
            return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e04c      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
 8007982:	bf00      	nop
 8007984:	58024400 	.word	0x58024400
 8007988:	fffffc0c 	.word	0xfffffc0c
 800798c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007990:	4b24      	ldr	r3, [pc, #144]	; (8007a24 <HAL_RCC_OscConfig+0x808>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e9      	bne.n	8007970 <HAL_RCC_OscConfig+0x754>
 800799c:	e03d      	b.n	8007a1a <HAL_RCC_OscConfig+0x7fe>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800799e:	4b21      	ldr	r3, [pc, #132]	; (8007a24 <HAL_RCC_OscConfig+0x808>)
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80079a4:	4b1f      	ldr	r3, [pc, #124]	; (8007a24 <HAL_RCC_OscConfig+0x808>)
 80079a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d031      	beq.n	8007a16 <HAL_RCC_OscConfig+0x7fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f003 0203 	and.w	r2, r3, #3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079bc:	429a      	cmp	r2, r3
 80079be:	d12a      	bne.n	8007a16 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	091b      	lsrs	r3, r3, #4
 80079c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d122      	bne.n	8007a16 <HAL_RCC_OscConfig+0x7fa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079dc:	429a      	cmp	r2, r3
 80079de:	d11a      	bne.n	8007a16 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	0a5b      	lsrs	r3, r3, #9
 80079e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ec:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d111      	bne.n	8007a16 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	0c1b      	lsrs	r3, r3, #16
 80079f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d108      	bne.n	8007a16 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	0e1b      	lsrs	r3, r3, #24
 8007a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a10:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d001      	beq.n	8007a1a <HAL_RCC_OscConfig+0x7fe>
      {
        return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e000      	b.n	8007a1c <HAL_RCC_OscConfig+0x800>
      }
    }
  }
  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3730      	adds	r7, #48	; 0x30
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	58024400 	.word	0x58024400

08007a28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e19c      	b.n	8007d76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a3c:	4b8a      	ldr	r3, [pc, #552]	; (8007c68 <HAL_RCC_ClockConfig+0x240>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 030f 	and.w	r3, r3, #15
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d910      	bls.n	8007a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a4a:	4b87      	ldr	r3, [pc, #540]	; (8007c68 <HAL_RCC_ClockConfig+0x240>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f023 020f 	bic.w	r2, r3, #15
 8007a52:	4985      	ldr	r1, [pc, #532]	; (8007c68 <HAL_RCC_ClockConfig+0x240>)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a5a:	4b83      	ldr	r3, [pc, #524]	; (8007c68 <HAL_RCC_ClockConfig+0x240>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 030f 	and.w	r3, r3, #15
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d001      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e184      	b.n	8007d76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d010      	beq.n	8007a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	4b7b      	ldr	r3, [pc, #492]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d908      	bls.n	8007a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a88:	4b78      	ldr	r3, [pc, #480]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	4975      	ldr	r1, [pc, #468]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0308 	and.w	r3, r3, #8
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d010      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	4b70      	ldr	r3, [pc, #448]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d908      	bls.n	8007ac8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ab6:	4b6d      	ldr	r3, [pc, #436]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	496a      	ldr	r1, [pc, #424]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d010      	beq.n	8007af6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	4b64      	ldr	r3, [pc, #400]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d908      	bls.n	8007af6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ae4:	4b61      	ldr	r3, [pc, #388]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	495e      	ldr	r1, [pc, #376]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d010      	beq.n	8007b24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69da      	ldr	r2, [r3, #28]
 8007b06:	4b59      	ldr	r3, [pc, #356]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d908      	bls.n	8007b24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007b12:	4b56      	ldr	r3, [pc, #344]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	4953      	ldr	r1, [pc, #332]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d010      	beq.n	8007b52 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	4b4d      	ldr	r3, [pc, #308]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f003 030f 	and.w	r3, r3, #15
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d908      	bls.n	8007b52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b40:	4b4a      	ldr	r3, [pc, #296]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	f023 020f 	bic.w	r2, r3, #15
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	4947      	ldr	r1, [pc, #284]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d055      	beq.n	8007c0a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b5e:	4b43      	ldr	r3, [pc, #268]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	4940      	ldr	r1, [pc, #256]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d107      	bne.n	8007b88 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b78:	4b3c      	ldr	r3, [pc, #240]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d121      	bne.n	8007bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e0f6      	b.n	8007d76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d107      	bne.n	8007ba0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b90:	4b36      	ldr	r3, [pc, #216]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d115      	bne.n	8007bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e0ea      	b.n	8007d76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d107      	bne.n	8007bb8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ba8:	4b30      	ldr	r3, [pc, #192]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e0de      	b.n	8007d76 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bb8:	4b2c      	ldr	r3, [pc, #176]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e0d6      	b.n	8007d76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bc8:	4b28      	ldr	r3, [pc, #160]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	f023 0207 	bic.w	r2, r3, #7
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	4925      	ldr	r1, [pc, #148]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bda:	f7fc f889 	bl	8003cf0 <HAL_GetTick>
 8007bde:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007be0:	e00a      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007be2:	f7fc f885 	bl	8003cf0 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e0be      	b.n	8007d76 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bf8:	4b1c      	ldr	r3, [pc, #112]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d1eb      	bne.n	8007be2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d010      	beq.n	8007c38 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	4b14      	ldr	r3, [pc, #80]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d208      	bcs.n	8007c38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c26:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	f023 020f 	bic.w	r2, r3, #15
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	490e      	ldr	r1, [pc, #56]	; (8007c6c <HAL_RCC_ClockConfig+0x244>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c38:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <HAL_RCC_ClockConfig+0x240>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 030f 	and.w	r3, r3, #15
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d214      	bcs.n	8007c70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c46:	4b08      	ldr	r3, [pc, #32]	; (8007c68 <HAL_RCC_ClockConfig+0x240>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f023 020f 	bic.w	r2, r3, #15
 8007c4e:	4906      	ldr	r1, [pc, #24]	; (8007c68 <HAL_RCC_ClockConfig+0x240>)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c56:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <HAL_RCC_ClockConfig+0x240>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d005      	beq.n	8007c70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e086      	b.n	8007d76 <HAL_RCC_ClockConfig+0x34e>
 8007c68:	52002000 	.word	0x52002000
 8007c6c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d010      	beq.n	8007c9e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	4b3f      	ldr	r3, [pc, #252]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d208      	bcs.n	8007c9e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c8c:	4b3c      	ldr	r3, [pc, #240]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	4939      	ldr	r1, [pc, #228]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d010      	beq.n	8007ccc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	4b34      	ldr	r3, [pc, #208]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d208      	bcs.n	8007ccc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cba:	4b31      	ldr	r3, [pc, #196]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	492e      	ldr	r1, [pc, #184]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0310 	and.w	r3, r3, #16
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d010      	beq.n	8007cfa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	699a      	ldr	r2, [r3, #24]
 8007cdc:	4b28      	ldr	r3, [pc, #160]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d208      	bcs.n	8007cfa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ce8:	4b25      	ldr	r3, [pc, #148]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	4922      	ldr	r1, [pc, #136]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d010      	beq.n	8007d28 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69da      	ldr	r2, [r3, #28]
 8007d0a:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d208      	bcs.n	8007d28 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007d16:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	4917      	ldr	r1, [pc, #92]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007d28:	f000 f834 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	4b14      	ldr	r3, [pc, #80]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	0a1b      	lsrs	r3, r3, #8
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	4912      	ldr	r1, [pc, #72]	; (8007d84 <HAL_RCC_ClockConfig+0x35c>)
 8007d3a:	5ccb      	ldrb	r3, [r1, r3]
 8007d3c:	f003 031f 	and.w	r3, r3, #31
 8007d40:	fa22 f303 	lsr.w	r3, r2, r3
 8007d44:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007d46:	4b0e      	ldr	r3, [pc, #56]	; (8007d80 <HAL_RCC_ClockConfig+0x358>)
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	4a0d      	ldr	r2, [pc, #52]	; (8007d84 <HAL_RCC_ClockConfig+0x35c>)
 8007d50:	5cd3      	ldrb	r3, [r2, r3]
 8007d52:	f003 031f 	and.w	r3, r3, #31
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5c:	4a0a      	ldr	r2, [pc, #40]	; (8007d88 <HAL_RCC_ClockConfig+0x360>)
 8007d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d60:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <HAL_RCC_ClockConfig+0x364>)
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007d66:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <HAL_RCC_ClockConfig+0x368>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fb ff76 	bl	8003c5c <HAL_InitTick>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	58024400 	.word	0x58024400
 8007d84:	08017cf8 	.word	0x08017cf8
 8007d88:	24000010 	.word	0x24000010
 8007d8c:	2400000c 	.word	0x2400000c
 8007d90:	24000014 	.word	0x24000014

08007d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b089      	sub	sp, #36	; 0x24
 8007d98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d9a:	4bb3      	ldr	r3, [pc, #716]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007da2:	2b18      	cmp	r3, #24
 8007da4:	f200 8155 	bhi.w	8008052 <HAL_RCC_GetSysClockFreq+0x2be>
 8007da8:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007e15 	.word	0x08007e15
 8007db4:	08008053 	.word	0x08008053
 8007db8:	08008053 	.word	0x08008053
 8007dbc:	08008053 	.word	0x08008053
 8007dc0:	08008053 	.word	0x08008053
 8007dc4:	08008053 	.word	0x08008053
 8007dc8:	08008053 	.word	0x08008053
 8007dcc:	08008053 	.word	0x08008053
 8007dd0:	08007e3b 	.word	0x08007e3b
 8007dd4:	08008053 	.word	0x08008053
 8007dd8:	08008053 	.word	0x08008053
 8007ddc:	08008053 	.word	0x08008053
 8007de0:	08008053 	.word	0x08008053
 8007de4:	08008053 	.word	0x08008053
 8007de8:	08008053 	.word	0x08008053
 8007dec:	08008053 	.word	0x08008053
 8007df0:	08007e41 	.word	0x08007e41
 8007df4:	08008053 	.word	0x08008053
 8007df8:	08008053 	.word	0x08008053
 8007dfc:	08008053 	.word	0x08008053
 8007e00:	08008053 	.word	0x08008053
 8007e04:	08008053 	.word	0x08008053
 8007e08:	08008053 	.word	0x08008053
 8007e0c:	08008053 	.word	0x08008053
 8007e10:	08007e47 	.word	0x08007e47
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e14:	4b94      	ldr	r3, [pc, #592]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0320 	and.w	r3, r3, #32
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e20:	4b91      	ldr	r3, [pc, #580]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	08db      	lsrs	r3, r3, #3
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	4a90      	ldr	r2, [pc, #576]	; (800806c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007e32:	e111      	b.n	8008058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e34:	4b8d      	ldr	r3, [pc, #564]	; (800806c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e36:	61bb      	str	r3, [r7, #24]
    break;
 8007e38:	e10e      	b.n	8008058 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007e3a:	4b8d      	ldr	r3, [pc, #564]	; (8008070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e3c:	61bb      	str	r3, [r7, #24]
    break;
 8007e3e:	e10b      	b.n	8008058 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007e40:	4b8c      	ldr	r3, [pc, #560]	; (8008074 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007e42:	61bb      	str	r3, [r7, #24]
    break;
 8007e44:	e108      	b.n	8008058 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e46:	4b88      	ldr	r3, [pc, #544]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007e50:	4b85      	ldr	r3, [pc, #532]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	091b      	lsrs	r3, r3, #4
 8007e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e5a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e5c:	4b82      	ldr	r3, [pc, #520]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e66:	4b80      	ldr	r3, [pc, #512]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6a:	08db      	lsrs	r3, r3, #3
 8007e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	fb02 f303 	mul.w	r3, r2, r3
 8007e76:	ee07 3a90 	vmov	s15, r3
 8007e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80e1 	beq.w	800804c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	f000 8083 	beq.w	8007f98 <HAL_RCC_GetSysClockFreq+0x204>
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	f200 80a1 	bhi.w	8007fdc <HAL_RCC_GetSysClockFreq+0x248>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x114>
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d056      	beq.n	8007f54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007ea6:	e099      	b.n	8007fdc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ea8:	4b6f      	ldr	r3, [pc, #444]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0320 	and.w	r3, r3, #32
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d02d      	beq.n	8007f10 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007eb4:	4b6c      	ldr	r3, [pc, #432]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	08db      	lsrs	r3, r3, #3
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	4a6b      	ldr	r2, [pc, #428]	; (800806c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ede:	4b62      	ldr	r3, [pc, #392]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ef2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007f0e:	e087      	b.n	8008020 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800807c <HAL_RCC_GetSysClockFreq+0x2e8>
 8007f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f22:	4b51      	ldr	r3, [pc, #324]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f52:	e065      	b.n	8008020 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f66:	4b40      	ldr	r3, [pc, #256]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f96:	e043      	b.n	8008020 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008084 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007faa:	4b2f      	ldr	r3, [pc, #188]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fbe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fda:	e021      	b.n	8008020 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	ee07 3a90 	vmov	s15, r3
 8007fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fee:	4b1e      	ldr	r3, [pc, #120]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008002:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800801e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008020:	4b11      	ldr	r3, [pc, #68]	; (8008068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008024:	0a5b      	lsrs	r3, r3, #9
 8008026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800802a:	3301      	adds	r3, #1
 800802c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	ee07 3a90 	vmov	s15, r3
 8008034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008038:	edd7 6a07 	vldr	s13, [r7, #28]
 800803c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008044:	ee17 3a90 	vmov	r3, s15
 8008048:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800804a:	e005      	b.n	8008058 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	61bb      	str	r3, [r7, #24]
    break;
 8008050:	e002      	b.n	8008058 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008052:	4b07      	ldr	r3, [pc, #28]	; (8008070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008054:	61bb      	str	r3, [r7, #24]
    break;
 8008056:	bf00      	nop
  }

  return sysclockfreq;
 8008058:	69bb      	ldr	r3, [r7, #24]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3724      	adds	r7, #36	; 0x24
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	58024400 	.word	0x58024400
 800806c:	03d09000 	.word	0x03d09000
 8008070:	003d0900 	.word	0x003d0900
 8008074:	016e3600 	.word	0x016e3600
 8008078:	46000000 	.word	0x46000000
 800807c:	4c742400 	.word	0x4c742400
 8008080:	4a742400 	.word	0x4a742400
 8008084:	4bb71b00 	.word	0x4bb71b00

08008088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800808e:	f7ff fe81 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8008092:	4602      	mov	r2, r0
 8008094:	4b10      	ldr	r3, [pc, #64]	; (80080d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	0a1b      	lsrs	r3, r3, #8
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	490f      	ldr	r1, [pc, #60]	; (80080dc <HAL_RCC_GetHCLKFreq+0x54>)
 80080a0:	5ccb      	ldrb	r3, [r1, r3]
 80080a2:	f003 031f 	and.w	r3, r3, #31
 80080a6:	fa22 f303 	lsr.w	r3, r2, r3
 80080aa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80080ac:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	4a09      	ldr	r2, [pc, #36]	; (80080dc <HAL_RCC_GetHCLKFreq+0x54>)
 80080b6:	5cd3      	ldrb	r3, [r2, r3]
 80080b8:	f003 031f 	and.w	r3, r3, #31
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	fa22 f303 	lsr.w	r3, r2, r3
 80080c2:	4a07      	ldr	r2, [pc, #28]	; (80080e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80080c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080c6:	4a07      	ldr	r2, [pc, #28]	; (80080e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80080cc:	4b04      	ldr	r3, [pc, #16]	; (80080e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80080ce:	681b      	ldr	r3, [r3, #0]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	58024400 	.word	0x58024400
 80080dc:	08017cf8 	.word	0x08017cf8
 80080e0:	24000010 	.word	0x24000010
 80080e4:	2400000c 	.word	0x2400000c

080080e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80080ec:	f7ff ffcc 	bl	8008088 <HAL_RCC_GetHCLKFreq>
 80080f0:	4602      	mov	r2, r0
 80080f2:	4b06      	ldr	r3, [pc, #24]	; (800810c <HAL_RCC_GetPCLK1Freq+0x24>)
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	091b      	lsrs	r3, r3, #4
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	4904      	ldr	r1, [pc, #16]	; (8008110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80080fe:	5ccb      	ldrb	r3, [r1, r3]
 8008100:	f003 031f 	and.w	r3, r3, #31
 8008104:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008108:	4618      	mov	r0, r3
 800810a:	bd80      	pop	{r7, pc}
 800810c:	58024400 	.word	0x58024400
 8008110:	08017cf8 	.word	0x08017cf8

08008114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008118:	f7ff ffb6 	bl	8008088 <HAL_RCC_GetHCLKFreq>
 800811c:	4602      	mov	r2, r0
 800811e:	4b06      	ldr	r3, [pc, #24]	; (8008138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	0a1b      	lsrs	r3, r3, #8
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	4904      	ldr	r1, [pc, #16]	; (800813c <HAL_RCC_GetPCLK2Freq+0x28>)
 800812a:	5ccb      	ldrb	r3, [r1, r3]
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008134:	4618      	mov	r0, r3
 8008136:	bd80      	pop	{r7, pc}
 8008138:	58024400 	.word	0x58024400
 800813c:	08017cf8 	.word	0x08017cf8

08008140 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008148:	2300      	movs	r3, #0
 800814a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800814c:	2300      	movs	r3, #0
 800814e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d03f      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008160:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008164:	d02a      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800816a:	d824      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800816c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008170:	d018      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008176:	d81e      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800817c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008180:	d007      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008182:	e018      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008184:	4b9f      	ldr	r3, [pc, #636]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	4a9e      	ldr	r2, [pc, #632]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800818a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800818e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008190:	e015      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3304      	adds	r3, #4
 8008196:	2102      	movs	r1, #2
 8008198:	4618      	mov	r0, r3
 800819a:	f001 ff1b 	bl	8009fd4 <RCCEx_PLL2_Config>
 800819e:	4603      	mov	r3, r0
 80081a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80081a2:	e00c      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3324      	adds	r3, #36	; 0x24
 80081a8:	2102      	movs	r1, #2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f001 ffc4 	bl	800a138 <RCCEx_PLL3_Config>
 80081b0:	4603      	mov	r3, r0
 80081b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80081b4:	e003      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	75fb      	strb	r3, [r7, #23]
      break;
 80081ba:	e000      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80081bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d109      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80081c4:	4b8f      	ldr	r3, [pc, #572]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d0:	498c      	ldr	r1, [pc, #560]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	650b      	str	r3, [r1, #80]	; 0x50
 80081d6:	e001      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d03d      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d826      	bhi.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80081f0:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80081f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f6:	bf00      	nop
 80081f8:	0800820d 	.word	0x0800820d
 80081fc:	0800821b 	.word	0x0800821b
 8008200:	0800822d 	.word	0x0800822d
 8008204:	08008245 	.word	0x08008245
 8008208:	08008245 	.word	0x08008245
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800820c:	4b7d      	ldr	r3, [pc, #500]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	4a7c      	ldr	r2, [pc, #496]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008218:	e015      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3304      	adds	r3, #4
 800821e:	2100      	movs	r1, #0
 8008220:	4618      	mov	r0, r3
 8008222:	f001 fed7 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008226:	4603      	mov	r3, r0
 8008228:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800822a:	e00c      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3324      	adds	r3, #36	; 0x24
 8008230:	2100      	movs	r1, #0
 8008232:	4618      	mov	r0, r3
 8008234:	f001 ff80 	bl	800a138 <RCCEx_PLL3_Config>
 8008238:	4603      	mov	r3, r0
 800823a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800823c:	e003      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	75fb      	strb	r3, [r7, #23]
      break;
 8008242:	e000      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d109      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800824c:	4b6d      	ldr	r3, [pc, #436]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800824e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008250:	f023 0207 	bic.w	r2, r3, #7
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008258:	496a      	ldr	r1, [pc, #424]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800825a:	4313      	orrs	r3, r2
 800825c:	650b      	str	r3, [r1, #80]	; 0x50
 800825e:	e001      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800826c:	2b00      	cmp	r3, #0
 800826e:	d04a      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008274:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008278:	d031      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800827a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800827e:	d82b      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008284:	d02d      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8008286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800828a:	d825      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800828c:	2bc0      	cmp	r3, #192	; 0xc0
 800828e:	d02a      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008290:	2bc0      	cmp	r3, #192	; 0xc0
 8008292:	d821      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008294:	2b80      	cmp	r3, #128	; 0x80
 8008296:	d016      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008298:	2b80      	cmp	r3, #128	; 0x80
 800829a:	d81d      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80082a0:	2b40      	cmp	r3, #64	; 0x40
 80082a2:	d007      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80082a4:	e018      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a6:	4b57      	ldr	r3, [pc, #348]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	4a56      	ldr	r2, [pc, #344]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80082b2:	e019      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	2100      	movs	r1, #0
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fe8a 	bl	8009fd4 <RCCEx_PLL2_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80082c4:	e010      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3324      	adds	r3, #36	; 0x24
 80082ca:	2100      	movs	r1, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 ff33 	bl	800a138 <RCCEx_PLL3_Config>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80082d6:	e007      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	75fb      	strb	r3, [r7, #23]
      break;
 80082dc:	e004      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80082de:	bf00      	nop
 80082e0:	e002      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80082e2:	bf00      	nop
 80082e4:	e000      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80082e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d109      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80082ee:	4b45      	ldr	r3, [pc, #276]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fa:	4942      	ldr	r1, [pc, #264]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	650b      	str	r3, [r1, #80]	; 0x50
 8008300:	e001      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800830e:	2b00      	cmp	r3, #0
 8008310:	d04f      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008316:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800831a:	d036      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800831c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008320:	d830      	bhi.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008326:	d032      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8008328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832c:	d82a      	bhi.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800832e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008332:	d02e      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8008334:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008338:	d824      	bhi.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800833a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800833e:	d018      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8008340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008344:	d81e      	bhi.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800834a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800834e:	d007      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8008350:	e018      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008352:	4b2c      	ldr	r3, [pc, #176]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008356:	4a2b      	ldr	r2, [pc, #172]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800835c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800835e:	e019      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3304      	adds	r3, #4
 8008364:	2100      	movs	r1, #0
 8008366:	4618      	mov	r0, r3
 8008368:	f001 fe34 	bl	8009fd4 <RCCEx_PLL2_Config>
 800836c:	4603      	mov	r3, r0
 800836e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8008370:	e010      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	3324      	adds	r3, #36	; 0x24
 8008376:	2100      	movs	r1, #0
 8008378:	4618      	mov	r0, r3
 800837a:	f001 fedd 	bl	800a138 <RCCEx_PLL3_Config>
 800837e:	4603      	mov	r3, r0
 8008380:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8008382:	e007      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	75fb      	strb	r3, [r7, #23]
      break;
 8008388:	e004      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800838a:	bf00      	nop
 800838c:	e002      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800838e:	bf00      	nop
 8008390:	e000      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8008392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d109      	bne.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800839a:	4b1a      	ldr	r3, [pc, #104]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800839c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a6:	4917      	ldr	r1, [pc, #92]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	650b      	str	r3, [r1, #80]	; 0x50
 80083ac:	e001      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d034      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c2:	2b30      	cmp	r3, #48	; 0x30
 80083c4:	d01c      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80083c6:	2b30      	cmp	r3, #48	; 0x30
 80083c8:	d817      	bhi.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	d00c      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d813      	bhi.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d018      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80083d6:	2b10      	cmp	r3, #16
 80083d8:	d10f      	bne.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083da:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	4a09      	ldr	r2, [pc, #36]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80083e6:	e010      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	2102      	movs	r1, #2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 fdf0 	bl	8009fd4 <RCCEx_PLL2_Config>
 80083f4:	4603      	mov	r3, r0
 80083f6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80083f8:	e007      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	75fb      	strb	r3, [r7, #23]
      break;
 80083fe:	e004      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8008400:	bf00      	nop
 8008402:	e002      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008404:	58024400 	.word	0x58024400
      break;
 8008408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d109      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008410:	4b9b      	ldr	r3, [pc, #620]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008414:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800841c:	4998      	ldr	r1, [pc, #608]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800841e:	4313      	orrs	r3, r2
 8008420:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008422:	e001      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d047      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800843c:	d030      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800843e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008442:	d82a      	bhi.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008444:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008448:	d02c      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800844a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800844e:	d824      	bhi.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008454:	d018      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800845a:	d81e      	bhi.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8008460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008464:	d007      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008466:	e018      	b.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008468:	4b85      	ldr	r3, [pc, #532]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	4a84      	ldr	r2, [pc, #528]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800846e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008472:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008474:	e017      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3304      	adds	r3, #4
 800847a:	2100      	movs	r1, #0
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fda9 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008482:	4603      	mov	r3, r0
 8008484:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008486:	e00e      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3324      	adds	r3, #36	; 0x24
 800848c:	2100      	movs	r1, #0
 800848e:	4618      	mov	r0, r3
 8008490:	f001 fe52 	bl	800a138 <RCCEx_PLL3_Config>
 8008494:	4603      	mov	r3, r0
 8008496:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008498:	e005      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	75fb      	strb	r3, [r7, #23]
      break;
 800849e:	e002      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80084a0:	bf00      	nop
 80084a2:	e000      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80084a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d109      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80084ac:	4b74      	ldr	r3, [pc, #464]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80084ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b8:	4971      	ldr	r1, [pc, #452]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	650b      	str	r3, [r1, #80]	; 0x50
 80084be:	e001      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d049      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084d8:	d02e      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80084da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084de:	d828      	bhi.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80084e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084e4:	d02a      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80084e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084ea:	d822      	bhi.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80084ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084f0:	d026      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80084f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084f6:	d81c      	bhi.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80084f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084fc:	d010      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80084fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008502:	d816      	bhi.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01d      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8008508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800850c:	d111      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3304      	adds	r3, #4
 8008512:	2101      	movs	r1, #1
 8008514:	4618      	mov	r0, r3
 8008516:	f001 fd5d 	bl	8009fd4 <RCCEx_PLL2_Config>
 800851a:	4603      	mov	r3, r0
 800851c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800851e:	e012      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3324      	adds	r3, #36	; 0x24
 8008524:	2101      	movs	r1, #1
 8008526:	4618      	mov	r0, r3
 8008528:	f001 fe06 	bl	800a138 <RCCEx_PLL3_Config>
 800852c:	4603      	mov	r3, r0
 800852e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008530:	e009      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	75fb      	strb	r3, [r7, #23]
      break;
 8008536:	e006      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008538:	bf00      	nop
 800853a:	e004      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800853c:	bf00      	nop
 800853e:	e002      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008540:	bf00      	nop
 8008542:	e000      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d109      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800854c:	4b4c      	ldr	r3, [pc, #304]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800854e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008550:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008558:	4949      	ldr	r1, [pc, #292]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800855a:	4313      	orrs	r3, r2
 800855c:	650b      	str	r3, [r1, #80]	; 0x50
 800855e:	e001      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d053      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008576:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800857a:	d034      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800857c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008580:	d82e      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008586:	d030      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8008588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800858c:	d828      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800858e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008592:	d02c      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008598:	d822      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800859a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800859e:	d028      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80085a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085a4:	d81c      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80085a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085aa:	d010      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80085ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085b0:	d816      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01f      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80085b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ba:	d111      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3304      	adds	r3, #4
 80085c0:	2101      	movs	r1, #1
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fd06 	bl	8009fd4 <RCCEx_PLL2_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80085cc:	e014      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3324      	adds	r3, #36	; 0x24
 80085d2:	2101      	movs	r1, #1
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fdaf 	bl	800a138 <RCCEx_PLL3_Config>
 80085da:	4603      	mov	r3, r0
 80085dc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80085de:	e00b      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	75fb      	strb	r3, [r7, #23]
      break;
 80085e4:	e008      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80085e6:	bf00      	nop
 80085e8:	e006      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80085ea:	bf00      	nop
 80085ec:	e004      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80085ee:	bf00      	nop
 80085f0:	e002      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80085f2:	bf00      	nop
 80085f4:	e000      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80085f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10a      	bne.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80085fe:	4b20      	ldr	r3, [pc, #128]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008602:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800860c:	491c      	ldr	r1, [pc, #112]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800860e:	4313      	orrs	r3, r2
 8008610:	658b      	str	r3, [r1, #88]	; 0x58
 8008612:	e001      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d031      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800862c:	d00e      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800862e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008632:	d814      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008634:	2b00      	cmp	r3, #0
 8008636:	d015      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800863c:	d10f      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800863e:	4b10      	ldr	r3, [pc, #64]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008642:	4a0f      	ldr	r2, [pc, #60]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008648:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800864a:	e00c      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3304      	adds	r3, #4
 8008650:	2101      	movs	r1, #1
 8008652:	4618      	mov	r0, r3
 8008654:	f001 fcbe 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008658:	4603      	mov	r3, r0
 800865a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800865c:	e003      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	75fb      	strb	r3, [r7, #23]
      break;
 8008662:	e000      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8008664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10b      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008670:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008678:	4901      	ldr	r1, [pc, #4]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800867a:	4313      	orrs	r3, r2
 800867c:	650b      	str	r3, [r1, #80]	; 0x50
 800867e:	e003      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8008680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d032      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008698:	2b03      	cmp	r3, #3
 800869a:	d81b      	bhi.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800869c:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800869e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a2:	bf00      	nop
 80086a4:	080086db 	.word	0x080086db
 80086a8:	080086b5 	.word	0x080086b5
 80086ac:	080086c3 	.word	0x080086c3
 80086b0:	080086db 	.word	0x080086db
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b4:	4bb2      	ldr	r3, [pc, #712]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4ab1      	ldr	r2, [pc, #708]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80086ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80086c0:	e00c      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	3304      	adds	r3, #4
 80086c6:	2102      	movs	r1, #2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 fc83 	bl	8009fd4 <RCCEx_PLL2_Config>
 80086ce:	4603      	mov	r3, r0
 80086d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80086d2:	e003      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	75fb      	strb	r3, [r7, #23]
      break;
 80086d8:	e000      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80086da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80086e2:	4ba7      	ldr	r3, [pc, #668]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80086e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e6:	f023 0203 	bic.w	r2, r3, #3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ee:	49a4      	ldr	r1, [pc, #656]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086f4:	e001      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 8086 	beq.w	8008814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008708:	4b9e      	ldr	r3, [pc, #632]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a9d      	ldr	r2, [pc, #628]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800870e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008712:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008714:	f7fb faec 	bl	8003cf0 <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800871a:	e009      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800871c:	f7fb fae8 	bl	8003cf0 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b64      	cmp	r3, #100	; 0x64
 8008728:	d902      	bls.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	75fb      	strb	r3, [r7, #23]
        break;
 800872e:	e005      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008730:	4b94      	ldr	r3, [pc, #592]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0ef      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d166      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008742:	4b8f      	ldr	r3, [pc, #572]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008744:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800874c:	4053      	eors	r3, r2
 800874e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008752:	2b00      	cmp	r3, #0
 8008754:	d013      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008756:	4b8a      	ldr	r3, [pc, #552]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800875e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008760:	4b87      	ldr	r3, [pc, #540]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008764:	4a86      	ldr	r2, [pc, #536]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800876a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800876c:	4b84      	ldr	r3, [pc, #528]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800876e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008770:	4a83      	ldr	r2, [pc, #524]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008776:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008778:	4a81      	ldr	r2, [pc, #516]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008788:	d115      	bne.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878a:	f7fb fab1 	bl	8003cf0 <HAL_GetTick>
 800878e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008790:	e00b      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008792:	f7fb faad 	bl	8003cf0 <HAL_GetTick>
 8008796:	4602      	mov	r2, r0
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d902      	bls.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	75fb      	strb	r3, [r7, #23]
            break;
 80087a8:	e005      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087aa:	4b75      	ldr	r3, [pc, #468]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0ed      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d126      	bne.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087ca:	d10d      	bne.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80087cc:	4b6c      	ldr	r3, [pc, #432]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087da:	0919      	lsrs	r1, r3, #4
 80087dc:	4b6a      	ldr	r3, [pc, #424]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087de:	400b      	ands	r3, r1
 80087e0:	4967      	ldr	r1, [pc, #412]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	610b      	str	r3, [r1, #16]
 80087e6:	e005      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80087e8:	4b65      	ldr	r3, [pc, #404]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	4a64      	ldr	r2, [pc, #400]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80087f2:	6113      	str	r3, [r2, #16]
 80087f4:	4b62      	ldr	r3, [pc, #392]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008802:	495f      	ldr	r1, [pc, #380]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008804:	4313      	orrs	r3, r2
 8008806:	670b      	str	r3, [r1, #112]	; 0x70
 8008808:	e004      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	75bb      	strb	r3, [r7, #22]
 800880e:	e001      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d07f      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008826:	2b28      	cmp	r3, #40	; 0x28
 8008828:	d866      	bhi.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	080088ff 	.word	0x080088ff
 8008834:	080088f9 	.word	0x080088f9
 8008838:	080088f9 	.word	0x080088f9
 800883c:	080088f9 	.word	0x080088f9
 8008840:	080088f9 	.word	0x080088f9
 8008844:	080088f9 	.word	0x080088f9
 8008848:	080088f9 	.word	0x080088f9
 800884c:	080088f9 	.word	0x080088f9
 8008850:	080088d5 	.word	0x080088d5
 8008854:	080088f9 	.word	0x080088f9
 8008858:	080088f9 	.word	0x080088f9
 800885c:	080088f9 	.word	0x080088f9
 8008860:	080088f9 	.word	0x080088f9
 8008864:	080088f9 	.word	0x080088f9
 8008868:	080088f9 	.word	0x080088f9
 800886c:	080088f9 	.word	0x080088f9
 8008870:	080088e7 	.word	0x080088e7
 8008874:	080088f9 	.word	0x080088f9
 8008878:	080088f9 	.word	0x080088f9
 800887c:	080088f9 	.word	0x080088f9
 8008880:	080088f9 	.word	0x080088f9
 8008884:	080088f9 	.word	0x080088f9
 8008888:	080088f9 	.word	0x080088f9
 800888c:	080088f9 	.word	0x080088f9
 8008890:	080088ff 	.word	0x080088ff
 8008894:	080088f9 	.word	0x080088f9
 8008898:	080088f9 	.word	0x080088f9
 800889c:	080088f9 	.word	0x080088f9
 80088a0:	080088f9 	.word	0x080088f9
 80088a4:	080088f9 	.word	0x080088f9
 80088a8:	080088f9 	.word	0x080088f9
 80088ac:	080088f9 	.word	0x080088f9
 80088b0:	080088ff 	.word	0x080088ff
 80088b4:	080088f9 	.word	0x080088f9
 80088b8:	080088f9 	.word	0x080088f9
 80088bc:	080088f9 	.word	0x080088f9
 80088c0:	080088f9 	.word	0x080088f9
 80088c4:	080088f9 	.word	0x080088f9
 80088c8:	080088f9 	.word	0x080088f9
 80088cc:	080088f9 	.word	0x080088f9
 80088d0:	080088ff 	.word	0x080088ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3304      	adds	r3, #4
 80088d8:	2101      	movs	r1, #1
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 fb7a 	bl	8009fd4 <RCCEx_PLL2_Config>
 80088e0:	4603      	mov	r3, r0
 80088e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80088e4:	e00c      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3324      	adds	r3, #36	; 0x24
 80088ea:	2101      	movs	r1, #1
 80088ec:	4618      	mov	r0, r3
 80088ee:	f001 fc23 	bl	800a138 <RCCEx_PLL3_Config>
 80088f2:	4603      	mov	r3, r0
 80088f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80088f6:	e003      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	75fb      	strb	r3, [r7, #23]
      break;
 80088fc:	e000      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80088fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008906:	4b1e      	ldr	r3, [pc, #120]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008914:	491a      	ldr	r1, [pc, #104]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008916:	4313      	orrs	r3, r2
 8008918:	654b      	str	r3, [r1, #84]	; 0x54
 800891a:	e001      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d03f      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008930:	2b05      	cmp	r3, #5
 8008932:	d821      	bhi.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008934:	a201      	add	r2, pc, #4	; (adr r2, 800893c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893a:	bf00      	nop
 800893c:	0800898d 	.word	0x0800898d
 8008940:	08008955 	.word	0x08008955
 8008944:	08008967 	.word	0x08008967
 8008948:	0800898d 	.word	0x0800898d
 800894c:	0800898d 	.word	0x0800898d
 8008950:	0800898d 	.word	0x0800898d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3304      	adds	r3, #4
 8008958:	2101      	movs	r1, #1
 800895a:	4618      	mov	r0, r3
 800895c:	f001 fb3a 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008960:	4603      	mov	r3, r0
 8008962:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008964:	e013      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3324      	adds	r3, #36	; 0x24
 800896a:	2101      	movs	r1, #1
 800896c:	4618      	mov	r0, r3
 800896e:	f001 fbe3 	bl	800a138 <RCCEx_PLL3_Config>
 8008972:	4603      	mov	r3, r0
 8008974:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008976:	e00a      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	75fb      	strb	r3, [r7, #23]
      break;
 800897c:	e007      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800897e:	bf00      	nop
 8008980:	58024400 	.word	0x58024400
 8008984:	58024800 	.word	0x58024800
 8008988:	00ffffcf 	.word	0x00ffffcf
      break;
 800898c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d109      	bne.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008994:	4b9f      	ldr	r3, [pc, #636]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008998:	f023 0207 	bic.w	r2, r3, #7
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089a0:	499c      	ldr	r1, [pc, #624]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	654b      	str	r3, [r1, #84]	; 0x54
 80089a6:	e001      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
 80089aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d039      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089be:	2b05      	cmp	r3, #5
 80089c0:	d820      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80089c2:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80089c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c8:	08008a0b 	.word	0x08008a0b
 80089cc:	080089e1 	.word	0x080089e1
 80089d0:	080089f3 	.word	0x080089f3
 80089d4:	08008a0b 	.word	0x08008a0b
 80089d8:	08008a0b 	.word	0x08008a0b
 80089dc:	08008a0b 	.word	0x08008a0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3304      	adds	r3, #4
 80089e4:	2101      	movs	r1, #1
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 faf4 	bl	8009fd4 <RCCEx_PLL2_Config>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80089f0:	e00c      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3324      	adds	r3, #36	; 0x24
 80089f6:	2101      	movs	r1, #1
 80089f8:	4618      	mov	r0, r3
 80089fa:	f001 fb9d 	bl	800a138 <RCCEx_PLL3_Config>
 80089fe:	4603      	mov	r3, r0
 8008a00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008a02:	e003      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	75fb      	strb	r3, [r7, #23]
      break;
 8008a08:	e000      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8008a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10a      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a12:	4b80      	ldr	r3, [pc, #512]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a16:	f023 0207 	bic.w	r2, r3, #7
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a20:	497c      	ldr	r1, [pc, #496]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	658b      	str	r3, [r1, #88]	; 0x58
 8008a26:	e001      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0320 	and.w	r3, r3, #32
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d04b      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a42:	d02e      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a48:	d828      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a4e:	d02a      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a54:	d822      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008a56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a5a:	d026      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008a5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a60:	d81c      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a66:	d010      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a6c:	d816      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d01d      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a76:	d111      	bne.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 faa8 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008a84:	4603      	mov	r3, r0
 8008a86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008a88:	e012      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3324      	adds	r3, #36	; 0x24
 8008a8e:	2102      	movs	r1, #2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f001 fb51 	bl	800a138 <RCCEx_PLL3_Config>
 8008a96:	4603      	mov	r3, r0
 8008a98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008a9a:	e009      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa0:	e006      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008aa2:	bf00      	nop
 8008aa4:	e004      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008aa6:	bf00      	nop
 8008aa8:	e002      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008aaa:	bf00      	nop
 8008aac:	e000      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10a      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ab6:	4b57      	ldr	r3, [pc, #348]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ac4:	4953      	ldr	r1, [pc, #332]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	654b      	str	r3, [r1, #84]	; 0x54
 8008aca:	e001      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d04b      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ae2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ae6:	d02e      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008ae8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008aec:	d828      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af2:	d02a      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af8:	d822      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008afa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008afe:	d026      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008b00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b04:	d81c      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b0a:	d010      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8008b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b10:	d816      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d01d      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b1a:	d111      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	2100      	movs	r1, #0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 fa56 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b2c:	e012      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3324      	adds	r3, #36	; 0x24
 8008b32:	2102      	movs	r1, #2
 8008b34:	4618      	mov	r0, r3
 8008b36:	f001 faff 	bl	800a138 <RCCEx_PLL3_Config>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b3e:	e009      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	75fb      	strb	r3, [r7, #23]
      break;
 8008b44:	e006      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008b46:	bf00      	nop
 8008b48:	e004      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008b4a:	bf00      	nop
 8008b4c:	e002      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008b4e:	bf00      	nop
 8008b50:	e000      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b5a:	4b2e      	ldr	r3, [pc, #184]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b68:	492a      	ldr	r1, [pc, #168]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	658b      	str	r3, [r1, #88]	; 0x58
 8008b6e:	e001      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d04d      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008b8a:	d02e      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008b8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008b90:	d828      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b96:	d02a      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b9c:	d822      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008b9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ba2:	d026      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008ba4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ba8:	d81c      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bae:	d010      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bb4:	d816      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d01d      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bbe:	d111      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f001 fa04 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008bd0:	e012      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	3324      	adds	r3, #36	; 0x24
 8008bd6:	2102      	movs	r1, #2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f001 faad 	bl	800a138 <RCCEx_PLL3_Config>
 8008bde:	4603      	mov	r3, r0
 8008be0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008be2:	e009      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	75fb      	strb	r3, [r7, #23]
      break;
 8008be8:	e006      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008bea:	bf00      	nop
 8008bec:	e004      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008bee:	bf00      	nop
 8008bf0:	e002      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008bf2:	bf00      	nop
 8008bf4:	e000      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10c      	bne.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008bfe:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c0c:	4901      	ldr	r1, [pc, #4]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	658b      	str	r3, [r1, #88]	; 0x58
 8008c12:	e003      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008c14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0308 	and.w	r3, r3, #8
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01a      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c32:	d10a      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3324      	adds	r3, #36	; 0x24
 8008c38:	2102      	movs	r1, #2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f001 fa7c 	bl	800a138 <RCCEx_PLL3_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c4a:	4b8c      	ldr	r3, [pc, #560]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c58:	4988      	ldr	r1, [pc, #544]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0310 	and.w	r3, r3, #16
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d01a      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c74:	d10a      	bne.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3324      	adds	r3, #36	; 0x24
 8008c7a:	2102      	movs	r1, #2
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f001 fa5b 	bl	800a138 <RCCEx_PLL3_Config>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c8c:	4b7b      	ldr	r3, [pc, #492]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c9a:	4978      	ldr	r1, [pc, #480]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d034      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008cb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cb6:	d01d      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8008cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cbc:	d817      	bhi.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8008cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc6:	d009      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008cc8:	e011      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	2100      	movs	r1, #0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f001 f97f 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008cda:	e00c      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3324      	adds	r3, #36	; 0x24
 8008ce0:	2102      	movs	r1, #2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 fa28 	bl	800a138 <RCCEx_PLL3_Config>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008cec:	e003      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf2:	e000      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8008cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cfc:	4b5f      	ldr	r3, [pc, #380]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d0a:	495c      	ldr	r1, [pc, #368]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	658b      	str	r3, [r1, #88]	; 0x58
 8008d10:	e001      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d033      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d2c:	d01c      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008d2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d32:	d816      	bhi.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d38:	d003      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8008d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d3e:	d007      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008d40:	e00f      	b.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d42:	4b4e      	ldr	r3, [pc, #312]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	4a4d      	ldr	r2, [pc, #308]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d4e:	e00c      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3324      	adds	r3, #36	; 0x24
 8008d54:	2101      	movs	r1, #1
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 f9ee 	bl	800a138 <RCCEx_PLL3_Config>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d60:	e003      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	75fb      	strb	r3, [r7, #23]
      break;
 8008d66:	e000      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d70:	4b42      	ldr	r3, [pc, #264]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d7e:	493f      	ldr	r1, [pc, #252]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	654b      	str	r3, [r1, #84]	; 0x54
 8008d84:	e001      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d029      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da2:	d007      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008da4:	e00f      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da6:	4b35      	ldr	r3, [pc, #212]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008daa:	4a34      	ldr	r2, [pc, #208]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008db2:	e00b      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3304      	adds	r3, #4
 8008db8:	2102      	movs	r1, #2
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f001 f90a 	bl	8009fd4 <RCCEx_PLL2_Config>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008dc4:	e002      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d109      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008dd2:	4b2a      	ldr	r3, [pc, #168]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dde:	4927      	ldr	r1, [pc, #156]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008de4:	e001      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3324      	adds	r3, #36	; 0x24
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 f99b 	bl	800a138 <RCCEx_PLL3_Config>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d035      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e22:	d017      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e28:	d811      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e2e:	d013      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e34:	d80b      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d010      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8008e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e3e:	d106      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e40:	4b0e      	ldr	r3, [pc, #56]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	4a0d      	ldr	r2, [pc, #52]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008e4c:	e007      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	75fb      	strb	r3, [r7, #23]
      break;
 8008e52:	e004      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008e54:	bf00      	nop
 8008e56:	e002      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008e58:	bf00      	nop
 8008e5a:	e000      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10d      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e64:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e72:	4902      	ldr	r1, [pc, #8]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008e74:	4313      	orrs	r3, r2
 8008e76:	654b      	str	r3, [r1, #84]	; 0x54
 8008e78:	e004      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008e7a:	bf00      	nop
 8008e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d008      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008e90:	4b30      	ldr	r3, [pc, #192]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e9c:	492d      	ldr	r1, [pc, #180]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d008      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008eae:	4b29      	ldr	r3, [pc, #164]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eba:	4926      	ldr	r1, [pc, #152]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d008      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008ecc:	4b21      	ldr	r3, [pc, #132]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed8:	491e      	ldr	r1, [pc, #120]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00d      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008eea:	4b1a      	ldr	r3, [pc, #104]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	4a19      	ldr	r2, [pc, #100]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008ef0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ef4:	6113      	str	r3, [r2, #16]
 8008ef6:	4b17      	ldr	r3, [pc, #92]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008ef8:	691a      	ldr	r2, [r3, #16]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f00:	4914      	ldr	r1, [pc, #80]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	da08      	bge.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f0e:	4b11      	ldr	r3, [pc, #68]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1a:	490e      	ldr	r1, [pc, #56]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d009      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f2c:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3a:	4906      	ldr	r1, [pc, #24]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008f40:	7dbb      	ldrb	r3, [r7, #22]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	e000      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	58024400 	.word	0x58024400

08008f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b090      	sub	sp, #64	; 0x40
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f66:	f040 8089 	bne.w	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008f6a:	4b91      	ldr	r3, [pc, #580]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f6e:	f003 0307 	and.w	r3, r3, #7
 8008f72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d87d      	bhi.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08008f95 	.word	0x08008f95
 8008f84:	08008fb9 	.word	0x08008fb9
 8008f88:	08008fdd 	.word	0x08008fdd
 8008f8c:	08009071 	.word	0x08009071
 8008f90:	08009001 	.word	0x08009001
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f94:	4b86      	ldr	r3, [pc, #536]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fa0:	d107      	bne.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 fec2 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fb0:	e3f4      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fb6:	e3f1      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fb8:	4b7d      	ldr	r3, [pc, #500]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fc4:	d107      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fc6:	f107 0318 	add.w	r3, r7, #24
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fc08 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fd4:	e3e2      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fda:	e3df      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fdc:	4b74      	ldr	r3, [pc, #464]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe8:	d107      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fd4a 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ff8:	e3d0      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ffe:	e3cd      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009000:	4b6b      	ldr	r3, [pc, #428]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009004:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009008:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800900a:	4b69      	ldr	r3, [pc, #420]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0304 	and.w	r3, r3, #4
 8009012:	2b04      	cmp	r3, #4
 8009014:	d10c      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009018:	2b00      	cmp	r3, #0
 800901a:	d109      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800901c:	4b64      	ldr	r3, [pc, #400]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	08db      	lsrs	r3, r3, #3
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	4a63      	ldr	r2, [pc, #396]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009028:	fa22 f303 	lsr.w	r3, r2, r3
 800902c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800902e:	e01e      	b.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009030:	4b5f      	ldr	r3, [pc, #380]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800903c:	d106      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800903e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009044:	d102      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009046:	4b5c      	ldr	r3, [pc, #368]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800904a:	e010      	b.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800904c:	4b58      	ldr	r3, [pc, #352]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009058:	d106      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800905a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009060:	d102      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009062:	4b56      	ldr	r3, [pc, #344]	; (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009066:	e002      	b.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009068:	2300      	movs	r3, #0
 800906a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800906c:	e396      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800906e:	e395      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009070:	4b53      	ldr	r3, [pc, #332]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009074:	e392      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800907a:	e38f      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009082:	f040 809f 	bne.w	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8009086:	4b4a      	ldr	r3, [pc, #296]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800908a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800908e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009096:	d04d      	beq.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800909e:	f200 8084 	bhi.w	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	2bc0      	cmp	r3, #192	; 0xc0
 80090a6:	d07d      	beq.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	2bc0      	cmp	r3, #192	; 0xc0
 80090ac:	d87d      	bhi.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	2b80      	cmp	r3, #128	; 0x80
 80090b2:	d02d      	beq.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	2b80      	cmp	r3, #128	; 0x80
 80090b8:	d877      	bhi.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d003      	beq.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	2b40      	cmp	r3, #64	; 0x40
 80090c4:	d012      	beq.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80090c6:	e070      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090c8:	4b39      	ldr	r3, [pc, #228]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090d4:	d107      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fe28 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090e4:	e35a      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ea:	e357      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090ec:	4b30      	ldr	r3, [pc, #192]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090f8:	d107      	bne.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090fa:	f107 0318 	add.w	r3, r7, #24
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fb6e 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009108:	e348      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800910e:	e345      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009110:	4b27      	ldr	r3, [pc, #156]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800911c:	d107      	bne.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800911e:	f107 030c 	add.w	r3, r7, #12
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fcb0 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800912c:	e336      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009132:	e333      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009134:	4b1e      	ldr	r3, [pc, #120]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800913c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800913e:	4b1c      	ldr	r3, [pc, #112]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0304 	and.w	r3, r3, #4
 8009146:	2b04      	cmp	r3, #4
 8009148:	d10c      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 800914a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914c:	2b00      	cmp	r3, #0
 800914e:	d109      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009150:	4b17      	ldr	r3, [pc, #92]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	08db      	lsrs	r3, r3, #3
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	4a16      	ldr	r2, [pc, #88]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800915c:	fa22 f303 	lsr.w	r3, r2, r3
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009162:	e01e      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009164:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009170:	d106      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8009172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009178:	d102      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800917a:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800917c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800917e:	e010      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009180:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800918c:	d106      	bne.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800918e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009194:	d102      	bne.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009196:	4b09      	ldr	r3, [pc, #36]	; (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800919a:	e002      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80091a0:	e2fc      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80091a2:	e2fb      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80091a4:	4b06      	ldr	r3, [pc, #24]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091a8:	e2f8      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ae:	e2f5      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80091b0:	58024400 	.word	0x58024400
 80091b4:	03d09000 	.word	0x03d09000
 80091b8:	003d0900 	.word	0x003d0900
 80091bc:	016e3600 	.word	0x016e3600
 80091c0:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ca:	f040 809c 	bne.w	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80091ce:	4b9d      	ldr	r3, [pc, #628]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80091d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80091d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091de:	d054      	beq.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80091e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e6:	f200 808b 	bhi.w	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80091f0:	f000 8083 	beq.w	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80091fa:	f200 8081 	bhi.w	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009204:	d02f      	beq.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800920c:	d878      	bhi.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	2b00      	cmp	r3, #0
 8009212:	d004      	beq.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800921a:	d012      	beq.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800921c:	e070      	b.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800921e:	4b89      	ldr	r3, [pc, #548]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800922a:	d107      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800922c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009230:	4618      	mov	r0, r3
 8009232:	f000 fd7d 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800923a:	e2af      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009240:	e2ac      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009242:	4b80      	ldr	r3, [pc, #512]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800924a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800924e:	d107      	bne.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009250:	f107 0318 	add.w	r3, r7, #24
 8009254:	4618      	mov	r0, r3
 8009256:	f000 fac3 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800925e:	e29d      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009264:	e29a      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009266:	4b77      	ldr	r3, [pc, #476]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800926e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009272:	d107      	bne.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009274:	f107 030c 	add.w	r3, r7, #12
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fc05 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009282:	e28b      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009288:	e288      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800928a:	4b6e      	ldr	r3, [pc, #440]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800928c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800928e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009292:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009294:	4b6b      	ldr	r3, [pc, #428]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b04      	cmp	r3, #4
 800929e:	d10c      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 80092a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d109      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092a6:	4b67      	ldr	r3, [pc, #412]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	08db      	lsrs	r3, r3, #3
 80092ac:	f003 0303 	and.w	r3, r3, #3
 80092b0:	4a65      	ldr	r2, [pc, #404]	; (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80092b2:	fa22 f303 	lsr.w	r3, r2, r3
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b8:	e01e      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092ba:	4b62      	ldr	r3, [pc, #392]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092c6:	d106      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80092c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092ce:	d102      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80092d0:	4b5e      	ldr	r3, [pc, #376]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80092d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d4:	e010      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092d6:	4b5b      	ldr	r3, [pc, #364]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092e2:	d106      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80092e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092ea:	d102      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80092ec:	4b58      	ldr	r3, [pc, #352]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f0:	e002      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 80092f6:	e251      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80092f8:	e250      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80092fa:	4b56      	ldr	r3, [pc, #344]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092fe:	e24d      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009304:	e24a      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800930c:	f040 80a7 	bne.w	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009310:	4b4c      	ldr	r3, [pc, #304]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009314:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009318:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009320:	d055      	beq.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009328:	f200 8096 	bhi.w	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800932c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009332:	f000 8084 	beq.w	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800933c:	f200 808c 	bhi.w	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009346:	d030      	beq.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800934e:	f200 8083 	bhi.w	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8009352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009354:	2b00      	cmp	r3, #0
 8009356:	d004      	beq.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800935e:	d012      	beq.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8009360:	e07a      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009362:	4b38      	ldr	r3, [pc, #224]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800936e:	d107      	bne.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fcdb 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800937e:	e20d      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009384:	e20a      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009386:	4b2f      	ldr	r3, [pc, #188]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800938e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009392:	d107      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009394:	f107 0318 	add.w	r3, r7, #24
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fa21 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093a2:	e1fb      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093a8:	e1f8      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093aa:	4b26      	ldr	r3, [pc, #152]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b6:	d107      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093b8:	f107 030c 	add.w	r3, r7, #12
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fb63 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093c6:	e1e9      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093cc:	e1e6      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093ce:	4b1d      	ldr	r3, [pc, #116]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80093d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093d8:	4b1a      	ldr	r3, [pc, #104]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0304 	and.w	r3, r3, #4
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	d10c      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80093e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d109      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093ea:	4b16      	ldr	r3, [pc, #88]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	08db      	lsrs	r3, r3, #3
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	4a14      	ldr	r2, [pc, #80]	; (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80093f6:	fa22 f303 	lsr.w	r3, r2, r3
 80093fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093fc:	e01e      	b.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093fe:	4b11      	ldr	r3, [pc, #68]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940a:	d106      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 800940c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009412:	d102      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009414:	4b0d      	ldr	r3, [pc, #52]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009418:	e010      	b.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800941a:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009426:	d106      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800942e:	d102      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009430:	4b07      	ldr	r3, [pc, #28]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8009432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009434:	e002      	b.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800943a:	e1af      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800943c:	e1ae      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800943e:	4b05      	ldr	r3, [pc, #20]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009442:	e1ab      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009444:	58024400 	.word	0x58024400
 8009448:	03d09000 	.word	0x03d09000
 800944c:	003d0900 	.word	0x003d0900
 8009450:	016e3600 	.word	0x016e3600
 8009454:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8009458:	2300      	movs	r3, #0
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800945c:	e19e      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009464:	d173      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009466:	4b9d      	ldr	r3, [pc, #628]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800946e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009476:	d02f      	beq.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800947e:	d863      	bhi.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	2b00      	cmp	r3, #0
 8009484:	d004      	beq.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800948c:	d012      	beq.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 800948e:	e05b      	b.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009490:	4b92      	ldr	r3, [pc, #584]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800949c:	d107      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800949e:	f107 0318 	add.w	r3, r7, #24
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 f99c 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094ac:	e176      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094b2:	e173      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094b4:	4b89      	ldr	r3, [pc, #548]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094c0:	d107      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094c2:	f107 030c 	add.w	r3, r7, #12
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fade 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094d0:	e164      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d6:	e161      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094d8:	4b80      	ldr	r3, [pc, #512]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80094da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094e0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094e2:	4b7e      	ldr	r3, [pc, #504]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0304 	and.w	r3, r3, #4
 80094ea:	2b04      	cmp	r3, #4
 80094ec:	d10c      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80094ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d109      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094f4:	4b79      	ldr	r3, [pc, #484]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	08db      	lsrs	r3, r3, #3
 80094fa:	f003 0303 	and.w	r3, r3, #3
 80094fe:	4a78      	ldr	r2, [pc, #480]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009500:	fa22 f303 	lsr.w	r3, r2, r3
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009506:	e01e      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009508:	4b74      	ldr	r3, [pc, #464]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009514:	d106      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800951c:	d102      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800951e:	4b71      	ldr	r3, [pc, #452]	; (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009522:	e010      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009524:	4b6d      	ldr	r3, [pc, #436]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800952c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009530:	d106      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009538:	d102      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800953a:	4b6b      	ldr	r3, [pc, #428]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800953c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800953e:	e002      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009544:	e12a      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009546:	e129      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800954c:	e126      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009554:	d133      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009556:	4b61      	ldr	r3, [pc, #388]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800955a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800955e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800956c:	d012      	beq.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800956e:	e023      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009570:	4b5a      	ldr	r3, [pc, #360]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009578:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800957c:	d107      	bne.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800957e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fbd4 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800958c:	e106      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009592:	e103      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009594:	4b51      	ldr	r3, [pc, #324]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800959c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095a0:	d107      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a2:	f107 0318 	add.w	r3, r7, #24
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 f91a 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095b0:	e0f4      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095b6:	e0f1      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095bc:	e0ee      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095c4:	f040 809b 	bne.w	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80095c8:	4b44      	ldr	r3, [pc, #272]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80095ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095cc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80095d0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80095d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80095d8:	f000 808b 	beq.w	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80095e2:	f200 8089 	bhi.w	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80095e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ec:	d06c      	beq.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80095ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095f4:	f200 8080 	bhi.w	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095fe:	d056      	beq.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009606:	d877      	bhi.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800960e:	d03b      	beq.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8009610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009612:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009616:	d86f      	bhi.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800961e:	d021      	beq.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009626:	d867      	bhi.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	2b00      	cmp	r3, #0
 800962c:	d004      	beq.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009634:	d004      	beq.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8009636:	e05f      	b.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009638:	f000 f8bc 	bl	80097b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800963c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800963e:	e0ad      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009640:	4b26      	ldr	r3, [pc, #152]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800964c:	d107      	bne.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800964e:	f107 0318 	add.w	r3, r7, #24
 8009652:	4618      	mov	r0, r3
 8009654:	f000 f8c4 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800965c:	e09e      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800965e:	2300      	movs	r3, #0
 8009660:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009662:	e09b      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009664:	4b1d      	ldr	r3, [pc, #116]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800966c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009670:	d107      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009672:	f107 030c 	add.w	r3, r7, #12
 8009676:	4618      	mov	r0, r3
 8009678:	f000 fa06 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009680:	e08c      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009686:	e089      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009688:	4b14      	ldr	r3, [pc, #80]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0304 	and.w	r3, r3, #4
 8009690:	2b04      	cmp	r3, #4
 8009692:	d109      	bne.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009694:	4b11      	ldr	r3, [pc, #68]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	08db      	lsrs	r3, r3, #3
 800969a:	f003 0303 	and.w	r3, r3, #3
 800969e:	4a10      	ldr	r2, [pc, #64]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096a0:	fa22 f303 	lsr.w	r3, r2, r3
 80096a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096a6:	e079      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096ac:	e076      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096ae:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ba:	d102      	bne.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 80096bc:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80096be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096c0:	e06c      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096c6:	e069      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096c8:	4b04      	ldr	r3, [pc, #16]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096d4:	d10a      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 80096d6:	4b04      	ldr	r3, [pc, #16]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80096d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096da:	e05f      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80096dc:	58024400 	.word	0x58024400
 80096e0:	03d09000 	.word	0x03d09000
 80096e4:	003d0900 	.word	0x003d0900
 80096e8:	016e3600 	.word	0x016e3600
          frequency = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096f0:	e054      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80096f2:	4b2d      	ldr	r3, [pc, #180]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80096f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096f6:	e051      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096fc:	e04e      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009704:	d148      	bne.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009706:	4b29      	ldr	r3, [pc, #164]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800970a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800970e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009716:	d02a      	beq.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800971e:	d838      	bhi.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	2b00      	cmp	r3, #0
 8009724:	d004      	beq.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800972c:	d00d      	beq.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800972e:	e030      	b.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009730:	4b1e      	ldr	r3, [pc, #120]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800973c:	d102      	bne.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 800973e:	4b1c      	ldr	r3, [pc, #112]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009740:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009742:	e02b      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009748:	e028      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800974a:	4b18      	ldr	r3, [pc, #96]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009756:	d107      	bne.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800975c:	4618      	mov	r0, r3
 800975e:	f000 fae7 	bl	8009d30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009766:	e019      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800976c:	e016      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800976e:	4b0f      	ldr	r3, [pc, #60]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800977a:	d107      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800977c:	f107 0318 	add.w	r3, r7, #24
 8009780:	4618      	mov	r0, r3
 8009782:	f000 f82d 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800978a:	e007      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009790:	e004      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009796:	e001      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800979c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3740      	adds	r7, #64	; 0x40
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	00bb8000 	.word	0x00bb8000
 80097ac:	58024400 	.word	0x58024400
 80097b0:	016e3600 	.word	0x016e3600

080097b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80097b8:	f7fe fc66 	bl	8008088 <HAL_RCC_GetHCLKFreq>
 80097bc:	4602      	mov	r2, r0
 80097be:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	091b      	lsrs	r3, r3, #4
 80097c4:	f003 0307 	and.w	r3, r3, #7
 80097c8:	4904      	ldr	r1, [pc, #16]	; (80097dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097ca:	5ccb      	ldrb	r3, [r1, r3]
 80097cc:	f003 031f 	and.w	r3, r3, #31
 80097d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	58024400 	.word	0x58024400
 80097dc:	08017cf8 	.word	0x08017cf8

080097e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b089      	sub	sp, #36	; 0x24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097e8:	4ba1      	ldr	r3, [pc, #644]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80097f2:	4b9f      	ldr	r3, [pc, #636]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f6:	0b1b      	lsrs	r3, r3, #12
 80097f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097fe:	4b9c      	ldr	r3, [pc, #624]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009802:	091b      	lsrs	r3, r3, #4
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800980a:	4b99      	ldr	r3, [pc, #612]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800980c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800980e:	08db      	lsrs	r3, r3, #3
 8009810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	fb02 f303 	mul.w	r3, r2, r3
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 8111 	beq.w	8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	2b02      	cmp	r3, #2
 8009832:	f000 8083 	beq.w	800993c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2b02      	cmp	r3, #2
 800983a:	f200 80a1 	bhi.w	8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d056      	beq.n	80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800984a:	e099      	b.n	8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800984c:	4b88      	ldr	r3, [pc, #544]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0320 	and.w	r3, r3, #32
 8009854:	2b00      	cmp	r3, #0
 8009856:	d02d      	beq.n	80098b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009858:	4b85      	ldr	r3, [pc, #532]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	08db      	lsrs	r3, r3, #3
 800985e:	f003 0303 	and.w	r3, r3, #3
 8009862:	4a84      	ldr	r2, [pc, #528]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009864:	fa22 f303 	lsr.w	r3, r2, r3
 8009868:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	ee07 3a90 	vmov	s15, r3
 8009870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009882:	4b7b      	ldr	r3, [pc, #492]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009892:	ed97 6a03 	vldr	s12, [r7, #12]
 8009896:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800989a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800989e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098b2:	e087      	b.n	80099c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098c6:	4b6a      	ldr	r3, [pc, #424]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ce:	ee07 3a90 	vmov	s15, r3
 80098d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098f6:	e065      	b.n	80099c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990a:	4b59      	ldr	r3, [pc, #356]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991a:	ed97 6a03 	vldr	s12, [r7, #12]
 800991e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800992e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800993a:	e043      	b.n	80099c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009946:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800994a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800994e:	4b48      	ldr	r3, [pc, #288]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009962:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800996e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800997e:	e021      	b.n	80099c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800998e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009992:	4b37      	ldr	r3, [pc, #220]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80099c4:	4b2a      	ldr	r3, [pc, #168]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	0a5b      	lsrs	r3, r3, #9
 80099ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099de:	edd7 6a07 	vldr	s13, [r7, #28]
 80099e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ea:	ee17 2a90 	vmov	r2, s15
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80099f2:	4b1f      	ldr	r3, [pc, #124]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	0c1b      	lsrs	r3, r3, #16
 80099f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099fc:	ee07 3a90 	vmov	s15, r3
 8009a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a18:	ee17 2a90 	vmov	r2, s15
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009a20:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a24:	0e1b      	lsrs	r3, r3, #24
 8009a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a46:	ee17 2a90 	vmov	r2, s15
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a4e:	e008      	b.n	8009a62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	609a      	str	r2, [r3, #8]
}
 8009a62:	bf00      	nop
 8009a64:	3724      	adds	r7, #36	; 0x24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	58024400 	.word	0x58024400
 8009a74:	03d09000 	.word	0x03d09000
 8009a78:	46000000 	.word	0x46000000
 8009a7c:	4c742400 	.word	0x4c742400
 8009a80:	4a742400 	.word	0x4a742400
 8009a84:	4bb71b00 	.word	0x4bb71b00

08009a88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b089      	sub	sp, #36	; 0x24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a90:	4ba1      	ldr	r3, [pc, #644]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a94:	f003 0303 	and.w	r3, r3, #3
 8009a98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009a9a:	4b9f      	ldr	r3, [pc, #636]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9e:	0d1b      	lsrs	r3, r3, #20
 8009aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aa4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009aa6:	4b9c      	ldr	r3, [pc, #624]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	0a1b      	lsrs	r3, r3, #8
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ab2:	4b99      	ldr	r3, [pc, #612]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab6:	08db      	lsrs	r3, r3, #3
 8009ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	fb02 f303 	mul.w	r3, r2, r3
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 8111 	beq.w	8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	f000 8083 	beq.w	8009be4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	f200 80a1 	bhi.w	8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d056      	beq.n	8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009af2:	e099      	b.n	8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009af4:	4b88      	ldr	r3, [pc, #544]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0320 	and.w	r3, r3, #32
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d02d      	beq.n	8009b5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b00:	4b85      	ldr	r3, [pc, #532]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	08db      	lsrs	r3, r3, #3
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	4a84      	ldr	r2, [pc, #528]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b10:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	ee07 3a90 	vmov	s15, r3
 8009b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2a:	4b7b      	ldr	r3, [pc, #492]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b5a:	e087      	b.n	8009c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6e:	4b6a      	ldr	r3, [pc, #424]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b9e:	e065      	b.n	8009c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb2:	4b59      	ldr	r3, [pc, #356]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009be2:	e043      	b.n	8009c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf6:	4b48      	ldr	r3, [pc, #288]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c26:	e021      	b.n	8009c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	ee07 3a90 	vmov	s15, r3
 8009c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c3a:	4b37      	ldr	r3, [pc, #220]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009c6c:	4b2a      	ldr	r3, [pc, #168]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	0a5b      	lsrs	r3, r3, #9
 8009c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c92:	ee17 2a90 	vmov	r2, s15
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009c9a:	4b1f      	ldr	r3, [pc, #124]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	0c1b      	lsrs	r3, r3, #16
 8009ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca4:	ee07 3a90 	vmov	s15, r3
 8009ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc0:	ee17 2a90 	vmov	r2, s15
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009cc8:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ccc:	0e1b      	lsrs	r3, r3, #24
 8009cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cee:	ee17 2a90 	vmov	r2, s15
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009cf6:	e008      	b.n	8009d0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	609a      	str	r2, [r3, #8]
}
 8009d0a:	bf00      	nop
 8009d0c:	3724      	adds	r7, #36	; 0x24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	03d09000 	.word	0x03d09000
 8009d20:	46000000 	.word	0x46000000
 8009d24:	4c742400 	.word	0x4c742400
 8009d28:	4a742400 	.word	0x4a742400
 8009d2c:	4bb71b00 	.word	0x4bb71b00

08009d30 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b089      	sub	sp, #36	; 0x24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d38:	4ba0      	ldr	r3, [pc, #640]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009d42:	4b9e      	ldr	r3, [pc, #632]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d46:	091b      	lsrs	r3, r3, #4
 8009d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d4c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d4e:	4b9b      	ldr	r3, [pc, #620]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d58:	4b98      	ldr	r3, [pc, #608]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d5c:	08db      	lsrs	r3, r3, #3
 8009d5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	fb02 f303 	mul.w	r3, r2, r3
 8009d68:	ee07 3a90 	vmov	s15, r3
 8009d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d70:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 8111 	beq.w	8009f9e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	f000 8083 	beq.w	8009e8a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	f200 80a1 	bhi.w	8009ece <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d056      	beq.n	8009e46 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d98:	e099      	b.n	8009ece <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d9a:	4b88      	ldr	r3, [pc, #544]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 0320 	and.w	r3, r3, #32
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d02d      	beq.n	8009e02 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009da6:	4b85      	ldr	r3, [pc, #532]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	08db      	lsrs	r3, r3, #3
 8009dac:	f003 0303 	and.w	r3, r3, #3
 8009db0:	4a83      	ldr	r2, [pc, #524]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009db2:	fa22 f303 	lsr.w	r3, r2, r3
 8009db6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	ee07 3a90 	vmov	s15, r3
 8009dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd0:	4b7a      	ldr	r3, [pc, #488]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd8:	ee07 3a90 	vmov	s15, r3
 8009ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e00:	e087      	b.n	8009f12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	ee07 3a90 	vmov	s15, r3
 8009e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e14:	4b69      	ldr	r3, [pc, #420]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1c:	ee07 3a90 	vmov	s15, r3
 8009e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e24:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e28:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e44:	e065      	b.n	8009f12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	ee07 3a90 	vmov	s15, r3
 8009e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e50:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e58:	4b58      	ldr	r3, [pc, #352]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e68:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e6c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e88:	e043      	b.n	8009f12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	ee07 3a90 	vmov	s15, r3
 8009e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e94:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e9c:	4b47      	ldr	r3, [pc, #284]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea4:	ee07 3a90 	vmov	s15, r3
 8009ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eac:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ecc:	e021      	b.n	8009f12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	ee07 3a90 	vmov	s15, r3
 8009ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ee0:	4b36      	ldr	r3, [pc, #216]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee8:	ee07 3a90 	vmov	s15, r3
 8009eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ef4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f10:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009f12:	4b2a      	ldr	r3, [pc, #168]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f16:	0a5b      	lsrs	r3, r3, #9
 8009f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f1c:	ee07 3a90 	vmov	s15, r3
 8009f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f38:	ee17 2a90 	vmov	r2, s15
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009f40:	4b1e      	ldr	r3, [pc, #120]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f44:	0c1b      	lsrs	r3, r3, #16
 8009f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f66:	ee17 2a90 	vmov	r2, s15
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009f6e:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f72:	0e1b      	lsrs	r3, r3, #24
 8009f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f78:	ee07 3a90 	vmov	s15, r3
 8009f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f94:	ee17 2a90 	vmov	r2, s15
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009f9c:	e008      	b.n	8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	609a      	str	r2, [r3, #8]
}
 8009fb0:	bf00      	nop
 8009fb2:	3724      	adds	r7, #36	; 0x24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	58024400 	.word	0x58024400
 8009fc0:	03d09000 	.word	0x03d09000
 8009fc4:	46000000 	.word	0x46000000
 8009fc8:	4c742400 	.word	0x4c742400
 8009fcc:	4a742400 	.word	0x4a742400
 8009fd0:	4bb71b00 	.word	0x4bb71b00

08009fd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fe2:	4b53      	ldr	r3, [pc, #332]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 8009fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d101      	bne.n	8009ff2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e099      	b.n	800a126 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ff2:	4b4f      	ldr	r3, [pc, #316]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a4e      	ldr	r2, [pc, #312]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 8009ff8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ffe:	f7f9 fe77 	bl	8003cf0 <HAL_GetTick>
 800a002:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a004:	e008      	b.n	800a018 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a006:	f7f9 fe73 	bl	8003cf0 <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	2b02      	cmp	r3, #2
 800a012:	d901      	bls.n	800a018 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e086      	b.n	800a126 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a018:	4b45      	ldr	r3, [pc, #276]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1f0      	bne.n	800a006 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a024:	4b42      	ldr	r3, [pc, #264]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a028:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	031b      	lsls	r3, r3, #12
 800a032:	493f      	ldr	r1, [pc, #252]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a034:	4313      	orrs	r3, r2
 800a036:	628b      	str	r3, [r1, #40]	; 0x28
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	3b01      	subs	r3, #1
 800a048:	025b      	lsls	r3, r3, #9
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	431a      	orrs	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	3b01      	subs	r3, #1
 800a054:	041b      	lsls	r3, r3, #16
 800a056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a05a:	431a      	orrs	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	3b01      	subs	r3, #1
 800a062:	061b      	lsls	r3, r3, #24
 800a064:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a068:	4931      	ldr	r1, [pc, #196]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a06e:	4b30      	ldr	r3, [pc, #192]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	492d      	ldr	r1, [pc, #180]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a080:	4b2b      	ldr	r3, [pc, #172]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	f023 0220 	bic.w	r2, r3, #32
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	4928      	ldr	r1, [pc, #160]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a092:	4b27      	ldr	r3, [pc, #156]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	4a26      	ldr	r2, [pc, #152]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a098:	f023 0310 	bic.w	r3, r3, #16
 800a09c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a09e:	4b24      	ldr	r3, [pc, #144]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0a2:	4b24      	ldr	r3, [pc, #144]	; (800a134 <RCCEx_PLL2_Config+0x160>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	69d2      	ldr	r2, [r2, #28]
 800a0aa:	00d2      	lsls	r2, r2, #3
 800a0ac:	4920      	ldr	r1, [pc, #128]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0b2:	4b1f      	ldr	r3, [pc, #124]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b6:	4a1e      	ldr	r2, [pc, #120]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0b8:	f043 0310 	orr.w	r3, r3, #16
 800a0bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d106      	bne.n	800a0d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0c4:	4b1a      	ldr	r3, [pc, #104]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	4a19      	ldr	r2, [pc, #100]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0d0:	e00f      	b.n	800a0f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d106      	bne.n	800a0e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0d8:	4b15      	ldr	r3, [pc, #84]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	4a14      	ldr	r2, [pc, #80]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0e4:	e005      	b.n	800a0f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0e6:	4b12      	ldr	r3, [pc, #72]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	4a11      	ldr	r2, [pc, #68]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0f2:	4b0f      	ldr	r3, [pc, #60]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a0e      	ldr	r2, [pc, #56]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a0f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0fe:	f7f9 fdf7 	bl	8003cf0 <HAL_GetTick>
 800a102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a104:	e008      	b.n	800a118 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a106:	f7f9 fdf3 	bl	8003cf0 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d901      	bls.n	800a118 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e006      	b.n	800a126 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a118:	4b05      	ldr	r3, [pc, #20]	; (800a130 <RCCEx_PLL2_Config+0x15c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0f0      	beq.n	800a106 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a124:	7bfb      	ldrb	r3, [r7, #15]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	58024400 	.word	0x58024400
 800a134:	ffff0007 	.word	0xffff0007

0800a138 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a146:	4b53      	ldr	r3, [pc, #332]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14a:	f003 0303 	and.w	r3, r3, #3
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d101      	bne.n	800a156 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e099      	b.n	800a28a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a156:	4b4f      	ldr	r3, [pc, #316]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a4e      	ldr	r2, [pc, #312]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a15c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a162:	f7f9 fdc5 	bl	8003cf0 <HAL_GetTick>
 800a166:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a168:	e008      	b.n	800a17c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a16a:	f7f9 fdc1 	bl	8003cf0 <HAL_GetTick>
 800a16e:	4602      	mov	r2, r0
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	2b02      	cmp	r3, #2
 800a176:	d901      	bls.n	800a17c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e086      	b.n	800a28a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a17c:	4b45      	ldr	r3, [pc, #276]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1f0      	bne.n	800a16a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a188:	4b42      	ldr	r3, [pc, #264]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	051b      	lsls	r3, r3, #20
 800a196:	493f      	ldr	r1, [pc, #252]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	628b      	str	r3, [r1, #40]	; 0x28
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	025b      	lsls	r3, r3, #9
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	041b      	lsls	r3, r3, #16
 800a1ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	061b      	lsls	r3, r3, #24
 800a1c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1cc:	4931      	ldr	r1, [pc, #196]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1d2:	4b30      	ldr	r3, [pc, #192]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	492d      	ldr	r1, [pc, #180]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1e4:	4b2b      	ldr	r3, [pc, #172]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	4928      	ldr	r1, [pc, #160]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1f6:	4b27      	ldr	r3, [pc, #156]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fa:	4a26      	ldr	r2, [pc, #152]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a1fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a200:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a202:	4b24      	ldr	r3, [pc, #144]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a206:	4b24      	ldr	r3, [pc, #144]	; (800a298 <RCCEx_PLL3_Config+0x160>)
 800a208:	4013      	ands	r3, r2
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	69d2      	ldr	r2, [r2, #28]
 800a20e:	00d2      	lsls	r2, r2, #3
 800a210:	4920      	ldr	r1, [pc, #128]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a212:	4313      	orrs	r3, r2
 800a214:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a216:	4b1f      	ldr	r3, [pc, #124]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	4a1e      	ldr	r2, [pc, #120]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a21c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d106      	bne.n	800a236 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a228:	4b1a      	ldr	r3, [pc, #104]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22c:	4a19      	ldr	r2, [pc, #100]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a22e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a232:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a234:	e00f      	b.n	800a256 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d106      	bne.n	800a24a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a23c:	4b15      	ldr	r3, [pc, #84]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	4a14      	ldr	r2, [pc, #80]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a242:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a246:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a248:	e005      	b.n	800a256 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a24a:	4b12      	ldr	r3, [pc, #72]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24e:	4a11      	ldr	r2, [pc, #68]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a254:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a256:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a0e      	ldr	r2, [pc, #56]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a25c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a262:	f7f9 fd45 	bl	8003cf0 <HAL_GetTick>
 800a266:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a268:	e008      	b.n	800a27c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a26a:	f7f9 fd41 	bl	8003cf0 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d901      	bls.n	800a27c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e006      	b.n	800a28a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <RCCEx_PLL3_Config+0x15c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d0f0      	beq.n	800a26a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a288:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	58024400 	.word	0x58024400
 800a298:	ffff0007 	.word	0xffff0007

0800a29c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08a      	sub	sp, #40	; 0x28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e075      	b.n	800a39a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d105      	bne.n	800a2c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7f8 fd0f 	bl	8002ce4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2204      	movs	r2, #4
 800a2ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f868 	bl	800a3a4 <HAL_SD_InitCard>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e05d      	b.n	800a39a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a2de:	f107 0308 	add.w	r3, r7, #8
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fda9 	bl	800ae3c <HAL_SD_GetCardStatus>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e052      	b.n	800a39a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a2f4:	7e3b      	ldrb	r3, [r7, #24]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a2fa:	7e7b      	ldrb	r3, [r7, #25]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	2b01      	cmp	r3, #1
 800a306:	d10a      	bne.n	800a31e <HAL_SD_Init+0x82>
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d102      	bne.n	800a314 <HAL_SD_Init+0x78>
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d004      	beq.n	800a31e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a31a:	659a      	str	r2, [r3, #88]	; 0x58
 800a31c:	e00b      	b.n	800a336 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a322:	2b01      	cmp	r3, #1
 800a324:	d104      	bne.n	800a330 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a32c:	659a      	str	r2, [r3, #88]	; 0x58
 800a32e:	e002      	b.n	800a336 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	4619      	mov	r1, r3
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fe67 	bl	800b010 <HAL_SD_ConfigWideBusOperation>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e026      	b.n	800a39a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a34c:	f7f9 fcd0 	bl	8003cf0 <HAL_GetTick>
 800a350:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a352:	e011      	b.n	800a378 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a354:	f7f9 fccc 	bl	8003cf0 <HAL_GetTick>
 800a358:	4602      	mov	r2, r0
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a362:	d109      	bne.n	800a378 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a36a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e010      	b.n	800a39a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 ff5b 	bl	800b234 <HAL_SD_GetCardState>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b04      	cmp	r3, #4
 800a382:	d1e7      	bne.n	800a354 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3728      	adds	r7, #40	; 0x28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a3a4:	b590      	push	{r4, r7, lr}
 800a3a6:	b08d      	sub	sp, #52	; 0x34
 800a3a8:	af02      	add	r7, sp, #8
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a3c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a3c4:	f7fe fdc8 	bl	8008f58 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3c8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d109      	bne.n	800a3e4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a3de:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e06a      	b.n	800a4ba <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	4a36      	ldr	r2, [pc, #216]	; (800a4c4 <HAL_SD_InitCard+0x120>)
 800a3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ee:	091b      	lsrs	r3, r3, #4
 800a3f0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681c      	ldr	r4, [r3, #0]
 800a3f6:	466a      	mov	r2, sp
 800a3f8:	f107 0318 	add.w	r3, r7, #24
 800a3fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a400:	e882 0003 	stmia.w	r2, {r0, r1}
 800a404:	f107 030c 	add.w	r3, r7, #12
 800a408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a40a:	4620      	mov	r0, r4
 800a40c:	f006 ff32 	bl	8011274 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4618      	mov	r0, r3
 800a416:	f006 ff75 	bl	8011304 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a420:	fbb2 f3f3 	udiv	r3, r2, r3
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a426:	4a28      	ldr	r2, [pc, #160]	; (800a4c8 <HAL_SD_InitCard+0x124>)
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42e:	3301      	adds	r3, #1
 800a430:	4618      	mov	r0, r3
 800a432:	f7f9 fc69 	bl	8003d08 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 ffea 	bl	800b410 <SD_PowerON>
 800a43c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00b      	beq.n	800a45c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	431a      	orrs	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e02e      	b.n	800a4ba <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 ff09 	bl	800b274 <SD_InitCard>
 800a462:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00b      	beq.n	800a482 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	431a      	orrs	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e01b      	b.n	800a4ba <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a48a:	4618      	mov	r0, r3
 800a48c:	f006 ffd0 	bl	8011430 <SDMMC_CmdBlockLength>
 800a490:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00f      	beq.n	800a4b8 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a0b      	ldr	r2, [pc, #44]	; (800a4cc <HAL_SD_InitCard+0x128>)
 800a49e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e000      	b.n	800a4ba <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	372c      	adds	r7, #44	; 0x2c
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd90      	pop	{r4, r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	014f8b59 	.word	0x014f8b59
 800a4c8:	00012110 	.word	0x00012110
 800a4cc:	1fe00fff 	.word	0x1fe00fff

0800a4d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08c      	sub	sp, #48	; 0x30
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d107      	bne.n	800a4f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e08d      	b.n	800a614 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b01      	cmp	r3, #1
 800a502:	f040 8086 	bne.w	800a612 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a50c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	441a      	add	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a516:	429a      	cmp	r2, r3
 800a518:	d907      	bls.n	800a52a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a51e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e074      	b.n	800a614 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2203      	movs	r2, #3
 800a52e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2200      	movs	r2, #0
 800a538:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	025a      	lsls	r2, r3, #9
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d002      	beq.n	800a556 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	025b      	lsls	r3, r3, #9
 800a554:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a556:	f04f 33ff 	mov.w	r3, #4294967295
 800a55a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	025b      	lsls	r3, r3, #9
 800a560:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a562:	2390      	movs	r3, #144	; 0x90
 800a564:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a566:	2302      	movs	r3, #2
 800a568:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a56e:	2300      	movs	r3, #0
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f107 0210 	add.w	r2, r7, #16
 800a57a:	4611      	mov	r1, r2
 800a57c:	4618      	mov	r0, r3
 800a57e:	f006 ff2b 	bl	80113d8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68da      	ldr	r2, [r3, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a590:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d90a      	bls.n	800a5be <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2282      	movs	r2, #130	; 0x82
 800a5ac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f006 ff81 	bl	80114bc <SDMMC_CmdReadMultiBlock>
 800a5ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a5bc:	e009      	b.n	800a5d2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2281      	movs	r2, #129	; 0x81
 800a5c2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f006 ff53 	bl	8011476 <SDMMC_CmdReadSingleBlock>
 800a5d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d012      	beq.n	800a5fe <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a0f      	ldr	r2, [pc, #60]	; (800a61c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a5de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e00a      	b.n	800a614 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a60c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	e000      	b.n	800a614 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a612:	2302      	movs	r3, #2
  }
}
 800a614:	4618      	mov	r0, r3
 800a616:	3730      	adds	r7, #48	; 0x30
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	1fe00fff 	.word	0x1fe00fff

0800a620 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08c      	sub	sp, #48	; 0x30
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
 800a62c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d107      	bne.n	800a648 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e08d      	b.n	800a764 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b01      	cmp	r3, #1
 800a652:	f040 8086 	bne.w	800a762 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	441a      	add	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a666:	429a      	cmp	r2, r3
 800a668:	d907      	bls.n	800a67a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e074      	b.n	800a764 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2203      	movs	r2, #3
 800a67e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2200      	movs	r2, #0
 800a688:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	025a      	lsls	r2, r3, #9
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d002      	beq.n	800a6a6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	025b      	lsls	r3, r3, #9
 800a6a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6aa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	025b      	lsls	r3, r3, #9
 800a6b0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a6b2:	2390      	movs	r3, #144	; 0x90
 800a6b4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f107 0210 	add.w	r2, r7, #16
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f006 fe83 	bl	80113d8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68da      	ldr	r2, [r3, #12]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6e0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d90a      	bls.n	800a70e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	22a0      	movs	r2, #160	; 0xa0
 800a6fc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a704:	4618      	mov	r0, r3
 800a706:	f006 ff1f 	bl	8011548 <SDMMC_CmdWriteMultiBlock>
 800a70a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a70c:	e009      	b.n	800a722 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2290      	movs	r2, #144	; 0x90
 800a712:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a71a:	4618      	mov	r0, r3
 800a71c:	f006 fef1 	bl	8011502 <SDMMC_CmdWriteSingleBlock>
 800a720:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d012      	beq.n	800a74e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a0f      	ldr	r2, [pc, #60]	; (800a76c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a72e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a736:	431a      	orrs	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e00a      	b.n	800a764 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a75c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	e000      	b.n	800a764 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a762:	2302      	movs	r3, #2
  }
}
 800a764:	4618      	mov	r0, r3
 800a766:	3730      	adds	r7, #48	; 0x30
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	1fe00fff 	.word	0x1fe00fff

0800a770 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d008      	beq.n	800a79e <HAL_SD_IRQHandler+0x2e>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f003 0308 	and.w	r3, r3, #8
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f001 f926 	bl	800b9e8 <SD_Read_IT>
 800a79c:	e19a      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 80ac 	beq.w	800a906 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7b6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	4b59      	ldr	r3, [pc, #356]	; (800a928 <HAL_SD_IRQHandler+0x1b8>)
 800a7c4:	400b      	ands	r3, r1
 800a7c6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a7d6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68da      	ldr	r2, [r3, #12]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7e6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f003 0308 	and.w	r3, r3, #8
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d038      	beq.n	800a864 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f003 0302 	and.w	r3, r3, #2
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d104      	bne.n	800a806 <HAL_SD_IRQHandler+0x96>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f003 0320 	and.w	r3, r3, #32
 800a802:	2b00      	cmp	r3, #0
 800a804:	d011      	beq.n	800a82a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f006 fec0 	bl	8011590 <SDMMC_CmdStopTransfer>
 800a810:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d008      	beq.n	800a82a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	431a      	orrs	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f95b 	bl	800aae0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a3f      	ldr	r2, [pc, #252]	; (800a92c <HAL_SD_IRQHandler+0x1bc>)
 800a830:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	d104      	bne.n	800a854 <HAL_SD_IRQHandler+0xe4>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f003 0302 	and.w	r3, r3, #2
 800a850:	2b00      	cmp	r3, #0
 800a852:	d003      	beq.n	800a85c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f007 fb73 	bl	8011f40 <HAL_SD_RxCpltCallback>
 800a85a:	e13b      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f007 fb65 	bl	8011f2c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a862:	e137      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 8132 	beq.w	800aad4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2200      	movs	r2, #0
 800a876:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2200      	movs	r2, #0
 800a87e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2200      	movs	r2, #0
 800a886:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f003 0302 	and.w	r3, r3, #2
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d104      	bne.n	800a89c <HAL_SD_IRQHandler+0x12c>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d011      	beq.n	800a8c0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f006 fe75 	bl	8011590 <SDMMC_CmdStopTransfer>
 800a8a6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d008      	beq.n	800a8c0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	431a      	orrs	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f910 	bl	800aae0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f003 0310 	and.w	r3, r3, #16
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d104      	bne.n	800a8e2 <HAL_SD_IRQHandler+0x172>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f003 0320 	and.w	r3, r3, #32
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d002      	beq.n	800a8e8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f007 fb22 	bl	8011f2c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d105      	bne.n	800a8fe <HAL_SD_IRQHandler+0x18e>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 80eb 	beq.w	800aad4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f007 fb1e 	bl	8011f40 <HAL_SD_RxCpltCallback>
}
 800a904:	e0e6      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00d      	beq.n	800a930 <HAL_SD_IRQHandler+0x1c0>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f003 0308 	and.w	r3, r3, #8
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d008      	beq.n	800a930 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 f8a8 	bl	800ba74 <SD_Write_IT>
 800a924:	e0d6      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
 800a926:	bf00      	nop
 800a928:	ffff3ec5 	.word	0xffff3ec5
 800a92c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a936:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 809d 	beq.w	800aa7a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a946:	f003 0302 	and.w	r3, r3, #2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d005      	beq.n	800a95a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a952:	f043 0202 	orr.w	r2, r3, #2
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a960:	f003 0308 	and.w	r3, r3, #8
 800a964:	2b00      	cmp	r3, #0
 800a966:	d005      	beq.n	800a974 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	f043 0208 	orr.w	r2, r3, #8
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97a:	f003 0320 	and.w	r3, r3, #32
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d005      	beq.n	800a98e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a986:	f043 0220 	orr.w	r2, r3, #32
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a994:	f003 0310 	and.w	r3, r3, #16
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d005      	beq.n	800a9a8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a0:	f043 0210 	orr.w	r2, r3, #16
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a4b      	ldr	r2, [pc, #300]	; (800aadc <HAL_SD_IRQHandler+0x36c>)
 800a9ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a9be:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68da      	ldr	r2, [r3, #12]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9ce:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9de:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a9ee:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f006 fdcb 	bl	8011590 <SDMMC_CmdStopTransfer>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa00:	431a      	orrs	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68da      	ldr	r2, [r3, #12]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa14:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa1e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00a      	beq.n	800aa40 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f851 	bl	800aae0 <HAL_SD_ErrorCallback>
}
 800aa3e:	e049      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d044      	beq.n	800aad4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d040      	beq.n	800aad4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aa60:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2200      	movs	r2, #0
 800aa68:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f834 	bl	800aae0 <HAL_SD_ErrorCallback>
}
 800aa78:	e02c      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d025      	beq.n	800aad4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa90:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10c      	bne.n	800aaba <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f003 0320 	and.w	r3, r3, #32
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d003      	beq.n	800aab2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f001 f84a 	bl	800bb44 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800aab0:	e010      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f001 f832 	bl	800bb1c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800aab8:	e00c      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f003 0320 	and.w	r3, r3, #32
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d003      	beq.n	800aacc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f001 f833 	bl	800bb30 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800aaca:	e003      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f001 f81b 	bl	800bb08 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800aad2:	e7ff      	b.n	800aad4 <HAL_SD_IRQHandler+0x364>
 800aad4:	bf00      	nop
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	18000f3a 	.word	0x18000f3a

0800aae0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab02:	0f9b      	lsrs	r3, r3, #30
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab0e:	0e9b      	lsrs	r3, r3, #26
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	f003 030f 	and.w	r3, r3, #15
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab20:	0e1b      	lsrs	r3, r3, #24
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	f003 0303 	and.w	r3, r3, #3
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab32:	0c1b      	lsrs	r3, r3, #16
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab3e:	0a1b      	lsrs	r3, r3, #8
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab54:	0d1b      	lsrs	r3, r3, #20
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab60:	0c1b      	lsrs	r3, r3, #16
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	f003 030f 	and.w	r3, r3, #15
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab72:	0bdb      	lsrs	r3, r3, #15
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab84:	0b9b      	lsrs	r3, r3, #14
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	f003 0301 	and.w	r3, r3, #1
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab96:	0b5b      	lsrs	r3, r3, #13
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aba8:	0b1b      	lsrs	r3, r3, #12
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	f003 0301 	and.w	r3, r3, #1
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2200      	movs	r2, #0
 800abba:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d163      	bne.n	800ac8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abc8:	009a      	lsls	r2, r3, #2
 800abca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800abce:	4013      	ands	r3, r2
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800abd4:	0f92      	lsrs	r2, r2, #30
 800abd6:	431a      	orrs	r2, r3
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abe0:	0edb      	lsrs	r3, r3, #27
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	f003 0307 	and.w	r3, r3, #7
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abf2:	0e1b      	lsrs	r3, r3, #24
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	f003 0307 	and.w	r3, r3, #7
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac04:	0d5b      	lsrs	r3, r3, #21
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac16:	0c9b      	lsrs	r3, r3, #18
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	f003 0307 	and.w	r3, r3, #7
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac28:	0bdb      	lsrs	r3, r3, #15
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	f003 0307 	and.w	r3, r3, #7
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	7e1b      	ldrb	r3, [r3, #24]
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	f003 0307 	and.w	r3, r3, #7
 800ac4a:	3302      	adds	r3, #2
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac56:	fb03 f202 	mul.w	r2, r3, r2
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	7a1b      	ldrb	r3, [r3, #8]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	f003 030f 	and.w	r3, r3, #15
 800ac68:	2201      	movs	r2, #1
 800ac6a:	409a      	lsls	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ac78:	0a52      	lsrs	r2, r2, #9
 800ac7a:	fb03 f202 	mul.w	r2, r3, r2
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac88:	655a      	str	r2, [r3, #84]	; 0x54
 800ac8a:	e031      	b.n	800acf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d11d      	bne.n	800acd0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac98:	041b      	lsls	r3, r3, #16
 800ac9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca2:	0c1b      	lsrs	r3, r3, #16
 800aca4:	431a      	orrs	r2, r3
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	3301      	adds	r3, #1
 800acb0:	029a      	lsls	r2, r3, #10
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acc4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	655a      	str	r2, [r3, #84]	; 0x54
 800acce:	e00f      	b.n	800acf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a58      	ldr	r2, [pc, #352]	; (800ae38 <HAL_SD_GetCardCSD+0x344>)
 800acd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	e09d      	b.n	800ae2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acf4:	0b9b      	lsrs	r3, r3, #14
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad06:	09db      	lsrs	r3, r3, #7
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad28:	0fdb      	lsrs	r3, r3, #31
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad34:	0f5b      	lsrs	r3, r3, #29
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	f003 0303 	and.w	r3, r3, #3
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad46:	0e9b      	lsrs	r3, r3, #26
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad58:	0d9b      	lsrs	r3, r3, #22
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	f003 030f 	and.w	r3, r3, #15
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad6a:	0d5b      	lsrs	r3, r3, #21
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad86:	0c1b      	lsrs	r3, r3, #16
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad9a:	0bdb      	lsrs	r3, r3, #15
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adae:	0b9b      	lsrs	r3, r3, #14
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adc2:	0b5b      	lsrs	r3, r3, #13
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800add6:	0b1b      	lsrs	r3, r3, #12
 800add8:	b2db      	uxtb	r3, r3
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adea:	0a9b      	lsrs	r3, r3, #10
 800adec:	b2db      	uxtb	r3, r3
 800adee:	f003 0303 	and.w	r3, r3, #3
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adfe:	0a1b      	lsrs	r3, r3, #8
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	f003 0303 	and.w	r3, r3, #3
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae12:	085b      	lsrs	r3, r3, #1
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	1fe00fff 	.word	0x1fe00fff

0800ae3c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b094      	sub	sp, #80	; 0x50
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d101      	bne.n	800ae5c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e0a7      	b.n	800afac <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ae5c:	f107 0308 	add.w	r3, r7, #8
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fb62 	bl	800b52c <SD_SendSDStatus>
 800ae68:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d011      	beq.n	800ae94 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a4f      	ldr	r2, [pc, #316]	; (800afb4 <HAL_SD_GetCardStatus+0x178>)
 800ae76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ae92:	e070      	b.n	800af76 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	099b      	lsrs	r3, r3, #6
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	f003 0303 	and.w	r3, r3, #3
 800ae9e:	b2da      	uxtb	r2, r3
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	095b      	lsrs	r3, r3, #5
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	0a1b      	lsrs	r3, r3, #8
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	0e1b      	lsrs	r3, r3, #24
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	4313      	orrs	r3, r2
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	061a      	lsls	r2, r3, #24
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	021b      	lsls	r3, r3, #8
 800aed6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aeda:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	0a1b      	lsrs	r3, r3, #8
 800aee0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aee4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	0e1b      	lsrs	r3, r3, #24
 800aeea:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	0a1b      	lsrs	r3, r3, #8
 800aefc:	b2da      	uxtb	r2, r3
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	0d1b      	lsrs	r3, r3, #20
 800af06:	b2db      	uxtb	r3, r3
 800af08:	f003 030f 	and.w	r3, r3, #15
 800af0c:	b2da      	uxtb	r2, r3
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	0c1b      	lsrs	r3, r3, #16
 800af16:	b29b      	uxth	r3, r3
 800af18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af1c:	b29a      	uxth	r2, r3
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	b29b      	uxth	r3, r3
 800af22:	b2db      	uxtb	r3, r3
 800af24:	b29b      	uxth	r3, r3
 800af26:	4313      	orrs	r3, r2
 800af28:	b29a      	uxth	r2, r3
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	0a9b      	lsrs	r3, r3, #10
 800af32:	b2db      	uxtb	r3, r3
 800af34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	0a1b      	lsrs	r3, r3, #8
 800af42:	b2db      	uxtb	r3, r3
 800af44:	f003 0303 	and.w	r3, r3, #3
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	091b      	lsrs	r3, r3, #4
 800af52:	b2db      	uxtb	r3, r3
 800af54:	f003 030f 	and.w	r3, r3, #15
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f003 030f 	and.w	r3, r3, #15
 800af66:	b2da      	uxtb	r2, r3
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	0e1b      	lsrs	r3, r3, #24
 800af70:	b2da      	uxtb	r2, r3
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af7e:	4618      	mov	r0, r3
 800af80:	f006 fa56 	bl	8011430 <SDMMC_CmdBlockLength>
 800af84:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800af86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00d      	beq.n	800afa8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a08      	ldr	r2, [pc, #32]	; (800afb4 <HAL_SD_GetCardStatus+0x178>)
 800af92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af98:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2201      	movs	r2, #1
 800af9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800afa8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800afac:	4618      	mov	r0, r3
 800afae:	3750      	adds	r7, #80	; 0x50
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	1fe00fff 	.word	0x1fe00fff

0800afb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b010:	b590      	push	{r4, r7, lr}
 800b012:	b08d      	sub	sp, #52	; 0x34
 800b014:	af02      	add	r7, sp, #8
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800b01a:	2300      	movs	r3, #0
 800b01c:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2203      	movs	r2, #3
 800b028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b030:	2b03      	cmp	r3, #3
 800b032:	d02e      	beq.n	800b092 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b03a:	d106      	bne.n	800b04a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b040:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	635a      	str	r2, [r3, #52]	; 0x34
 800b048:	e029      	b.n	800b09e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b050:	d10a      	bne.n	800b068 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fb62 	bl	800b71c <SD_WideBus_Enable>
 800b058:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	431a      	orrs	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	635a      	str	r2, [r3, #52]	; 0x34
 800b066:	e01a      	b.n	800b09e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10a      	bne.n	800b084 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fb9f 	bl	800b7b2 <SD_WideBus_Disable>
 800b074:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	431a      	orrs	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	635a      	str	r2, [r3, #52]	; 0x34
 800b082:	e00c      	b.n	800b09e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b088:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	635a      	str	r2, [r3, #52]	; 0x34
 800b090:	e005      	b.n	800b09e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b096:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d007      	beq.n	800b0b6 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a5e      	ldr	r2, [pc, #376]	; (800b224 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b0ac:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0b4:	e094      	b.n	800b1e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b0b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b0ba:	f7fd ff4d 	bl	8008f58 <HAL_RCCEx_GetPeriphCLKFreq>
 800b0be:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 8083 	beq.w	800b1ce <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	695a      	ldr	r2, [r3, #20]
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	4950      	ldr	r1, [pc, #320]	; (800b228 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b0e6:	fba1 1303 	umull	r1, r3, r1, r3
 800b0ea:	0e1b      	lsrs	r3, r3, #24
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d303      	bcc.n	800b0f8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	61bb      	str	r3, [r7, #24]
 800b0f6:	e05a      	b.n	800b1ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b100:	d103      	bne.n	800b10a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	61bb      	str	r3, [r7, #24]
 800b108:	e051      	b.n	800b1ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b10e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b112:	d126      	bne.n	800b162 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	695b      	ldr	r3, [r3, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10e      	bne.n	800b13a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	4a43      	ldr	r2, [pc, #268]	; (800b22c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d906      	bls.n	800b132 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	4a40      	ldr	r2, [pc, #256]	; (800b228 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b128:	fba2 2303 	umull	r2, r3, r2, r3
 800b12c:	0e5b      	lsrs	r3, r3, #25
 800b12e:	61bb      	str	r3, [r7, #24]
 800b130:	e03d      	b.n	800b1ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	61bb      	str	r3, [r7, #24]
 800b138:	e039      	b.n	800b1ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	6a3a      	ldr	r2, [r7, #32]
 800b142:	fbb2 f3f3 	udiv	r3, r2, r3
 800b146:	4a39      	ldr	r2, [pc, #228]	; (800b22c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d906      	bls.n	800b15a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	4a36      	ldr	r2, [pc, #216]	; (800b228 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b150:	fba2 2303 	umull	r2, r3, r2, r3
 800b154:	0e5b      	lsrs	r3, r3, #25
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	e029      	b.n	800b1ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	61bb      	str	r3, [r7, #24]
 800b160:	e025      	b.n	800b1ae <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10e      	bne.n	800b188 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b16a:	6a3b      	ldr	r3, [r7, #32]
 800b16c:	4a30      	ldr	r2, [pc, #192]	; (800b230 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d906      	bls.n	800b180 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	4a2c      	ldr	r2, [pc, #176]	; (800b228 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b176:	fba2 2303 	umull	r2, r3, r2, r3
 800b17a:	0e1b      	lsrs	r3, r3, #24
 800b17c:	61bb      	str	r3, [r7, #24]
 800b17e:	e016      	b.n	800b1ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	695b      	ldr	r3, [r3, #20]
 800b184:	61bb      	str	r3, [r7, #24]
 800b186:	e012      	b.n	800b1ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	005b      	lsls	r3, r3, #1
 800b18e:	6a3a      	ldr	r2, [r7, #32]
 800b190:	fbb2 f3f3 	udiv	r3, r2, r3
 800b194:	4a26      	ldr	r2, [pc, #152]	; (800b230 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d906      	bls.n	800b1a8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	4a22      	ldr	r2, [pc, #136]	; (800b228 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b19e:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a2:	0e1b      	lsrs	r3, r3, #24
 800b1a4:	61bb      	str	r3, [r7, #24]
 800b1a6:	e002      	b.n	800b1ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	695b      	ldr	r3, [r3, #20]
 800b1ac:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681c      	ldr	r4, [r3, #0]
 800b1b2:	466a      	mov	r2, sp
 800b1b4:	f107 0314 	add.w	r3, r7, #20
 800b1b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1bc:	e882 0003 	stmia.w	r2, {r0, r1}
 800b1c0:	f107 0308 	add.w	r3, r7, #8
 800b1c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f006 f854 	bl	8011274 <SDMMC_Init>
 800b1cc:	e008      	b.n	800b1e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f006 f921 	bl	8011430 <SDMMC_CmdBlockLength>
 800b1ee:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00c      	beq.n	800b210 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a0a      	ldr	r2, [pc, #40]	; (800b224 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b1fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	431a      	orrs	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	372c      	adds	r7, #44	; 0x2c
 800b220:	46bd      	mov	sp, r7
 800b222:	bd90      	pop	{r4, r7, pc}
 800b224:	1fe00fff 	.word	0x1fe00fff
 800b228:	55e63b89 	.word	0x55e63b89
 800b22c:	02faf080 	.word	0x02faf080
 800b230:	017d7840 	.word	0x017d7840

0800b234 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b240:	f107 030c 	add.w	r3, r7, #12
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fa40 	bl	800b6cc <SD_SendStatus>
 800b24c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d005      	beq.n	800b260 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	431a      	orrs	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	0a5b      	lsrs	r3, r3, #9
 800b264:	f003 030f 	and.w	r3, r3, #15
 800b268:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b26a:	693b      	ldr	r3, [r7, #16]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b090      	sub	sp, #64	; 0x40
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b27c:	2300      	movs	r3, #0
 800b27e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b280:	f7f8 fd36 	bl	8003cf0 <HAL_GetTick>
 800b284:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f006 f84b 	bl	8011326 <SDMMC_GetPowerState>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d102      	bne.n	800b29c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b296:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b29a:	e0b5      	b.n	800b408 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d02e      	beq.n	800b302 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f006 fa96 	bl	80117da <SDMMC_CmdSendCID>
 800b2ae:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <SD_InitCard+0x46>
    {
      return errorstate;
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b8:	e0a6      	b.n	800b408 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2100      	movs	r1, #0
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f006 f876 	bl	80113b2 <SDMMC_GetResponse>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2104      	movs	r1, #4
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f006 f86d 	bl	80113b2 <SDMMC_GetResponse>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2108      	movs	r1, #8
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f006 f864 	bl	80113b2 <SDMMC_GetResponse>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	210c      	movs	r1, #12
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f006 f85b 	bl	80113b2 <SDMMC_GetResponse>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b306:	2b03      	cmp	r3, #3
 800b308:	d01d      	beq.n	800b346 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b30a:	e019      	b.n	800b340 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f107 020a 	add.w	r2, r7, #10
 800b314:	4611      	mov	r1, r2
 800b316:	4618      	mov	r0, r3
 800b318:	f006 fa9e 	bl	8011858 <SDMMC_CmdSetRelAdd>
 800b31c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	e06f      	b.n	800b408 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b328:	f7f8 fce2 	bl	8003cf0 <HAL_GetTick>
 800b32c:	4602      	mov	r2, r0
 800b32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	f241 3287 	movw	r2, #4999	; 0x1387
 800b336:	4293      	cmp	r3, r2
 800b338:	d902      	bls.n	800b340 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b33a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b33e:	e063      	b.n	800b408 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b340:	897b      	ldrh	r3, [r7, #10]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0e2      	beq.n	800b30c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d036      	beq.n	800b3bc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b34e:	897b      	ldrh	r3, [r7, #10]
 800b350:	461a      	mov	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35e:	041b      	lsls	r3, r3, #16
 800b360:	4619      	mov	r1, r3
 800b362:	4610      	mov	r0, r2
 800b364:	f006 fa58 	bl	8011818 <SDMMC_CmdSendCSD>
 800b368:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <SD_InitCard+0x100>
    {
      return errorstate;
 800b370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b372:	e049      	b.n	800b408 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2100      	movs	r1, #0
 800b37a:	4618      	mov	r0, r3
 800b37c:	f006 f819 	bl	80113b2 <SDMMC_GetResponse>
 800b380:	4602      	mov	r2, r0
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2104      	movs	r1, #4
 800b38c:	4618      	mov	r0, r3
 800b38e:	f006 f810 	bl	80113b2 <SDMMC_GetResponse>
 800b392:	4602      	mov	r2, r0
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2108      	movs	r1, #8
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f006 f807 	bl	80113b2 <SDMMC_GetResponse>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	210c      	movs	r1, #12
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f005 fffe 	bl	80113b2 <SDMMC_GetResponse>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2104      	movs	r1, #4
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f005 fff5 	bl	80113b2 <SDMMC_GetResponse>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	0d1a      	lsrs	r2, r3, #20
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b3d0:	f107 030c 	add.w	r3, r7, #12
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff fb8c 	bl	800aaf4 <HAL_SD_GetCardCSD>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3e6:	e00f      	b.n	800b408 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f0:	041b      	lsls	r3, r3, #16
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	f006 f907 	bl	8011608 <SDMMC_CmdSelDesel>
 800b3fa:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <SD_InitCard+0x192>
  {
    return errorstate;
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	e000      	b.n	800b408 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3740      	adds	r7, #64	; 0x40
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b418:	2300      	movs	r3, #0
 800b41a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b420:	2300      	movs	r3, #0
 800b422:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4618      	mov	r0, r3
 800b42a:	f006 f910 	bl	801164e <SDMMC_CmdGoIdleState>
 800b42e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d001      	beq.n	800b43a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	e072      	b.n	800b520 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4618      	mov	r0, r3
 800b440:	f006 f923 	bl	801168a <SDMMC_CmdOperCond>
 800b444:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b44c:	d10d      	bne.n	800b46a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4618      	mov	r0, r3
 800b45a:	f006 f8f8 	bl	801164e <SDMMC_CmdGoIdleState>
 800b45e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d004      	beq.n	800b470 <SD_PowerON+0x60>
    {
      return errorstate;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	e05a      	b.n	800b520 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b474:	2b01      	cmp	r3, #1
 800b476:	d137      	bne.n	800b4e8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2100      	movs	r1, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f006 f923 	bl	80116ca <SDMMC_CmdAppCommand>
 800b484:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d02d      	beq.n	800b4e8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b48c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b490:	e046      	b.n	800b520 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2100      	movs	r1, #0
 800b498:	4618      	mov	r0, r3
 800b49a:	f006 f916 	bl	80116ca <SDMMC_CmdAppCommand>
 800b49e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <SD_PowerON+0x9a>
    {
      return errorstate;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	e03a      	b.n	800b520 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	491e      	ldr	r1, [pc, #120]	; (800b528 <SD_PowerON+0x118>)
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f006 f92d 	bl	8011710 <SDMMC_CmdAppOperCommand>
 800b4b6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b4be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b4c2:	e02d      	b.n	800b520 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f005 ff71 	bl	80113b2 <SDMMC_GetResponse>
 800b4d0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	0fdb      	lsrs	r3, r3, #31
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d101      	bne.n	800b4de <SD_PowerON+0xce>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e000      	b.n	800b4e0 <SD_PowerON+0xd0>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	613b      	str	r3, [r7, #16]

    count++;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d802      	bhi.n	800b4f8 <SD_PowerON+0xe8>
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d0cc      	beq.n	800b492 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d902      	bls.n	800b508 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b502:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b506:	e00b      	b.n	800b520 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	c1100000 	.word	0xc1100000

0800b52c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08c      	sub	sp, #48	; 0x30
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b536:	f7f8 fbdb 	bl	8003cf0 <HAL_GetTick>
 800b53a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2100      	movs	r1, #0
 800b546:	4618      	mov	r0, r3
 800b548:	f005 ff33 	bl	80113b2 <SDMMC_GetResponse>
 800b54c:	4603      	mov	r3, r0
 800b54e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b556:	d102      	bne.n	800b55e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b55c:	e0b0      	b.n	800b6c0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2140      	movs	r1, #64	; 0x40
 800b564:	4618      	mov	r0, r3
 800b566:	f005 ff63 	bl	8011430 <SDMMC_CmdBlockLength>
 800b56a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b56c:	6a3b      	ldr	r3, [r7, #32]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d005      	beq.n	800b57e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	e0a0      	b.n	800b6c0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b586:	041b      	lsls	r3, r3, #16
 800b588:	4619      	mov	r1, r3
 800b58a:	4610      	mov	r0, r2
 800b58c:	f006 f89d 	bl	80116ca <SDMMC_CmdAppCommand>
 800b590:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b592:	6a3b      	ldr	r3, [r7, #32]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d005      	beq.n	800b5a4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	e08d      	b.n	800b6c0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b5aa:	2340      	movs	r3, #64	; 0x40
 800b5ac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b5ae:	2360      	movs	r3, #96	; 0x60
 800b5b0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b5b2:	2302      	movs	r3, #2
 800b5b4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f107 0208 	add.w	r2, r7, #8
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f005 ff05 	bl	80113d8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f006 f985 	bl	80118e2 <SDMMC_CmdStatusRegister>
 800b5d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5da:	6a3b      	ldr	r3, [r7, #32]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d02b      	beq.n	800b638 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	e069      	b.n	800b6c0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d013      	beq.n	800b622 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5fe:	e00d      	b.n	800b61c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4618      	mov	r0, r3
 800b606:	f005 fe5f 	bl	80112c8 <SDMMC_ReadFIFO>
 800b60a:	4602      	mov	r2, r0
 800b60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60e:	601a      	str	r2, [r3, #0]
        pData++;
 800b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b612:	3304      	adds	r3, #4
 800b614:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b618:	3301      	adds	r3, #1
 800b61a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61e:	2b07      	cmp	r3, #7
 800b620:	d9ee      	bls.n	800b600 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b622:	f7f8 fb65 	bl	8003cf0 <HAL_GetTick>
 800b626:	4602      	mov	r2, r0
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b630:	d102      	bne.n	800b638 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b636:	e043      	b.n	800b6c0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b63e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b642:	2b00      	cmp	r3, #0
 800b644:	d0d2      	beq.n	800b5ec <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64c:	f003 0308 	and.w	r3, r3, #8
 800b650:	2b00      	cmp	r3, #0
 800b652:	d001      	beq.n	800b658 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b654:	2308      	movs	r3, #8
 800b656:	e033      	b.n	800b6c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b65e:	f003 0302 	and.w	r3, r3, #2
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b666:	2302      	movs	r3, #2
 800b668:	e02a      	b.n	800b6c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b670:	f003 0320 	and.w	r3, r3, #32
 800b674:	2b00      	cmp	r3, #0
 800b676:	d017      	beq.n	800b6a8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b678:	2320      	movs	r3, #32
 800b67a:	e021      	b.n	800b6c0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4618      	mov	r0, r3
 800b682:	f005 fe21 	bl	80112c8 <SDMMC_ReadFIFO>
 800b686:	4602      	mov	r2, r0
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	601a      	str	r2, [r3, #0]
    pData++;
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	3304      	adds	r3, #4
 800b690:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b692:	f7f8 fb2d 	bl	8003cf0 <HAL_GetTick>
 800b696:	4602      	mov	r2, r0
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a0:	d102      	bne.n	800b6a8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b6a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6a6:	e00b      	b.n	800b6c0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1e2      	bne.n	800b67c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a03      	ldr	r2, [pc, #12]	; (800b6c8 <SD_SendSDStatus+0x19c>)
 800b6bc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3730      	adds	r7, #48	; 0x30
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	18000f3a 	.word	0x18000f3a

0800b6cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d102      	bne.n	800b6e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b6dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6e0:	e018      	b.n	800b714 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ea:	041b      	lsls	r3, r3, #16
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	f006 f8d4 	bl	801189c <SDMMC_CmdSendStatus>
 800b6f4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	e009      	b.n	800b714 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2100      	movs	r1, #0
 800b706:	4618      	mov	r0, r3
 800b708:	f005 fe53 	bl	80113b2 <SDMMC_GetResponse>
 800b70c:	4602      	mov	r2, r0
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b724:	2300      	movs	r3, #0
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	2300      	movs	r3, #0
 800b72a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2100      	movs	r1, #0
 800b732:	4618      	mov	r0, r3
 800b734:	f005 fe3d 	bl	80113b2 <SDMMC_GetResponse>
 800b738:	4603      	mov	r3, r0
 800b73a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b73e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b742:	d102      	bne.n	800b74a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b748:	e02f      	b.n	800b7aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b74a:	f107 030c 	add.w	r3, r7, #12
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f879 	bl	800b848 <SD_FindSCR>
 800b756:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	e023      	b.n	800b7aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d01c      	beq.n	800b7a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b774:	041b      	lsls	r3, r3, #16
 800b776:	4619      	mov	r1, r3
 800b778:	4610      	mov	r0, r2
 800b77a:	f005 ffa6 	bl	80116ca <SDMMC_CmdAppCommand>
 800b77e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	e00f      	b.n	800b7aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2102      	movs	r1, #2
 800b790:	4618      	mov	r0, r3
 800b792:	f005 ffdd 	bl	8011750 <SDMMC_CmdBusWidth>
 800b796:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	e003      	b.n	800b7aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e001      	b.n	800b7aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b7a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3718      	adds	r7, #24
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b086      	sub	sp, #24
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60fb      	str	r3, [r7, #12]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f005 fdf2 	bl	80113b2 <SDMMC_GetResponse>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7d8:	d102      	bne.n	800b7e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b7da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7de:	e02f      	b.n	800b840 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b7e0:	f107 030c 	add.w	r3, r7, #12
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f82e 	bl	800b848 <SD_FindSCR>
 800b7ec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	e023      	b.n	800b840 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d01c      	beq.n	800b83c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b80a:	041b      	lsls	r3, r3, #16
 800b80c:	4619      	mov	r1, r3
 800b80e:	4610      	mov	r0, r2
 800b810:	f005 ff5b 	bl	80116ca <SDMMC_CmdAppCommand>
 800b814:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d001      	beq.n	800b820 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	e00f      	b.n	800b840 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2100      	movs	r1, #0
 800b826:	4618      	mov	r0, r3
 800b828:	f005 ff92 	bl	8011750 <SDMMC_CmdBusWidth>
 800b82c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d001      	beq.n	800b838 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	e003      	b.n	800b840 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b838:	2300      	movs	r3, #0
 800b83a:	e001      	b.n	800b840 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b83c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b08e      	sub	sp, #56	; 0x38
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b852:	f7f8 fa4d 	bl	8003cf0 <HAL_GetTick>
 800b856:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b858:	2300      	movs	r3, #0
 800b85a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b85c:	2300      	movs	r3, #0
 800b85e:	60bb      	str	r3, [r7, #8]
 800b860:	2300      	movs	r3, #0
 800b862:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2108      	movs	r1, #8
 800b86e:	4618      	mov	r0, r3
 800b870:	f005 fdde 	bl	8011430 <SDMMC_CmdBlockLength>
 800b874:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87e:	e0ad      	b.n	800b9dc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b888:	041b      	lsls	r3, r3, #16
 800b88a:	4619      	mov	r1, r3
 800b88c:	4610      	mov	r0, r2
 800b88e:	f005 ff1c 	bl	80116ca <SDMMC_CmdAppCommand>
 800b892:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <SD_FindSCR+0x56>
  {
    return errorstate;
 800b89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89c:	e09e      	b.n	800b9dc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b89e:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b8a4:	2308      	movs	r3, #8
 800b8a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b8a8:	2330      	movs	r3, #48	; 0x30
 800b8aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f107 0210 	add.w	r2, r7, #16
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f005 fd88 	bl	80113d8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f005 ff62 	bl	8011796 <SDMMC_CmdSendSCR>
 800b8d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d027      	beq.n	800b92a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	e07e      	b.n	800b9dc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d113      	bne.n	800b914 <SD_FindSCR+0xcc>
 800b8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d110      	bne.n	800b914 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f005 fce6 	bl	80112c8 <SDMMC_ReadFIFO>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4618      	mov	r0, r3
 800b906:	f005 fcdf 	bl	80112c8 <SDMMC_ReadFIFO>
 800b90a:	4603      	mov	r3, r0
 800b90c:	60fb      	str	r3, [r7, #12]
      index++;
 800b90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b910:	3301      	adds	r3, #1
 800b912:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b914:	f7f8 f9ec 	bl	8003cf0 <HAL_GetTick>
 800b918:	4602      	mov	r2, r0
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b922:	d102      	bne.n	800b92a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b924:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b928:	e058      	b.n	800b9dc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b930:	f240 532a 	movw	r3, #1322	; 0x52a
 800b934:	4013      	ands	r3, r2
 800b936:	2b00      	cmp	r3, #0
 800b938:	d0d1      	beq.n	800b8de <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b940:	f003 0308 	and.w	r3, r3, #8
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2208      	movs	r2, #8
 800b94e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b950:	2308      	movs	r3, #8
 800b952:	e043      	b.n	800b9dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b95a:	f003 0302 	and.w	r3, r3, #2
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d005      	beq.n	800b96e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2202      	movs	r2, #2
 800b968:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b96a:	2302      	movs	r3, #2
 800b96c:	e036      	b.n	800b9dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b974:	f003 0320 	and.w	r3, r3, #32
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d005      	beq.n	800b988 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2220      	movs	r2, #32
 800b982:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b984:	2320      	movs	r3, #32
 800b986:	e029      	b.n	800b9dc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a15      	ldr	r2, [pc, #84]	; (800b9e4 <SD_FindSCR+0x19c>)
 800b98e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	061a      	lsls	r2, r3, #24
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	021b      	lsls	r3, r3, #8
 800b998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b99c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	0a1b      	lsrs	r3, r3, #8
 800b9a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b9a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	0e1b      	lsrs	r3, r3, #24
 800b9ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	601a      	str	r2, [r3, #0]
    scr++;
 800b9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	061a      	lsls	r2, r3, #24
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	0a1b      	lsrs	r3, r3, #8
 800b9ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	0e1b      	lsrs	r3, r3, #24
 800b9d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3738      	adds	r7, #56	; 0x38
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	18000f3a 	.word	0x18000f3a

0800b9e8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fa:	2b1f      	cmp	r3, #31
 800b9fc:	d936      	bls.n	800ba6c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b9fe:	2300      	movs	r3, #0
 800ba00:	617b      	str	r3, [r7, #20]
 800ba02:	e027      	b.n	800ba54 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f005 fc5d 	bl	80112c8 <SDMMC_ReadFIFO>
 800ba0e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	0a1b      	lsrs	r3, r3, #8
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	0c1b      	lsrs	r3, r3, #16
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	0e1b      	lsrs	r3, r3, #24
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	3301      	adds	r3, #1
 800ba52:	617b      	str	r3, [r7, #20]
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	2b07      	cmp	r3, #7
 800ba58:	d9d4      	bls.n	800ba04 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	693a      	ldr	r2, [r7, #16]
 800ba5e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba64:	f1a3 0220 	sub.w	r2, r3, #32
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ba6c:	bf00      	nop
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	69db      	ldr	r3, [r3, #28]
 800ba80:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a1b      	ldr	r3, [r3, #32]
 800ba86:	2b1f      	cmp	r3, #31
 800ba88:	d93a      	bls.n	800bb00 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	e02b      	b.n	800bae8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	021a      	lsls	r2, r3, #8
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	4313      	orrs	r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	3301      	adds	r3, #1
 800baac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	041a      	lsls	r2, r3, #16
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	3301      	adds	r3, #1
 800babe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	061a      	lsls	r2, r3, #24
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	4313      	orrs	r3, r2
 800baca:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	3301      	adds	r3, #1
 800bad0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f107 020c 	add.w	r2, r7, #12
 800bada:	4611      	mov	r1, r2
 800badc:	4618      	mov	r0, r3
 800bade:	f005 fc00 	bl	80112e2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	3301      	adds	r3, #1
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	2b07      	cmp	r3, #7
 800baec:	d9d0      	bls.n	800ba90 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a1b      	ldr	r3, [r3, #32]
 800baf8:	f1a3 0220 	sub.w	r2, r3, #32
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	621a      	str	r2, [r3, #32]
  }
}
 800bb00:	bf00      	nop
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800bb24:	bf00      	nop
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800bb38:	bf00      	nop
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e02b      	b.n	800bbc4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d106      	bne.n	800bb86 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7f7 fdf9 	bl	8003778 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2202      	movs	r2, #2
 800bb8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	3304      	adds	r3, #4
 800bb96:	4619      	mov	r1, r3
 800bb98:	4610      	mov	r0, r2
 800bb9a:	f005 fa69 	bl	8011070 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6818      	ldr	r0, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	461a      	mov	r2, r3
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	f005 fabd 	bl	8011128 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800bbae:	4b07      	ldr	r3, [pc, #28]	; (800bbcc <HAL_SDRAM_Init+0x74>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a06      	ldr	r2, [pc, #24]	; (800bbcc <HAL_SDRAM_Init+0x74>)
 800bbb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbb8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	52004000 	.word	0x52004000

0800bbd0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bbe2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d101      	bne.n	800bbee <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800bbea:	2302      	movs	r3, #2
 800bbec:	e021      	b.n	800bc32 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d002      	beq.n	800bbfa <HAL_SDRAM_SendCommand+0x2a>
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
 800bbf6:	2b05      	cmp	r3, #5
 800bbf8:	d118      	bne.n	800bc2c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2202      	movs	r2, #2
 800bbfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	68b9      	ldr	r1, [r7, #8]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f005 faf6 	bl	80111fc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d104      	bne.n	800bc22 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2205      	movs	r2, #5
 800bc1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800bc20:	e006      	b.n	800bc30 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800bc2a:	e001      	b.n	800bc30 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e000      	b.n	800bc32 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3718      	adds	r7, #24
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d101      	bne.n	800bc54 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800bc50:	2302      	movs	r3, #2
 800bc52:	e016      	b.n	800bc82 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d10f      	bne.n	800bc80 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2202      	movs	r2, #2
 800bc64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f005 fae8 	bl	8011244 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	e000      	b.n	800bc82 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
	...

0800bc8c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d101      	bne.n	800bc9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e0f1      	b.n	800be82 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a78      	ldr	r2, [pc, #480]	; (800be8c <HAL_SPI_Init+0x200>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d00f      	beq.n	800bcce <HAL_SPI_Init+0x42>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a77      	ldr	r2, [pc, #476]	; (800be90 <HAL_SPI_Init+0x204>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d00a      	beq.n	800bcce <HAL_SPI_Init+0x42>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a75      	ldr	r2, [pc, #468]	; (800be94 <HAL_SPI_Init+0x208>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d005      	beq.n	800bcce <HAL_SPI_Init+0x42>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	2b0f      	cmp	r3, #15
 800bcc8:	d901      	bls.n	800bcce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e0d9      	b.n	800be82 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f001 f816 	bl	800cd00 <SPI_GetPacketSize>
 800bcd4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a6c      	ldr	r2, [pc, #432]	; (800be8c <HAL_SPI_Init+0x200>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d00c      	beq.n	800bcfa <HAL_SPI_Init+0x6e>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a6a      	ldr	r2, [pc, #424]	; (800be90 <HAL_SPI_Init+0x204>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d007      	beq.n	800bcfa <HAL_SPI_Init+0x6e>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a69      	ldr	r2, [pc, #420]	; (800be94 <HAL_SPI_Init+0x208>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d002      	beq.n	800bcfa <HAL_SPI_Init+0x6e>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2b08      	cmp	r3, #8
 800bcf8:	d811      	bhi.n	800bd1e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bcfe:	4a63      	ldr	r2, [pc, #396]	; (800be8c <HAL_SPI_Init+0x200>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d009      	beq.n	800bd18 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a61      	ldr	r2, [pc, #388]	; (800be90 <HAL_SPI_Init+0x204>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d004      	beq.n	800bd18 <HAL_SPI_Init+0x8c>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a60      	ldr	r2, [pc, #384]	; (800be94 <HAL_SPI_Init+0x208>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d104      	bne.n	800bd22 <HAL_SPI_Init+0x96>
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2b10      	cmp	r3, #16
 800bd1c:	d901      	bls.n	800bd22 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e0af      	b.n	800be82 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d106      	bne.n	800bd3c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7f7 f86a 	bl	8002e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f022 0201 	bic.w	r2, r2, #1
 800bd52:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bd5e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd68:	d119      	bne.n	800bd9e <HAL_SPI_Init+0x112>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd72:	d103      	bne.n	800bd7c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d008      	beq.n	800bd8e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d10c      	bne.n	800bd9e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bd88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd8c:	d107      	bne.n	800bd9e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bd9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	69da      	ldr	r2, [r3, #28]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda6:	431a      	orrs	r2, r3
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	431a      	orrs	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb0:	ea42 0103 	orr.w	r1, r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68da      	ldr	r2, [r3, #12]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	430a      	orrs	r2, r1
 800bdbe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc8:	431a      	orrs	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdce:	431a      	orrs	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	699b      	ldr	r3, [r3, #24]
 800bdd4:	431a      	orrs	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	431a      	orrs	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	695b      	ldr	r3, [r3, #20]
 800bde0:	431a      	orrs	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	431a      	orrs	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	431a      	orrs	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdf2:	431a      	orrs	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdfe:	ea42 0103 	orr.w	r1, r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	430a      	orrs	r2, r1
 800be0c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d113      	bne.n	800be3e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be28:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be3c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f022 0201 	bic.w	r2, r2, #1
 800be4c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00a      	beq.n	800be70 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	430a      	orrs	r2, r1
 800be6e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	40013000 	.word	0x40013000
 800be90:	40003800 	.word	0x40003800
 800be94:	40003c00 	.word	0x40003c00

0800be98 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b08a      	sub	sp, #40	; 0x28
 800be9c:	af02      	add	r7, sp, #8
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	603b      	str	r3, [r7, #0]
 800bea4:	4613      	mov	r3, r2
 800bea6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3320      	adds	r3, #32
 800beae:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d101      	bne.n	800bec2 <HAL_SPI_Transmit+0x2a>
 800bebe:	2302      	movs	r3, #2
 800bec0:	e1d7      	b.n	800c272 <HAL_SPI_Transmit+0x3da>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800beca:	f7f7 ff11 	bl	8003cf0 <HAL_GetTick>
 800bece:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d007      	beq.n	800beec <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bedc:	2302      	movs	r3, #2
 800bede:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bee8:	7efb      	ldrb	r3, [r7, #27]
 800beea:	e1c2      	b.n	800c272 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d002      	beq.n	800bef8 <HAL_SPI_Transmit+0x60>
 800bef2:	88fb      	ldrh	r3, [r7, #6]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d107      	bne.n	800bf08 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bf04:	7efb      	ldrb	r3, [r7, #27]
 800bf06:	e1b4      	b.n	800c272 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2203      	movs	r2, #3
 800bf0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	88fa      	ldrh	r2, [r7, #6]
 800bf22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	88fa      	ldrh	r2, [r7, #6]
 800bf2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bf58:	d107      	bne.n	800bf6a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf68:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	685a      	ldr	r2, [r3, #4]
 800bf70:	4b96      	ldr	r3, [pc, #600]	; (800c1cc <HAL_SPI_Transmit+0x334>)
 800bf72:	4013      	ands	r3, r2
 800bf74:	88f9      	ldrh	r1, [r7, #6]
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	6812      	ldr	r2, [r2, #0]
 800bf7a:	430b      	orrs	r3, r1
 800bf7c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f042 0201 	orr.w	r2, r2, #1
 800bf8c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf96:	d107      	bne.n	800bfa8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	2b0f      	cmp	r3, #15
 800bfae:	d947      	bls.n	800c040 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bfb0:	e03f      	b.n	800c032 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	f003 0302 	and.w	r3, r3, #2
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d114      	bne.n	800bfea <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6812      	ldr	r2, [r2, #0]
 800bfca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfd0:	1d1a      	adds	r2, r3, #4
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bfe8:	e023      	b.n	800c032 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfea:	f7f7 fe81 	bl	8003cf0 <HAL_GetTick>
 800bfee:	4602      	mov	r2, r0
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	1ad3      	subs	r3, r2, r3
 800bff4:	683a      	ldr	r2, [r7, #0]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d803      	bhi.n	800c002 <HAL_SPI_Transmit+0x16a>
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c000:	d102      	bne.n	800c008 <HAL_SPI_Transmit+0x170>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d114      	bne.n	800c032 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f000 fdab 	bl	800cb64 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c01c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c02e:	2303      	movs	r3, #3
 800c030:	e11f      	b.n	800c272 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c038:	b29b      	uxth	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1b9      	bne.n	800bfb2 <HAL_SPI_Transmit+0x11a>
 800c03e:	e0f2      	b.n	800c226 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	2b07      	cmp	r3, #7
 800c046:	f240 80e7 	bls.w	800c218 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c04a:	e05d      	b.n	800c108 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	695b      	ldr	r3, [r3, #20]
 800c052:	f003 0302 	and.w	r3, r3, #2
 800c056:	2b02      	cmp	r3, #2
 800c058:	d132      	bne.n	800c0c0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c060:	b29b      	uxth	r3, r3
 800c062:	2b01      	cmp	r3, #1
 800c064:	d918      	bls.n	800c098 <HAL_SPI_Transmit+0x200>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d014      	beq.n	800c098 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	6812      	ldr	r2, [r2, #0]
 800c078:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c07e:	1d1a      	adds	r2, r3, #4
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	3b02      	subs	r3, #2
 800c08e:	b29a      	uxth	r2, r3
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c096:	e037      	b.n	800c108 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c09c:	881a      	ldrh	r2, [r3, #0]
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0a6:	1c9a      	adds	r2, r3, #2
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c0be:	e023      	b.n	800c108 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0c0:	f7f7 fe16 	bl	8003cf0 <HAL_GetTick>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d803      	bhi.n	800c0d8 <HAL_SPI_Transmit+0x240>
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d6:	d102      	bne.n	800c0de <HAL_SPI_Transmit+0x246>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d114      	bne.n	800c108 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f000 fd40 	bl	800cb64 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c104:	2303      	movs	r3, #3
 800c106:	e0b4      	b.n	800c272 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c10e:	b29b      	uxth	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d19b      	bne.n	800c04c <HAL_SPI_Transmit+0x1b4>
 800c114:	e087      	b.n	800c226 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	695b      	ldr	r3, [r3, #20]
 800c11c:	f003 0302 	and.w	r3, r3, #2
 800c120:	2b02      	cmp	r3, #2
 800c122:	d155      	bne.n	800c1d0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d918      	bls.n	800c162 <HAL_SPI_Transmit+0x2ca>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c134:	2b40      	cmp	r3, #64	; 0x40
 800c136:	d914      	bls.n	800c162 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	6812      	ldr	r2, [r2, #0]
 800c142:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c148:	1d1a      	adds	r2, r3, #4
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c154:	b29b      	uxth	r3, r3
 800c156:	3b04      	subs	r3, #4
 800c158:	b29a      	uxth	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c160:	e05a      	b.n	800c218 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c168:	b29b      	uxth	r3, r3
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d917      	bls.n	800c19e <HAL_SPI_Transmit+0x306>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c172:	2b00      	cmp	r3, #0
 800c174:	d013      	beq.n	800c19e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c17a:	881a      	ldrh	r2, [r3, #0]
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c184:	1c9a      	adds	r2, r3, #2
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c190:	b29b      	uxth	r3, r3
 800c192:	3b02      	subs	r3, #2
 800c194:	b29a      	uxth	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c19c:	e03c      	b.n	800c218 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3320      	adds	r3, #32
 800c1a8:	7812      	ldrb	r2, [r2, #0]
 800c1aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1b0:	1c5a      	adds	r2, r3, #1
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c1c8:	e026      	b.n	800c218 <HAL_SPI_Transmit+0x380>
 800c1ca:	bf00      	nop
 800c1cc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1d0:	f7f7 fd8e 	bl	8003cf0 <HAL_GetTick>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d803      	bhi.n	800c1e8 <HAL_SPI_Transmit+0x350>
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e6:	d102      	bne.n	800c1ee <HAL_SPI_Transmit+0x356>
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d114      	bne.n	800c218 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f000 fcb8 	bl	800cb64 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c202:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c214:	2303      	movs	r3, #3
 800c216:	e02c      	b.n	800c272 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c21e:	b29b      	uxth	r3, r3
 800c220:	2b00      	cmp	r3, #0
 800c222:	f47f af78 	bne.w	800c116 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	2200      	movs	r2, #0
 800c22e:	2108      	movs	r1, #8
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f000 fd37 	bl	800cca4 <SPI_WaitOnFlagUntilTimeout>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d007      	beq.n	800c24c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c242:	f043 0220 	orr.w	r2, r3, #32
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f000 fc89 	bl	800cb64 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	e000      	b.n	800c272 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c270:	7efb      	ldrb	r3, [r7, #27]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3720      	adds	r7, #32
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop

0800c27c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
 800c288:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c294:	2b01      	cmp	r3, #1
 800c296:	d101      	bne.n	800c29c <HAL_SPI_TransmitReceive_DMA+0x20>
 800c298:	2302      	movs	r3, #2
 800c29a:	e1b4      	b.n	800c606 <HAL_SPI_TransmitReceive_DMA+0x38a>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c2aa:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c2b2:	7dbb      	ldrb	r3, [r7, #22]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d012      	beq.n	800c2de <HAL_SPI_TransmitReceive_DMA+0x62>
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2be:	d106      	bne.n	800c2ce <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d102      	bne.n	800c2ce <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c2c8:	7dbb      	ldrb	r3, [r7, #22]
 800c2ca:	2b04      	cmp	r3, #4
 800c2cc:	d007      	beq.n	800c2de <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	e193      	b.n	800c606 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d005      	beq.n	800c2f0 <HAL_SPI_TransmitReceive_DMA+0x74>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d002      	beq.n	800c2f0 <HAL_SPI_TransmitReceive_DMA+0x74>
 800c2ea:	887b      	ldrh	r3, [r7, #2]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d107      	bne.n	800c300 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c2fc:	7dfb      	ldrb	r3, [r7, #23]
 800c2fe:	e182      	b.n	800c606 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b04      	cmp	r3, #4
 800c30a:	d003      	beq.n	800c314 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2205      	movs	r2, #5
 800c310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	887a      	ldrh	r2, [r7, #2]
 800c326:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	887a      	ldrh	r2, [r7, #2]
 800c32e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	887a      	ldrh	r2, [r7, #2]
 800c33c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	887a      	ldrh	r2, [r7, #2]
 800c344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	689a      	ldr	r2, [r3, #8]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c362:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	2b0f      	cmp	r3, #15
 800c36a:	d905      	bls.n	800c378 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c370:	699b      	ldr	r3, [r3, #24]
 800c372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c376:	d10f      	bne.n	800c398 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c37c:	2b07      	cmp	r3, #7
 800c37e:	d913      	bls.n	800c3a8 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c38a:	d00d      	beq.n	800c3a8 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c390:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c396:	d007      	beq.n	800c3a8 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c3a4:	7dfb      	ldrb	r3, [r7, #23]
 800c3a6:	e12e      	b.n	800c606 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	2b07      	cmp	r3, #7
 800c3ae:	d840      	bhi.n	800c432 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3ba:	d109      	bne.n	800c3d0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	105b      	asrs	r3, r3, #1
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3da:	d109      	bne.n	800c3f0 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	3303      	adds	r3, #3
 800c3e6:	109b      	asrs	r3, r3, #2
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3f4:	699b      	ldr	r3, [r3, #24]
 800c3f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3fa:	d109      	bne.n	800c410 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c402:	b29b      	uxth	r3, r3
 800c404:	3301      	adds	r3, #1
 800c406:	105b      	asrs	r3, r3, #1
 800c408:	b29a      	uxth	r2, r3
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c41a:	d12e      	bne.n	800c47a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c422:	b29b      	uxth	r3, r3
 800c424:	3303      	adds	r3, #3
 800c426:	109b      	asrs	r3, r3, #2
 800c428:	b29a      	uxth	r2, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c430:	e023      	b.n	800c47a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	2b0f      	cmp	r3, #15
 800c438:	d81f      	bhi.n	800c47a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c43e:	699b      	ldr	r3, [r3, #24]
 800c440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c444:	d109      	bne.n	800c45a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	3301      	adds	r3, #1
 800c450:	105b      	asrs	r3, r3, #1
 800c452:	b29a      	uxth	r2, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c464:	d109      	bne.n	800c47a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	3301      	adds	r3, #1
 800c470:	105b      	asrs	r3, r3, #1
 800c472:	b29a      	uxth	r2, r3
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b04      	cmp	r3, #4
 800c484:	d108      	bne.n	800c498 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c48a:	4a61      	ldr	r2, [pc, #388]	; (800c610 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800c48c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c492:	4a60      	ldr	r2, [pc, #384]	; (800c614 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800c494:	63da      	str	r2, [r3, #60]	; 0x3c
 800c496:	e007      	b.n	800c4a8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c49c:	4a5e      	ldr	r2, [pc, #376]	; (800c618 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800c49e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4a4:	4a5d      	ldr	r2, [pc, #372]	; (800c61c <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800c4a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ac:	4a5c      	ldr	r2, [pc, #368]	; (800c620 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800c4ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3330      	adds	r3, #48	; 0x30
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800c4d2:	f7f8 f90f 	bl	80046f4 <HAL_DMA_Start_IT>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d013      	beq.n	800c504 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4e2:	f043 0210 	orr.w	r2, r3, #16
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	e080      	b.n	800c606 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	689a      	ldr	r2, [r3, #8]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c512:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c518:	2200      	movs	r2, #0
 800c51a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c520:	2200      	movs	r2, #0
 800c522:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c528:	2200      	movs	r2, #0
 800c52a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c530:	2200      	movs	r2, #0
 800c532:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c53c:	4619      	mov	r1, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	3320      	adds	r3, #32
 800c544:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c54c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c54e:	f7f8 f8d1 	bl	80046f4 <HAL_DMA_Start_IT>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d013      	beq.n	800c580 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c55e:	f043 0210 	orr.w	r2, r3, #16
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800c57c:	7dfb      	ldrb	r3, [r7, #23]
 800c57e:	e042      	b.n	800c606 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c58a:	d108      	bne.n	800c59e <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6859      	ldr	r1, [r3, #4]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	4b23      	ldr	r3, [pc, #140]	; (800c624 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800c598:	400b      	ands	r3, r1
 800c59a:	6053      	str	r3, [r2, #4]
 800c59c:	e009      	b.n	800c5b2 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	4b1f      	ldr	r3, [pc, #124]	; (800c624 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800c5a6:	4013      	ands	r3, r2
 800c5a8:	8879      	ldrh	r1, [r7, #2]
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	6812      	ldr	r2, [r2, #0]
 800c5ae:	430b      	orrs	r3, r1
 800c5b0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	689a      	ldr	r2, [r3, #8]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5c0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	691a      	ldr	r2, [r3, #16]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800c5d0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f042 0201 	orr.w	r2, r2, #1
 800c5e0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5ea:	d107      	bne.n	800c5fc <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5fa:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800c604:	7dfb      	ldrb	r3, [r7, #23]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	0800cab1 	.word	0x0800cab1
 800c614:	0800ca25 	.word	0x0800ca25
 800c618:	0800cacd 	.word	0x0800cacd
 800c61c:	0800ca6b 	.word	0x0800ca6b
 800c620:	0800cae9 	.word	0x0800cae9
 800c624:	ffff0000 	.word	0xffff0000

0800c628 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b08a      	sub	sp, #40	; 0x28
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	695b      	ldr	r3, [r3, #20]
 800c63e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c640:	6a3a      	ldr	r2, [r7, #32]
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	4013      	ands	r3, r2
 800c646:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c650:	2300      	movs	r3, #0
 800c652:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c65a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	3330      	adds	r3, #48	; 0x30
 800c662:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d113      	bne.n	800c696 <HAL_SPI_IRQHandler+0x6e>
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	f003 0320 	and.w	r3, r3, #32
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10e      	bne.n	800c696 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d009      	beq.n	800c696 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	4798      	blx	r3
    handled = 1UL;
 800c692:	2301      	movs	r3, #1
 800c694:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10f      	bne.n	800c6c0 <HAL_SPI_IRQHandler+0x98>
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	f003 0301 	and.w	r3, r3, #1
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d105      	bne.n	800c6c0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	4798      	blx	r3
    handled = 1UL;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	f003 0320 	and.w	r3, r3, #32
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d10f      	bne.n	800c6ea <HAL_SPI_IRQHandler+0xc2>
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	f003 0302 	and.w	r3, r3, #2
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00a      	beq.n	800c6ea <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d105      	bne.n	800c6ea <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	4798      	blx	r3
    handled = 1UL;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f040 815a 	bne.w	800c9a6 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	f003 0308 	and.w	r3, r3, #8
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f000 808b 	beq.w	800c814 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	699a      	ldr	r2, [r3, #24]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f042 0208 	orr.w	r2, r2, #8
 800c70c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	699a      	ldr	r2, [r3, #24]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f042 0210 	orr.w	r2, r2, #16
 800c71c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	699a      	ldr	r2, [r3, #24]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c72c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	691a      	ldr	r2, [r3, #16]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f022 0208 	bic.w	r2, r2, #8
 800c73c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d13d      	bne.n	800c7c8 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c74c:	e036      	b.n	800c7bc <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	2b0f      	cmp	r3, #15
 800c754:	d90b      	bls.n	800c76e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c75e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c760:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c766:	1d1a      	adds	r2, r3, #4
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	665a      	str	r2, [r3, #100]	; 0x64
 800c76c:	e01d      	b.n	800c7aa <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	2b07      	cmp	r3, #7
 800c774:	d90b      	bls.n	800c78e <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	8812      	ldrh	r2, [r2, #0]
 800c77e:	b292      	uxth	r2, r2
 800c780:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c786:	1c9a      	adds	r2, r3, #2
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	665a      	str	r2, [r3, #100]	; 0x64
 800c78c:	e00d      	b.n	800c7aa <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c79a:	7812      	ldrb	r2, [r2, #0]
 800c79c:	b2d2      	uxtb	r2, r2
 800c79e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1c2      	bne.n	800c74e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f9cb 	bl	800cb64 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f915 	bl	800ca10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c7e6:	e0e3      	b.n	800c9b0 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c7e8:	7cfb      	ldrb	r3, [r7, #19]
 800c7ea:	2b05      	cmp	r3, #5
 800c7ec:	d103      	bne.n	800c7f6 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7f5 fa36 	bl	8001c60 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c7f4:	e0d9      	b.n	800c9aa <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c7f6:	7cfb      	ldrb	r3, [r7, #19]
 800c7f8:	2b04      	cmp	r3, #4
 800c7fa:	d103      	bne.n	800c804 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f8e9 	bl	800c9d4 <HAL_SPI_RxCpltCallback>
    return;
 800c802:	e0d2      	b.n	800c9aa <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c804:	7cfb      	ldrb	r3, [r7, #19]
 800c806:	2b03      	cmp	r3, #3
 800c808:	f040 80cf 	bne.w	800c9aa <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 f8d7 	bl	800c9c0 <HAL_SPI_TxCpltCallback>
    return;
 800c812:	e0ca      	b.n	800c9aa <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00d      	beq.n	800c83a <HAL_SPI_IRQHandler+0x212>
 800c81e:	6a3b      	ldr	r3, [r7, #32]
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	2b00      	cmp	r3, #0
 800c826:	d008      	beq.n	800c83a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	699a      	ldr	r2, [r3, #24]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c836:	619a      	str	r2, [r3, #24]

    return;
 800c838:	e0ba      	b.n	800c9b0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c83a:	69bb      	ldr	r3, [r7, #24]
 800c83c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800c840:	2b00      	cmp	r3, #0
 800c842:	f000 80b5 	beq.w	800c9b0 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00f      	beq.n	800c870 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c856:	f043 0204 	orr.w	r2, r3, #4
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	699a      	ldr	r2, [r3, #24]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c86e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00f      	beq.n	800c89a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c880:	f043 0201 	orr.w	r2, r3, #1
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	699a      	ldr	r2, [r3, #24]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c898:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00f      	beq.n	800c8c4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8aa:	f043 0208 	orr.w	r2, r3, #8
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	699a      	ldr	r2, [r3, #24]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c8c2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	f003 0320 	and.w	r3, r3, #32
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00f      	beq.n	800c8ee <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	699a      	ldr	r2, [r3, #24]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f042 0220 	orr.w	r2, r2, #32
 800c8ec:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d05a      	beq.n	800c9ae <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f022 0201 	bic.w	r2, r2, #1
 800c906:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6919      	ldr	r1, [r3, #16]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	4b29      	ldr	r3, [pc, #164]	; (800c9b8 <HAL_SPI_IRQHandler+0x390>)
 800c914:	400b      	ands	r3, r1
 800c916:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c91e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c922:	d138      	bne.n	800c996 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	689a      	ldr	r2, [r3, #8]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c932:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d013      	beq.n	800c964 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c940:	4a1e      	ldr	r2, [pc, #120]	; (800c9bc <HAL_SPI_IRQHandler+0x394>)
 800c942:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c948:	4618      	mov	r0, r3
 800c94a:	f7f8 fc5b 	bl	8005204 <HAL_DMA_Abort_IT>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d007      	beq.n	800c964 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c95a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d020      	beq.n	800c9ae <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c970:	4a12      	ldr	r2, [pc, #72]	; (800c9bc <HAL_SPI_IRQHandler+0x394>)
 800c972:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c978:	4618      	mov	r0, r3
 800c97a:	f7f8 fc43 	bl	8005204 <HAL_DMA_Abort_IT>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d014      	beq.n	800c9ae <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c98a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c994:	e00b      	b.n	800c9ae <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2201      	movs	r2, #1
 800c99a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 f836 	bl	800ca10 <HAL_SPI_ErrorCallback>
    return;
 800c9a4:	e003      	b.n	800c9ae <HAL_SPI_IRQHandler+0x386>
    return;
 800c9a6:	bf00      	nop
 800c9a8:	e002      	b.n	800c9b0 <HAL_SPI_IRQHandler+0x388>
    return;
 800c9aa:	bf00      	nop
 800c9ac:	e000      	b.n	800c9b0 <HAL_SPI_IRQHandler+0x388>
    return;
 800c9ae:	bf00      	nop
  }
}
 800c9b0:	3728      	adds	r7, #40	; 0x28
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	fffffc94 	.word	0xfffffc94
 800c9bc:	0800cb2f 	.word	0x0800cb2f

0800c9c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca30:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b07      	cmp	r3, #7
 800ca3c:	d011      	beq.n	800ca62 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca42:	69db      	ldr	r3, [r3, #28]
 800ca44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca48:	d103      	bne.n	800ca52 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7ff ffc2 	bl	800c9d4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ca50:	e007      	b.n	800ca62 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	691a      	ldr	r2, [r3, #16]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f042 0208 	orr.w	r2, r2, #8
 800ca60:	611a      	str	r2, [r3, #16]
}
 800ca62:	bf00      	nop
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b084      	sub	sp, #16
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca76:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	2b07      	cmp	r3, #7
 800ca82:	d011      	beq.n	800caa8 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca88:	69db      	ldr	r3, [r3, #28]
 800ca8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca8e:	d103      	bne.n	800ca98 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f7f5 f8e5 	bl	8001c60 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ca96:	e007      	b.n	800caa8 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	691a      	ldr	r2, [r3, #16]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f042 0208 	orr.w	r2, r2, #8
 800caa6:	611a      	str	r2, [r3, #16]
}
 800caa8:	bf00      	nop
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7ff ff92 	bl	800c9e8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cac4:	bf00      	nop
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f7ff ff8e 	bl	800c9fc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cae0:	bf00      	nop
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf4:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7f9 fd2c 	bl	8006554 <HAL_DMA_GetError>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	d011      	beq.n	800cb26 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f000 f82e 	bl	800cb64 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb0e:	f043 0210 	orr.w	r2, r3, #16
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f7ff ff75 	bl	800ca10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800cb26:	bf00      	nop
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b084      	sub	sp, #16
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f7ff ff5b 	bl	800ca10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cb5a:	bf00      	nop
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
	...

0800cb64 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	699a      	ldr	r2, [r3, #24]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f042 0208 	orr.w	r2, r2, #8
 800cb82:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	699a      	ldr	r2, [r3, #24]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f042 0210 	orr.w	r2, r2, #16
 800cb92:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f022 0201 	bic.w	r2, r2, #1
 800cba2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6919      	ldr	r1, [r3, #16]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	4b3c      	ldr	r3, [pc, #240]	; (800cca0 <SPI_CloseTransfer+0x13c>)
 800cbb0:	400b      	ands	r3, r1
 800cbb2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	689a      	ldr	r2, [r3, #8]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cbc2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	2b04      	cmp	r3, #4
 800cbce:	d014      	beq.n	800cbfa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f003 0320 	and.w	r3, r3, #32
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00f      	beq.n	800cbfa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbe0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	699a      	ldr	r2, [r3, #24]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f042 0220 	orr.w	r2, r2, #32
 800cbf8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d014      	beq.n	800cc30 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00f      	beq.n	800cc30 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc16:	f043 0204 	orr.w	r2, r3, #4
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	699a      	ldr	r2, [r3, #24]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc2e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00f      	beq.n	800cc5a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc40:	f043 0201 	orr.w	r2, r3, #1
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	699a      	ldr	r2, [r3, #24]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc58:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d00f      	beq.n	800cc84 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc6a:	f043 0208 	orr.w	r2, r3, #8
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	699a      	ldr	r2, [r3, #24]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc82:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800cc94:	bf00      	nop
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	fffffc90 	.word	0xfffffc90

0800cca4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	603b      	str	r3, [r7, #0]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ccb4:	e010      	b.n	800ccd8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ccb6:	f7f7 f81b 	bl	8003cf0 <HAL_GetTick>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	69ba      	ldr	r2, [r7, #24]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d803      	bhi.n	800ccce <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cccc:	d102      	bne.n	800ccd4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	e00f      	b.n	800ccf8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	695a      	ldr	r2, [r3, #20]
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	4013      	ands	r3, r2
 800cce2:	68ba      	ldr	r2, [r7, #8]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	bf0c      	ite	eq
 800cce8:	2301      	moveq	r3, #1
 800ccea:	2300      	movne	r3, #0
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	461a      	mov	r2, r3
 800ccf0:	79fb      	ldrb	r3, [r7, #7]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d0df      	beq.n	800ccb6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0c:	095b      	lsrs	r3, r3, #5
 800cd0e:	3301      	adds	r3, #1
 800cd10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	3301      	adds	r3, #1
 800cd18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	3307      	adds	r3, #7
 800cd1e:	08db      	lsrs	r3, r3, #3
 800cd20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	fb02 f303 	mul.w	r3, r2, r3
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3714      	adds	r7, #20
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b082      	sub	sp, #8
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d101      	bne.n	800cd48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	e049      	b.n	800cddc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d106      	bne.n	800cd62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f7f6 fb31 	bl	80033c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2202      	movs	r2, #2
 800cd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3304      	adds	r3, #4
 800cd72:	4619      	mov	r1, r3
 800cd74:	4610      	mov	r0, r2
 800cd76:	f000 fda1 	bl	800d8bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d001      	beq.n	800cdfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e054      	b.n	800cea6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2202      	movs	r2, #2
 800ce00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	68da      	ldr	r2, [r3, #12]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f042 0201 	orr.w	r2, r2, #1
 800ce12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a26      	ldr	r2, [pc, #152]	; (800ceb4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d022      	beq.n	800ce64 <HAL_TIM_Base_Start_IT+0x80>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce26:	d01d      	beq.n	800ce64 <HAL_TIM_Base_Start_IT+0x80>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a22      	ldr	r2, [pc, #136]	; (800ceb8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d018      	beq.n	800ce64 <HAL_TIM_Base_Start_IT+0x80>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a21      	ldr	r2, [pc, #132]	; (800cebc <HAL_TIM_Base_Start_IT+0xd8>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d013      	beq.n	800ce64 <HAL_TIM_Base_Start_IT+0x80>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a1f      	ldr	r2, [pc, #124]	; (800cec0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d00e      	beq.n	800ce64 <HAL_TIM_Base_Start_IT+0x80>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a1e      	ldr	r2, [pc, #120]	; (800cec4 <HAL_TIM_Base_Start_IT+0xe0>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d009      	beq.n	800ce64 <HAL_TIM_Base_Start_IT+0x80>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a1c      	ldr	r2, [pc, #112]	; (800cec8 <HAL_TIM_Base_Start_IT+0xe4>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d004      	beq.n	800ce64 <HAL_TIM_Base_Start_IT+0x80>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a1b      	ldr	r2, [pc, #108]	; (800cecc <HAL_TIM_Base_Start_IT+0xe8>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d115      	bne.n	800ce90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	689a      	ldr	r2, [r3, #8]
 800ce6a:	4b19      	ldr	r3, [pc, #100]	; (800ced0 <HAL_TIM_Base_Start_IT+0xec>)
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2b06      	cmp	r3, #6
 800ce74:	d015      	beq.n	800cea2 <HAL_TIM_Base_Start_IT+0xbe>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce7c:	d011      	beq.n	800cea2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f042 0201 	orr.w	r2, r2, #1
 800ce8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce8e:	e008      	b.n	800cea2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f042 0201 	orr.w	r2, r2, #1
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	e000      	b.n	800cea4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cea2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	40010000 	.word	0x40010000
 800ceb8:	40000400 	.word	0x40000400
 800cebc:	40000800 	.word	0x40000800
 800cec0:	40000c00 	.word	0x40000c00
 800cec4:	40010400 	.word	0x40010400
 800cec8:	40001800 	.word	0x40001800
 800cecc:	40014000 	.word	0x40014000
 800ced0:	00010007 	.word	0x00010007

0800ced4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d101      	bne.n	800cee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e049      	b.n	800cf7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d106      	bne.n	800cf00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f841 	bl	800cf82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2202      	movs	r2, #2
 800cf04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4619      	mov	r1, r3
 800cf12:	4610      	mov	r0, r2
 800cf14:	f000 fcd2 	bl	800d8bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2201      	movs	r2, #1
 800cf54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b083      	sub	sp, #12
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cf8a:	bf00      	nop
 800cf8c:	370c      	adds	r7, #12
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr

0800cf96 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b082      	sub	sp, #8
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d101      	bne.n	800cfa8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e049      	b.n	800d03c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d106      	bne.n	800cfc2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 f841 	bl	800d044 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2202      	movs	r2, #2
 800cfc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	f000 fc71 	bl	800d8bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2201      	movs	r2, #1
 800cfee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2201      	movs	r2, #1
 800cff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2201      	movs	r2, #1
 800d006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2201      	movs	r2, #1
 800d00e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2201      	movs	r2, #1
 800d016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2201      	movs	r2, #1
 800d01e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2201      	movs	r2, #1
 800d026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2201      	movs	r2, #1
 800d02e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3708      	adds	r7, #8
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d04c:	bf00      	nop
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	f003 0302 	and.w	r3, r3, #2
 800d06a:	2b02      	cmp	r3, #2
 800d06c:	d122      	bne.n	800d0b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	f003 0302 	and.w	r3, r3, #2
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d11b      	bne.n	800d0b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f06f 0202 	mvn.w	r2, #2
 800d084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	699b      	ldr	r3, [r3, #24]
 800d092:	f003 0303 	and.w	r3, r3, #3
 800d096:	2b00      	cmp	r3, #0
 800d098:	d003      	beq.n	800d0a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 fbf0 	bl	800d880 <HAL_TIM_IC_CaptureCallback>
 800d0a0:	e005      	b.n	800d0ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 fbe2 	bl	800d86c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fbf3 	bl	800d894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	691b      	ldr	r3, [r3, #16]
 800d0ba:	f003 0304 	and.w	r3, r3, #4
 800d0be:	2b04      	cmp	r3, #4
 800d0c0:	d122      	bne.n	800d108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	f003 0304 	and.w	r3, r3, #4
 800d0cc:	2b04      	cmp	r3, #4
 800d0ce:	d11b      	bne.n	800d108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f06f 0204 	mvn.w	r2, #4
 800d0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2202      	movs	r2, #2
 800d0de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	699b      	ldr	r3, [r3, #24]
 800d0e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d003      	beq.n	800d0f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 fbc6 	bl	800d880 <HAL_TIM_IC_CaptureCallback>
 800d0f4:	e005      	b.n	800d102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 fbb8 	bl	800d86c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 fbc9 	bl	800d894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	691b      	ldr	r3, [r3, #16]
 800d10e:	f003 0308 	and.w	r3, r3, #8
 800d112:	2b08      	cmp	r3, #8
 800d114:	d122      	bne.n	800d15c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	f003 0308 	and.w	r3, r3, #8
 800d120:	2b08      	cmp	r3, #8
 800d122:	d11b      	bne.n	800d15c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f06f 0208 	mvn.w	r2, #8
 800d12c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2204      	movs	r2, #4
 800d132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	69db      	ldr	r3, [r3, #28]
 800d13a:	f003 0303 	and.w	r3, r3, #3
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d003      	beq.n	800d14a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fb9c 	bl	800d880 <HAL_TIM_IC_CaptureCallback>
 800d148:	e005      	b.n	800d156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fb8e 	bl	800d86c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 fb9f 	bl	800d894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	691b      	ldr	r3, [r3, #16]
 800d162:	f003 0310 	and.w	r3, r3, #16
 800d166:	2b10      	cmp	r3, #16
 800d168:	d122      	bne.n	800d1b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	f003 0310 	and.w	r3, r3, #16
 800d174:	2b10      	cmp	r3, #16
 800d176:	d11b      	bne.n	800d1b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f06f 0210 	mvn.w	r2, #16
 800d180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2208      	movs	r2, #8
 800d186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	69db      	ldr	r3, [r3, #28]
 800d18e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d192:	2b00      	cmp	r3, #0
 800d194:	d003      	beq.n	800d19e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 fb72 	bl	800d880 <HAL_TIM_IC_CaptureCallback>
 800d19c:	e005      	b.n	800d1aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 fb64 	bl	800d86c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 fb75 	bl	800d894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	f003 0301 	and.w	r3, r3, #1
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d10e      	bne.n	800d1dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	f003 0301 	and.w	r3, r3, #1
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d107      	bne.n	800d1dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f06f 0201 	mvn.w	r2, #1
 800d1d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7f4 fdf6 	bl	8001dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1e6:	2b80      	cmp	r3, #128	; 0x80
 800d1e8:	d10e      	bne.n	800d208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1f4:	2b80      	cmp	r3, #128	; 0x80
 800d1f6:	d107      	bne.n	800d208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f001 fab4 	bl	800e770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d216:	d10e      	bne.n	800d236 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d222:	2b80      	cmp	r3, #128	; 0x80
 800d224:	d107      	bne.n	800d236 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d22e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f001 faa7 	bl	800e784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d240:	2b40      	cmp	r3, #64	; 0x40
 800d242:	d10e      	bne.n	800d262 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d24e:	2b40      	cmp	r3, #64	; 0x40
 800d250:	d107      	bne.n	800d262 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 fb23 	bl	800d8a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	f003 0320 	and.w	r3, r3, #32
 800d26c:	2b20      	cmp	r3, #32
 800d26e:	d10e      	bne.n	800d28e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	f003 0320 	and.w	r3, r3, #32
 800d27a:	2b20      	cmp	r3, #32
 800d27c:	d107      	bne.n	800d28e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f06f 0220 	mvn.w	r2, #32
 800d286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f001 fa67 	bl	800e75c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d28e:	bf00      	nop
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b086      	sub	sp, #24
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	60f8      	str	r0, [r7, #12]
 800d29e:	60b9      	str	r1, [r7, #8]
 800d2a0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d101      	bne.n	800d2b4 <HAL_TIM_IC_ConfigChannel+0x1e>
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	e088      	b.n	800d3c6 <HAL_TIM_IC_ConfigChannel+0x130>
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d11b      	bne.n	800d2fa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6818      	ldr	r0, [r3, #0]
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	6819      	ldr	r1, [r3, #0]
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	f000 ff4d 	bl	800e170 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	699a      	ldr	r2, [r3, #24]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f022 020c 	bic.w	r2, r2, #12
 800d2e4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	6999      	ldr	r1, [r3, #24]
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	689a      	ldr	r2, [r3, #8]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	430a      	orrs	r2, r1
 800d2f6:	619a      	str	r2, [r3, #24]
 800d2f8:	e060      	b.n	800d3bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b04      	cmp	r3, #4
 800d2fe:	d11c      	bne.n	800d33a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	6818      	ldr	r0, [r3, #0]
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	6819      	ldr	r1, [r3, #0]
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	685a      	ldr	r2, [r3, #4]
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	f000 ffd1 	bl	800e2b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	699a      	ldr	r2, [r3, #24]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d322:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	6999      	ldr	r1, [r3, #24]
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	689b      	ldr	r3, [r3, #8]
 800d32e:	021a      	lsls	r2, r3, #8
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	430a      	orrs	r2, r1
 800d336:	619a      	str	r2, [r3, #24]
 800d338:	e040      	b.n	800d3bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b08      	cmp	r3, #8
 800d33e:	d11b      	bne.n	800d378 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6818      	ldr	r0, [r3, #0]
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	6819      	ldr	r1, [r3, #0]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	685a      	ldr	r2, [r3, #4]
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	f001 f81e 	bl	800e390 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	69da      	ldr	r2, [r3, #28]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f022 020c 	bic.w	r2, r2, #12
 800d362:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	69d9      	ldr	r1, [r3, #28]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	689a      	ldr	r2, [r3, #8]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	430a      	orrs	r2, r1
 800d374:	61da      	str	r2, [r3, #28]
 800d376:	e021      	b.n	800d3bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b0c      	cmp	r3, #12
 800d37c:	d11c      	bne.n	800d3b8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6818      	ldr	r0, [r3, #0]
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	6819      	ldr	r1, [r3, #0]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	685a      	ldr	r2, [r3, #4]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	f001 f83b 	bl	800e408 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	69da      	ldr	r2, [r3, #28]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d3a0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	69d9      	ldr	r1, [r3, #28]
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	021a      	lsls	r2, r3, #8
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	430a      	orrs	r2, r1
 800d3b4:	61da      	str	r2, [r3, #28]
 800d3b6:	e001      	b.n	800d3bc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d101      	bne.n	800d3ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	e0ff      	b.n	800d5ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2b14      	cmp	r3, #20
 800d3fa:	f200 80f0 	bhi.w	800d5de <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d3fe:	a201      	add	r2, pc, #4	; (adr r2, 800d404 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d404:	0800d459 	.word	0x0800d459
 800d408:	0800d5df 	.word	0x0800d5df
 800d40c:	0800d5df 	.word	0x0800d5df
 800d410:	0800d5df 	.word	0x0800d5df
 800d414:	0800d499 	.word	0x0800d499
 800d418:	0800d5df 	.word	0x0800d5df
 800d41c:	0800d5df 	.word	0x0800d5df
 800d420:	0800d5df 	.word	0x0800d5df
 800d424:	0800d4db 	.word	0x0800d4db
 800d428:	0800d5df 	.word	0x0800d5df
 800d42c:	0800d5df 	.word	0x0800d5df
 800d430:	0800d5df 	.word	0x0800d5df
 800d434:	0800d51b 	.word	0x0800d51b
 800d438:	0800d5df 	.word	0x0800d5df
 800d43c:	0800d5df 	.word	0x0800d5df
 800d440:	0800d5df 	.word	0x0800d5df
 800d444:	0800d55d 	.word	0x0800d55d
 800d448:	0800d5df 	.word	0x0800d5df
 800d44c:	0800d5df 	.word	0x0800d5df
 800d450:	0800d5df 	.word	0x0800d5df
 800d454:	0800d59d 	.word	0x0800d59d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	68b9      	ldr	r1, [r7, #8]
 800d45e:	4618      	mov	r0, r3
 800d460:	f000 fac6 	bl	800d9f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	699a      	ldr	r2, [r3, #24]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f042 0208 	orr.w	r2, r2, #8
 800d472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	699a      	ldr	r2, [r3, #24]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f022 0204 	bic.w	r2, r2, #4
 800d482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	6999      	ldr	r1, [r3, #24]
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	691a      	ldr	r2, [r3, #16]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	430a      	orrs	r2, r1
 800d494:	619a      	str	r2, [r3, #24]
      break;
 800d496:	e0a5      	b.n	800d5e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68b9      	ldr	r1, [r7, #8]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 fb36 	bl	800db10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	699a      	ldr	r2, [r3, #24]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	699a      	ldr	r2, [r3, #24]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	6999      	ldr	r1, [r3, #24]
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	021a      	lsls	r2, r3, #8
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	430a      	orrs	r2, r1
 800d4d6:	619a      	str	r2, [r3, #24]
      break;
 800d4d8:	e084      	b.n	800d5e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	68b9      	ldr	r1, [r7, #8]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f000 fb9f 	bl	800dc24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	69da      	ldr	r2, [r3, #28]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f042 0208 	orr.w	r2, r2, #8
 800d4f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	69da      	ldr	r2, [r3, #28]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f022 0204 	bic.w	r2, r2, #4
 800d504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	69d9      	ldr	r1, [r3, #28]
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	691a      	ldr	r2, [r3, #16]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	430a      	orrs	r2, r1
 800d516:	61da      	str	r2, [r3, #28]
      break;
 800d518:	e064      	b.n	800d5e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	68b9      	ldr	r1, [r7, #8]
 800d520:	4618      	mov	r0, r3
 800d522:	f000 fc07 	bl	800dd34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	69da      	ldr	r2, [r3, #28]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	69da      	ldr	r2, [r3, #28]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	69d9      	ldr	r1, [r3, #28]
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	691b      	ldr	r3, [r3, #16]
 800d550:	021a      	lsls	r2, r3, #8
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	430a      	orrs	r2, r1
 800d558:	61da      	str	r2, [r3, #28]
      break;
 800d55a:	e043      	b.n	800d5e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	68b9      	ldr	r1, [r7, #8]
 800d562:	4618      	mov	r0, r3
 800d564:	f000 fc50 	bl	800de08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f042 0208 	orr.w	r2, r2, #8
 800d576:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f022 0204 	bic.w	r2, r2, #4
 800d586:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	691a      	ldr	r2, [r3, #16]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	430a      	orrs	r2, r1
 800d598:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d59a:	e023      	b.n	800d5e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	68b9      	ldr	r1, [r7, #8]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 fc94 	bl	800ded0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	021a      	lsls	r2, r3, #8
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	430a      	orrs	r2, r1
 800d5da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d5dc:	e002      	b.n	800d5e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	75fb      	strb	r3, [r7, #23]
      break;
 800d5e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d5ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3718      	adds	r7, #24
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop

0800d5f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d101      	bne.n	800d614 <HAL_TIM_ConfigClockSource+0x1c>
 800d610:	2302      	movs	r3, #2
 800d612:	e0dc      	b.n	800d7ce <HAL_TIM_ConfigClockSource+0x1d6>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2202      	movs	r2, #2
 800d620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	689b      	ldr	r3, [r3, #8]
 800d62a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	4b6a      	ldr	r3, [pc, #424]	; (800d7d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d630:	4013      	ands	r3, r2
 800d632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d63a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a64      	ldr	r2, [pc, #400]	; (800d7dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	f000 80a9 	beq.w	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d650:	4a62      	ldr	r2, [pc, #392]	; (800d7dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800d652:	4293      	cmp	r3, r2
 800d654:	f200 80ae 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d658:	4a61      	ldr	r2, [pc, #388]	; (800d7e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	f000 80a1 	beq.w	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d660:	4a5f      	ldr	r2, [pc, #380]	; (800d7e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d662:	4293      	cmp	r3, r2
 800d664:	f200 80a6 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d668:	4a5e      	ldr	r2, [pc, #376]	; (800d7e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	f000 8099 	beq.w	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d670:	4a5c      	ldr	r2, [pc, #368]	; (800d7e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d672:	4293      	cmp	r3, r2
 800d674:	f200 809e 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d678:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d67c:	f000 8091 	beq.w	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d680:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d684:	f200 8096 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d68c:	f000 8089 	beq.w	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d694:	f200 808e 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d69c:	d03e      	beq.n	800d71c <HAL_TIM_ConfigClockSource+0x124>
 800d69e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6a2:	f200 8087 	bhi.w	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6aa:	f000 8086 	beq.w	800d7ba <HAL_TIM_ConfigClockSource+0x1c2>
 800d6ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6b2:	d87f      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6b4:	2b70      	cmp	r3, #112	; 0x70
 800d6b6:	d01a      	beq.n	800d6ee <HAL_TIM_ConfigClockSource+0xf6>
 800d6b8:	2b70      	cmp	r3, #112	; 0x70
 800d6ba:	d87b      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6bc:	2b60      	cmp	r3, #96	; 0x60
 800d6be:	d050      	beq.n	800d762 <HAL_TIM_ConfigClockSource+0x16a>
 800d6c0:	2b60      	cmp	r3, #96	; 0x60
 800d6c2:	d877      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6c4:	2b50      	cmp	r3, #80	; 0x50
 800d6c6:	d03c      	beq.n	800d742 <HAL_TIM_ConfigClockSource+0x14a>
 800d6c8:	2b50      	cmp	r3, #80	; 0x50
 800d6ca:	d873      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6cc:	2b40      	cmp	r3, #64	; 0x40
 800d6ce:	d058      	beq.n	800d782 <HAL_TIM_ConfigClockSource+0x18a>
 800d6d0:	2b40      	cmp	r3, #64	; 0x40
 800d6d2:	d86f      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6d4:	2b30      	cmp	r3, #48	; 0x30
 800d6d6:	d064      	beq.n	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6d8:	2b30      	cmp	r3, #48	; 0x30
 800d6da:	d86b      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6dc:	2b20      	cmp	r3, #32
 800d6de:	d060      	beq.n	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6e0:	2b20      	cmp	r3, #32
 800d6e2:	d867      	bhi.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d05c      	beq.n	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6e8:	2b10      	cmp	r3, #16
 800d6ea:	d05a      	beq.n	800d7a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6ec:	e062      	b.n	800d7b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6818      	ldr	r0, [r3, #0]
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	6899      	ldr	r1, [r3, #8]
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	685a      	ldr	r2, [r3, #4]
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	f000 fedf 	bl	800e4c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d710:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	609a      	str	r2, [r3, #8]
      break;
 800d71a:	e04f      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6818      	ldr	r0, [r3, #0]
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	6899      	ldr	r1, [r3, #8]
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	685a      	ldr	r2, [r3, #4]
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	f000 fec8 	bl	800e4c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	689a      	ldr	r2, [r3, #8]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d73e:	609a      	str	r2, [r3, #8]
      break;
 800d740:	e03c      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6818      	ldr	r0, [r3, #0]
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	6859      	ldr	r1, [r3, #4]
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	461a      	mov	r2, r3
 800d750:	f000 fd82 	bl	800e258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2150      	movs	r1, #80	; 0x50
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 fe92 	bl	800e484 <TIM_ITRx_SetConfig>
      break;
 800d760:	e02c      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6818      	ldr	r0, [r3, #0]
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	6859      	ldr	r1, [r3, #4]
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	68db      	ldr	r3, [r3, #12]
 800d76e:	461a      	mov	r2, r3
 800d770:	f000 fdde 	bl	800e330 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2160      	movs	r1, #96	; 0x60
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 fe82 	bl	800e484 <TIM_ITRx_SetConfig>
      break;
 800d780:	e01c      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6818      	ldr	r0, [r3, #0]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	6859      	ldr	r1, [r3, #4]
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	461a      	mov	r2, r3
 800d790:	f000 fd62 	bl	800e258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2140      	movs	r1, #64	; 0x40
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 fe72 	bl	800e484 <TIM_ITRx_SetConfig>
      break;
 800d7a0:	e00c      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	f000 fe69 	bl	800e484 <TIM_ITRx_SetConfig>
      break;
 800d7b2:	e003      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d7b8:	e000      	b.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d7ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	ffceff88 	.word	0xffceff88
 800d7dc:	00100040 	.word	0x00100040
 800d7e0:	00100030 	.word	0x00100030
 800d7e4:	00100020 	.word	0x00100020

0800d7e8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d101      	bne.n	800d800 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	e031      	b.n	800d864 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2202      	movs	r2, #2
 800d80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 fbc2 	bl	800df9c <TIM_SlaveTimer_SetConfig>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d009      	beq.n	800d832 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e018      	b.n	800d864 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68da      	ldr	r2, [r3, #12]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d840:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68da      	ldr	r2, [r3, #12]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d850:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d862:	2300      	movs	r3, #0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d888:	bf00      	nop
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d89c:	bf00      	nop
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a40      	ldr	r2, [pc, #256]	; (800d9d0 <TIM_Base_SetConfig+0x114>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d013      	beq.n	800d8fc <TIM_Base_SetConfig+0x40>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8da:	d00f      	beq.n	800d8fc <TIM_Base_SetConfig+0x40>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a3d      	ldr	r2, [pc, #244]	; (800d9d4 <TIM_Base_SetConfig+0x118>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d00b      	beq.n	800d8fc <TIM_Base_SetConfig+0x40>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a3c      	ldr	r2, [pc, #240]	; (800d9d8 <TIM_Base_SetConfig+0x11c>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d007      	beq.n	800d8fc <TIM_Base_SetConfig+0x40>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4a3b      	ldr	r2, [pc, #236]	; (800d9dc <TIM_Base_SetConfig+0x120>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d003      	beq.n	800d8fc <TIM_Base_SetConfig+0x40>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4a3a      	ldr	r2, [pc, #232]	; (800d9e0 <TIM_Base_SetConfig+0x124>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d108      	bne.n	800d90e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4a2f      	ldr	r2, [pc, #188]	; (800d9d0 <TIM_Base_SetConfig+0x114>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d01f      	beq.n	800d956 <TIM_Base_SetConfig+0x9a>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d91c:	d01b      	beq.n	800d956 <TIM_Base_SetConfig+0x9a>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4a2c      	ldr	r2, [pc, #176]	; (800d9d4 <TIM_Base_SetConfig+0x118>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d017      	beq.n	800d956 <TIM_Base_SetConfig+0x9a>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4a2b      	ldr	r2, [pc, #172]	; (800d9d8 <TIM_Base_SetConfig+0x11c>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d013      	beq.n	800d956 <TIM_Base_SetConfig+0x9a>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4a2a      	ldr	r2, [pc, #168]	; (800d9dc <TIM_Base_SetConfig+0x120>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d00f      	beq.n	800d956 <TIM_Base_SetConfig+0x9a>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4a29      	ldr	r2, [pc, #164]	; (800d9e0 <TIM_Base_SetConfig+0x124>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d00b      	beq.n	800d956 <TIM_Base_SetConfig+0x9a>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4a28      	ldr	r2, [pc, #160]	; (800d9e4 <TIM_Base_SetConfig+0x128>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d007      	beq.n	800d956 <TIM_Base_SetConfig+0x9a>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	4a27      	ldr	r2, [pc, #156]	; (800d9e8 <TIM_Base_SetConfig+0x12c>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d003      	beq.n	800d956 <TIM_Base_SetConfig+0x9a>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4a26      	ldr	r2, [pc, #152]	; (800d9ec <TIM_Base_SetConfig+0x130>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d108      	bne.n	800d968 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d95c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	4313      	orrs	r3, r2
 800d966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	695b      	ldr	r3, [r3, #20]
 800d972:	4313      	orrs	r3, r2
 800d974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	689a      	ldr	r2, [r3, #8]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4a10      	ldr	r2, [pc, #64]	; (800d9d0 <TIM_Base_SetConfig+0x114>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d00f      	beq.n	800d9b4 <TIM_Base_SetConfig+0xf8>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4a12      	ldr	r2, [pc, #72]	; (800d9e0 <TIM_Base_SetConfig+0x124>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d00b      	beq.n	800d9b4 <TIM_Base_SetConfig+0xf8>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4a11      	ldr	r2, [pc, #68]	; (800d9e4 <TIM_Base_SetConfig+0x128>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d007      	beq.n	800d9b4 <TIM_Base_SetConfig+0xf8>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	4a10      	ldr	r2, [pc, #64]	; (800d9e8 <TIM_Base_SetConfig+0x12c>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d003      	beq.n	800d9b4 <TIM_Base_SetConfig+0xf8>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	4a0f      	ldr	r2, [pc, #60]	; (800d9ec <TIM_Base_SetConfig+0x130>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d103      	bne.n	800d9bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	691a      	ldr	r2, [r3, #16]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	615a      	str	r2, [r3, #20]
}
 800d9c2:	bf00      	nop
 800d9c4:	3714      	adds	r7, #20
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	40010000 	.word	0x40010000
 800d9d4:	40000400 	.word	0x40000400
 800d9d8:	40000800 	.word	0x40000800
 800d9dc:	40000c00 	.word	0x40000c00
 800d9e0:	40010400 	.word	0x40010400
 800d9e4:	40014000 	.word	0x40014000
 800d9e8:	40014400 	.word	0x40014400
 800d9ec:	40014800 	.word	0x40014800

0800d9f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b087      	sub	sp, #28
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6a1b      	ldr	r3, [r3, #32]
 800d9fe:	f023 0201 	bic.w	r2, r3, #1
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6a1b      	ldr	r3, [r3, #32]
 800da0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	699b      	ldr	r3, [r3, #24]
 800da16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	4b37      	ldr	r3, [pc, #220]	; (800daf8 <TIM_OC1_SetConfig+0x108>)
 800da1c:	4013      	ands	r3, r2
 800da1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f023 0303 	bic.w	r3, r3, #3
 800da26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	4313      	orrs	r3, r2
 800da30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f023 0302 	bic.w	r3, r3, #2
 800da38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	697a      	ldr	r2, [r7, #20]
 800da40:	4313      	orrs	r3, r2
 800da42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a2d      	ldr	r2, [pc, #180]	; (800dafc <TIM_OC1_SetConfig+0x10c>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d00f      	beq.n	800da6c <TIM_OC1_SetConfig+0x7c>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a2c      	ldr	r2, [pc, #176]	; (800db00 <TIM_OC1_SetConfig+0x110>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d00b      	beq.n	800da6c <TIM_OC1_SetConfig+0x7c>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	4a2b      	ldr	r2, [pc, #172]	; (800db04 <TIM_OC1_SetConfig+0x114>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d007      	beq.n	800da6c <TIM_OC1_SetConfig+0x7c>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4a2a      	ldr	r2, [pc, #168]	; (800db08 <TIM_OC1_SetConfig+0x118>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d003      	beq.n	800da6c <TIM_OC1_SetConfig+0x7c>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4a29      	ldr	r2, [pc, #164]	; (800db0c <TIM_OC1_SetConfig+0x11c>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d10c      	bne.n	800da86 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	f023 0308 	bic.w	r3, r3, #8
 800da72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	697a      	ldr	r2, [r7, #20]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	f023 0304 	bic.w	r3, r3, #4
 800da84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4a1c      	ldr	r2, [pc, #112]	; (800dafc <TIM_OC1_SetConfig+0x10c>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d00f      	beq.n	800daae <TIM_OC1_SetConfig+0xbe>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4a1b      	ldr	r2, [pc, #108]	; (800db00 <TIM_OC1_SetConfig+0x110>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d00b      	beq.n	800daae <TIM_OC1_SetConfig+0xbe>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a1a      	ldr	r2, [pc, #104]	; (800db04 <TIM_OC1_SetConfig+0x114>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d007      	beq.n	800daae <TIM_OC1_SetConfig+0xbe>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a19      	ldr	r2, [pc, #100]	; (800db08 <TIM_OC1_SetConfig+0x118>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d003      	beq.n	800daae <TIM_OC1_SetConfig+0xbe>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a18      	ldr	r2, [pc, #96]	; (800db0c <TIM_OC1_SetConfig+0x11c>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d111      	bne.n	800dad2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dabc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	695b      	ldr	r3, [r3, #20]
 800dac2:	693a      	ldr	r2, [r7, #16]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	699b      	ldr	r3, [r3, #24]
 800dacc:	693a      	ldr	r2, [r7, #16]
 800dace:	4313      	orrs	r3, r2
 800dad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	693a      	ldr	r2, [r7, #16]
 800dad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	685a      	ldr	r2, [r3, #4]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	621a      	str	r2, [r3, #32]
}
 800daec:	bf00      	nop
 800daee:	371c      	adds	r7, #28
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr
 800daf8:	fffeff8f 	.word	0xfffeff8f
 800dafc:	40010000 	.word	0x40010000
 800db00:	40010400 	.word	0x40010400
 800db04:	40014000 	.word	0x40014000
 800db08:	40014400 	.word	0x40014400
 800db0c:	40014800 	.word	0x40014800

0800db10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db10:	b480      	push	{r7}
 800db12:	b087      	sub	sp, #28
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a1b      	ldr	r3, [r3, #32]
 800db1e:	f023 0210 	bic.w	r2, r3, #16
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6a1b      	ldr	r3, [r3, #32]
 800db2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	699b      	ldr	r3, [r3, #24]
 800db36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	4b34      	ldr	r3, [pc, #208]	; (800dc0c <TIM_OC2_SetConfig+0xfc>)
 800db3c:	4013      	ands	r3, r2
 800db3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	021b      	lsls	r3, r3, #8
 800db4e:	68fa      	ldr	r2, [r7, #12]
 800db50:	4313      	orrs	r3, r2
 800db52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	f023 0320 	bic.w	r3, r3, #32
 800db5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	011b      	lsls	r3, r3, #4
 800db62:	697a      	ldr	r2, [r7, #20]
 800db64:	4313      	orrs	r3, r2
 800db66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a29      	ldr	r2, [pc, #164]	; (800dc10 <TIM_OC2_SetConfig+0x100>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d003      	beq.n	800db78 <TIM_OC2_SetConfig+0x68>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4a28      	ldr	r2, [pc, #160]	; (800dc14 <TIM_OC2_SetConfig+0x104>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d10d      	bne.n	800db94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	011b      	lsls	r3, r3, #4
 800db86:	697a      	ldr	r2, [r7, #20]
 800db88:	4313      	orrs	r3, r2
 800db8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a1e      	ldr	r2, [pc, #120]	; (800dc10 <TIM_OC2_SetConfig+0x100>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d00f      	beq.n	800dbbc <TIM_OC2_SetConfig+0xac>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a1d      	ldr	r2, [pc, #116]	; (800dc14 <TIM_OC2_SetConfig+0x104>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d00b      	beq.n	800dbbc <TIM_OC2_SetConfig+0xac>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4a1c      	ldr	r2, [pc, #112]	; (800dc18 <TIM_OC2_SetConfig+0x108>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d007      	beq.n	800dbbc <TIM_OC2_SetConfig+0xac>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4a1b      	ldr	r2, [pc, #108]	; (800dc1c <TIM_OC2_SetConfig+0x10c>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d003      	beq.n	800dbbc <TIM_OC2_SetConfig+0xac>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	4a1a      	ldr	r2, [pc, #104]	; (800dc20 <TIM_OC2_SetConfig+0x110>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d113      	bne.n	800dbe4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	695b      	ldr	r3, [r3, #20]
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	693a      	ldr	r2, [r7, #16]
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	699b      	ldr	r3, [r3, #24]
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	693a      	ldr	r2, [r7, #16]
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	693a      	ldr	r2, [r7, #16]
 800dbe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	685a      	ldr	r2, [r3, #4]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	621a      	str	r2, [r3, #32]
}
 800dbfe:	bf00      	nop
 800dc00:	371c      	adds	r7, #28
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	feff8fff 	.word	0xfeff8fff
 800dc10:	40010000 	.word	0x40010000
 800dc14:	40010400 	.word	0x40010400
 800dc18:	40014000 	.word	0x40014000
 800dc1c:	40014400 	.word	0x40014400
 800dc20:	40014800 	.word	0x40014800

0800dc24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b087      	sub	sp, #28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a1b      	ldr	r3, [r3, #32]
 800dc32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a1b      	ldr	r3, [r3, #32]
 800dc3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	69db      	ldr	r3, [r3, #28]
 800dc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	4b33      	ldr	r3, [pc, #204]	; (800dd1c <TIM_OC3_SetConfig+0xf8>)
 800dc50:	4013      	ands	r3, r2
 800dc52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f023 0303 	bic.w	r3, r3, #3
 800dc5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	021b      	lsls	r3, r3, #8
 800dc74:	697a      	ldr	r2, [r7, #20]
 800dc76:	4313      	orrs	r3, r2
 800dc78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4a28      	ldr	r2, [pc, #160]	; (800dd20 <TIM_OC3_SetConfig+0xfc>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d003      	beq.n	800dc8a <TIM_OC3_SetConfig+0x66>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a27      	ldr	r2, [pc, #156]	; (800dd24 <TIM_OC3_SetConfig+0x100>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d10d      	bne.n	800dca6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	021b      	lsls	r3, r3, #8
 800dc98:	697a      	ldr	r2, [r7, #20]
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4a1d      	ldr	r2, [pc, #116]	; (800dd20 <TIM_OC3_SetConfig+0xfc>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d00f      	beq.n	800dcce <TIM_OC3_SetConfig+0xaa>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a1c      	ldr	r2, [pc, #112]	; (800dd24 <TIM_OC3_SetConfig+0x100>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d00b      	beq.n	800dcce <TIM_OC3_SetConfig+0xaa>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a1b      	ldr	r2, [pc, #108]	; (800dd28 <TIM_OC3_SetConfig+0x104>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d007      	beq.n	800dcce <TIM_OC3_SetConfig+0xaa>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a1a      	ldr	r2, [pc, #104]	; (800dd2c <TIM_OC3_SetConfig+0x108>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d003      	beq.n	800dcce <TIM_OC3_SetConfig+0xaa>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a19      	ldr	r2, [pc, #100]	; (800dd30 <TIM_OC3_SetConfig+0x10c>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d113      	bne.n	800dcf6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	695b      	ldr	r3, [r3, #20]
 800dce2:	011b      	lsls	r3, r3, #4
 800dce4:	693a      	ldr	r2, [r7, #16]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	699b      	ldr	r3, [r3, #24]
 800dcee:	011b      	lsls	r3, r3, #4
 800dcf0:	693a      	ldr	r2, [r7, #16]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	685a      	ldr	r2, [r3, #4]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	697a      	ldr	r2, [r7, #20]
 800dd0e:	621a      	str	r2, [r3, #32]
}
 800dd10:	bf00      	nop
 800dd12:	371c      	adds	r7, #28
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr
 800dd1c:	fffeff8f 	.word	0xfffeff8f
 800dd20:	40010000 	.word	0x40010000
 800dd24:	40010400 	.word	0x40010400
 800dd28:	40014000 	.word	0x40014000
 800dd2c:	40014400 	.word	0x40014400
 800dd30:	40014800 	.word	0x40014800

0800dd34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b087      	sub	sp, #28
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6a1b      	ldr	r3, [r3, #32]
 800dd42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a1b      	ldr	r3, [r3, #32]
 800dd4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	69db      	ldr	r3, [r3, #28]
 800dd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	4b24      	ldr	r3, [pc, #144]	; (800ddf0 <TIM_OC4_SetConfig+0xbc>)
 800dd60:	4013      	ands	r3, r2
 800dd62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	021b      	lsls	r3, r3, #8
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dd7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	031b      	lsls	r3, r3, #12
 800dd86:	693a      	ldr	r2, [r7, #16]
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	4a19      	ldr	r2, [pc, #100]	; (800ddf4 <TIM_OC4_SetConfig+0xc0>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d00f      	beq.n	800ddb4 <TIM_OC4_SetConfig+0x80>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4a18      	ldr	r2, [pc, #96]	; (800ddf8 <TIM_OC4_SetConfig+0xc4>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d00b      	beq.n	800ddb4 <TIM_OC4_SetConfig+0x80>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a17      	ldr	r2, [pc, #92]	; (800ddfc <TIM_OC4_SetConfig+0xc8>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d007      	beq.n	800ddb4 <TIM_OC4_SetConfig+0x80>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a16      	ldr	r2, [pc, #88]	; (800de00 <TIM_OC4_SetConfig+0xcc>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d003      	beq.n	800ddb4 <TIM_OC4_SetConfig+0x80>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a15      	ldr	r2, [pc, #84]	; (800de04 <TIM_OC4_SetConfig+0xd0>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d109      	bne.n	800ddc8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ddba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	695b      	ldr	r3, [r3, #20]
 800ddc0:	019b      	lsls	r3, r3, #6
 800ddc2:	697a      	ldr	r2, [r7, #20]
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	697a      	ldr	r2, [r7, #20]
 800ddcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	685a      	ldr	r2, [r3, #4]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	693a      	ldr	r2, [r7, #16]
 800dde0:	621a      	str	r2, [r3, #32]
}
 800dde2:	bf00      	nop
 800dde4:	371c      	adds	r7, #28
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	feff8fff 	.word	0xfeff8fff
 800ddf4:	40010000 	.word	0x40010000
 800ddf8:	40010400 	.word	0x40010400
 800ddfc:	40014000 	.word	0x40014000
 800de00:	40014400 	.word	0x40014400
 800de04:	40014800 	.word	0x40014800

0800de08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800de08:	b480      	push	{r7}
 800de0a:	b087      	sub	sp, #28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a1b      	ldr	r3, [r3, #32]
 800de22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4b21      	ldr	r3, [pc, #132]	; (800deb8 <TIM_OC5_SetConfig+0xb0>)
 800de34:	4013      	ands	r3, r2
 800de36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	4313      	orrs	r3, r2
 800de40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800de48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	041b      	lsls	r3, r3, #16
 800de50:	693a      	ldr	r2, [r7, #16]
 800de52:	4313      	orrs	r3, r2
 800de54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a18      	ldr	r2, [pc, #96]	; (800debc <TIM_OC5_SetConfig+0xb4>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d00f      	beq.n	800de7e <TIM_OC5_SetConfig+0x76>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a17      	ldr	r2, [pc, #92]	; (800dec0 <TIM_OC5_SetConfig+0xb8>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d00b      	beq.n	800de7e <TIM_OC5_SetConfig+0x76>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a16      	ldr	r2, [pc, #88]	; (800dec4 <TIM_OC5_SetConfig+0xbc>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d007      	beq.n	800de7e <TIM_OC5_SetConfig+0x76>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a15      	ldr	r2, [pc, #84]	; (800dec8 <TIM_OC5_SetConfig+0xc0>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d003      	beq.n	800de7e <TIM_OC5_SetConfig+0x76>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a14      	ldr	r2, [pc, #80]	; (800decc <TIM_OC5_SetConfig+0xc4>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d109      	bne.n	800de92 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	021b      	lsls	r3, r3, #8
 800de8c:	697a      	ldr	r2, [r7, #20]
 800de8e:	4313      	orrs	r3, r2
 800de90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	697a      	ldr	r2, [r7, #20]
 800de96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	685a      	ldr	r2, [r3, #4]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	693a      	ldr	r2, [r7, #16]
 800deaa:	621a      	str	r2, [r3, #32]
}
 800deac:	bf00      	nop
 800deae:	371c      	adds	r7, #28
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr
 800deb8:	fffeff8f 	.word	0xfffeff8f
 800debc:	40010000 	.word	0x40010000
 800dec0:	40010400 	.word	0x40010400
 800dec4:	40014000 	.word	0x40014000
 800dec8:	40014400 	.word	0x40014400
 800decc:	40014800 	.word	0x40014800

0800ded0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b087      	sub	sp, #28
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6a1b      	ldr	r3, [r3, #32]
 800dede:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6a1b      	ldr	r3, [r3, #32]
 800deea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800def6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	4b22      	ldr	r3, [pc, #136]	; (800df84 <TIM_OC6_SetConfig+0xb4>)
 800defc:	4013      	ands	r3, r2
 800defe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	021b      	lsls	r3, r3, #8
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	4313      	orrs	r3, r2
 800df0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	051b      	lsls	r3, r3, #20
 800df1a:	693a      	ldr	r2, [r7, #16]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4a19      	ldr	r2, [pc, #100]	; (800df88 <TIM_OC6_SetConfig+0xb8>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d00f      	beq.n	800df48 <TIM_OC6_SetConfig+0x78>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a18      	ldr	r2, [pc, #96]	; (800df8c <TIM_OC6_SetConfig+0xbc>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d00b      	beq.n	800df48 <TIM_OC6_SetConfig+0x78>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4a17      	ldr	r2, [pc, #92]	; (800df90 <TIM_OC6_SetConfig+0xc0>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d007      	beq.n	800df48 <TIM_OC6_SetConfig+0x78>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4a16      	ldr	r2, [pc, #88]	; (800df94 <TIM_OC6_SetConfig+0xc4>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d003      	beq.n	800df48 <TIM_OC6_SetConfig+0x78>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	4a15      	ldr	r2, [pc, #84]	; (800df98 <TIM_OC6_SetConfig+0xc8>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d109      	bne.n	800df5c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	695b      	ldr	r3, [r3, #20]
 800df54:	029b      	lsls	r3, r3, #10
 800df56:	697a      	ldr	r2, [r7, #20]
 800df58:	4313      	orrs	r3, r2
 800df5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	685a      	ldr	r2, [r3, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	693a      	ldr	r2, [r7, #16]
 800df74:	621a      	str	r2, [r3, #32]
}
 800df76:	bf00      	nop
 800df78:	371c      	adds	r7, #28
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	feff8fff 	.word	0xfeff8fff
 800df88:	40010000 	.word	0x40010000
 800df8c:	40010400 	.word	0x40010400
 800df90:	40014000 	.word	0x40014000
 800df94:	40014400 	.word	0x40014400
 800df98:	40014800 	.word	0x40014800

0800df9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b086      	sub	sp, #24
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dfb2:	693a      	ldr	r2, [r7, #16]
 800dfb4:	4b65      	ldr	r3, [pc, #404]	; (800e14c <TIM_SlaveTimer_SetConfig+0x1b0>)
 800dfb6:	4013      	ands	r3, r2
 800dfb8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800dfc4:	693a      	ldr	r2, [r7, #16]
 800dfc6:	4b62      	ldr	r3, [pc, #392]	; (800e150 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800dfc8:	4013      	ands	r3, r2
 800dfca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	693a      	ldr	r2, [r7, #16]
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	693a      	ldr	r2, [r7, #16]
 800dfdc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	4a5c      	ldr	r2, [pc, #368]	; (800e154 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	f000 80ab 	beq.w	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dfea:	4a5a      	ldr	r2, [pc, #360]	; (800e154 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	f200 80a4 	bhi.w	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800dff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dff6:	f000 80a3 	beq.w	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dffe:	f200 809c 	bhi.w	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e002:	4a55      	ldr	r2, [pc, #340]	; (800e158 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800e004:	4293      	cmp	r3, r2
 800e006:	f000 809b 	beq.w	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e00a:	4a53      	ldr	r2, [pc, #332]	; (800e158 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	f200 8094 	bhi.w	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e012:	4a52      	ldr	r2, [pc, #328]	; (800e15c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800e014:	4293      	cmp	r3, r2
 800e016:	f000 8093 	beq.w	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e01a:	4a50      	ldr	r2, [pc, #320]	; (800e15c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	f200 808c 	bhi.w	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e022:	4a4f      	ldr	r2, [pc, #316]	; (800e160 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800e024:	4293      	cmp	r3, r2
 800e026:	f000 808b 	beq.w	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e02a:	4a4d      	ldr	r2, [pc, #308]	; (800e160 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	f200 8084 	bhi.w	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e032:	4a4c      	ldr	r2, [pc, #304]	; (800e164 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800e034:	4293      	cmp	r3, r2
 800e036:	f000 8083 	beq.w	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e03a:	4a4a      	ldr	r2, [pc, #296]	; (800e164 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d87c      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e040:	4a49      	ldr	r2, [pc, #292]	; (800e168 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d07c      	beq.n	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e046:	4a48      	ldr	r2, [pc, #288]	; (800e168 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d876      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e04c:	4a47      	ldr	r2, [pc, #284]	; (800e16c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d076      	beq.n	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e052:	4a46      	ldr	r2, [pc, #280]	; (800e16c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d870      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e058:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e05c:	d070      	beq.n	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e05e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e062:	d86a      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e068:	d06a      	beq.n	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e06a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e06e:	d864      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e070:	2b70      	cmp	r3, #112	; 0x70
 800e072:	d01a      	beq.n	800e0aa <TIM_SlaveTimer_SetConfig+0x10e>
 800e074:	2b70      	cmp	r3, #112	; 0x70
 800e076:	d860      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e078:	2b60      	cmp	r3, #96	; 0x60
 800e07a:	d054      	beq.n	800e126 <TIM_SlaveTimer_SetConfig+0x18a>
 800e07c:	2b60      	cmp	r3, #96	; 0x60
 800e07e:	d85c      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e080:	2b50      	cmp	r3, #80	; 0x50
 800e082:	d046      	beq.n	800e112 <TIM_SlaveTimer_SetConfig+0x176>
 800e084:	2b50      	cmp	r3, #80	; 0x50
 800e086:	d858      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e088:	2b40      	cmp	r3, #64	; 0x40
 800e08a:	d019      	beq.n	800e0c0 <TIM_SlaveTimer_SetConfig+0x124>
 800e08c:	2b40      	cmp	r3, #64	; 0x40
 800e08e:	d854      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e090:	2b30      	cmp	r3, #48	; 0x30
 800e092:	d055      	beq.n	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e094:	2b30      	cmp	r3, #48	; 0x30
 800e096:	d850      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e098:	2b20      	cmp	r3, #32
 800e09a:	d051      	beq.n	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e09c:	2b20      	cmp	r3, #32
 800e09e:	d84c      	bhi.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d04d      	beq.n	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e0a4:	2b10      	cmp	r3, #16
 800e0a6:	d04b      	beq.n	800e140 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e0a8:	e047      	b.n	800e13a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6818      	ldr	r0, [r3, #0]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	68d9      	ldr	r1, [r3, #12]
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	689a      	ldr	r2, [r3, #8]
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	f000 fa01 	bl	800e4c0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800e0be:	e040      	b.n	800e142 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b05      	cmp	r3, #5
 800e0c6:	d101      	bne.n	800e0cc <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e03b      	b.n	800e144 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	6a1a      	ldr	r2, [r3, #32]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f022 0201 	bic.w	r2, r2, #1
 800e0e2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	699b      	ldr	r3, [r3, #24]
 800e0ea:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e0f2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	011b      	lsls	r3, r3, #4
 800e0fa:	68ba      	ldr	r2, [r7, #8]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68ba      	ldr	r2, [r7, #8]
 800e106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	621a      	str	r2, [r3, #32]
      break;
 800e110:	e017      	b.n	800e142 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6818      	ldr	r0, [r3, #0]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	6899      	ldr	r1, [r3, #8]
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	461a      	mov	r2, r3
 800e120:	f000 f89a 	bl	800e258 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800e124:	e00d      	b.n	800e142 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6818      	ldr	r0, [r3, #0]
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	6899      	ldr	r1, [r3, #8]
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	691b      	ldr	r3, [r3, #16]
 800e132:	461a      	mov	r2, r3
 800e134:	f000 f8fc 	bl	800e330 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800e138:	e003      	b.n	800e142 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	75fb      	strb	r3, [r7, #23]
      break;
 800e13e:	e000      	b.n	800e142 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800e140:	bf00      	nop
  }

  return status;
 800e142:	7dfb      	ldrb	r3, [r7, #23]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3718      	adds	r7, #24
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	ffcfff8f 	.word	0xffcfff8f
 800e150:	fffefff8 	.word	0xfffefff8
 800e154:	00200010 	.word	0x00200010
 800e158:	00100070 	.word	0x00100070
 800e15c:	00100060 	.word	0x00100060
 800e160:	00100050 	.word	0x00100050
 800e164:	00100040 	.word	0x00100040
 800e168:	00100030 	.word	0x00100030
 800e16c:	00100020 	.word	0x00100020

0800e170 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e170:	b480      	push	{r7}
 800e172:	b087      	sub	sp, #28
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	6a1b      	ldr	r3, [r3, #32]
 800e182:	f023 0201 	bic.w	r2, r3, #1
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	699b      	ldr	r3, [r3, #24]
 800e18e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	6a1b      	ldr	r3, [r3, #32]
 800e194:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	4a28      	ldr	r2, [pc, #160]	; (800e23c <TIM_TI1_SetConfig+0xcc>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d01b      	beq.n	800e1d6 <TIM_TI1_SetConfig+0x66>
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1a4:	d017      	beq.n	800e1d6 <TIM_TI1_SetConfig+0x66>
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	4a25      	ldr	r2, [pc, #148]	; (800e240 <TIM_TI1_SetConfig+0xd0>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d013      	beq.n	800e1d6 <TIM_TI1_SetConfig+0x66>
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	4a24      	ldr	r2, [pc, #144]	; (800e244 <TIM_TI1_SetConfig+0xd4>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d00f      	beq.n	800e1d6 <TIM_TI1_SetConfig+0x66>
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	4a23      	ldr	r2, [pc, #140]	; (800e248 <TIM_TI1_SetConfig+0xd8>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d00b      	beq.n	800e1d6 <TIM_TI1_SetConfig+0x66>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	4a22      	ldr	r2, [pc, #136]	; (800e24c <TIM_TI1_SetConfig+0xdc>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d007      	beq.n	800e1d6 <TIM_TI1_SetConfig+0x66>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	4a21      	ldr	r2, [pc, #132]	; (800e250 <TIM_TI1_SetConfig+0xe0>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d003      	beq.n	800e1d6 <TIM_TI1_SetConfig+0x66>
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	4a20      	ldr	r2, [pc, #128]	; (800e254 <TIM_TI1_SetConfig+0xe4>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d101      	bne.n	800e1da <TIM_TI1_SetConfig+0x6a>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	e000      	b.n	800e1dc <TIM_TI1_SetConfig+0x6c>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d008      	beq.n	800e1f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	f023 0303 	bic.w	r3, r3, #3
 800e1e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e1e8:	697a      	ldr	r2, [r7, #20]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	617b      	str	r3, [r7, #20]
 800e1f0:	e003      	b.n	800e1fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	f043 0301 	orr.w	r3, r3, #1
 800e1f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	011b      	lsls	r3, r3, #4
 800e206:	b2db      	uxtb	r3, r3
 800e208:	697a      	ldr	r2, [r7, #20]
 800e20a:	4313      	orrs	r3, r2
 800e20c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	f023 030a 	bic.w	r3, r3, #10
 800e214:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	f003 030a 	and.w	r3, r3, #10
 800e21c:	693a      	ldr	r2, [r7, #16]
 800e21e:	4313      	orrs	r3, r2
 800e220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	693a      	ldr	r2, [r7, #16]
 800e22c:	621a      	str	r2, [r3, #32]
}
 800e22e:	bf00      	nop
 800e230:	371c      	adds	r7, #28
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop
 800e23c:	40010000 	.word	0x40010000
 800e240:	40000400 	.word	0x40000400
 800e244:	40000800 	.word	0x40000800
 800e248:	40000c00 	.word	0x40000c00
 800e24c:	40010400 	.word	0x40010400
 800e250:	40001800 	.word	0x40001800
 800e254:	40014000 	.word	0x40014000

0800e258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e258:	b480      	push	{r7}
 800e25a:	b087      	sub	sp, #28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6a1b      	ldr	r3, [r3, #32]
 800e268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6a1b      	ldr	r3, [r3, #32]
 800e26e:	f023 0201 	bic.w	r2, r3, #1
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	011b      	lsls	r3, r3, #4
 800e288:	693a      	ldr	r2, [r7, #16]
 800e28a:	4313      	orrs	r3, r2
 800e28c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	f023 030a 	bic.w	r3, r3, #10
 800e294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	693a      	ldr	r2, [r7, #16]
 800e2a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	697a      	ldr	r2, [r7, #20]
 800e2a8:	621a      	str	r2, [r3, #32]
}
 800e2aa:	bf00      	nop
 800e2ac:	371c      	adds	r7, #28
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr

0800e2b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e2b6:	b480      	push	{r7}
 800e2b8:	b087      	sub	sp, #28
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	60f8      	str	r0, [r7, #12]
 800e2be:	60b9      	str	r1, [r7, #8]
 800e2c0:	607a      	str	r2, [r7, #4]
 800e2c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6a1b      	ldr	r3, [r3, #32]
 800e2c8:	f023 0210 	bic.w	r2, r3, #16
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	699b      	ldr	r3, [r3, #24]
 800e2d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6a1b      	ldr	r3, [r3, #32]
 800e2da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	021b      	lsls	r3, r3, #8
 800e2e8:	697a      	ldr	r2, [r7, #20]
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e2f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	031b      	lsls	r3, r3, #12
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	697a      	ldr	r2, [r7, #20]
 800e2fe:	4313      	orrs	r3, r2
 800e300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e308:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	011b      	lsls	r3, r3, #4
 800e30e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e312:	693a      	ldr	r2, [r7, #16]
 800e314:	4313      	orrs	r3, r2
 800e316:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	697a      	ldr	r2, [r7, #20]
 800e31c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	693a      	ldr	r2, [r7, #16]
 800e322:	621a      	str	r2, [r3, #32]
}
 800e324:	bf00      	nop
 800e326:	371c      	adds	r7, #28
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e330:	b480      	push	{r7}
 800e332:	b087      	sub	sp, #28
 800e334:	af00      	add	r7, sp, #0
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	6a1b      	ldr	r3, [r3, #32]
 800e340:	f023 0210 	bic.w	r2, r3, #16
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	699b      	ldr	r3, [r3, #24]
 800e34c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6a1b      	ldr	r3, [r3, #32]
 800e352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e35a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	031b      	lsls	r3, r3, #12
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	4313      	orrs	r3, r2
 800e364:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e36c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	011b      	lsls	r3, r3, #4
 800e372:	693a      	ldr	r2, [r7, #16]
 800e374:	4313      	orrs	r3, r2
 800e376:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	697a      	ldr	r2, [r7, #20]
 800e37c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	693a      	ldr	r2, [r7, #16]
 800e382:	621a      	str	r2, [r3, #32]
}
 800e384:	bf00      	nop
 800e386:	371c      	adds	r7, #28
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e390:	b480      	push	{r7}
 800e392:	b087      	sub	sp, #28
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
 800e39c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6a1b      	ldr	r3, [r3, #32]
 800e3a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	69db      	ldr	r3, [r3, #28]
 800e3ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6a1b      	ldr	r3, [r3, #32]
 800e3b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f023 0303 	bic.w	r3, r3, #3
 800e3bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e3cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	011b      	lsls	r3, r3, #4
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	697a      	ldr	r2, [r7, #20]
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e3e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	021b      	lsls	r3, r3, #8
 800e3e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e3ea:	693a      	ldr	r2, [r7, #16]
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	697a      	ldr	r2, [r7, #20]
 800e3f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	693a      	ldr	r2, [r7, #16]
 800e3fa:	621a      	str	r2, [r3, #32]
}
 800e3fc:	bf00      	nop
 800e3fe:	371c      	adds	r7, #28
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e408:	b480      	push	{r7}
 800e40a:	b087      	sub	sp, #28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	607a      	str	r2, [r7, #4]
 800e414:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6a1b      	ldr	r3, [r3, #32]
 800e41a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	69db      	ldr	r3, [r3, #28]
 800e426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6a1b      	ldr	r3, [r3, #32]
 800e42c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e434:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	021b      	lsls	r3, r3, #8
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	4313      	orrs	r3, r2
 800e43e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e446:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	031b      	lsls	r3, r3, #12
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	4313      	orrs	r3, r2
 800e452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e45a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	031b      	lsls	r3, r3, #12
 800e460:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e464:	693a      	ldr	r2, [r7, #16]
 800e466:	4313      	orrs	r3, r2
 800e468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	697a      	ldr	r2, [r7, #20]
 800e46e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	693a      	ldr	r2, [r7, #16]
 800e474:	621a      	str	r2, [r3, #32]
}
 800e476:	bf00      	nop
 800e478:	371c      	adds	r7, #28
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr
	...

0800e484 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e494:	68fa      	ldr	r2, [r7, #12]
 800e496:	4b09      	ldr	r3, [pc, #36]	; (800e4bc <TIM_ITRx_SetConfig+0x38>)
 800e498:	4013      	ands	r3, r2
 800e49a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e49c:	683a      	ldr	r2, [r7, #0]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	f043 0307 	orr.w	r3, r3, #7
 800e4a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	68fa      	ldr	r2, [r7, #12]
 800e4ac:	609a      	str	r2, [r3, #8]
}
 800e4ae:	bf00      	nop
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop
 800e4bc:	ffcfff8f 	.word	0xffcfff8f

0800e4c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b087      	sub	sp, #28
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
 800e4cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	689b      	ldr	r3, [r3, #8]
 800e4d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e4da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	021a      	lsls	r2, r3, #8
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	431a      	orrs	r2, r3
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	697a      	ldr	r2, [r7, #20]
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	697a      	ldr	r2, [r7, #20]
 800e4f2:	609a      	str	r2, [r3, #8]
}
 800e4f4:	bf00      	nop
 800e4f6:	371c      	adds	r7, #28
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e510:	2b01      	cmp	r3, #1
 800e512:	d101      	bne.n	800e518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e514:	2302      	movs	r3, #2
 800e516:	e06d      	b.n	800e5f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2202      	movs	r2, #2
 800e524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a30      	ldr	r2, [pc, #192]	; (800e600 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d004      	beq.n	800e54c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a2f      	ldr	r2, [pc, #188]	; (800e604 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d108      	bne.n	800e55e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e552:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	4313      	orrs	r3, r2
 800e55c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e564:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a20      	ldr	r2, [pc, #128]	; (800e600 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d022      	beq.n	800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e58a:	d01d      	beq.n	800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a1d      	ldr	r2, [pc, #116]	; (800e608 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d018      	beq.n	800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4a1c      	ldr	r2, [pc, #112]	; (800e60c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d013      	beq.n	800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a1a      	ldr	r2, [pc, #104]	; (800e610 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d00e      	beq.n	800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4a15      	ldr	r2, [pc, #84]	; (800e604 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d009      	beq.n	800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a16      	ldr	r2, [pc, #88]	; (800e614 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d004      	beq.n	800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4a15      	ldr	r2, [pc, #84]	; (800e618 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d10c      	bne.n	800e5e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	689b      	ldr	r3, [r3, #8]
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68ba      	ldr	r2, [r7, #8]
 800e5e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5f2:	2300      	movs	r3, #0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3714      	adds	r7, #20
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr
 800e600:	40010000 	.word	0x40010000
 800e604:	40010400 	.word	0x40010400
 800e608:	40000400 	.word	0x40000400
 800e60c:	40000800 	.word	0x40000800
 800e610:	40000c00 	.word	0x40000c00
 800e614:	40001800 	.word	0x40001800
 800e618:	40014000 	.word	0x40014000

0800e61c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e626:	2300      	movs	r3, #0
 800e628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e630:	2b01      	cmp	r3, #1
 800e632:	d101      	bne.n	800e638 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e634:	2302      	movs	r3, #2
 800e636:	e087      	b.n	800e748 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2201      	movs	r2, #1
 800e63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	4313      	orrs	r3, r2
 800e65a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	4313      	orrs	r3, r2
 800e668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4313      	orrs	r3, r2
 800e676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	691b      	ldr	r3, [r3, #16]
 800e682:	4313      	orrs	r3, r2
 800e684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	695b      	ldr	r3, [r3, #20]
 800e690:	4313      	orrs	r3, r2
 800e692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	699b      	ldr	r3, [r3, #24]
 800e6ac:	041b      	lsls	r3, r3, #16
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a27      	ldr	r2, [pc, #156]	; (800e754 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d004      	beq.n	800e6c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a25      	ldr	r2, [pc, #148]	; (800e758 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d106      	bne.n	800e6d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	69db      	ldr	r3, [r3, #28]
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a1e      	ldr	r2, [pc, #120]	; (800e754 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d004      	beq.n	800e6e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4a1d      	ldr	r2, [pc, #116]	; (800e758 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d126      	bne.n	800e736 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6f2:	051b      	lsls	r3, r3, #20
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	4313      	orrs	r3, r2
 800e704:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e710:	4313      	orrs	r3, r2
 800e712:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a0e      	ldr	r2, [pc, #56]	; (800e754 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d004      	beq.n	800e728 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4a0d      	ldr	r2, [pc, #52]	; (800e758 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d106      	bne.n	800e736 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e732:	4313      	orrs	r3, r2
 800e734:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	40010000 	.word	0x40010000
 800e758:	40010400 	.word	0x40010400

0800e75c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d101      	bne.n	800e7aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	e042      	b.n	800e830 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d106      	bne.n	800e7c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7f4 febb 	bl	8003538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2224      	movs	r2, #36	; 0x24
 800e7c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f022 0201 	bic.w	r2, r2, #1
 800e7d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 fcd6 	bl	800f18c <UART_SetConfig>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d101      	bne.n	800e7ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e022      	b.n	800e830 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d002      	beq.n	800e7f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f001 fb36 	bl	800fe64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	685a      	ldr	r2, [r3, #4]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	689a      	ldr	r2, [r3, #8]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f042 0201 	orr.w	r2, r2, #1
 800e826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f001 fbbd 	bl	800ffa8 <UART_CheckIdleState>
 800e82e:	4603      	mov	r3, r0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b08a      	sub	sp, #40	; 0x28
 800e83c:	af02      	add	r7, sp, #8
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	603b      	str	r3, [r7, #0]
 800e844:	4613      	mov	r3, r2
 800e846:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e84e:	2b20      	cmp	r3, #32
 800e850:	f040 8083 	bne.w	800e95a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <HAL_UART_Transmit+0x28>
 800e85a:	88fb      	ldrh	r3, [r7, #6]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d101      	bne.n	800e864 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e860:	2301      	movs	r3, #1
 800e862:	e07b      	b.n	800e95c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d101      	bne.n	800e872 <HAL_UART_Transmit+0x3a>
 800e86e:	2302      	movs	r3, #2
 800e870:	e074      	b.n	800e95c <HAL_UART_Transmit+0x124>
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2201      	movs	r2, #1
 800e876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2200      	movs	r2, #0
 800e87e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2221      	movs	r2, #33	; 0x21
 800e886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e88a:	f7f5 fa31 	bl	8003cf0 <HAL_GetTick>
 800e88e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	88fa      	ldrh	r2, [r7, #6]
 800e894:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	88fa      	ldrh	r2, [r7, #6]
 800e89c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8a8:	d108      	bne.n	800e8bc <HAL_UART_Transmit+0x84>
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d104      	bne.n	800e8bc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	61bb      	str	r3, [r7, #24]
 800e8ba:	e003      	b.n	800e8c4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e8cc:	e02c      	b.n	800e928 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	9300      	str	r3, [sp, #0]
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	2180      	movs	r1, #128	; 0x80
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f001 fbb0 	bl	801003e <UART_WaitOnFlagUntilTimeout>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d001      	beq.n	800e8e8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	e039      	b.n	800e95c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10b      	bne.n	800e906 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e8fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	3302      	adds	r3, #2
 800e902:	61bb      	str	r3, [r7, #24]
 800e904:	e007      	b.n	800e916 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	781a      	ldrb	r2, [r3, #0]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	3301      	adds	r3, #1
 800e914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	3b01      	subs	r3, #1
 800e920:	b29a      	uxth	r2, r3
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e92e:	b29b      	uxth	r3, r3
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1cc      	bne.n	800e8ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	2200      	movs	r2, #0
 800e93c:	2140      	movs	r1, #64	; 0x40
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f001 fb7d 	bl	801003e <UART_WaitOnFlagUntilTimeout>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d001      	beq.n	800e94e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e94a:	2303      	movs	r3, #3
 800e94c:	e006      	b.n	800e95c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2220      	movs	r2, #32
 800e952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	e000      	b.n	800e95c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e95a:	2302      	movs	r3, #2
  }
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3720      	adds	r7, #32
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b08a      	sub	sp, #40	; 0x28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	4613      	mov	r3, r2
 800e970:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e978:	2b20      	cmp	r3, #32
 800e97a:	d142      	bne.n	800ea02 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d002      	beq.n	800e988 <HAL_UART_Receive_IT+0x24>
 800e982:	88fb      	ldrh	r3, [r7, #6]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d101      	bne.n	800e98c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e988:	2301      	movs	r3, #1
 800e98a:	e03b      	b.n	800ea04 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e992:	2b01      	cmp	r3, #1
 800e994:	d101      	bne.n	800e99a <HAL_UART_Receive_IT+0x36>
 800e996:	2302      	movs	r3, #2
 800e998:	e034      	b.n	800ea04 <HAL_UART_Receive_IT+0xa0>
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2201      	movs	r2, #1
 800e99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a17      	ldr	r2, [pc, #92]	; (800ea0c <HAL_UART_Receive_IT+0xa8>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d01f      	beq.n	800e9f2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d018      	beq.n	800e9f2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	e853 3f00 	ldrex	r3, [r3]
 800e9cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e9d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	623b      	str	r3, [r7, #32]
 800e9e0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e2:	69f9      	ldr	r1, [r7, #28]
 800e9e4:	6a3a      	ldr	r2, [r7, #32]
 800e9e6:	e841 2300 	strex	r3, r2, [r1]
 800e9ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9ec:	69bb      	ldr	r3, [r7, #24]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d1e6      	bne.n	800e9c0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e9f2:	88fb      	ldrh	r3, [r7, #6]
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	68b9      	ldr	r1, [r7, #8]
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f001 fbe9 	bl	80101d0 <UART_Start_Receive_IT>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	e000      	b.n	800ea04 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ea02:	2302      	movs	r3, #2
  }
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3728      	adds	r7, #40	; 0x28
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	58000c00 	.word	0x58000c00

0800ea10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b0ba      	sub	sp, #232	; 0xe8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	69db      	ldr	r3, [r3, #28]
 800ea1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ea36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ea3a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ea3e:	4013      	ands	r3, r2
 800ea40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ea44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d11b      	bne.n	800ea84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ea4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea50:	f003 0320 	and.w	r3, r3, #32
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d015      	beq.n	800ea84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ea58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea5c:	f003 0320 	and.w	r3, r3, #32
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d105      	bne.n	800ea70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ea64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d009      	beq.n	800ea84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 835a 	beq.w	800f12e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	4798      	blx	r3
      }
      return;
 800ea82:	e354      	b.n	800f12e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ea84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f000 811f 	beq.w	800eccc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ea8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ea92:	4b8b      	ldr	r3, [pc, #556]	; (800ecc0 <HAL_UART_IRQHandler+0x2b0>)
 800ea94:	4013      	ands	r3, r2
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d106      	bne.n	800eaa8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ea9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ea9e:	4b89      	ldr	r3, [pc, #548]	; (800ecc4 <HAL_UART_IRQHandler+0x2b4>)
 800eaa0:	4013      	ands	r3, r2
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f000 8112 	beq.w	800eccc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eaa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaac:	f003 0301 	and.w	r3, r3, #1
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d011      	beq.n	800ead8 <HAL_UART_IRQHandler+0xc8>
 800eab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00b      	beq.n	800ead8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2201      	movs	r2, #1
 800eac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eace:	f043 0201 	orr.w	r2, r3, #1
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ead8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eadc:	f003 0302 	and.w	r3, r3, #2
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d011      	beq.n	800eb08 <HAL_UART_IRQHandler+0xf8>
 800eae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eae8:	f003 0301 	and.w	r3, r3, #1
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d00b      	beq.n	800eb08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2202      	movs	r2, #2
 800eaf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eafe:	f043 0204 	orr.w	r2, r3, #4
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb0c:	f003 0304 	and.w	r3, r3, #4
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d011      	beq.n	800eb38 <HAL_UART_IRQHandler+0x128>
 800eb14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb18:	f003 0301 	and.w	r3, r3, #1
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00b      	beq.n	800eb38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2204      	movs	r2, #4
 800eb26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb2e:	f043 0202 	orr.w	r2, r3, #2
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eb38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb3c:	f003 0308 	and.w	r3, r3, #8
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d017      	beq.n	800eb74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb48:	f003 0320 	and.w	r3, r3, #32
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d105      	bne.n	800eb5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eb50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eb54:	4b5a      	ldr	r3, [pc, #360]	; (800ecc0 <HAL_UART_IRQHandler+0x2b0>)
 800eb56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00b      	beq.n	800eb74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2208      	movs	r2, #8
 800eb62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb6a:	f043 0208 	orr.w	r2, r3, #8
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eb74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d012      	beq.n	800eba6 <HAL_UART_IRQHandler+0x196>
 800eb80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d00c      	beq.n	800eba6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb9c:	f043 0220 	orr.w	r2, r3, #32
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f000 82c0 	beq.w	800f132 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ebb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebb6:	f003 0320 	and.w	r3, r3, #32
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d013      	beq.n	800ebe6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ebbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebc2:	f003 0320 	and.w	r3, r3, #32
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d105      	bne.n	800ebd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ebca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d007      	beq.n	800ebe6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d003      	beq.n	800ebe6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebfa:	2b40      	cmp	r3, #64	; 0x40
 800ebfc:	d005      	beq.n	800ec0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ebfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ec02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d04f      	beq.n	800ecaa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f001 fc0a 	bl	8010424 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec1a:	2b40      	cmp	r3, #64	; 0x40
 800ec1c:	d141      	bne.n	800eca2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	3308      	adds	r3, #8
 800ec24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec2c:	e853 3f00 	ldrex	r3, [r3]
 800ec30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ec34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	3308      	adds	r3, #8
 800ec46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ec4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ec4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ec56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ec5a:	e841 2300 	strex	r3, r2, [r1]
 800ec5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ec62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d1d9      	bne.n	800ec1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d013      	beq.n	800ec9a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec76:	4a14      	ldr	r2, [pc, #80]	; (800ecc8 <HAL_UART_IRQHandler+0x2b8>)
 800ec78:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7f6 fac0 	bl	8005204 <HAL_DMA_Abort_IT>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d017      	beq.n	800ecba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ec94:	4610      	mov	r0, r2
 800ec96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec98:	e00f      	b.n	800ecba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 fa60 	bl	800f160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca0:	e00b      	b.n	800ecba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 fa5c 	bl	800f160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca8:	e007      	b.n	800ecba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 fa58 	bl	800f160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ecb8:	e23b      	b.n	800f132 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecba:	bf00      	nop
    return;
 800ecbc:	e239      	b.n	800f132 <HAL_UART_IRQHandler+0x722>
 800ecbe:	bf00      	nop
 800ecc0:	10000001 	.word	0x10000001
 800ecc4:	04000120 	.word	0x04000120
 800ecc8:	080104f1 	.word	0x080104f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	f040 81ce 	bne.w	800f072 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ecd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecda:	f003 0310 	and.w	r3, r3, #16
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f000 81c7 	beq.w	800f072 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ece4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ece8:	f003 0310 	and.w	r3, r3, #16
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f000 81c0 	beq.w	800f072 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2210      	movs	r2, #16
 800ecf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed04:	2b40      	cmp	r3, #64	; 0x40
 800ed06:	f040 813b 	bne.w	800ef80 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a8b      	ldr	r2, [pc, #556]	; (800ef40 <HAL_UART_IRQHandler+0x530>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d059      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a89      	ldr	r2, [pc, #548]	; (800ef44 <HAL_UART_IRQHandler+0x534>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d053      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a87      	ldr	r2, [pc, #540]	; (800ef48 <HAL_UART_IRQHandler+0x538>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d04d      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4a85      	ldr	r2, [pc, #532]	; (800ef4c <HAL_UART_IRQHandler+0x53c>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d047      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a83      	ldr	r2, [pc, #524]	; (800ef50 <HAL_UART_IRQHandler+0x540>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d041      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a81      	ldr	r2, [pc, #516]	; (800ef54 <HAL_UART_IRQHandler+0x544>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d03b      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4a7f      	ldr	r2, [pc, #508]	; (800ef58 <HAL_UART_IRQHandler+0x548>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d035      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a7d      	ldr	r2, [pc, #500]	; (800ef5c <HAL_UART_IRQHandler+0x54c>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d02f      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a7b      	ldr	r2, [pc, #492]	; (800ef60 <HAL_UART_IRQHandler+0x550>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d029      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a79      	ldr	r2, [pc, #484]	; (800ef64 <HAL_UART_IRQHandler+0x554>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d023      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a77      	ldr	r2, [pc, #476]	; (800ef68 <HAL_UART_IRQHandler+0x558>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d01d      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a75      	ldr	r2, [pc, #468]	; (800ef6c <HAL_UART_IRQHandler+0x55c>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d017      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a73      	ldr	r2, [pc, #460]	; (800ef70 <HAL_UART_IRQHandler+0x560>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d011      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a71      	ldr	r2, [pc, #452]	; (800ef74 <HAL_UART_IRQHandler+0x564>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d00b      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a6f      	ldr	r2, [pc, #444]	; (800ef78 <HAL_UART_IRQHandler+0x568>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d005      	beq.n	800edca <HAL_UART_IRQHandler+0x3ba>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a6d      	ldr	r2, [pc, #436]	; (800ef7c <HAL_UART_IRQHandler+0x56c>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d105      	bne.n	800edd6 <HAL_UART_IRQHandler+0x3c6>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	e004      	b.n	800ede0 <HAL_UART_IRQHandler+0x3d0>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	b29b      	uxth	r3, r3
 800ede0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ede4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 81a4 	beq.w	800f136 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800edf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800edf8:	429a      	cmp	r2, r3
 800edfa:	f080 819c 	bcs.w	800f136 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ee04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee0c:	69db      	ldr	r3, [r3, #28]
 800ee0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee12:	f000 8086 	beq.w	800ef22 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee22:	e853 3f00 	ldrex	r3, [r3]
 800ee26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ee2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ee44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ee4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ee50:	e841 2300 	strex	r3, r2, [r1]
 800ee54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ee58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1da      	bne.n	800ee16 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	3308      	adds	r3, #8
 800ee66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee6a:	e853 3f00 	ldrex	r3, [r3]
 800ee6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ee70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee72:	f023 0301 	bic.w	r3, r3, #1
 800ee76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	3308      	adds	r3, #8
 800ee80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ee84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ee88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ee8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ee90:	e841 2300 	strex	r3, r2, [r1]
 800ee94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ee96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1e1      	bne.n	800ee60 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	3308      	adds	r3, #8
 800eea2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eea6:	e853 3f00 	ldrex	r3, [r3]
 800eeaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eeac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eeae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eeb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	3308      	adds	r3, #8
 800eebc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eec0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eec2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eec6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eec8:	e841 2300 	strex	r3, r2, [r1]
 800eecc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d1e3      	bne.n	800ee9c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2220      	movs	r2, #32
 800eed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeea:	e853 3f00 	ldrex	r3, [r3]
 800eeee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eef2:	f023 0310 	bic.w	r3, r3, #16
 800eef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	461a      	mov	r2, r3
 800ef00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef04:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef0c:	e841 2300 	strex	r3, r2, [r1]
 800ef10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ef12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1e4      	bne.n	800eee2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7f5 fe53 	bl	8004bc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	1ad3      	subs	r3, r2, r3
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	4619      	mov	r1, r3
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 f91c 	bl	800f174 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ef3c:	e0fb      	b.n	800f136 <HAL_UART_IRQHandler+0x726>
 800ef3e:	bf00      	nop
 800ef40:	40020010 	.word	0x40020010
 800ef44:	40020028 	.word	0x40020028
 800ef48:	40020040 	.word	0x40020040
 800ef4c:	40020058 	.word	0x40020058
 800ef50:	40020070 	.word	0x40020070
 800ef54:	40020088 	.word	0x40020088
 800ef58:	400200a0 	.word	0x400200a0
 800ef5c:	400200b8 	.word	0x400200b8
 800ef60:	40020410 	.word	0x40020410
 800ef64:	40020428 	.word	0x40020428
 800ef68:	40020440 	.word	0x40020440
 800ef6c:	40020458 	.word	0x40020458
 800ef70:	40020470 	.word	0x40020470
 800ef74:	40020488 	.word	0x40020488
 800ef78:	400204a0 	.word	0x400204a0
 800ef7c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	1ad3      	subs	r3, r2, r3
 800ef90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	f000 80cc 	beq.w	800f13a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800efa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	f000 80c7 	beq.w	800f13a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb4:	e853 3f00 	ldrex	r3, [r3]
 800efb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800efba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	461a      	mov	r2, r3
 800efca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800efce:	647b      	str	r3, [r7, #68]	; 0x44
 800efd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800efd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efd6:	e841 2300 	strex	r3, r2, [r1]
 800efda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800efdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1e4      	bne.n	800efac <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	3308      	adds	r3, #8
 800efe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efec:	e853 3f00 	ldrex	r3, [r3]
 800eff0:	623b      	str	r3, [r7, #32]
   return(result);
 800eff2:	6a3a      	ldr	r2, [r7, #32]
 800eff4:	4b54      	ldr	r3, [pc, #336]	; (800f148 <HAL_UART_IRQHandler+0x738>)
 800eff6:	4013      	ands	r3, r2
 800eff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	3308      	adds	r3, #8
 800f002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f006:	633a      	str	r2, [r7, #48]	; 0x30
 800f008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f00a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f00c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f00e:	e841 2300 	strex	r3, r2, [r1]
 800f012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1e3      	bne.n	800efe2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2220      	movs	r2, #32
 800f01e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2200      	movs	r2, #0
 800f026:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2200      	movs	r2, #0
 800f02c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	e853 3f00 	ldrex	r3, [r3]
 800f03a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f023 0310 	bic.w	r3, r3, #16
 800f042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	461a      	mov	r2, r3
 800f04c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f050:	61fb      	str	r3, [r7, #28]
 800f052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f054:	69b9      	ldr	r1, [r7, #24]
 800f056:	69fa      	ldr	r2, [r7, #28]
 800f058:	e841 2300 	strex	r3, r2, [r1]
 800f05c:	617b      	str	r3, [r7, #20]
   return(result);
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d1e4      	bne.n	800f02e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f068:	4619      	mov	r1, r3
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 f882 	bl	800f174 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f070:	e063      	b.n	800f13a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00e      	beq.n	800f09c <HAL_UART_IRQHandler+0x68c>
 800f07e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f086:	2b00      	cmp	r3, #0
 800f088:	d008      	beq.n	800f09c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f092:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f001 fec9 	bl	8010e2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f09a:	e051      	b.n	800f140 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d014      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f0a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d105      	bne.n	800f0c0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f0b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d008      	beq.n	800f0d2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d03a      	beq.n	800f13e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	4798      	blx	r3
    }
    return;
 800f0d0:	e035      	b.n	800f13e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d009      	beq.n	800f0f2 <HAL_UART_IRQHandler+0x6e2>
 800f0de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d003      	beq.n	800f0f2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f001 fa16 	bl	801051c <UART_EndTransmit_IT>
    return;
 800f0f0:	e026      	b.n	800f140 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f0f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d009      	beq.n	800f112 <HAL_UART_IRQHandler+0x702>
 800f0fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f102:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f106:	2b00      	cmp	r3, #0
 800f108:	d003      	beq.n	800f112 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f001 fea2 	bl	8010e54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f110:	e016      	b.n	800f140 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d010      	beq.n	800f140 <HAL_UART_IRQHandler+0x730>
 800f11e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f122:	2b00      	cmp	r3, #0
 800f124:	da0c      	bge.n	800f140 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f001 fe8a 	bl	8010e40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f12c:	e008      	b.n	800f140 <HAL_UART_IRQHandler+0x730>
      return;
 800f12e:	bf00      	nop
 800f130:	e006      	b.n	800f140 <HAL_UART_IRQHandler+0x730>
    return;
 800f132:	bf00      	nop
 800f134:	e004      	b.n	800f140 <HAL_UART_IRQHandler+0x730>
      return;
 800f136:	bf00      	nop
 800f138:	e002      	b.n	800f140 <HAL_UART_IRQHandler+0x730>
      return;
 800f13a:	bf00      	nop
 800f13c:	e000      	b.n	800f140 <HAL_UART_IRQHandler+0x730>
    return;
 800f13e:	bf00      	nop
  }
}
 800f140:	37e8      	adds	r7, #232	; 0xe8
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	effffffe 	.word	0xeffffffe

0800f14c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f154:	bf00      	nop
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f168:	bf00      	nop
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	460b      	mov	r3, r1
 800f17e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f18c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f190:	b092      	sub	sp, #72	; 0x48
 800f192:	af00      	add	r7, sp, #0
 800f194:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f196:	2300      	movs	r3, #0
 800f198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	689a      	ldr	r2, [r3, #8]
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	691b      	ldr	r3, [r3, #16]
 800f1a4:	431a      	orrs	r2, r3
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	431a      	orrs	r2, r3
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	69db      	ldr	r3, [r3, #28]
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	4bbe      	ldr	r3, [pc, #760]	; (800f4b4 <UART_SetConfig+0x328>)
 800f1bc:	4013      	ands	r3, r2
 800f1be:	697a      	ldr	r2, [r7, #20]
 800f1c0:	6812      	ldr	r2, [r2, #0]
 800f1c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1c4:	430b      	orrs	r3, r1
 800f1c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	68da      	ldr	r2, [r3, #12]
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	430a      	orrs	r2, r1
 800f1dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	699b      	ldr	r3, [r3, #24]
 800f1e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4ab3      	ldr	r2, [pc, #716]	; (800f4b8 <UART_SetConfig+0x32c>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d004      	beq.n	800f1f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	6a1b      	ldr	r3, [r3, #32]
 800f1f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	689a      	ldr	r2, [r3, #8]
 800f1fe:	4baf      	ldr	r3, [pc, #700]	; (800f4bc <UART_SetConfig+0x330>)
 800f200:	4013      	ands	r3, r2
 800f202:	697a      	ldr	r2, [r7, #20]
 800f204:	6812      	ldr	r2, [r2, #0]
 800f206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f208:	430b      	orrs	r3, r1
 800f20a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f212:	f023 010f 	bic.w	r1, r3, #15
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	430a      	orrs	r2, r1
 800f220:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4aa6      	ldr	r2, [pc, #664]	; (800f4c0 <UART_SetConfig+0x334>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d177      	bne.n	800f31c <UART_SetConfig+0x190>
 800f22c:	4ba5      	ldr	r3, [pc, #660]	; (800f4c4 <UART_SetConfig+0x338>)
 800f22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f230:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f234:	2b28      	cmp	r3, #40	; 0x28
 800f236:	d86d      	bhi.n	800f314 <UART_SetConfig+0x188>
 800f238:	a201      	add	r2, pc, #4	; (adr r2, 800f240 <UART_SetConfig+0xb4>)
 800f23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f23e:	bf00      	nop
 800f240:	0800f2e5 	.word	0x0800f2e5
 800f244:	0800f315 	.word	0x0800f315
 800f248:	0800f315 	.word	0x0800f315
 800f24c:	0800f315 	.word	0x0800f315
 800f250:	0800f315 	.word	0x0800f315
 800f254:	0800f315 	.word	0x0800f315
 800f258:	0800f315 	.word	0x0800f315
 800f25c:	0800f315 	.word	0x0800f315
 800f260:	0800f2ed 	.word	0x0800f2ed
 800f264:	0800f315 	.word	0x0800f315
 800f268:	0800f315 	.word	0x0800f315
 800f26c:	0800f315 	.word	0x0800f315
 800f270:	0800f315 	.word	0x0800f315
 800f274:	0800f315 	.word	0x0800f315
 800f278:	0800f315 	.word	0x0800f315
 800f27c:	0800f315 	.word	0x0800f315
 800f280:	0800f2f5 	.word	0x0800f2f5
 800f284:	0800f315 	.word	0x0800f315
 800f288:	0800f315 	.word	0x0800f315
 800f28c:	0800f315 	.word	0x0800f315
 800f290:	0800f315 	.word	0x0800f315
 800f294:	0800f315 	.word	0x0800f315
 800f298:	0800f315 	.word	0x0800f315
 800f29c:	0800f315 	.word	0x0800f315
 800f2a0:	0800f2fd 	.word	0x0800f2fd
 800f2a4:	0800f315 	.word	0x0800f315
 800f2a8:	0800f315 	.word	0x0800f315
 800f2ac:	0800f315 	.word	0x0800f315
 800f2b0:	0800f315 	.word	0x0800f315
 800f2b4:	0800f315 	.word	0x0800f315
 800f2b8:	0800f315 	.word	0x0800f315
 800f2bc:	0800f315 	.word	0x0800f315
 800f2c0:	0800f305 	.word	0x0800f305
 800f2c4:	0800f315 	.word	0x0800f315
 800f2c8:	0800f315 	.word	0x0800f315
 800f2cc:	0800f315 	.word	0x0800f315
 800f2d0:	0800f315 	.word	0x0800f315
 800f2d4:	0800f315 	.word	0x0800f315
 800f2d8:	0800f315 	.word	0x0800f315
 800f2dc:	0800f315 	.word	0x0800f315
 800f2e0:	0800f30d 	.word	0x0800f30d
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ea:	e326      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f2ec:	2304      	movs	r3, #4
 800f2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2f2:	e322      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f2f4:	2308      	movs	r3, #8
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2fa:	e31e      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f2fc:	2310      	movs	r3, #16
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f302:	e31a      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f304:	2320      	movs	r3, #32
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f30a:	e316      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f30c:	2340      	movs	r3, #64	; 0x40
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f312:	e312      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f314:	2380      	movs	r3, #128	; 0x80
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f31a:	e30e      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4a69      	ldr	r2, [pc, #420]	; (800f4c8 <UART_SetConfig+0x33c>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d130      	bne.n	800f388 <UART_SetConfig+0x1fc>
 800f326:	4b67      	ldr	r3, [pc, #412]	; (800f4c4 <UART_SetConfig+0x338>)
 800f328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f32a:	f003 0307 	and.w	r3, r3, #7
 800f32e:	2b05      	cmp	r3, #5
 800f330:	d826      	bhi.n	800f380 <UART_SetConfig+0x1f4>
 800f332:	a201      	add	r2, pc, #4	; (adr r2, 800f338 <UART_SetConfig+0x1ac>)
 800f334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f338:	0800f351 	.word	0x0800f351
 800f33c:	0800f359 	.word	0x0800f359
 800f340:	0800f361 	.word	0x0800f361
 800f344:	0800f369 	.word	0x0800f369
 800f348:	0800f371 	.word	0x0800f371
 800f34c:	0800f379 	.word	0x0800f379
 800f350:	2300      	movs	r3, #0
 800f352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f356:	e2f0      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f358:	2304      	movs	r3, #4
 800f35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f35e:	e2ec      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f360:	2308      	movs	r3, #8
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f366:	e2e8      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f368:	2310      	movs	r3, #16
 800f36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f36e:	e2e4      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f370:	2320      	movs	r3, #32
 800f372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f376:	e2e0      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f378:	2340      	movs	r3, #64	; 0x40
 800f37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f37e:	e2dc      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f380:	2380      	movs	r3, #128	; 0x80
 800f382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f386:	e2d8      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4a4f      	ldr	r2, [pc, #316]	; (800f4cc <UART_SetConfig+0x340>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d130      	bne.n	800f3f4 <UART_SetConfig+0x268>
 800f392:	4b4c      	ldr	r3, [pc, #304]	; (800f4c4 <UART_SetConfig+0x338>)
 800f394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f396:	f003 0307 	and.w	r3, r3, #7
 800f39a:	2b05      	cmp	r3, #5
 800f39c:	d826      	bhi.n	800f3ec <UART_SetConfig+0x260>
 800f39e:	a201      	add	r2, pc, #4	; (adr r2, 800f3a4 <UART_SetConfig+0x218>)
 800f3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a4:	0800f3bd 	.word	0x0800f3bd
 800f3a8:	0800f3c5 	.word	0x0800f3c5
 800f3ac:	0800f3cd 	.word	0x0800f3cd
 800f3b0:	0800f3d5 	.word	0x0800f3d5
 800f3b4:	0800f3dd 	.word	0x0800f3dd
 800f3b8:	0800f3e5 	.word	0x0800f3e5
 800f3bc:	2300      	movs	r3, #0
 800f3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3c2:	e2ba      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f3c4:	2304      	movs	r3, #4
 800f3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ca:	e2b6      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f3cc:	2308      	movs	r3, #8
 800f3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3d2:	e2b2      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f3d4:	2310      	movs	r3, #16
 800f3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3da:	e2ae      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f3dc:	2320      	movs	r3, #32
 800f3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3e2:	e2aa      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f3e4:	2340      	movs	r3, #64	; 0x40
 800f3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ea:	e2a6      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f3ec:	2380      	movs	r3, #128	; 0x80
 800f3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3f2:	e2a2      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	4a35      	ldr	r2, [pc, #212]	; (800f4d0 <UART_SetConfig+0x344>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d130      	bne.n	800f460 <UART_SetConfig+0x2d4>
 800f3fe:	4b31      	ldr	r3, [pc, #196]	; (800f4c4 <UART_SetConfig+0x338>)
 800f400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f402:	f003 0307 	and.w	r3, r3, #7
 800f406:	2b05      	cmp	r3, #5
 800f408:	d826      	bhi.n	800f458 <UART_SetConfig+0x2cc>
 800f40a:	a201      	add	r2, pc, #4	; (adr r2, 800f410 <UART_SetConfig+0x284>)
 800f40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f410:	0800f429 	.word	0x0800f429
 800f414:	0800f431 	.word	0x0800f431
 800f418:	0800f439 	.word	0x0800f439
 800f41c:	0800f441 	.word	0x0800f441
 800f420:	0800f449 	.word	0x0800f449
 800f424:	0800f451 	.word	0x0800f451
 800f428:	2300      	movs	r3, #0
 800f42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f42e:	e284      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f430:	2304      	movs	r3, #4
 800f432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f436:	e280      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f438:	2308      	movs	r3, #8
 800f43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f43e:	e27c      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f440:	2310      	movs	r3, #16
 800f442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f446:	e278      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f448:	2320      	movs	r3, #32
 800f44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f44e:	e274      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f450:	2340      	movs	r3, #64	; 0x40
 800f452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f456:	e270      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f458:	2380      	movs	r3, #128	; 0x80
 800f45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f45e:	e26c      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4a1b      	ldr	r2, [pc, #108]	; (800f4d4 <UART_SetConfig+0x348>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d142      	bne.n	800f4f0 <UART_SetConfig+0x364>
 800f46a:	4b16      	ldr	r3, [pc, #88]	; (800f4c4 <UART_SetConfig+0x338>)
 800f46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f46e:	f003 0307 	and.w	r3, r3, #7
 800f472:	2b05      	cmp	r3, #5
 800f474:	d838      	bhi.n	800f4e8 <UART_SetConfig+0x35c>
 800f476:	a201      	add	r2, pc, #4	; (adr r2, 800f47c <UART_SetConfig+0x2f0>)
 800f478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f47c:	0800f495 	.word	0x0800f495
 800f480:	0800f49d 	.word	0x0800f49d
 800f484:	0800f4a5 	.word	0x0800f4a5
 800f488:	0800f4ad 	.word	0x0800f4ad
 800f48c:	0800f4d9 	.word	0x0800f4d9
 800f490:	0800f4e1 	.word	0x0800f4e1
 800f494:	2300      	movs	r3, #0
 800f496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f49a:	e24e      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f49c:	2304      	movs	r3, #4
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4a2:	e24a      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f4a4:	2308      	movs	r3, #8
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4aa:	e246      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f4ac:	2310      	movs	r3, #16
 800f4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4b2:	e242      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f4b4:	cfff69f3 	.word	0xcfff69f3
 800f4b8:	58000c00 	.word	0x58000c00
 800f4bc:	11fff4ff 	.word	0x11fff4ff
 800f4c0:	40011000 	.word	0x40011000
 800f4c4:	58024400 	.word	0x58024400
 800f4c8:	40004400 	.word	0x40004400
 800f4cc:	40004800 	.word	0x40004800
 800f4d0:	40004c00 	.word	0x40004c00
 800f4d4:	40005000 	.word	0x40005000
 800f4d8:	2320      	movs	r3, #32
 800f4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4de:	e22c      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f4e0:	2340      	movs	r3, #64	; 0x40
 800f4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4e6:	e228      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f4e8:	2380      	movs	r3, #128	; 0x80
 800f4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ee:	e224      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4ab1      	ldr	r2, [pc, #708]	; (800f7bc <UART_SetConfig+0x630>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d176      	bne.n	800f5e8 <UART_SetConfig+0x45c>
 800f4fa:	4bb1      	ldr	r3, [pc, #708]	; (800f7c0 <UART_SetConfig+0x634>)
 800f4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f502:	2b28      	cmp	r3, #40	; 0x28
 800f504:	d86c      	bhi.n	800f5e0 <UART_SetConfig+0x454>
 800f506:	a201      	add	r2, pc, #4	; (adr r2, 800f50c <UART_SetConfig+0x380>)
 800f508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f50c:	0800f5b1 	.word	0x0800f5b1
 800f510:	0800f5e1 	.word	0x0800f5e1
 800f514:	0800f5e1 	.word	0x0800f5e1
 800f518:	0800f5e1 	.word	0x0800f5e1
 800f51c:	0800f5e1 	.word	0x0800f5e1
 800f520:	0800f5e1 	.word	0x0800f5e1
 800f524:	0800f5e1 	.word	0x0800f5e1
 800f528:	0800f5e1 	.word	0x0800f5e1
 800f52c:	0800f5b9 	.word	0x0800f5b9
 800f530:	0800f5e1 	.word	0x0800f5e1
 800f534:	0800f5e1 	.word	0x0800f5e1
 800f538:	0800f5e1 	.word	0x0800f5e1
 800f53c:	0800f5e1 	.word	0x0800f5e1
 800f540:	0800f5e1 	.word	0x0800f5e1
 800f544:	0800f5e1 	.word	0x0800f5e1
 800f548:	0800f5e1 	.word	0x0800f5e1
 800f54c:	0800f5c1 	.word	0x0800f5c1
 800f550:	0800f5e1 	.word	0x0800f5e1
 800f554:	0800f5e1 	.word	0x0800f5e1
 800f558:	0800f5e1 	.word	0x0800f5e1
 800f55c:	0800f5e1 	.word	0x0800f5e1
 800f560:	0800f5e1 	.word	0x0800f5e1
 800f564:	0800f5e1 	.word	0x0800f5e1
 800f568:	0800f5e1 	.word	0x0800f5e1
 800f56c:	0800f5c9 	.word	0x0800f5c9
 800f570:	0800f5e1 	.word	0x0800f5e1
 800f574:	0800f5e1 	.word	0x0800f5e1
 800f578:	0800f5e1 	.word	0x0800f5e1
 800f57c:	0800f5e1 	.word	0x0800f5e1
 800f580:	0800f5e1 	.word	0x0800f5e1
 800f584:	0800f5e1 	.word	0x0800f5e1
 800f588:	0800f5e1 	.word	0x0800f5e1
 800f58c:	0800f5d1 	.word	0x0800f5d1
 800f590:	0800f5e1 	.word	0x0800f5e1
 800f594:	0800f5e1 	.word	0x0800f5e1
 800f598:	0800f5e1 	.word	0x0800f5e1
 800f59c:	0800f5e1 	.word	0x0800f5e1
 800f5a0:	0800f5e1 	.word	0x0800f5e1
 800f5a4:	0800f5e1 	.word	0x0800f5e1
 800f5a8:	0800f5e1 	.word	0x0800f5e1
 800f5ac:	0800f5d9 	.word	0x0800f5d9
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5b6:	e1c0      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f5b8:	2304      	movs	r3, #4
 800f5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5be:	e1bc      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f5c0:	2308      	movs	r3, #8
 800f5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5c6:	e1b8      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f5c8:	2310      	movs	r3, #16
 800f5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ce:	e1b4      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f5d0:	2320      	movs	r3, #32
 800f5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5d6:	e1b0      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f5d8:	2340      	movs	r3, #64	; 0x40
 800f5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5de:	e1ac      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f5e0:	2380      	movs	r3, #128	; 0x80
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e6:	e1a8      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4a75      	ldr	r2, [pc, #468]	; (800f7c4 <UART_SetConfig+0x638>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d130      	bne.n	800f654 <UART_SetConfig+0x4c8>
 800f5f2:	4b73      	ldr	r3, [pc, #460]	; (800f7c0 <UART_SetConfig+0x634>)
 800f5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5f6:	f003 0307 	and.w	r3, r3, #7
 800f5fa:	2b05      	cmp	r3, #5
 800f5fc:	d826      	bhi.n	800f64c <UART_SetConfig+0x4c0>
 800f5fe:	a201      	add	r2, pc, #4	; (adr r2, 800f604 <UART_SetConfig+0x478>)
 800f600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f604:	0800f61d 	.word	0x0800f61d
 800f608:	0800f625 	.word	0x0800f625
 800f60c:	0800f62d 	.word	0x0800f62d
 800f610:	0800f635 	.word	0x0800f635
 800f614:	0800f63d 	.word	0x0800f63d
 800f618:	0800f645 	.word	0x0800f645
 800f61c:	2300      	movs	r3, #0
 800f61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f622:	e18a      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f624:	2304      	movs	r3, #4
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62a:	e186      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f62c:	2308      	movs	r3, #8
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f632:	e182      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f634:	2310      	movs	r3, #16
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63a:	e17e      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f63c:	2320      	movs	r3, #32
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f642:	e17a      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f644:	2340      	movs	r3, #64	; 0x40
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64a:	e176      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f64c:	2380      	movs	r3, #128	; 0x80
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f652:	e172      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a5b      	ldr	r2, [pc, #364]	; (800f7c8 <UART_SetConfig+0x63c>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d130      	bne.n	800f6c0 <UART_SetConfig+0x534>
 800f65e:	4b58      	ldr	r3, [pc, #352]	; (800f7c0 <UART_SetConfig+0x634>)
 800f660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f662:	f003 0307 	and.w	r3, r3, #7
 800f666:	2b05      	cmp	r3, #5
 800f668:	d826      	bhi.n	800f6b8 <UART_SetConfig+0x52c>
 800f66a:	a201      	add	r2, pc, #4	; (adr r2, 800f670 <UART_SetConfig+0x4e4>)
 800f66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f670:	0800f689 	.word	0x0800f689
 800f674:	0800f691 	.word	0x0800f691
 800f678:	0800f699 	.word	0x0800f699
 800f67c:	0800f6a1 	.word	0x0800f6a1
 800f680:	0800f6a9 	.word	0x0800f6a9
 800f684:	0800f6b1 	.word	0x0800f6b1
 800f688:	2300      	movs	r3, #0
 800f68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f68e:	e154      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f690:	2304      	movs	r3, #4
 800f692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f696:	e150      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f698:	2308      	movs	r3, #8
 800f69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f69e:	e14c      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f6a0:	2310      	movs	r3, #16
 800f6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6a6:	e148      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f6a8:	2320      	movs	r3, #32
 800f6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ae:	e144      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f6b0:	2340      	movs	r3, #64	; 0x40
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6b6:	e140      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f6b8:	2380      	movs	r3, #128	; 0x80
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6be:	e13c      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a41      	ldr	r2, [pc, #260]	; (800f7cc <UART_SetConfig+0x640>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	f040 8082 	bne.w	800f7d0 <UART_SetConfig+0x644>
 800f6cc:	4b3c      	ldr	r3, [pc, #240]	; (800f7c0 <UART_SetConfig+0x634>)
 800f6ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f6d4:	2b28      	cmp	r3, #40	; 0x28
 800f6d6:	d86d      	bhi.n	800f7b4 <UART_SetConfig+0x628>
 800f6d8:	a201      	add	r2, pc, #4	; (adr r2, 800f6e0 <UART_SetConfig+0x554>)
 800f6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6de:	bf00      	nop
 800f6e0:	0800f785 	.word	0x0800f785
 800f6e4:	0800f7b5 	.word	0x0800f7b5
 800f6e8:	0800f7b5 	.word	0x0800f7b5
 800f6ec:	0800f7b5 	.word	0x0800f7b5
 800f6f0:	0800f7b5 	.word	0x0800f7b5
 800f6f4:	0800f7b5 	.word	0x0800f7b5
 800f6f8:	0800f7b5 	.word	0x0800f7b5
 800f6fc:	0800f7b5 	.word	0x0800f7b5
 800f700:	0800f78d 	.word	0x0800f78d
 800f704:	0800f7b5 	.word	0x0800f7b5
 800f708:	0800f7b5 	.word	0x0800f7b5
 800f70c:	0800f7b5 	.word	0x0800f7b5
 800f710:	0800f7b5 	.word	0x0800f7b5
 800f714:	0800f7b5 	.word	0x0800f7b5
 800f718:	0800f7b5 	.word	0x0800f7b5
 800f71c:	0800f7b5 	.word	0x0800f7b5
 800f720:	0800f795 	.word	0x0800f795
 800f724:	0800f7b5 	.word	0x0800f7b5
 800f728:	0800f7b5 	.word	0x0800f7b5
 800f72c:	0800f7b5 	.word	0x0800f7b5
 800f730:	0800f7b5 	.word	0x0800f7b5
 800f734:	0800f7b5 	.word	0x0800f7b5
 800f738:	0800f7b5 	.word	0x0800f7b5
 800f73c:	0800f7b5 	.word	0x0800f7b5
 800f740:	0800f79d 	.word	0x0800f79d
 800f744:	0800f7b5 	.word	0x0800f7b5
 800f748:	0800f7b5 	.word	0x0800f7b5
 800f74c:	0800f7b5 	.word	0x0800f7b5
 800f750:	0800f7b5 	.word	0x0800f7b5
 800f754:	0800f7b5 	.word	0x0800f7b5
 800f758:	0800f7b5 	.word	0x0800f7b5
 800f75c:	0800f7b5 	.word	0x0800f7b5
 800f760:	0800f7a5 	.word	0x0800f7a5
 800f764:	0800f7b5 	.word	0x0800f7b5
 800f768:	0800f7b5 	.word	0x0800f7b5
 800f76c:	0800f7b5 	.word	0x0800f7b5
 800f770:	0800f7b5 	.word	0x0800f7b5
 800f774:	0800f7b5 	.word	0x0800f7b5
 800f778:	0800f7b5 	.word	0x0800f7b5
 800f77c:	0800f7b5 	.word	0x0800f7b5
 800f780:	0800f7ad 	.word	0x0800f7ad
 800f784:	2301      	movs	r3, #1
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f78a:	e0d6      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f78c:	2304      	movs	r3, #4
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f792:	e0d2      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f794:	2308      	movs	r3, #8
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79a:	e0ce      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f79c:	2310      	movs	r3, #16
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7a2:	e0ca      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f7a4:	2320      	movs	r3, #32
 800f7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7aa:	e0c6      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f7ac:	2340      	movs	r3, #64	; 0x40
 800f7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7b2:	e0c2      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f7b4:	2380      	movs	r3, #128	; 0x80
 800f7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ba:	e0be      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f7bc:	40011400 	.word	0x40011400
 800f7c0:	58024400 	.word	0x58024400
 800f7c4:	40007800 	.word	0x40007800
 800f7c8:	40007c00 	.word	0x40007c00
 800f7cc:	40011800 	.word	0x40011800
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4aad      	ldr	r2, [pc, #692]	; (800fa8c <UART_SetConfig+0x900>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d176      	bne.n	800f8c8 <UART_SetConfig+0x73c>
 800f7da:	4bad      	ldr	r3, [pc, #692]	; (800fa90 <UART_SetConfig+0x904>)
 800f7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7e2:	2b28      	cmp	r3, #40	; 0x28
 800f7e4:	d86c      	bhi.n	800f8c0 <UART_SetConfig+0x734>
 800f7e6:	a201      	add	r2, pc, #4	; (adr r2, 800f7ec <UART_SetConfig+0x660>)
 800f7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ec:	0800f891 	.word	0x0800f891
 800f7f0:	0800f8c1 	.word	0x0800f8c1
 800f7f4:	0800f8c1 	.word	0x0800f8c1
 800f7f8:	0800f8c1 	.word	0x0800f8c1
 800f7fc:	0800f8c1 	.word	0x0800f8c1
 800f800:	0800f8c1 	.word	0x0800f8c1
 800f804:	0800f8c1 	.word	0x0800f8c1
 800f808:	0800f8c1 	.word	0x0800f8c1
 800f80c:	0800f899 	.word	0x0800f899
 800f810:	0800f8c1 	.word	0x0800f8c1
 800f814:	0800f8c1 	.word	0x0800f8c1
 800f818:	0800f8c1 	.word	0x0800f8c1
 800f81c:	0800f8c1 	.word	0x0800f8c1
 800f820:	0800f8c1 	.word	0x0800f8c1
 800f824:	0800f8c1 	.word	0x0800f8c1
 800f828:	0800f8c1 	.word	0x0800f8c1
 800f82c:	0800f8a1 	.word	0x0800f8a1
 800f830:	0800f8c1 	.word	0x0800f8c1
 800f834:	0800f8c1 	.word	0x0800f8c1
 800f838:	0800f8c1 	.word	0x0800f8c1
 800f83c:	0800f8c1 	.word	0x0800f8c1
 800f840:	0800f8c1 	.word	0x0800f8c1
 800f844:	0800f8c1 	.word	0x0800f8c1
 800f848:	0800f8c1 	.word	0x0800f8c1
 800f84c:	0800f8a9 	.word	0x0800f8a9
 800f850:	0800f8c1 	.word	0x0800f8c1
 800f854:	0800f8c1 	.word	0x0800f8c1
 800f858:	0800f8c1 	.word	0x0800f8c1
 800f85c:	0800f8c1 	.word	0x0800f8c1
 800f860:	0800f8c1 	.word	0x0800f8c1
 800f864:	0800f8c1 	.word	0x0800f8c1
 800f868:	0800f8c1 	.word	0x0800f8c1
 800f86c:	0800f8b1 	.word	0x0800f8b1
 800f870:	0800f8c1 	.word	0x0800f8c1
 800f874:	0800f8c1 	.word	0x0800f8c1
 800f878:	0800f8c1 	.word	0x0800f8c1
 800f87c:	0800f8c1 	.word	0x0800f8c1
 800f880:	0800f8c1 	.word	0x0800f8c1
 800f884:	0800f8c1 	.word	0x0800f8c1
 800f888:	0800f8c1 	.word	0x0800f8c1
 800f88c:	0800f8b9 	.word	0x0800f8b9
 800f890:	2301      	movs	r3, #1
 800f892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f896:	e050      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f898:	2304      	movs	r3, #4
 800f89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89e:	e04c      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f8a0:	2308      	movs	r3, #8
 800f8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8a6:	e048      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f8a8:	2310      	movs	r3, #16
 800f8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ae:	e044      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f8b0:	2320      	movs	r3, #32
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b6:	e040      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f8b8:	2340      	movs	r3, #64	; 0x40
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8be:	e03c      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f8c0:	2380      	movs	r3, #128	; 0x80
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8c6:	e038      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a71      	ldr	r2, [pc, #452]	; (800fa94 <UART_SetConfig+0x908>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d130      	bne.n	800f934 <UART_SetConfig+0x7a8>
 800f8d2:	4b6f      	ldr	r3, [pc, #444]	; (800fa90 <UART_SetConfig+0x904>)
 800f8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8d6:	f003 0307 	and.w	r3, r3, #7
 800f8da:	2b05      	cmp	r3, #5
 800f8dc:	d826      	bhi.n	800f92c <UART_SetConfig+0x7a0>
 800f8de:	a201      	add	r2, pc, #4	; (adr r2, 800f8e4 <UART_SetConfig+0x758>)
 800f8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e4:	0800f8fd 	.word	0x0800f8fd
 800f8e8:	0800f905 	.word	0x0800f905
 800f8ec:	0800f90d 	.word	0x0800f90d
 800f8f0:	0800f915 	.word	0x0800f915
 800f8f4:	0800f91d 	.word	0x0800f91d
 800f8f8:	0800f925 	.word	0x0800f925
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f902:	e01a      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f904:	2304      	movs	r3, #4
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90a:	e016      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f90c:	2308      	movs	r3, #8
 800f90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f912:	e012      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f914:	2310      	movs	r3, #16
 800f916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91a:	e00e      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f91c:	2320      	movs	r3, #32
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f922:	e00a      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f924:	2340      	movs	r3, #64	; 0x40
 800f926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92a:	e006      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f92c:	2380      	movs	r3, #128	; 0x80
 800f92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f932:	e002      	b.n	800f93a <UART_SetConfig+0x7ae>
 800f934:	2380      	movs	r3, #128	; 0x80
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	4a55      	ldr	r2, [pc, #340]	; (800fa94 <UART_SetConfig+0x908>)
 800f940:	4293      	cmp	r3, r2
 800f942:	f040 80f8 	bne.w	800fb36 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f946:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f94a:	2b20      	cmp	r3, #32
 800f94c:	dc46      	bgt.n	800f9dc <UART_SetConfig+0x850>
 800f94e:	2b02      	cmp	r3, #2
 800f950:	db75      	blt.n	800fa3e <UART_SetConfig+0x8b2>
 800f952:	3b02      	subs	r3, #2
 800f954:	2b1e      	cmp	r3, #30
 800f956:	d872      	bhi.n	800fa3e <UART_SetConfig+0x8b2>
 800f958:	a201      	add	r2, pc, #4	; (adr r2, 800f960 <UART_SetConfig+0x7d4>)
 800f95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f95e:	bf00      	nop
 800f960:	0800f9e3 	.word	0x0800f9e3
 800f964:	0800fa3f 	.word	0x0800fa3f
 800f968:	0800f9eb 	.word	0x0800f9eb
 800f96c:	0800fa3f 	.word	0x0800fa3f
 800f970:	0800fa3f 	.word	0x0800fa3f
 800f974:	0800fa3f 	.word	0x0800fa3f
 800f978:	0800f9fb 	.word	0x0800f9fb
 800f97c:	0800fa3f 	.word	0x0800fa3f
 800f980:	0800fa3f 	.word	0x0800fa3f
 800f984:	0800fa3f 	.word	0x0800fa3f
 800f988:	0800fa3f 	.word	0x0800fa3f
 800f98c:	0800fa3f 	.word	0x0800fa3f
 800f990:	0800fa3f 	.word	0x0800fa3f
 800f994:	0800fa3f 	.word	0x0800fa3f
 800f998:	0800fa0b 	.word	0x0800fa0b
 800f99c:	0800fa3f 	.word	0x0800fa3f
 800f9a0:	0800fa3f 	.word	0x0800fa3f
 800f9a4:	0800fa3f 	.word	0x0800fa3f
 800f9a8:	0800fa3f 	.word	0x0800fa3f
 800f9ac:	0800fa3f 	.word	0x0800fa3f
 800f9b0:	0800fa3f 	.word	0x0800fa3f
 800f9b4:	0800fa3f 	.word	0x0800fa3f
 800f9b8:	0800fa3f 	.word	0x0800fa3f
 800f9bc:	0800fa3f 	.word	0x0800fa3f
 800f9c0:	0800fa3f 	.word	0x0800fa3f
 800f9c4:	0800fa3f 	.word	0x0800fa3f
 800f9c8:	0800fa3f 	.word	0x0800fa3f
 800f9cc:	0800fa3f 	.word	0x0800fa3f
 800f9d0:	0800fa3f 	.word	0x0800fa3f
 800f9d4:	0800fa3f 	.word	0x0800fa3f
 800f9d8:	0800fa31 	.word	0x0800fa31
 800f9dc:	2b40      	cmp	r3, #64	; 0x40
 800f9de:	d02a      	beq.n	800fa36 <UART_SetConfig+0x8aa>
 800f9e0:	e02d      	b.n	800fa3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f9e2:	f7f9 fee7 	bl	80097b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f9e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9e8:	e02f      	b.n	800fa4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7f9 fef6 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9f8:	e027      	b.n	800fa4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9fa:	f107 0318 	add.w	r3, r7, #24
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fa f842 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa08:	e01f      	b.n	800fa4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa0a:	4b21      	ldr	r3, [pc, #132]	; (800fa90 <UART_SetConfig+0x904>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f003 0320 	and.w	r3, r3, #32
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d009      	beq.n	800fa2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa16:	4b1e      	ldr	r3, [pc, #120]	; (800fa90 <UART_SetConfig+0x904>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	08db      	lsrs	r3, r3, #3
 800fa1c:	f003 0303 	and.w	r3, r3, #3
 800fa20:	4a1d      	ldr	r2, [pc, #116]	; (800fa98 <UART_SetConfig+0x90c>)
 800fa22:	fa22 f303 	lsr.w	r3, r2, r3
 800fa26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa28:	e00f      	b.n	800fa4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fa2a:	4b1b      	ldr	r3, [pc, #108]	; (800fa98 <UART_SetConfig+0x90c>)
 800fa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa2e:	e00c      	b.n	800fa4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa30:	4b1a      	ldr	r3, [pc, #104]	; (800fa9c <UART_SetConfig+0x910>)
 800fa32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa34:	e009      	b.n	800fa4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa3c:	e005      	b.n	800fa4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fa42:	2301      	movs	r3, #1
 800fa44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fa48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fa4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f000 81ee 	beq.w	800fe2e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa56:	4a12      	ldr	r2, [pc, #72]	; (800faa0 <UART_SetConfig+0x914>)
 800fa58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa60:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa64:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	005b      	lsls	r3, r3, #1
 800fa6e:	4413      	add	r3, r2
 800fa70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d305      	bcc.n	800fa82 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d910      	bls.n	800faa4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fa82:	2301      	movs	r3, #1
 800fa84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fa88:	e1d1      	b.n	800fe2e <UART_SetConfig+0xca2>
 800fa8a:	bf00      	nop
 800fa8c:	40011c00 	.word	0x40011c00
 800fa90:	58024400 	.word	0x58024400
 800fa94:	58000c00 	.word	0x58000c00
 800fa98:	03d09000 	.word	0x03d09000
 800fa9c:	003d0900 	.word	0x003d0900
 800faa0:	08017d10 	.word	0x08017d10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800faa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faa6:	2200      	movs	r2, #0
 800faa8:	60bb      	str	r3, [r7, #8]
 800faaa:	60fa      	str	r2, [r7, #12]
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab0:	4ac0      	ldr	r2, [pc, #768]	; (800fdb4 <UART_SetConfig+0xc28>)
 800fab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	2200      	movs	r2, #0
 800faba:	603b      	str	r3, [r7, #0]
 800fabc:	607a      	str	r2, [r7, #4]
 800fabe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fac2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fac6:	f7f0 fe37 	bl	8000738 <__aeabi_uldivmod>
 800faca:	4602      	mov	r2, r0
 800facc:	460b      	mov	r3, r1
 800face:	4610      	mov	r0, r2
 800fad0:	4619      	mov	r1, r3
 800fad2:	f04f 0200 	mov.w	r2, #0
 800fad6:	f04f 0300 	mov.w	r3, #0
 800fada:	020b      	lsls	r3, r1, #8
 800fadc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fae0:	0202      	lsls	r2, r0, #8
 800fae2:	6979      	ldr	r1, [r7, #20]
 800fae4:	6849      	ldr	r1, [r1, #4]
 800fae6:	0849      	lsrs	r1, r1, #1
 800fae8:	2000      	movs	r0, #0
 800faea:	460c      	mov	r4, r1
 800faec:	4605      	mov	r5, r0
 800faee:	eb12 0804 	adds.w	r8, r2, r4
 800faf2:	eb43 0905 	adc.w	r9, r3, r5
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	469a      	mov	sl, r3
 800fafe:	4693      	mov	fp, r2
 800fb00:	4652      	mov	r2, sl
 800fb02:	465b      	mov	r3, fp
 800fb04:	4640      	mov	r0, r8
 800fb06:	4649      	mov	r1, r9
 800fb08:	f7f0 fe16 	bl	8000738 <__aeabi_uldivmod>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	4613      	mov	r3, r2
 800fb12:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb1a:	d308      	bcc.n	800fb2e <UART_SetConfig+0x9a2>
 800fb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb22:	d204      	bcs.n	800fb2e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb2a:	60da      	str	r2, [r3, #12]
 800fb2c:	e17f      	b.n	800fe2e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fb34:	e17b      	b.n	800fe2e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	69db      	ldr	r3, [r3, #28]
 800fb3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb3e:	f040 80bd 	bne.w	800fcbc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fb42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb46:	2b20      	cmp	r3, #32
 800fb48:	dc48      	bgt.n	800fbdc <UART_SetConfig+0xa50>
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	db7b      	blt.n	800fc46 <UART_SetConfig+0xaba>
 800fb4e:	2b20      	cmp	r3, #32
 800fb50:	d879      	bhi.n	800fc46 <UART_SetConfig+0xaba>
 800fb52:	a201      	add	r2, pc, #4	; (adr r2, 800fb58 <UART_SetConfig+0x9cc>)
 800fb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb58:	0800fbe3 	.word	0x0800fbe3
 800fb5c:	0800fbeb 	.word	0x0800fbeb
 800fb60:	0800fc47 	.word	0x0800fc47
 800fb64:	0800fc47 	.word	0x0800fc47
 800fb68:	0800fbf3 	.word	0x0800fbf3
 800fb6c:	0800fc47 	.word	0x0800fc47
 800fb70:	0800fc47 	.word	0x0800fc47
 800fb74:	0800fc47 	.word	0x0800fc47
 800fb78:	0800fc03 	.word	0x0800fc03
 800fb7c:	0800fc47 	.word	0x0800fc47
 800fb80:	0800fc47 	.word	0x0800fc47
 800fb84:	0800fc47 	.word	0x0800fc47
 800fb88:	0800fc47 	.word	0x0800fc47
 800fb8c:	0800fc47 	.word	0x0800fc47
 800fb90:	0800fc47 	.word	0x0800fc47
 800fb94:	0800fc47 	.word	0x0800fc47
 800fb98:	0800fc13 	.word	0x0800fc13
 800fb9c:	0800fc47 	.word	0x0800fc47
 800fba0:	0800fc47 	.word	0x0800fc47
 800fba4:	0800fc47 	.word	0x0800fc47
 800fba8:	0800fc47 	.word	0x0800fc47
 800fbac:	0800fc47 	.word	0x0800fc47
 800fbb0:	0800fc47 	.word	0x0800fc47
 800fbb4:	0800fc47 	.word	0x0800fc47
 800fbb8:	0800fc47 	.word	0x0800fc47
 800fbbc:	0800fc47 	.word	0x0800fc47
 800fbc0:	0800fc47 	.word	0x0800fc47
 800fbc4:	0800fc47 	.word	0x0800fc47
 800fbc8:	0800fc47 	.word	0x0800fc47
 800fbcc:	0800fc47 	.word	0x0800fc47
 800fbd0:	0800fc47 	.word	0x0800fc47
 800fbd4:	0800fc47 	.word	0x0800fc47
 800fbd8:	0800fc39 	.word	0x0800fc39
 800fbdc:	2b40      	cmp	r3, #64	; 0x40
 800fbde:	d02e      	beq.n	800fc3e <UART_SetConfig+0xab2>
 800fbe0:	e031      	b.n	800fc46 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbe2:	f7f8 fa81 	bl	80080e8 <HAL_RCC_GetPCLK1Freq>
 800fbe6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fbe8:	e033      	b.n	800fc52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fbea:	f7f8 fa93 	bl	8008114 <HAL_RCC_GetPCLK2Freq>
 800fbee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fbf0:	e02f      	b.n	800fc52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7f9 fdf2 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc00:	e027      	b.n	800fc52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc02:	f107 0318 	add.w	r3, r7, #24
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7f9 ff3e 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc10:	e01f      	b.n	800fc52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc12:	4b69      	ldr	r3, [pc, #420]	; (800fdb8 <UART_SetConfig+0xc2c>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f003 0320 	and.w	r3, r3, #32
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d009      	beq.n	800fc32 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc1e:	4b66      	ldr	r3, [pc, #408]	; (800fdb8 <UART_SetConfig+0xc2c>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	08db      	lsrs	r3, r3, #3
 800fc24:	f003 0303 	and.w	r3, r3, #3
 800fc28:	4a64      	ldr	r2, [pc, #400]	; (800fdbc <UART_SetConfig+0xc30>)
 800fc2a:	fa22 f303 	lsr.w	r3, r2, r3
 800fc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc30:	e00f      	b.n	800fc52 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fc32:	4b62      	ldr	r3, [pc, #392]	; (800fdbc <UART_SetConfig+0xc30>)
 800fc34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc36:	e00c      	b.n	800fc52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc38:	4b61      	ldr	r3, [pc, #388]	; (800fdc0 <UART_SetConfig+0xc34>)
 800fc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc3c:	e009      	b.n	800fc52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc44:	e005      	b.n	800fc52 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fc46:	2300      	movs	r3, #0
 800fc48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fc50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	f000 80ea 	beq.w	800fe2e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5e:	4a55      	ldr	r2, [pc, #340]	; (800fdb4 <UART_SetConfig+0xc28>)
 800fc60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc64:	461a      	mov	r2, r3
 800fc66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc68:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc6c:	005a      	lsls	r2, r3, #1
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	085b      	lsrs	r3, r3, #1
 800fc74:	441a      	add	r2, r3
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc82:	2b0f      	cmp	r3, #15
 800fc84:	d916      	bls.n	800fcb4 <UART_SetConfig+0xb28>
 800fc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc8c:	d212      	bcs.n	800fcb4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	f023 030f 	bic.w	r3, r3, #15
 800fc96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	085b      	lsrs	r3, r3, #1
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	f003 0307 	and.w	r3, r3, #7
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fca6:	4313      	orrs	r3, r2
 800fca8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fcb0:	60da      	str	r2, [r3, #12]
 800fcb2:	e0bc      	b.n	800fe2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fcba:	e0b8      	b.n	800fe2e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fcbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fcc0:	2b20      	cmp	r3, #32
 800fcc2:	dc4b      	bgt.n	800fd5c <UART_SetConfig+0xbd0>
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f2c0 8087 	blt.w	800fdd8 <UART_SetConfig+0xc4c>
 800fcca:	2b20      	cmp	r3, #32
 800fccc:	f200 8084 	bhi.w	800fdd8 <UART_SetConfig+0xc4c>
 800fcd0:	a201      	add	r2, pc, #4	; (adr r2, 800fcd8 <UART_SetConfig+0xb4c>)
 800fcd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd6:	bf00      	nop
 800fcd8:	0800fd63 	.word	0x0800fd63
 800fcdc:	0800fd6b 	.word	0x0800fd6b
 800fce0:	0800fdd9 	.word	0x0800fdd9
 800fce4:	0800fdd9 	.word	0x0800fdd9
 800fce8:	0800fd73 	.word	0x0800fd73
 800fcec:	0800fdd9 	.word	0x0800fdd9
 800fcf0:	0800fdd9 	.word	0x0800fdd9
 800fcf4:	0800fdd9 	.word	0x0800fdd9
 800fcf8:	0800fd83 	.word	0x0800fd83
 800fcfc:	0800fdd9 	.word	0x0800fdd9
 800fd00:	0800fdd9 	.word	0x0800fdd9
 800fd04:	0800fdd9 	.word	0x0800fdd9
 800fd08:	0800fdd9 	.word	0x0800fdd9
 800fd0c:	0800fdd9 	.word	0x0800fdd9
 800fd10:	0800fdd9 	.word	0x0800fdd9
 800fd14:	0800fdd9 	.word	0x0800fdd9
 800fd18:	0800fd93 	.word	0x0800fd93
 800fd1c:	0800fdd9 	.word	0x0800fdd9
 800fd20:	0800fdd9 	.word	0x0800fdd9
 800fd24:	0800fdd9 	.word	0x0800fdd9
 800fd28:	0800fdd9 	.word	0x0800fdd9
 800fd2c:	0800fdd9 	.word	0x0800fdd9
 800fd30:	0800fdd9 	.word	0x0800fdd9
 800fd34:	0800fdd9 	.word	0x0800fdd9
 800fd38:	0800fdd9 	.word	0x0800fdd9
 800fd3c:	0800fdd9 	.word	0x0800fdd9
 800fd40:	0800fdd9 	.word	0x0800fdd9
 800fd44:	0800fdd9 	.word	0x0800fdd9
 800fd48:	0800fdd9 	.word	0x0800fdd9
 800fd4c:	0800fdd9 	.word	0x0800fdd9
 800fd50:	0800fdd9 	.word	0x0800fdd9
 800fd54:	0800fdd9 	.word	0x0800fdd9
 800fd58:	0800fdcb 	.word	0x0800fdcb
 800fd5c:	2b40      	cmp	r3, #64	; 0x40
 800fd5e:	d037      	beq.n	800fdd0 <UART_SetConfig+0xc44>
 800fd60:	e03a      	b.n	800fdd8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd62:	f7f8 f9c1 	bl	80080e8 <HAL_RCC_GetPCLK1Freq>
 800fd66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd68:	e03c      	b.n	800fde4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd6a:	f7f8 f9d3 	bl	8008114 <HAL_RCC_GetPCLK2Freq>
 800fd6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd70:	e038      	b.n	800fde4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7f9 fd32 	bl	80097e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd80:	e030      	b.n	800fde4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd82:	f107 0318 	add.w	r3, r7, #24
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7f9 fe7e 	bl	8009a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd90:	e028      	b.n	800fde4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd92:	4b09      	ldr	r3, [pc, #36]	; (800fdb8 <UART_SetConfig+0xc2c>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f003 0320 	and.w	r3, r3, #32
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d012      	beq.n	800fdc4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd9e:	4b06      	ldr	r3, [pc, #24]	; (800fdb8 <UART_SetConfig+0xc2c>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	08db      	lsrs	r3, r3, #3
 800fda4:	f003 0303 	and.w	r3, r3, #3
 800fda8:	4a04      	ldr	r2, [pc, #16]	; (800fdbc <UART_SetConfig+0xc30>)
 800fdaa:	fa22 f303 	lsr.w	r3, r2, r3
 800fdae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fdb0:	e018      	b.n	800fde4 <UART_SetConfig+0xc58>
 800fdb2:	bf00      	nop
 800fdb4:	08017d10 	.word	0x08017d10
 800fdb8:	58024400 	.word	0x58024400
 800fdbc:	03d09000 	.word	0x03d09000
 800fdc0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fdc4:	4b24      	ldr	r3, [pc, #144]	; (800fe58 <UART_SetConfig+0xccc>)
 800fdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdc8:	e00c      	b.n	800fde4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fdca:	4b24      	ldr	r3, [pc, #144]	; (800fe5c <UART_SetConfig+0xcd0>)
 800fdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdce:	e009      	b.n	800fde4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fdd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdd6:	e005      	b.n	800fde4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fddc:	2301      	movs	r3, #1
 800fdde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fde2:	bf00      	nop
    }

    if (pclk != 0U)
 800fde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d021      	beq.n	800fe2e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdee:	4a1c      	ldr	r2, [pc, #112]	; (800fe60 <UART_SetConfig+0xcd4>)
 800fdf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdf8:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	085b      	lsrs	r3, r3, #1
 800fe02:	441a      	add	r2, r3
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe0c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe10:	2b0f      	cmp	r3, #15
 800fe12:	d909      	bls.n	800fe28 <UART_SetConfig+0xc9c>
 800fe14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe1a:	d205      	bcs.n	800fe28 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1e:	b29a      	uxth	r2, r3
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	60da      	str	r2, [r3, #12]
 800fe26:	e002      	b.n	800fe2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	2201      	movs	r2, #1
 800fe32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	2201      	movs	r2, #1
 800fe3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	2200      	movs	r2, #0
 800fe42:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	2200      	movs	r2, #0
 800fe48:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fe4a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3748      	adds	r7, #72	; 0x48
 800fe52:	46bd      	mov	sp, r7
 800fe54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe58:	03d09000 	.word	0x03d09000
 800fe5c:	003d0900 	.word	0x003d0900
 800fe60:	08017d10 	.word	0x08017d10

0800fe64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe70:	f003 0301 	and.w	r3, r3, #1
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00a      	beq.n	800fe8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	430a      	orrs	r2, r1
 800fe8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe92:	f003 0302 	and.w	r3, r3, #2
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00a      	beq.n	800feb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	430a      	orrs	r2, r1
 800feae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feb4:	f003 0304 	and.w	r3, r3, #4
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d00a      	beq.n	800fed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	430a      	orrs	r2, r1
 800fed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed6:	f003 0308 	and.w	r3, r3, #8
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d00a      	beq.n	800fef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	430a      	orrs	r2, r1
 800fef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fef8:	f003 0310 	and.w	r3, r3, #16
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d00a      	beq.n	800ff16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	430a      	orrs	r2, r1
 800ff14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff1a:	f003 0320 	and.w	r3, r3, #32
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00a      	beq.n	800ff38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	689b      	ldr	r3, [r3, #8]
 800ff28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	430a      	orrs	r2, r1
 800ff36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d01a      	beq.n	800ff7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	430a      	orrs	r2, r1
 800ff58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff62:	d10a      	bne.n	800ff7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	430a      	orrs	r2, r1
 800ff78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00a      	beq.n	800ff9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	430a      	orrs	r2, r1
 800ff9a:	605a      	str	r2, [r3, #4]
  }
}
 800ff9c:	bf00      	nop
 800ff9e:	370c      	adds	r7, #12
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr

0800ffa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b086      	sub	sp, #24
 800ffac:	af02      	add	r7, sp, #8
 800ffae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ffb8:	f7f3 fe9a 	bl	8003cf0 <HAL_GetTick>
 800ffbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f003 0308 	and.w	r3, r3, #8
 800ffc8:	2b08      	cmp	r3, #8
 800ffca:	d10e      	bne.n	800ffea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffd0:	9300      	str	r3, [sp, #0]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f000 f82f 	bl	801003e <UART_WaitOnFlagUntilTimeout>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d001      	beq.n	800ffea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffe6:	2303      	movs	r3, #3
 800ffe8:	e025      	b.n	8010036 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f003 0304 	and.w	r3, r3, #4
 800fff4:	2b04      	cmp	r3, #4
 800fff6:	d10e      	bne.n	8010016 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fff8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fffc:	9300      	str	r3, [sp, #0]
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2200      	movs	r2, #0
 8010002:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 f819 	bl	801003e <UART_WaitOnFlagUntilTimeout>
 801000c:	4603      	mov	r3, r0
 801000e:	2b00      	cmp	r3, #0
 8010010:	d001      	beq.n	8010016 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010012:	2303      	movs	r3, #3
 8010014:	e00f      	b.n	8010036 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2220      	movs	r2, #32
 801001a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2220      	movs	r2, #32
 8010022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b09c      	sub	sp, #112	; 0x70
 8010042:	af00      	add	r7, sp, #0
 8010044:	60f8      	str	r0, [r7, #12]
 8010046:	60b9      	str	r1, [r7, #8]
 8010048:	603b      	str	r3, [r7, #0]
 801004a:	4613      	mov	r3, r2
 801004c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801004e:	e0a9      	b.n	80101a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010056:	f000 80a5 	beq.w	80101a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801005a:	f7f3 fe49 	bl	8003cf0 <HAL_GetTick>
 801005e:	4602      	mov	r2, r0
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010066:	429a      	cmp	r2, r3
 8010068:	d302      	bcc.n	8010070 <UART_WaitOnFlagUntilTimeout+0x32>
 801006a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801006c:	2b00      	cmp	r3, #0
 801006e:	d140      	bne.n	80100f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010078:	e853 3f00 	ldrex	r3, [r3]
 801007c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801007e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010084:	667b      	str	r3, [r7, #100]	; 0x64
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	461a      	mov	r2, r3
 801008c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801008e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010090:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010092:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010094:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010096:	e841 2300 	strex	r3, r2, [r1]
 801009a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801009c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1e6      	bne.n	8010070 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	3308      	adds	r3, #8
 80100a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ac:	e853 3f00 	ldrex	r3, [r3]
 80100b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80100b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b4:	f023 0301 	bic.w	r3, r3, #1
 80100b8:	663b      	str	r3, [r7, #96]	; 0x60
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	3308      	adds	r3, #8
 80100c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80100c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80100c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80100c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100ca:	e841 2300 	strex	r3, r2, [r1]
 80100ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80100d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d1e5      	bne.n	80100a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2220      	movs	r2, #32
 80100da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2220      	movs	r2, #32
 80100e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2200      	movs	r2, #0
 80100ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80100ee:	2303      	movs	r3, #3
 80100f0:	e069      	b.n	80101c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f003 0304 	and.w	r3, r3, #4
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d051      	beq.n	80101a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	69db      	ldr	r3, [r3, #28]
 8010106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801010a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801010e:	d149      	bne.n	80101a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010118:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010122:	e853 3f00 	ldrex	r3, [r3]
 8010126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801012e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	461a      	mov	r2, r3
 8010136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010138:	637b      	str	r3, [r7, #52]	; 0x34
 801013a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801013c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801013e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010140:	e841 2300 	strex	r3, r2, [r1]
 8010144:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1e6      	bne.n	801011a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	3308      	adds	r3, #8
 8010152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	e853 3f00 	ldrex	r3, [r3]
 801015a:	613b      	str	r3, [r7, #16]
   return(result);
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	f023 0301 	bic.w	r3, r3, #1
 8010162:	66bb      	str	r3, [r7, #104]	; 0x68
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	3308      	adds	r3, #8
 801016a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801016c:	623a      	str	r2, [r7, #32]
 801016e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010170:	69f9      	ldr	r1, [r7, #28]
 8010172:	6a3a      	ldr	r2, [r7, #32]
 8010174:	e841 2300 	strex	r3, r2, [r1]
 8010178:	61bb      	str	r3, [r7, #24]
   return(result);
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1e5      	bne.n	801014c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2220      	movs	r2, #32
 8010184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	2220      	movs	r2, #32
 801018c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2220      	movs	r2, #32
 8010194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2200      	movs	r2, #0
 801019c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80101a0:	2303      	movs	r3, #3
 80101a2:	e010      	b.n	80101c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	69da      	ldr	r2, [r3, #28]
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	4013      	ands	r3, r2
 80101ae:	68ba      	ldr	r2, [r7, #8]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	bf0c      	ite	eq
 80101b4:	2301      	moveq	r3, #1
 80101b6:	2300      	movne	r3, #0
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	461a      	mov	r2, r3
 80101bc:	79fb      	ldrb	r3, [r7, #7]
 80101be:	429a      	cmp	r2, r3
 80101c0:	f43f af46 	beq.w	8010050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80101c4:	2300      	movs	r3, #0
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3770      	adds	r7, #112	; 0x70
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
	...

080101d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b0a3      	sub	sp, #140	; 0x8c
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	4613      	mov	r3, r2
 80101dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	68ba      	ldr	r2, [r7, #8]
 80101e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	88fa      	ldrh	r2, [r7, #6]
 80101e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	88fa      	ldrh	r2, [r7, #6]
 80101f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2200      	movs	r2, #0
 80101f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	689b      	ldr	r3, [r3, #8]
 80101fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010202:	d10e      	bne.n	8010222 <UART_Start_Receive_IT+0x52>
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	691b      	ldr	r3, [r3, #16]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d105      	bne.n	8010218 <UART_Start_Receive_IT+0x48>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010212:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010216:	e02d      	b.n	8010274 <UART_Start_Receive_IT+0xa4>
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	22ff      	movs	r2, #255	; 0xff
 801021c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010220:	e028      	b.n	8010274 <UART_Start_Receive_IT+0xa4>
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	689b      	ldr	r3, [r3, #8]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d10d      	bne.n	8010246 <UART_Start_Receive_IT+0x76>
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	691b      	ldr	r3, [r3, #16]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d104      	bne.n	801023c <UART_Start_Receive_IT+0x6c>
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	22ff      	movs	r2, #255	; 0xff
 8010236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801023a:	e01b      	b.n	8010274 <UART_Start_Receive_IT+0xa4>
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	227f      	movs	r2, #127	; 0x7f
 8010240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010244:	e016      	b.n	8010274 <UART_Start_Receive_IT+0xa4>
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	689b      	ldr	r3, [r3, #8]
 801024a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801024e:	d10d      	bne.n	801026c <UART_Start_Receive_IT+0x9c>
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	691b      	ldr	r3, [r3, #16]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d104      	bne.n	8010262 <UART_Start_Receive_IT+0x92>
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	227f      	movs	r2, #127	; 0x7f
 801025c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010260:	e008      	b.n	8010274 <UART_Start_Receive_IT+0xa4>
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	223f      	movs	r2, #63	; 0x3f
 8010266:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801026a:	e003      	b.n	8010274 <UART_Start_Receive_IT+0xa4>
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2200      	movs	r2, #0
 8010270:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2200      	movs	r2, #0
 8010278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2222      	movs	r2, #34	; 0x22
 8010280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	3308      	adds	r3, #8
 801028a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801028c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801028e:	e853 3f00 	ldrex	r3, [r3]
 8010292:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010296:	f043 0301 	orr.w	r3, r3, #1
 801029a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3308      	adds	r3, #8
 80102a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80102a8:	673a      	str	r2, [r7, #112]	; 0x70
 80102aa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80102ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80102b0:	e841 2300 	strex	r3, r2, [r1]
 80102b4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80102b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d1e3      	bne.n	8010284 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102c4:	d153      	bne.n	801036e <UART_Start_Receive_IT+0x19e>
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80102cc:	88fa      	ldrh	r2, [r7, #6]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d34d      	bcc.n	801036e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	689b      	ldr	r3, [r3, #8]
 80102d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102da:	d107      	bne.n	80102ec <UART_Start_Receive_IT+0x11c>
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	691b      	ldr	r3, [r3, #16]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d103      	bne.n	80102ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	4a4b      	ldr	r2, [pc, #300]	; (8010414 <UART_Start_Receive_IT+0x244>)
 80102e8:	671a      	str	r2, [r3, #112]	; 0x70
 80102ea:	e002      	b.n	80102f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	4a4a      	ldr	r2, [pc, #296]	; (8010418 <UART_Start_Receive_IT+0x248>)
 80102f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2200      	movs	r2, #0
 80102f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	691b      	ldr	r3, [r3, #16]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d01a      	beq.n	8010338 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801030a:	e853 3f00 	ldrex	r3, [r3]
 801030e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	461a      	mov	r2, r3
 8010320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010326:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010328:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801032a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801032c:	e841 2300 	strex	r3, r2, [r1]
 8010330:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1e4      	bne.n	8010302 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	3308      	adds	r3, #8
 801033e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010342:	e853 3f00 	ldrex	r3, [r3]
 8010346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801034e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	3308      	adds	r3, #8
 8010356:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010358:	64ba      	str	r2, [r7, #72]	; 0x48
 801035a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801035e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010360:	e841 2300 	strex	r3, r2, [r1]
 8010364:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010368:	2b00      	cmp	r3, #0
 801036a:	d1e5      	bne.n	8010338 <UART_Start_Receive_IT+0x168>
 801036c:	e04a      	b.n	8010404 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	689b      	ldr	r3, [r3, #8]
 8010372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010376:	d107      	bne.n	8010388 <UART_Start_Receive_IT+0x1b8>
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	691b      	ldr	r3, [r3, #16]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d103      	bne.n	8010388 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	4a26      	ldr	r2, [pc, #152]	; (801041c <UART_Start_Receive_IT+0x24c>)
 8010384:	671a      	str	r2, [r3, #112]	; 0x70
 8010386:	e002      	b.n	801038e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	4a25      	ldr	r2, [pc, #148]	; (8010420 <UART_Start_Receive_IT+0x250>)
 801038c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2200      	movs	r2, #0
 8010392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	691b      	ldr	r3, [r3, #16]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d019      	beq.n	80103d2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a6:	e853 3f00 	ldrex	r3, [r3]
 80103aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80103b2:	677b      	str	r3, [r7, #116]	; 0x74
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	461a      	mov	r2, r3
 80103ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103bc:	637b      	str	r3, [r7, #52]	; 0x34
 80103be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103c4:	e841 2300 	strex	r3, r2, [r1]
 80103c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80103ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d1e6      	bne.n	801039e <UART_Start_Receive_IT+0x1ce>
 80103d0:	e018      	b.n	8010404 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	e853 3f00 	ldrex	r3, [r3]
 80103de:	613b      	str	r3, [r7, #16]
   return(result);
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	f043 0320 	orr.w	r3, r3, #32
 80103e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	461a      	mov	r2, r3
 80103ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103f0:	623b      	str	r3, [r7, #32]
 80103f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f4:	69f9      	ldr	r1, [r7, #28]
 80103f6:	6a3a      	ldr	r2, [r7, #32]
 80103f8:	e841 2300 	strex	r3, r2, [r1]
 80103fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d1e6      	bne.n	80103d2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8010404:	2300      	movs	r3, #0
}
 8010406:	4618      	mov	r0, r3
 8010408:	378c      	adds	r7, #140	; 0x8c
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	08010b2d 	.word	0x08010b2d
 8010418:	08010835 	.word	0x08010835
 801041c:	080106d3 	.word	0x080106d3
 8010420:	08010573 	.word	0x08010573

08010424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010424:	b480      	push	{r7}
 8010426:	b095      	sub	sp, #84	; 0x54
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010434:	e853 3f00 	ldrex	r3, [r3]
 8010438:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801043a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010440:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	461a      	mov	r2, r3
 8010448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801044a:	643b      	str	r3, [r7, #64]	; 0x40
 801044c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010450:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010452:	e841 2300 	strex	r3, r2, [r1]
 8010456:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045a:	2b00      	cmp	r3, #0
 801045c:	d1e6      	bne.n	801042c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	3308      	adds	r3, #8
 8010464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010466:	6a3b      	ldr	r3, [r7, #32]
 8010468:	e853 3f00 	ldrex	r3, [r3]
 801046c:	61fb      	str	r3, [r7, #28]
   return(result);
 801046e:	69fa      	ldr	r2, [r7, #28]
 8010470:	4b1e      	ldr	r3, [pc, #120]	; (80104ec <UART_EndRxTransfer+0xc8>)
 8010472:	4013      	ands	r3, r2
 8010474:	64bb      	str	r3, [r7, #72]	; 0x48
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	3308      	adds	r3, #8
 801047c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801047e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010480:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010486:	e841 2300 	strex	r3, r2, [r1]
 801048a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801048c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1e5      	bne.n	801045e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010496:	2b01      	cmp	r3, #1
 8010498:	d118      	bne.n	80104cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	e853 3f00 	ldrex	r3, [r3]
 80104a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	f023 0310 	bic.w	r3, r3, #16
 80104ae:	647b      	str	r3, [r7, #68]	; 0x44
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	461a      	mov	r2, r3
 80104b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104b8:	61bb      	str	r3, [r7, #24]
 80104ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104bc:	6979      	ldr	r1, [r7, #20]
 80104be:	69ba      	ldr	r2, [r7, #24]
 80104c0:	e841 2300 	strex	r3, r2, [r1]
 80104c4:	613b      	str	r3, [r7, #16]
   return(result);
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d1e6      	bne.n	801049a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2220      	movs	r2, #32
 80104d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2200      	movs	r2, #0
 80104d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2200      	movs	r2, #0
 80104de:	671a      	str	r2, [r3, #112]	; 0x70
}
 80104e0:	bf00      	nop
 80104e2:	3754      	adds	r7, #84	; 0x54
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr
 80104ec:	effffffe 	.word	0xeffffffe

080104f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2200      	movs	r2, #0
 801050a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	f7fe fe26 	bl	800f160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010514:	bf00      	nop
 8010516:	3710      	adds	r7, #16
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b088      	sub	sp, #32
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	e853 3f00 	ldrex	r3, [r3]
 8010530:	60bb      	str	r3, [r7, #8]
   return(result);
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010538:	61fb      	str	r3, [r7, #28]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	461a      	mov	r2, r3
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	61bb      	str	r3, [r7, #24]
 8010544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010546:	6979      	ldr	r1, [r7, #20]
 8010548:	69ba      	ldr	r2, [r7, #24]
 801054a:	e841 2300 	strex	r3, r2, [r1]
 801054e:	613b      	str	r3, [r7, #16]
   return(result);
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d1e6      	bne.n	8010524 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2220      	movs	r2, #32
 801055a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f7fe fdf1 	bl	800f14c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801056a:	bf00      	nop
 801056c:	3720      	adds	r7, #32
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b096      	sub	sp, #88	; 0x58
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010580:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801058a:	2b22      	cmp	r3, #34	; 0x22
 801058c:	f040 8095 	bne.w	80106ba <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010596:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801059a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801059e:	b2d9      	uxtb	r1, r3
 80105a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80105a4:	b2da      	uxtb	r2, r3
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105aa:	400a      	ands	r2, r1
 80105ac:	b2d2      	uxtb	r2, r2
 80105ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105b4:	1c5a      	adds	r2, r3, #1
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	3b01      	subs	r3, #1
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d178      	bne.n	80106ca <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e0:	e853 3f00 	ldrex	r3, [r3]
 80105e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80105e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105ec:	653b      	str	r3, [r7, #80]	; 0x50
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	461a      	mov	r2, r3
 80105f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105f6:	647b      	str	r3, [r7, #68]	; 0x44
 80105f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105fe:	e841 2300 	strex	r3, r2, [r1]
 8010602:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1e6      	bne.n	80105d8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	3308      	adds	r3, #8
 8010610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010614:	e853 3f00 	ldrex	r3, [r3]
 8010618:	623b      	str	r3, [r7, #32]
   return(result);
 801061a:	6a3b      	ldr	r3, [r7, #32]
 801061c:	f023 0301 	bic.w	r3, r3, #1
 8010620:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	3308      	adds	r3, #8
 8010628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801062a:	633a      	str	r2, [r7, #48]	; 0x30
 801062c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010632:	e841 2300 	strex	r3, r2, [r1]
 8010636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1e5      	bne.n	801060a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2220      	movs	r2, #32
 8010642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010650:	2b01      	cmp	r3, #1
 8010652:	d12e      	bne.n	80106b2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2200      	movs	r2, #0
 8010658:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	e853 3f00 	ldrex	r3, [r3]
 8010666:	60fb      	str	r3, [r7, #12]
   return(result);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f023 0310 	bic.w	r3, r3, #16
 801066e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	461a      	mov	r2, r3
 8010676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010678:	61fb      	str	r3, [r7, #28]
 801067a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801067c:	69b9      	ldr	r1, [r7, #24]
 801067e:	69fa      	ldr	r2, [r7, #28]
 8010680:	e841 2300 	strex	r3, r2, [r1]
 8010684:	617b      	str	r3, [r7, #20]
   return(result);
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1e6      	bne.n	801065a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	69db      	ldr	r3, [r3, #28]
 8010692:	f003 0310 	and.w	r3, r3, #16
 8010696:	2b10      	cmp	r3, #16
 8010698:	d103      	bne.n	80106a2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2210      	movs	r2, #16
 80106a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106a8:	4619      	mov	r1, r3
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f7fe fd62 	bl	800f174 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80106b0:	e00b      	b.n	80106ca <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7f1 fb68 	bl	8001d88 <HAL_UART_RxCpltCallback>
}
 80106b8:	e007      	b.n	80106ca <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	699a      	ldr	r2, [r3, #24]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	f042 0208 	orr.w	r2, r2, #8
 80106c8:	619a      	str	r2, [r3, #24]
}
 80106ca:	bf00      	nop
 80106cc:	3758      	adds	r7, #88	; 0x58
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}

080106d2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80106d2:	b580      	push	{r7, lr}
 80106d4:	b096      	sub	sp, #88	; 0x58
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106ea:	2b22      	cmp	r3, #34	; 0x22
 80106ec:	f040 8095 	bne.w	801081a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106fe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010700:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010704:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010708:	4013      	ands	r3, r2
 801070a:	b29a      	uxth	r2, r3
 801070c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801070e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010714:	1c9a      	adds	r2, r3, #2
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010720:	b29b      	uxth	r3, r3
 8010722:	3b01      	subs	r3, #1
 8010724:	b29a      	uxth	r2, r3
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010732:	b29b      	uxth	r3, r3
 8010734:	2b00      	cmp	r3, #0
 8010736:	d178      	bne.n	801082a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801073e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010740:	e853 3f00 	ldrex	r3, [r3]
 8010744:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801074c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	461a      	mov	r2, r3
 8010754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010756:	643b      	str	r3, [r7, #64]	; 0x40
 8010758:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801075a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801075c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801075e:	e841 2300 	strex	r3, r2, [r1]
 8010762:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010766:	2b00      	cmp	r3, #0
 8010768:	d1e6      	bne.n	8010738 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	3308      	adds	r3, #8
 8010770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010772:	6a3b      	ldr	r3, [r7, #32]
 8010774:	e853 3f00 	ldrex	r3, [r3]
 8010778:	61fb      	str	r3, [r7, #28]
   return(result);
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	f023 0301 	bic.w	r3, r3, #1
 8010780:	64bb      	str	r3, [r7, #72]	; 0x48
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	3308      	adds	r3, #8
 8010788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801078a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801078c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801078e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010792:	e841 2300 	strex	r3, r2, [r1]
 8010796:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079a:	2b00      	cmp	r3, #0
 801079c:	d1e5      	bne.n	801076a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2220      	movs	r2, #32
 80107a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2200      	movs	r2, #0
 80107aa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	d12e      	bne.n	8010812 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	e853 3f00 	ldrex	r3, [r3]
 80107c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	f023 0310 	bic.w	r3, r3, #16
 80107ce:	647b      	str	r3, [r7, #68]	; 0x44
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	461a      	mov	r2, r3
 80107d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107d8:	61bb      	str	r3, [r7, #24]
 80107da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107dc:	6979      	ldr	r1, [r7, #20]
 80107de:	69ba      	ldr	r2, [r7, #24]
 80107e0:	e841 2300 	strex	r3, r2, [r1]
 80107e4:	613b      	str	r3, [r7, #16]
   return(result);
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1e6      	bne.n	80107ba <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	69db      	ldr	r3, [r3, #28]
 80107f2:	f003 0310 	and.w	r3, r3, #16
 80107f6:	2b10      	cmp	r3, #16
 80107f8:	d103      	bne.n	8010802 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2210      	movs	r2, #16
 8010800:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010808:	4619      	mov	r1, r3
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7fe fcb2 	bl	800f174 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010810:	e00b      	b.n	801082a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f7f1 fab8 	bl	8001d88 <HAL_UART_RxCpltCallback>
}
 8010818:	e007      	b.n	801082a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	699a      	ldr	r2, [r3, #24]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f042 0208 	orr.w	r2, r2, #8
 8010828:	619a      	str	r2, [r3, #24]
}
 801082a:	bf00      	nop
 801082c:	3758      	adds	r7, #88	; 0x58
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}
	...

08010834 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b0a6      	sub	sp, #152	; 0x98
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010842:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	69db      	ldr	r3, [r3, #28]
 801084c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801086a:	2b22      	cmp	r3, #34	; 0x22
 801086c:	f040 814d 	bne.w	8010b0a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010876:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801087a:	e0f4      	b.n	8010a66 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010882:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010886:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801088a:	b2d9      	uxtb	r1, r3
 801088c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010890:	b2da      	uxtb	r2, r3
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010896:	400a      	ands	r2, r1
 8010898:	b2d2      	uxtb	r2, r2
 801089a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108a0:	1c5a      	adds	r2, r3, #1
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	3b01      	subs	r3, #1
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	69db      	ldr	r3, [r3, #28]
 80108be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80108c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108c6:	f003 0307 	and.w	r3, r3, #7
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d053      	beq.n	8010976 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80108ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108d2:	f003 0301 	and.w	r3, r3, #1
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d011      	beq.n	80108fe <UART_RxISR_8BIT_FIFOEN+0xca>
 80108da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00b      	beq.n	80108fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2201      	movs	r2, #1
 80108ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108f4:	f043 0201 	orr.w	r2, r3, #1
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010902:	f003 0302 	and.w	r3, r3, #2
 8010906:	2b00      	cmp	r3, #0
 8010908:	d011      	beq.n	801092e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801090a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801090e:	f003 0301 	and.w	r3, r3, #1
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00b      	beq.n	801092e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2202      	movs	r2, #2
 801091c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010924:	f043 0204 	orr.w	r2, r3, #4
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801092e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010932:	f003 0304 	and.w	r3, r3, #4
 8010936:	2b00      	cmp	r3, #0
 8010938:	d011      	beq.n	801095e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801093a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801093e:	f003 0301 	and.w	r3, r3, #1
 8010942:	2b00      	cmp	r3, #0
 8010944:	d00b      	beq.n	801095e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2204      	movs	r2, #4
 801094c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010954:	f043 0202 	orr.w	r2, r3, #2
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010964:	2b00      	cmp	r3, #0
 8010966:	d006      	beq.n	8010976 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7fe fbf9 	bl	800f160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2200      	movs	r2, #0
 8010972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801097c:	b29b      	uxth	r3, r3
 801097e:	2b00      	cmp	r3, #0
 8010980:	d171      	bne.n	8010a66 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801098a:	e853 3f00 	ldrex	r3, [r3]
 801098e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	461a      	mov	r2, r3
 80109a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80109a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80109a6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80109aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80109ac:	e841 2300 	strex	r3, r2, [r1]
 80109b0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80109b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1e4      	bne.n	8010982 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	3308      	adds	r3, #8
 80109be:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109c2:	e853 3f00 	ldrex	r3, [r3]
 80109c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80109c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109ca:	4b56      	ldr	r3, [pc, #344]	; (8010b24 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80109cc:	4013      	ands	r3, r2
 80109ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	3308      	adds	r3, #8
 80109d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80109d8:	657a      	str	r2, [r7, #84]	; 0x54
 80109da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109e0:	e841 2300 	strex	r3, r2, [r1]
 80109e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80109e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d1e5      	bne.n	80109b8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2220      	movs	r2, #32
 80109f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109fe:	2b01      	cmp	r3, #1
 8010a00:	d12e      	bne.n	8010a60 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a10:	e853 3f00 	ldrex	r3, [r3]
 8010a14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a18:	f023 0310 	bic.w	r3, r3, #16
 8010a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	461a      	mov	r2, r3
 8010a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a26:	643b      	str	r3, [r7, #64]	; 0x40
 8010a28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a2e:	e841 2300 	strex	r3, r2, [r1]
 8010a32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d1e6      	bne.n	8010a08 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	69db      	ldr	r3, [r3, #28]
 8010a40:	f003 0310 	and.w	r3, r3, #16
 8010a44:	2b10      	cmp	r3, #16
 8010a46:	d103      	bne.n	8010a50 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2210      	movs	r2, #16
 8010a4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a56:	4619      	mov	r1, r3
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f7fe fb8b 	bl	800f174 <HAL_UARTEx_RxEventCallback>
 8010a5e:	e002      	b.n	8010a66 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7f1 f991 	bl	8001d88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010a66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d006      	beq.n	8010a7c <UART_RxISR_8BIT_FIFOEN+0x248>
 8010a6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a72:	f003 0320 	and.w	r3, r3, #32
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f47f af00 	bne.w	801087c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010a86:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d045      	beq.n	8010b1a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010a94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d23e      	bcs.n	8010b1a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	3308      	adds	r3, #8
 8010aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa4:	6a3b      	ldr	r3, [r7, #32]
 8010aa6:	e853 3f00 	ldrex	r3, [r3]
 8010aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ab2:	673b      	str	r3, [r7, #112]	; 0x70
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	3308      	adds	r3, #8
 8010aba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010abc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ac4:	e841 2300 	strex	r3, r2, [r1]
 8010ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d1e5      	bne.n	8010a9c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	4a15      	ldr	r2, [pc, #84]	; (8010b28 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8010ad4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	e853 3f00 	ldrex	r3, [r3]
 8010ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	f043 0320 	orr.w	r3, r3, #32
 8010aea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	461a      	mov	r2, r3
 8010af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010af4:	61bb      	str	r3, [r7, #24]
 8010af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af8:	6979      	ldr	r1, [r7, #20]
 8010afa:	69ba      	ldr	r2, [r7, #24]
 8010afc:	e841 2300 	strex	r3, r2, [r1]
 8010b00:	613b      	str	r3, [r7, #16]
   return(result);
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d1e6      	bne.n	8010ad6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b08:	e007      	b.n	8010b1a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	699a      	ldr	r2, [r3, #24]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f042 0208 	orr.w	r2, r2, #8
 8010b18:	619a      	str	r2, [r3, #24]
}
 8010b1a:	bf00      	nop
 8010b1c:	3798      	adds	r7, #152	; 0x98
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	effffffe 	.word	0xeffffffe
 8010b28:	08010573 	.word	0x08010573

08010b2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b0a8      	sub	sp, #160	; 0xa0
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b3a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	69db      	ldr	r3, [r3, #28]
 8010b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	689b      	ldr	r3, [r3, #8]
 8010b58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b62:	2b22      	cmp	r3, #34	; 0x22
 8010b64:	f040 8151 	bne.w	8010e0a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010b6e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010b72:	e0f8      	b.n	8010d66 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b7a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8010b86:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8010b8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8010b8e:	4013      	ands	r3, r2
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b9c:	1c9a      	adds	r2, r3, #2
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	3b01      	subs	r3, #1
 8010bac:	b29a      	uxth	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	69db      	ldr	r3, [r3, #28]
 8010bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010bbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bc2:	f003 0307 	and.w	r3, r3, #7
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d053      	beq.n	8010c72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010bca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bce:	f003 0301 	and.w	r3, r3, #1
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d011      	beq.n	8010bfa <UART_RxISR_16BIT_FIFOEN+0xce>
 8010bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d00b      	beq.n	8010bfa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	2201      	movs	r2, #1
 8010be8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bf0:	f043 0201 	orr.w	r2, r3, #1
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bfe:	f003 0302 	and.w	r3, r3, #2
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d011      	beq.n	8010c2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010c06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c0a:	f003 0301 	and.w	r3, r3, #1
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d00b      	beq.n	8010c2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	2202      	movs	r2, #2
 8010c18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c20:	f043 0204 	orr.w	r2, r3, #4
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c2e:	f003 0304 	and.w	r3, r3, #4
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d011      	beq.n	8010c5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c3a:	f003 0301 	and.w	r3, r3, #1
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d00b      	beq.n	8010c5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2204      	movs	r2, #4
 8010c48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c50:	f043 0202 	orr.w	r2, r3, #2
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d006      	beq.n	8010c72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f7fe fa7b 	bl	800f160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d173      	bne.n	8010d66 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c86:	e853 3f00 	ldrex	r3, [r3]
 8010c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010ca2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ca4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ca6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ca8:	e841 2300 	strex	r3, r2, [r1]
 8010cac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d1e4      	bne.n	8010c7e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	3308      	adds	r3, #8
 8010cba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cbe:	e853 3f00 	ldrex	r3, [r3]
 8010cc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cc6:	4b57      	ldr	r3, [pc, #348]	; (8010e24 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8010cc8:	4013      	ands	r3, r2
 8010cca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	3308      	adds	r3, #8
 8010cd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010cd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8010cda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010cde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ce0:	e841 2300 	strex	r3, r2, [r1]
 8010ce4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d1e3      	bne.n	8010cb4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2220      	movs	r2, #32
 8010cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d12e      	bne.n	8010d60 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2200      	movs	r2, #0
 8010d06:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d10:	e853 3f00 	ldrex	r3, [r3]
 8010d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d18:	f023 0310 	bic.w	r3, r3, #16
 8010d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	461a      	mov	r2, r3
 8010d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d26:	647b      	str	r3, [r7, #68]	; 0x44
 8010d28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d2e:	e841 2300 	strex	r3, r2, [r1]
 8010d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d1e6      	bne.n	8010d08 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	69db      	ldr	r3, [r3, #28]
 8010d40:	f003 0310 	and.w	r3, r3, #16
 8010d44:	2b10      	cmp	r3, #16
 8010d46:	d103      	bne.n	8010d50 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2210      	movs	r2, #16
 8010d4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d56:	4619      	mov	r1, r3
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f7fe fa0b 	bl	800f174 <HAL_UARTEx_RxEventCallback>
 8010d5e:	e002      	b.n	8010d66 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f7f1 f811 	bl	8001d88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d66:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d006      	beq.n	8010d7c <UART_RxISR_16BIT_FIFOEN+0x250>
 8010d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d72:	f003 0320 	and.w	r3, r3, #32
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	f47f aefc 	bne.w	8010b74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d82:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010d86:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d045      	beq.n	8010e1a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d94:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d23e      	bcs.n	8010e1a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	3308      	adds	r3, #8
 8010da2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da6:	e853 3f00 	ldrex	r3, [r3]
 8010daa:	623b      	str	r3, [r7, #32]
   return(result);
 8010dac:	6a3b      	ldr	r3, [r7, #32]
 8010dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010db2:	677b      	str	r3, [r7, #116]	; 0x74
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	3308      	adds	r3, #8
 8010dba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010dbc:	633a      	str	r2, [r7, #48]	; 0x30
 8010dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dc4:	e841 2300 	strex	r3, r2, [r1]
 8010dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d1e5      	bne.n	8010d9c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	4a15      	ldr	r2, [pc, #84]	; (8010e28 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8010dd4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ddc:	693b      	ldr	r3, [r7, #16]
 8010dde:	e853 3f00 	ldrex	r3, [r3]
 8010de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f043 0320 	orr.w	r3, r3, #32
 8010dea:	673b      	str	r3, [r7, #112]	; 0x70
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	461a      	mov	r2, r3
 8010df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010df4:	61fb      	str	r3, [r7, #28]
 8010df6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010df8:	69b9      	ldr	r1, [r7, #24]
 8010dfa:	69fa      	ldr	r2, [r7, #28]
 8010dfc:	e841 2300 	strex	r3, r2, [r1]
 8010e00:	617b      	str	r3, [r7, #20]
   return(result);
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d1e6      	bne.n	8010dd6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010e08:	e007      	b.n	8010e1a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	699a      	ldr	r2, [r3, #24]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f042 0208 	orr.w	r2, r2, #8
 8010e18:	619a      	str	r2, [r3, #24]
}
 8010e1a:	bf00      	nop
 8010e1c:	37a0      	adds	r7, #160	; 0xa0
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	effffffe 	.word	0xeffffffe
 8010e28:	080106d3 	.word	0x080106d3

08010e2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010e34:	bf00      	nop
 8010e36:	370c      	adds	r7, #12
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr

08010e40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010e48:	bf00      	nop
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010e5c:	bf00      	nop
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b085      	sub	sp, #20
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d101      	bne.n	8010e7e <HAL_UARTEx_DisableFifoMode+0x16>
 8010e7a:	2302      	movs	r3, #2
 8010e7c:	e027      	b.n	8010ece <HAL_UARTEx_DisableFifoMode+0x66>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2201      	movs	r2, #1
 8010e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2224      	movs	r2, #36	; 0x24
 8010e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f022 0201 	bic.w	r2, r2, #1
 8010ea4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010eac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2220      	movs	r2, #32
 8010ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3714      	adds	r7, #20
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr

08010eda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010eda:	b580      	push	{r7, lr}
 8010edc:	b084      	sub	sp, #16
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
 8010ee2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	d101      	bne.n	8010ef2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010eee:	2302      	movs	r3, #2
 8010ef0:	e02d      	b.n	8010f4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2224      	movs	r2, #36	; 0x24
 8010efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f022 0201 	bic.w	r2, r2, #1
 8010f18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	689b      	ldr	r3, [r3, #8]
 8010f20:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	683a      	ldr	r2, [r7, #0]
 8010f2a:	430a      	orrs	r2, r1
 8010f2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f000 f850 	bl	8010fd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	68fa      	ldr	r2, [r7, #12]
 8010f3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2220      	movs	r2, #32
 8010f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b084      	sub	sp, #16
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
 8010f5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d101      	bne.n	8010f6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010f6a:	2302      	movs	r3, #2
 8010f6c:	e02d      	b.n	8010fca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2201      	movs	r2, #1
 8010f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2224      	movs	r2, #36	; 0x24
 8010f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f022 0201 	bic.w	r2, r2, #1
 8010f94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	689b      	ldr	r3, [r3, #8]
 8010f9c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	683a      	ldr	r2, [r7, #0]
 8010fa6:	430a      	orrs	r2, r1
 8010fa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f000 f812 	bl	8010fd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	68fa      	ldr	r2, [r7, #12]
 8010fb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2220      	movs	r2, #32
 8010fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
	...

08010fd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b085      	sub	sp, #20
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d108      	bne.n	8010ff6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2201      	movs	r2, #1
 8010ff0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010ff4:	e031      	b.n	801105a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010ff6:	2310      	movs	r3, #16
 8010ff8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010ffa:	2310      	movs	r3, #16
 8010ffc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	689b      	ldr	r3, [r3, #8]
 8011004:	0e5b      	lsrs	r3, r3, #25
 8011006:	b2db      	uxtb	r3, r3
 8011008:	f003 0307 	and.w	r3, r3, #7
 801100c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	689b      	ldr	r3, [r3, #8]
 8011014:	0f5b      	lsrs	r3, r3, #29
 8011016:	b2db      	uxtb	r3, r3
 8011018:	f003 0307 	and.w	r3, r3, #7
 801101c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801101e:	7bbb      	ldrb	r3, [r7, #14]
 8011020:	7b3a      	ldrb	r2, [r7, #12]
 8011022:	4911      	ldr	r1, [pc, #68]	; (8011068 <UARTEx_SetNbDataToProcess+0x94>)
 8011024:	5c8a      	ldrb	r2, [r1, r2]
 8011026:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801102a:	7b3a      	ldrb	r2, [r7, #12]
 801102c:	490f      	ldr	r1, [pc, #60]	; (801106c <UARTEx_SetNbDataToProcess+0x98>)
 801102e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011030:	fb93 f3f2 	sdiv	r3, r3, r2
 8011034:	b29a      	uxth	r2, r3
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801103c:	7bfb      	ldrb	r3, [r7, #15]
 801103e:	7b7a      	ldrb	r2, [r7, #13]
 8011040:	4909      	ldr	r1, [pc, #36]	; (8011068 <UARTEx_SetNbDataToProcess+0x94>)
 8011042:	5c8a      	ldrb	r2, [r1, r2]
 8011044:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011048:	7b7a      	ldrb	r2, [r7, #13]
 801104a:	4908      	ldr	r1, [pc, #32]	; (801106c <UARTEx_SetNbDataToProcess+0x98>)
 801104c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801104e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011052:	b29a      	uxth	r2, r3
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801105a:	bf00      	nop
 801105c:	3714      	adds	r7, #20
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr
 8011066:	bf00      	nop
 8011068:	08017d28 	.word	0x08017d28
 801106c:	08017d30 	.word	0x08017d30

08011070 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d121      	bne.n	80110c6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681a      	ldr	r2, [r3, #0]
 8011086:	4b27      	ldr	r3, [pc, #156]	; (8011124 <FMC_SDRAM_Init+0xb4>)
 8011088:	4013      	ands	r3, r2
 801108a:	683a      	ldr	r2, [r7, #0]
 801108c:	6851      	ldr	r1, [r2, #4]
 801108e:	683a      	ldr	r2, [r7, #0]
 8011090:	6892      	ldr	r2, [r2, #8]
 8011092:	4311      	orrs	r1, r2
 8011094:	683a      	ldr	r2, [r7, #0]
 8011096:	68d2      	ldr	r2, [r2, #12]
 8011098:	4311      	orrs	r1, r2
 801109a:	683a      	ldr	r2, [r7, #0]
 801109c:	6912      	ldr	r2, [r2, #16]
 801109e:	4311      	orrs	r1, r2
 80110a0:	683a      	ldr	r2, [r7, #0]
 80110a2:	6952      	ldr	r2, [r2, #20]
 80110a4:	4311      	orrs	r1, r2
 80110a6:	683a      	ldr	r2, [r7, #0]
 80110a8:	6992      	ldr	r2, [r2, #24]
 80110aa:	4311      	orrs	r1, r2
 80110ac:	683a      	ldr	r2, [r7, #0]
 80110ae:	69d2      	ldr	r2, [r2, #28]
 80110b0:	4311      	orrs	r1, r2
 80110b2:	683a      	ldr	r2, [r7, #0]
 80110b4:	6a12      	ldr	r2, [r2, #32]
 80110b6:	4311      	orrs	r1, r2
 80110b8:	683a      	ldr	r2, [r7, #0]
 80110ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80110bc:	430a      	orrs	r2, r1
 80110be:	431a      	orrs	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	601a      	str	r2, [r3, #0]
 80110c4:	e026      	b.n	8011114 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	69d9      	ldr	r1, [r3, #28]
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	6a1b      	ldr	r3, [r3, #32]
 80110d6:	4319      	orrs	r1, r3
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110dc:	430b      	orrs	r3, r1
 80110de:	431a      	orrs	r2, r3
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	685a      	ldr	r2, [r3, #4]
 80110e8:	4b0e      	ldr	r3, [pc, #56]	; (8011124 <FMC_SDRAM_Init+0xb4>)
 80110ea:	4013      	ands	r3, r2
 80110ec:	683a      	ldr	r2, [r7, #0]
 80110ee:	6851      	ldr	r1, [r2, #4]
 80110f0:	683a      	ldr	r2, [r7, #0]
 80110f2:	6892      	ldr	r2, [r2, #8]
 80110f4:	4311      	orrs	r1, r2
 80110f6:	683a      	ldr	r2, [r7, #0]
 80110f8:	68d2      	ldr	r2, [r2, #12]
 80110fa:	4311      	orrs	r1, r2
 80110fc:	683a      	ldr	r2, [r7, #0]
 80110fe:	6912      	ldr	r2, [r2, #16]
 8011100:	4311      	orrs	r1, r2
 8011102:	683a      	ldr	r2, [r7, #0]
 8011104:	6952      	ldr	r2, [r2, #20]
 8011106:	4311      	orrs	r1, r2
 8011108:	683a      	ldr	r2, [r7, #0]
 801110a:	6992      	ldr	r2, [r2, #24]
 801110c:	430a      	orrs	r2, r1
 801110e:	431a      	orrs	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8011114:	2300      	movs	r3, #0
}
 8011116:	4618      	mov	r0, r3
 8011118:	370c      	adds	r7, #12
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr
 8011122:	bf00      	nop
 8011124:	ffff8000 	.word	0xffff8000

08011128 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d128      	bne.n	801118c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	689b      	ldr	r3, [r3, #8]
 801113e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	1e59      	subs	r1, r3, #1
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	3b01      	subs	r3, #1
 801114e:	011b      	lsls	r3, r3, #4
 8011150:	4319      	orrs	r1, r3
 8011152:	68bb      	ldr	r3, [r7, #8]
 8011154:	689b      	ldr	r3, [r3, #8]
 8011156:	3b01      	subs	r3, #1
 8011158:	021b      	lsls	r3, r3, #8
 801115a:	4319      	orrs	r1, r3
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	3b01      	subs	r3, #1
 8011162:	031b      	lsls	r3, r3, #12
 8011164:	4319      	orrs	r1, r3
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	691b      	ldr	r3, [r3, #16]
 801116a:	3b01      	subs	r3, #1
 801116c:	041b      	lsls	r3, r3, #16
 801116e:	4319      	orrs	r1, r3
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	695b      	ldr	r3, [r3, #20]
 8011174:	3b01      	subs	r3, #1
 8011176:	051b      	lsls	r3, r3, #20
 8011178:	4319      	orrs	r1, r3
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	699b      	ldr	r3, [r3, #24]
 801117e:	3b01      	subs	r3, #1
 8011180:	061b      	lsls	r3, r3, #24
 8011182:	430b      	orrs	r3, r1
 8011184:	431a      	orrs	r2, r3
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	609a      	str	r2, [r3, #8]
 801118a:	e02d      	b.n	80111e8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	689a      	ldr	r2, [r3, #8]
 8011190:	4b19      	ldr	r3, [pc, #100]	; (80111f8 <FMC_SDRAM_Timing_Init+0xd0>)
 8011192:	4013      	ands	r3, r2
 8011194:	68ba      	ldr	r2, [r7, #8]
 8011196:	68d2      	ldr	r2, [r2, #12]
 8011198:	3a01      	subs	r2, #1
 801119a:	0311      	lsls	r1, r2, #12
 801119c:	68ba      	ldr	r2, [r7, #8]
 801119e:	6952      	ldr	r2, [r2, #20]
 80111a0:	3a01      	subs	r2, #1
 80111a2:	0512      	lsls	r2, r2, #20
 80111a4:	430a      	orrs	r2, r1
 80111a6:	431a      	orrs	r2, r3
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	1e59      	subs	r1, r3, #1
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	3b01      	subs	r3, #1
 80111c0:	011b      	lsls	r3, r3, #4
 80111c2:	4319      	orrs	r1, r3
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	689b      	ldr	r3, [r3, #8]
 80111c8:	3b01      	subs	r3, #1
 80111ca:	021b      	lsls	r3, r3, #8
 80111cc:	4319      	orrs	r1, r3
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	691b      	ldr	r3, [r3, #16]
 80111d2:	3b01      	subs	r3, #1
 80111d4:	041b      	lsls	r3, r3, #16
 80111d6:	4319      	orrs	r1, r3
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	699b      	ldr	r3, [r3, #24]
 80111dc:	3b01      	subs	r3, #1
 80111de:	061b      	lsls	r3, r3, #24
 80111e0:	430b      	orrs	r3, r1
 80111e2:	431a      	orrs	r2, r3
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80111e8:	2300      	movs	r3, #0
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3714      	adds	r7, #20
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	ff0f0fff 	.word	0xff0f0fff

080111fc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b085      	sub	sp, #20
 8011200:	af00      	add	r7, sp, #0
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	60b9      	str	r1, [r7, #8]
 8011206:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	691a      	ldr	r2, [r3, #16]
 801120c:	4b0c      	ldr	r3, [pc, #48]	; (8011240 <FMC_SDRAM_SendCommand+0x44>)
 801120e:	4013      	ands	r3, r2
 8011210:	68ba      	ldr	r2, [r7, #8]
 8011212:	6811      	ldr	r1, [r2, #0]
 8011214:	68ba      	ldr	r2, [r7, #8]
 8011216:	6852      	ldr	r2, [r2, #4]
 8011218:	4311      	orrs	r1, r2
 801121a:	68ba      	ldr	r2, [r7, #8]
 801121c:	6892      	ldr	r2, [r2, #8]
 801121e:	3a01      	subs	r2, #1
 8011220:	0152      	lsls	r2, r2, #5
 8011222:	4311      	orrs	r1, r2
 8011224:	68ba      	ldr	r2, [r7, #8]
 8011226:	68d2      	ldr	r2, [r2, #12]
 8011228:	0252      	lsls	r2, r2, #9
 801122a:	430a      	orrs	r2, r1
 801122c:	431a      	orrs	r2, r3
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8011232:	2300      	movs	r3, #0
}
 8011234:	4618      	mov	r0, r3
 8011236:	3714      	adds	r7, #20
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr
 8011240:	ffc00000 	.word	0xffc00000

08011244 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	695a      	ldr	r2, [r3, #20]
 8011252:	4b07      	ldr	r3, [pc, #28]	; (8011270 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8011254:	4013      	ands	r3, r2
 8011256:	683a      	ldr	r2, [r7, #0]
 8011258:	0052      	lsls	r2, r2, #1
 801125a:	431a      	orrs	r2, r3
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	370c      	adds	r7, #12
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop
 8011270:	ffffc001 	.word	0xffffc001

08011274 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011274:	b084      	sub	sp, #16
 8011276:	b480      	push	{r7}
 8011278:	b085      	sub	sp, #20
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	f107 001c 	add.w	r0, r7, #28
 8011282:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011286:	2300      	movs	r3, #0
 8011288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801128a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801128c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801128e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011292:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011294:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011296:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801129a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801129c:	68fa      	ldr	r2, [r7, #12]
 801129e:	4313      	orrs	r3, r2
 80112a0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	685a      	ldr	r2, [r3, #4]
 80112a6:	4b07      	ldr	r3, [pc, #28]	; (80112c4 <SDMMC_Init+0x50>)
 80112a8:	4013      	ands	r3, r2
 80112aa:	68fa      	ldr	r2, [r7, #12]
 80112ac:	431a      	orrs	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80112b2:	2300      	movs	r3, #0
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3714      	adds	r7, #20
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	b004      	add	sp, #16
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop
 80112c4:	ffc02c00 	.word	0xffc02c00

080112c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	370c      	adds	r7, #12
 80112da:	46bd      	mov	sp, r7
 80112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e0:	4770      	bx	lr

080112e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80112e2:	b480      	push	{r7}
 80112e4:	b083      	sub	sp, #12
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
 80112ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80112f6:	2300      	movs	r3, #0
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f043 0203 	orr.w	r2, r3, #3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011318:	2300      	movs	r3, #0
}
 801131a:	4618      	mov	r0, r3
 801131c:	370c      	adds	r7, #12
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr

08011326 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011326:	b480      	push	{r7}
 8011328:	b083      	sub	sp, #12
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f003 0303 	and.w	r3, r3, #3
}
 8011336:	4618      	mov	r0, r3
 8011338:	370c      	adds	r7, #12
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr
	...

08011344 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011344:	b480      	push	{r7}
 8011346:	b085      	sub	sp, #20
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801134e:	2300      	movs	r3, #0
 8011350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011362:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011368:	431a      	orrs	r2, r3
                       Command->CPSM);
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801136e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	4313      	orrs	r3, r2
 8011374:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	68da      	ldr	r2, [r3, #12]
 801137a:	4b06      	ldr	r3, [pc, #24]	; (8011394 <SDMMC_SendCommand+0x50>)
 801137c:	4013      	ands	r3, r2
 801137e:	68fa      	ldr	r2, [r7, #12]
 8011380:	431a      	orrs	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011386:	2300      	movs	r3, #0
}
 8011388:	4618      	mov	r0, r3
 801138a:	3714      	adds	r7, #20
 801138c:	46bd      	mov	sp, r7
 801138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011392:	4770      	bx	lr
 8011394:	fffee0c0 	.word	0xfffee0c0

08011398 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011398:	b480      	push	{r7}
 801139a:	b083      	sub	sp, #12
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	691b      	ldr	r3, [r3, #16]
 80113a4:	b2db      	uxtb	r3, r3
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	370c      	adds	r7, #12
 80113aa:	46bd      	mov	sp, r7
 80113ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b0:	4770      	bx	lr

080113b2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80113b2:	b480      	push	{r7}
 80113b4:	b085      	sub	sp, #20
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
 80113ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	3314      	adds	r3, #20
 80113c0:	461a      	mov	r2, r3
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	4413      	add	r3, r2
 80113c6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3714      	adds	r7, #20
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80113d8:	b480      	push	{r7}
 80113da:	b085      	sub	sp, #20
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80113e2:	2300      	movs	r3, #0
 80113e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	685a      	ldr	r2, [r3, #4]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80113fe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011404:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801140a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801140c:	68fa      	ldr	r2, [r7, #12]
 801140e:	4313      	orrs	r3, r2
 8011410:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011416:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	431a      	orrs	r2, r3
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011422:	2300      	movs	r3, #0

}
 8011424:	4618      	mov	r0, r3
 8011426:	3714      	adds	r7, #20
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b088      	sub	sp, #32
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801143e:	2310      	movs	r3, #16
 8011440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011448:	2300      	movs	r3, #0
 801144a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011450:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011452:	f107 0308 	add.w	r3, r7, #8
 8011456:	4619      	mov	r1, r3
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f7ff ff73 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801145e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011462:	2110      	movs	r1, #16
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 fa5f 	bl	8011928 <SDMMC_GetCmdResp1>
 801146a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801146c:	69fb      	ldr	r3, [r7, #28]
}
 801146e:	4618      	mov	r0, r3
 8011470:	3720      	adds	r7, #32
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011476:	b580      	push	{r7, lr}
 8011478:	b088      	sub	sp, #32
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
 801147e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011484:	2311      	movs	r3, #17
 8011486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011488:	f44f 7380 	mov.w	r3, #256	; 0x100
 801148c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801148e:	2300      	movs	r3, #0
 8011490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011498:	f107 0308 	add.w	r3, r7, #8
 801149c:	4619      	mov	r1, r3
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f7ff ff50 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80114a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80114a8:	2111      	movs	r1, #17
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f000 fa3c 	bl	8011928 <SDMMC_GetCmdResp1>
 80114b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114b2:	69fb      	ldr	r3, [r7, #28]
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3720      	adds	r7, #32
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b088      	sub	sp, #32
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80114ca:	2312      	movs	r3, #18
 80114cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114d4:	2300      	movs	r3, #0
 80114d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114de:	f107 0308 	add.w	r3, r7, #8
 80114e2:	4619      	mov	r1, r3
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f7ff ff2d 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80114ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80114ee:	2112      	movs	r1, #18
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f000 fa19 	bl	8011928 <SDMMC_GetCmdResp1>
 80114f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114f8:	69fb      	ldr	r3, [r7, #28]
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3720      	adds	r7, #32
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}

08011502 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011502:	b580      	push	{r7, lr}
 8011504:	b088      	sub	sp, #32
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
 801150a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011510:	2318      	movs	r3, #24
 8011512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801151a:	2300      	movs	r3, #0
 801151c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801151e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011522:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011524:	f107 0308 	add.w	r3, r7, #8
 8011528:	4619      	mov	r1, r3
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f7ff ff0a 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011530:	f241 3288 	movw	r2, #5000	; 0x1388
 8011534:	2118      	movs	r1, #24
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f000 f9f6 	bl	8011928 <SDMMC_GetCmdResp1>
 801153c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801153e:	69fb      	ldr	r3, [r7, #28]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3720      	adds	r7, #32
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}

08011548 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b088      	sub	sp, #32
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011556:	2319      	movs	r3, #25
 8011558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801155a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801155e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011560:	2300      	movs	r3, #0
 8011562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011568:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801156a:	f107 0308 	add.w	r3, r7, #8
 801156e:	4619      	mov	r1, r3
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f7ff fee7 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011576:	f241 3288 	movw	r2, #5000	; 0x1388
 801157a:	2119      	movs	r1, #25
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f000 f9d3 	bl	8011928 <SDMMC_GetCmdResp1>
 8011582:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011584:	69fb      	ldr	r3, [r7, #28]
}
 8011586:	4618      	mov	r0, r3
 8011588:	3720      	adds	r7, #32
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
	...

08011590 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b088      	sub	sp, #32
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011598:	2300      	movs	r3, #0
 801159a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801159c:	230c      	movs	r3, #12
 801159e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115a6:	2300      	movs	r3, #0
 80115a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115ae:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115c8:	f107 0308 	add.w	r3, r7, #8
 80115cc:	4619      	mov	r1, r3
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f7ff feb8 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80115d4:	4a0b      	ldr	r2, [pc, #44]	; (8011604 <SDMMC_CmdStopTransfer+0x74>)
 80115d6:	210c      	movs	r1, #12
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f000 f9a5 	bl	8011928 <SDMMC_GetCmdResp1>
 80115de:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80115f2:	d101      	bne.n	80115f8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80115f4:	2300      	movs	r3, #0
 80115f6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80115f8:	69fb      	ldr	r3, [r7, #28]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3720      	adds	r7, #32
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	05f5e100 	.word	0x05f5e100

08011608 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b088      	sub	sp, #32
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011616:	2307      	movs	r3, #7
 8011618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801161a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801161e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011620:	2300      	movs	r3, #0
 8011622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011628:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801162a:	f107 0308 	add.w	r3, r7, #8
 801162e:	4619      	mov	r1, r3
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f7ff fe87 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011636:	f241 3288 	movw	r2, #5000	; 0x1388
 801163a:	2107      	movs	r1, #7
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f000 f973 	bl	8011928 <SDMMC_GetCmdResp1>
 8011642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011644:	69fb      	ldr	r3, [r7, #28]
}
 8011646:	4618      	mov	r0, r3
 8011648:	3720      	adds	r7, #32
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}

0801164e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801164e:	b580      	push	{r7, lr}
 8011650:	b088      	sub	sp, #32
 8011652:	af00      	add	r7, sp, #0
 8011654:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011656:	2300      	movs	r3, #0
 8011658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801165a:	2300      	movs	r3, #0
 801165c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801165e:	2300      	movs	r3, #0
 8011660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011662:	2300      	movs	r3, #0
 8011664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801166a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801166c:	f107 0308 	add.w	r3, r7, #8
 8011670:	4619      	mov	r1, r3
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f7ff fe66 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f000 fb97 	bl	8011dac <SDMMC_GetCmdError>
 801167e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011680:	69fb      	ldr	r3, [r7, #28]
}
 8011682:	4618      	mov	r0, r3
 8011684:	3720      	adds	r7, #32
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b088      	sub	sp, #32
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011692:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011696:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011698:	2308      	movs	r3, #8
 801169a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801169c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116a2:	2300      	movs	r3, #0
 80116a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116ac:	f107 0308 	add.w	r3, r7, #8
 80116b0:	4619      	mov	r1, r3
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	f7ff fe46 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f000 fb29 	bl	8011d10 <SDMMC_GetCmdResp7>
 80116be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116c0:	69fb      	ldr	r3, [r7, #28]
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3720      	adds	r7, #32
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}

080116ca <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80116ca:	b580      	push	{r7, lr}
 80116cc:	b088      	sub	sp, #32
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
 80116d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80116d8:	2337      	movs	r3, #55	; 0x37
 80116da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116e2:	2300      	movs	r3, #0
 80116e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116ec:	f107 0308 	add.w	r3, r7, #8
 80116f0:	4619      	mov	r1, r3
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7ff fe26 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80116f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80116fc:	2137      	movs	r1, #55	; 0x37
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 f912 	bl	8011928 <SDMMC_GetCmdResp1>
 8011704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011706:	69fb      	ldr	r3, [r7, #28]
}
 8011708:	4618      	mov	r0, r3
 801170a:	3720      	adds	r7, #32
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}

08011710 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b088      	sub	sp, #32
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801171e:	2329      	movs	r3, #41	; 0x29
 8011720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011728:	2300      	movs	r3, #0
 801172a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011730:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011732:	f107 0308 	add.w	r3, r7, #8
 8011736:	4619      	mov	r1, r3
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f7ff fe03 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 fa2e 	bl	8011ba0 <SDMMC_GetCmdResp3>
 8011744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011746:	69fb      	ldr	r3, [r7, #28]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3720      	adds	r7, #32
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b088      	sub	sp, #32
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801175e:	2306      	movs	r3, #6
 8011760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011768:	2300      	movs	r3, #0
 801176a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011770:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011772:	f107 0308 	add.w	r3, r7, #8
 8011776:	4619      	mov	r1, r3
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7ff fde3 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011782:	2106      	movs	r1, #6
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f000 f8cf 	bl	8011928 <SDMMC_GetCmdResp1>
 801178a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801178c:	69fb      	ldr	r3, [r7, #28]
}
 801178e:	4618      	mov	r0, r3
 8011790:	3720      	adds	r7, #32
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}

08011796 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011796:	b580      	push	{r7, lr}
 8011798:	b088      	sub	sp, #32
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801179e:	2300      	movs	r3, #0
 80117a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80117a2:	2333      	movs	r3, #51	; 0x33
 80117a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80117a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80117aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80117ac:	2300      	movs	r3, #0
 80117ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80117b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117b6:	f107 0308 	add.w	r3, r7, #8
 80117ba:	4619      	mov	r1, r3
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f7ff fdc1 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80117c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80117c6:	2133      	movs	r1, #51	; 0x33
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f000 f8ad 	bl	8011928 <SDMMC_GetCmdResp1>
 80117ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117d0:	69fb      	ldr	r3, [r7, #28]
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3720      	adds	r7, #32
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}

080117da <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80117da:	b580      	push	{r7, lr}
 80117dc:	b088      	sub	sp, #32
 80117de:	af00      	add	r7, sp, #0
 80117e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80117e2:	2300      	movs	r3, #0
 80117e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80117e6:	2302      	movs	r3, #2
 80117e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80117ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80117ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80117f0:	2300      	movs	r3, #0
 80117f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80117f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117fa:	f107 0308 	add.w	r3, r7, #8
 80117fe:	4619      	mov	r1, r3
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f7ff fd9f 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f000 f980 	bl	8011b0c <SDMMC_GetCmdResp2>
 801180c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801180e:	69fb      	ldr	r3, [r7, #28]
}
 8011810:	4618      	mov	r0, r3
 8011812:	3720      	adds	r7, #32
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b088      	sub	sp, #32
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011826:	2309      	movs	r3, #9
 8011828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801182a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801182e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011830:	2300      	movs	r3, #0
 8011832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011838:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801183a:	f107 0308 	add.w	r3, r7, #8
 801183e:	4619      	mov	r1, r3
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f7ff fd7f 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f000 f960 	bl	8011b0c <SDMMC_GetCmdResp2>
 801184c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801184e:	69fb      	ldr	r3, [r7, #28]
}
 8011850:	4618      	mov	r0, r3
 8011852:	3720      	adds	r7, #32
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b088      	sub	sp, #32
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011862:	2300      	movs	r3, #0
 8011864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011866:	2303      	movs	r3, #3
 8011868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801186a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801186e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011870:	2300      	movs	r3, #0
 8011872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011878:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801187a:	f107 0308 	add.w	r3, r7, #8
 801187e:	4619      	mov	r1, r3
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f7ff fd5f 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011886:	683a      	ldr	r2, [r7, #0]
 8011888:	2103      	movs	r1, #3
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f000 f9c8 	bl	8011c20 <SDMMC_GetCmdResp6>
 8011890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011892:	69fb      	ldr	r3, [r7, #28]
}
 8011894:	4618      	mov	r0, r3
 8011896:	3720      	adds	r7, #32
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b088      	sub	sp, #32
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80118aa:	230d      	movs	r3, #13
 80118ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80118ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80118b4:	2300      	movs	r3, #0
 80118b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80118b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80118bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80118be:	f107 0308 	add.w	r3, r7, #8
 80118c2:	4619      	mov	r1, r3
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f7ff fd3d 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80118ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80118ce:	210d      	movs	r1, #13
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f000 f829 	bl	8011928 <SDMMC_GetCmdResp1>
 80118d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80118d8:	69fb      	ldr	r3, [r7, #28]
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3720      	adds	r7, #32
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}

080118e2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80118e2:	b580      	push	{r7, lr}
 80118e4:	b088      	sub	sp, #32
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80118ea:	2300      	movs	r3, #0
 80118ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80118ee:	230d      	movs	r3, #13
 80118f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80118f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80118f8:	2300      	movs	r3, #0
 80118fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80118fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011900:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011902:	f107 0308 	add.w	r3, r7, #8
 8011906:	4619      	mov	r1, r3
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f7ff fd1b 	bl	8011344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011912:	210d      	movs	r1, #13
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f000 f807 	bl	8011928 <SDMMC_GetCmdResp1>
 801191a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801191c:	69fb      	ldr	r3, [r7, #28]
}
 801191e:	4618      	mov	r0, r3
 8011920:	3720      	adds	r7, #32
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
	...

08011928 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b088      	sub	sp, #32
 801192c:	af00      	add	r7, sp, #0
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	460b      	mov	r3, r1
 8011932:	607a      	str	r2, [r7, #4]
 8011934:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011936:	4b70      	ldr	r3, [pc, #448]	; (8011af8 <SDMMC_GetCmdResp1+0x1d0>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	4a70      	ldr	r2, [pc, #448]	; (8011afc <SDMMC_GetCmdResp1+0x1d4>)
 801193c:	fba2 2303 	umull	r2, r3, r2, r3
 8011940:	0a5a      	lsrs	r2, r3, #9
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	fb02 f303 	mul.w	r3, r2, r3
 8011948:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	1e5a      	subs	r2, r3, #1
 801194e:	61fa      	str	r2, [r7, #28]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d102      	bne.n	801195a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011958:	e0c9      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801195e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8011960:	69ba      	ldr	r2, [r7, #24]
 8011962:	4b67      	ldr	r3, [pc, #412]	; (8011b00 <SDMMC_GetCmdResp1+0x1d8>)
 8011964:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011966:	2b00      	cmp	r3, #0
 8011968:	d0ef      	beq.n	801194a <SDMMC_GetCmdResp1+0x22>
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011970:	2b00      	cmp	r3, #0
 8011972:	d1ea      	bne.n	801194a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011978:	f003 0304 	and.w	r3, r3, #4
 801197c:	2b00      	cmp	r3, #0
 801197e:	d004      	beq.n	801198a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2204      	movs	r2, #4
 8011984:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011986:	2304      	movs	r3, #4
 8011988:	e0b1      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801198e:	f003 0301 	and.w	r3, r3, #1
 8011992:	2b00      	cmp	r3, #0
 8011994:	d004      	beq.n	80119a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	2201      	movs	r2, #1
 801199a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801199c:	2301      	movs	r3, #1
 801199e:	e0a6      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	4a58      	ldr	r2, [pc, #352]	; (8011b04 <SDMMC_GetCmdResp1+0x1dc>)
 80119a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80119a6:	68f8      	ldr	r0, [r7, #12]
 80119a8:	f7ff fcf6 	bl	8011398 <SDMMC_GetCommandResponse>
 80119ac:	4603      	mov	r3, r0
 80119ae:	461a      	mov	r2, r3
 80119b0:	7afb      	ldrb	r3, [r7, #11]
 80119b2:	4293      	cmp	r3, r2
 80119b4:	d001      	beq.n	80119ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119b6:	2301      	movs	r3, #1
 80119b8:	e099      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80119ba:	2100      	movs	r1, #0
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f7ff fcf8 	bl	80113b2 <SDMMC_GetResponse>
 80119c2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80119c4:	697a      	ldr	r2, [r7, #20]
 80119c6:	4b50      	ldr	r3, [pc, #320]	; (8011b08 <SDMMC_GetCmdResp1+0x1e0>)
 80119c8:	4013      	ands	r3, r2
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d101      	bne.n	80119d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80119ce:	2300      	movs	r3, #0
 80119d0:	e08d      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	da02      	bge.n	80119de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80119d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80119dc:	e087      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d001      	beq.n	80119ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80119e8:	2340      	movs	r3, #64	; 0x40
 80119ea:	e080      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d001      	beq.n	80119fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80119f6:	2380      	movs	r3, #128	; 0x80
 80119f8:	e079      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d002      	beq.n	8011a0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a08:	e071      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d002      	beq.n	8011a1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a18:	e069      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d002      	beq.n	8011a2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a28:	e061      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d002      	beq.n	8011a3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011a38:	e059      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d002      	beq.n	8011a4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a48:	e051      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d002      	beq.n	8011a5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a58:	e049      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d002      	beq.n	8011a6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011a64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011a68:	e041      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d002      	beq.n	8011a7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a78:	e039      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d002      	beq.n	8011a8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011a88:	e031      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d002      	beq.n	8011a9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011a94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011a98:	e029      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d002      	beq.n	8011aaa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011aa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011aa8:	e021      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d002      	beq.n	8011aba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011ab4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011ab8:	e019      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d002      	beq.n	8011aca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011ac4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011ac8:	e011      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d002      	beq.n	8011ada <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011ad4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011ad8:	e009      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	f003 0308 	and.w	r3, r3, #8
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d002      	beq.n	8011aea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011ae4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011ae8:	e001      	b.n	8011aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3720      	adds	r7, #32
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	bf00      	nop
 8011af8:	2400000c 	.word	0x2400000c
 8011afc:	10624dd3 	.word	0x10624dd3
 8011b00:	00200045 	.word	0x00200045
 8011b04:	002000c5 	.word	0x002000c5
 8011b08:	fdffe008 	.word	0xfdffe008

08011b0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b085      	sub	sp, #20
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011b14:	4b1f      	ldr	r3, [pc, #124]	; (8011b94 <SDMMC_GetCmdResp2+0x88>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4a1f      	ldr	r2, [pc, #124]	; (8011b98 <SDMMC_GetCmdResp2+0x8c>)
 8011b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b1e:	0a5b      	lsrs	r3, r3, #9
 8011b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b24:	fb02 f303 	mul.w	r3, r2, r3
 8011b28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	1e5a      	subs	r2, r3, #1
 8011b2e:	60fa      	str	r2, [r7, #12]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d102      	bne.n	8011b3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b38:	e026      	b.n	8011b88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b3e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d0ef      	beq.n	8011b2a <SDMMC_GetCmdResp2+0x1e>
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d1ea      	bne.n	8011b2a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b58:	f003 0304 	and.w	r3, r3, #4
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d004      	beq.n	8011b6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2204      	movs	r2, #4
 8011b64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b66:	2304      	movs	r3, #4
 8011b68:	e00e      	b.n	8011b88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b6e:	f003 0301 	and.w	r3, r3, #1
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d004      	beq.n	8011b80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2201      	movs	r2, #1
 8011b7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	e003      	b.n	8011b88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	4a06      	ldr	r2, [pc, #24]	; (8011b9c <SDMMC_GetCmdResp2+0x90>)
 8011b84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011b86:	2300      	movs	r3, #0
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3714      	adds	r7, #20
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr
 8011b94:	2400000c 	.word	0x2400000c
 8011b98:	10624dd3 	.word	0x10624dd3
 8011b9c:	002000c5 	.word	0x002000c5

08011ba0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b085      	sub	sp, #20
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011ba8:	4b1a      	ldr	r3, [pc, #104]	; (8011c14 <SDMMC_GetCmdResp3+0x74>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4a1a      	ldr	r2, [pc, #104]	; (8011c18 <SDMMC_GetCmdResp3+0x78>)
 8011bae:	fba2 2303 	umull	r2, r3, r2, r3
 8011bb2:	0a5b      	lsrs	r3, r3, #9
 8011bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bb8:	fb02 f303 	mul.w	r3, r2, r3
 8011bbc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	1e5a      	subs	r2, r3, #1
 8011bc2:	60fa      	str	r2, [r7, #12]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d102      	bne.n	8011bce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011bc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011bcc:	e01b      	b.n	8011c06 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bd2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d0ef      	beq.n	8011bbe <SDMMC_GetCmdResp3+0x1e>
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d1ea      	bne.n	8011bbe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bec:	f003 0304 	and.w	r3, r3, #4
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d004      	beq.n	8011bfe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2204      	movs	r2, #4
 8011bf8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011bfa:	2304      	movs	r3, #4
 8011bfc:	e003      	b.n	8011c06 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4a06      	ldr	r2, [pc, #24]	; (8011c1c <SDMMC_GetCmdResp3+0x7c>)
 8011c02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011c04:	2300      	movs	r3, #0
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3714      	adds	r7, #20
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr
 8011c12:	bf00      	nop
 8011c14:	2400000c 	.word	0x2400000c
 8011c18:	10624dd3 	.word	0x10624dd3
 8011c1c:	002000c5 	.word	0x002000c5

08011c20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b088      	sub	sp, #32
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	460b      	mov	r3, r1
 8011c2a:	607a      	str	r2, [r7, #4]
 8011c2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011c2e:	4b35      	ldr	r3, [pc, #212]	; (8011d04 <SDMMC_GetCmdResp6+0xe4>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	4a35      	ldr	r2, [pc, #212]	; (8011d08 <SDMMC_GetCmdResp6+0xe8>)
 8011c34:	fba2 2303 	umull	r2, r3, r2, r3
 8011c38:	0a5b      	lsrs	r3, r3, #9
 8011c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c3e:	fb02 f303 	mul.w	r3, r2, r3
 8011c42:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	1e5a      	subs	r2, r3, #1
 8011c48:	61fa      	str	r2, [r7, #28]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d102      	bne.n	8011c54 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011c4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011c52:	e052      	b.n	8011cfa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c58:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011c5a:	69bb      	ldr	r3, [r7, #24]
 8011c5c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d0ef      	beq.n	8011c44 <SDMMC_GetCmdResp6+0x24>
 8011c64:	69bb      	ldr	r3, [r7, #24]
 8011c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d1ea      	bne.n	8011c44 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c72:	f003 0304 	and.w	r3, r3, #4
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d004      	beq.n	8011c84 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2204      	movs	r2, #4
 8011c7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c80:	2304      	movs	r3, #4
 8011c82:	e03a      	b.n	8011cfa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c88:	f003 0301 	and.w	r3, r3, #1
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d004      	beq.n	8011c9a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	2201      	movs	r2, #1
 8011c94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c96:	2301      	movs	r3, #1
 8011c98:	e02f      	b.n	8011cfa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011c9a:	68f8      	ldr	r0, [r7, #12]
 8011c9c:	f7ff fb7c 	bl	8011398 <SDMMC_GetCommandResponse>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	7afb      	ldrb	r3, [r7, #11]
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	d001      	beq.n	8011cae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011caa:	2301      	movs	r3, #1
 8011cac:	e025      	b.n	8011cfa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	4a16      	ldr	r2, [pc, #88]	; (8011d0c <SDMMC_GetCmdResp6+0xec>)
 8011cb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011cb4:	2100      	movs	r1, #0
 8011cb6:	68f8      	ldr	r0, [r7, #12]
 8011cb8:	f7ff fb7b 	bl	80113b2 <SDMMC_GetResponse>
 8011cbc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d106      	bne.n	8011cd6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	0c1b      	lsrs	r3, r3, #16
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	e011      	b.n	8011cfa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d002      	beq.n	8011ce6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011ce4:	e009      	b.n	8011cfa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d002      	beq.n	8011cf6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cf4:	e001      	b.n	8011cfa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3720      	adds	r7, #32
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	2400000c 	.word	0x2400000c
 8011d08:	10624dd3 	.word	0x10624dd3
 8011d0c:	002000c5 	.word	0x002000c5

08011d10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b085      	sub	sp, #20
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011d18:	4b22      	ldr	r3, [pc, #136]	; (8011da4 <SDMMC_GetCmdResp7+0x94>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4a22      	ldr	r2, [pc, #136]	; (8011da8 <SDMMC_GetCmdResp7+0x98>)
 8011d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8011d22:	0a5b      	lsrs	r3, r3, #9
 8011d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d28:	fb02 f303 	mul.w	r3, r2, r3
 8011d2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	1e5a      	subs	r2, r3, #1
 8011d32:	60fa      	str	r2, [r7, #12]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d102      	bne.n	8011d3e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011d38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011d3c:	e02c      	b.n	8011d98 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d42:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d0ef      	beq.n	8011d2e <SDMMC_GetCmdResp7+0x1e>
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d1ea      	bne.n	8011d2e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d5c:	f003 0304 	and.w	r3, r3, #4
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d004      	beq.n	8011d6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2204      	movs	r2, #4
 8011d68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011d6a:	2304      	movs	r3, #4
 8011d6c:	e014      	b.n	8011d98 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d72:	f003 0301 	and.w	r3, r3, #1
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d004      	beq.n	8011d84 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2201      	movs	r2, #1
 8011d7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011d80:	2301      	movs	r3, #1
 8011d82:	e009      	b.n	8011d98 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d002      	beq.n	8011d96 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2240      	movs	r2, #64	; 0x40
 8011d94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011d96:	2300      	movs	r3, #0

}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3714      	adds	r7, #20
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr
 8011da4:	2400000c 	.word	0x2400000c
 8011da8:	10624dd3 	.word	0x10624dd3

08011dac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011dac:	b480      	push	{r7}
 8011dae:	b085      	sub	sp, #20
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011db4:	4b11      	ldr	r3, [pc, #68]	; (8011dfc <SDMMC_GetCmdError+0x50>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	4a11      	ldr	r2, [pc, #68]	; (8011e00 <SDMMC_GetCmdError+0x54>)
 8011dba:	fba2 2303 	umull	r2, r3, r2, r3
 8011dbe:	0a5b      	lsrs	r3, r3, #9
 8011dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dc4:	fb02 f303 	mul.w	r3, r2, r3
 8011dc8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	1e5a      	subs	r2, r3, #1
 8011dce:	60fa      	str	r2, [r7, #12]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d102      	bne.n	8011dda <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011dd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011dd8:	e009      	b.n	8011dee <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d0f1      	beq.n	8011dca <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	4a06      	ldr	r2, [pc, #24]	; (8011e04 <SDMMC_GetCmdError+0x58>)
 8011dea:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011dec:	2300      	movs	r3, #0
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3714      	adds	r7, #20
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr
 8011dfa:	bf00      	nop
 8011dfc:	2400000c 	.word	0x2400000c
 8011e00:	10624dd3 	.word	0x10624dd3
 8011e04:	002000c5 	.word	0x002000c5

08011e08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011e0c:	4904      	ldr	r1, [pc, #16]	; (8011e20 <MX_FATFS_Init+0x18>)
 8011e0e:	4805      	ldr	r0, [pc, #20]	; (8011e24 <MX_FATFS_Init+0x1c>)
 8011e10:	f002 fd56 	bl	80148c0 <FATFS_LinkDriver>
 8011e14:	4603      	mov	r3, r0
 8011e16:	461a      	mov	r2, r3
 8011e18:	4b03      	ldr	r3, [pc, #12]	; (8011e28 <MX_FATFS_Init+0x20>)
 8011e1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011e1c:	bf00      	nop
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	24008984 	.word	0x24008984
 8011e24:	08017d38 	.word	0x08017d38
 8011e28:	24008980 	.word	0x24008980

08011e2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011e30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr

08011e3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011e42:	2300      	movs	r3, #0
 8011e44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011e46:	f000 f885 	bl	8011f54 <BSP_SD_IsDetected>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d001      	beq.n	8011e54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011e50:	2302      	movs	r3, #2
 8011e52:	e012      	b.n	8011e7a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011e54:	480b      	ldr	r0, [pc, #44]	; (8011e84 <BSP_SD_Init+0x48>)
 8011e56:	f7f8 fa21 	bl	800a29c <HAL_SD_Init>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011e5e:	79fb      	ldrb	r3, [r7, #7]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d109      	bne.n	8011e78 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011e68:	4806      	ldr	r0, [pc, #24]	; (8011e84 <BSP_SD_Init+0x48>)
 8011e6a:	f7f9 f8d1 	bl	800b010 <HAL_SD_ConfigWideBusOperation>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d001      	beq.n	8011e78 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011e74:	2301      	movs	r3, #1
 8011e76:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011e78:	79fb      	ldrb	r3, [r7, #7]
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3708      	adds	r7, #8
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	24008214 	.word	0x24008214

08011e88 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011e94:	2300      	movs	r3, #0
 8011e96:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	68ba      	ldr	r2, [r7, #8]
 8011e9c:	68f9      	ldr	r1, [r7, #12]
 8011e9e:	4806      	ldr	r0, [pc, #24]	; (8011eb8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011ea0:	f7f8 fb16 	bl	800a4d0 <HAL_SD_ReadBlocks_DMA>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d001      	beq.n	8011eae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3718      	adds	r7, #24
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	24008214 	.word	0x24008214

08011ebc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b086      	sub	sp, #24
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	60f8      	str	r0, [r7, #12]
 8011ec4:	60b9      	str	r1, [r7, #8]
 8011ec6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	68ba      	ldr	r2, [r7, #8]
 8011ed0:	68f9      	ldr	r1, [r7, #12]
 8011ed2:	4806      	ldr	r0, [pc, #24]	; (8011eec <BSP_SD_WriteBlocks_DMA+0x30>)
 8011ed4:	f7f8 fba4 	bl	800a620 <HAL_SD_WriteBlocks_DMA>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d001      	beq.n	8011ee2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011ede:	2301      	movs	r3, #1
 8011ee0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3718      	adds	r7, #24
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}
 8011eec:	24008214 	.word	0x24008214

08011ef0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011ef4:	4805      	ldr	r0, [pc, #20]	; (8011f0c <BSP_SD_GetCardState+0x1c>)
 8011ef6:	f7f9 f99d 	bl	800b234 <HAL_SD_GetCardState>
 8011efa:	4603      	mov	r3, r0
 8011efc:	2b04      	cmp	r3, #4
 8011efe:	bf14      	ite	ne
 8011f00:	2301      	movne	r3, #1
 8011f02:	2300      	moveq	r3, #0
 8011f04:	b2db      	uxtb	r3, r3
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	24008214 	.word	0x24008214

08011f10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011f18:	6879      	ldr	r1, [r7, #4]
 8011f1a:	4803      	ldr	r0, [pc, #12]	; (8011f28 <BSP_SD_GetCardInfo+0x18>)
 8011f1c:	f7f9 f84c 	bl	800afb8 <HAL_SD_GetCardInfo>
}
 8011f20:	bf00      	nop
 8011f22:	3708      	adds	r7, #8
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}
 8011f28:	24008214 	.word	0x24008214

08011f2c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b082      	sub	sp, #8
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011f34:	f000 f984 	bl	8012240 <BSP_SD_WriteCpltCallback>
}
 8011f38:	bf00      	nop
 8011f3a:	3708      	adds	r7, #8
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011f48:	f000 f986 	bl	8012258 <BSP_SD_ReadCpltCallback>
}
 8011f4c:	bf00      	nop
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b083      	sub	sp, #12
 8011f58:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8011f5e:	79fb      	ldrb	r3, [r7, #7]
 8011f60:	b2db      	uxtb	r3, r3
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	370c      	adds	r7, #12
 8011f66:	46bd      	mov	sp, r7
 8011f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6c:	4770      	bx	lr

08011f6e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011f6e:	b580      	push	{r7, lr}
 8011f70:	b084      	sub	sp, #16
 8011f72:	af00      	add	r7, sp, #0
 8011f74:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011f76:	f7f1 febb 	bl	8003cf0 <HAL_GetTick>
 8011f7a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011f7c:	e006      	b.n	8011f8c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011f7e:	f7ff ffb7 	bl	8011ef0 <BSP_SD_GetCardState>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d101      	bne.n	8011f8c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	e009      	b.n	8011fa0 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011f8c:	f7f1 feb0 	bl	8003cf0 <HAL_GetTick>
 8011f90:	4602      	mov	r2, r0
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	1ad3      	subs	r3, r2, r3
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d8f0      	bhi.n	8011f7e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3710      	adds	r7, #16
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	4603      	mov	r3, r0
 8011fb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011fb2:	4b0b      	ldr	r3, [pc, #44]	; (8011fe0 <SD_CheckStatus+0x38>)
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011fb8:	f7ff ff9a 	bl	8011ef0 <BSP_SD_GetCardState>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d107      	bne.n	8011fd2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011fc2:	4b07      	ldr	r3, [pc, #28]	; (8011fe0 <SD_CheckStatus+0x38>)
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	f023 0301 	bic.w	r3, r3, #1
 8011fcc:	b2da      	uxtb	r2, r3
 8011fce:	4b04      	ldr	r3, [pc, #16]	; (8011fe0 <SD_CheckStatus+0x38>)
 8011fd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011fd2:	4b03      	ldr	r3, [pc, #12]	; (8011fe0 <SD_CheckStatus+0x38>)
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	b2db      	uxtb	r3, r3
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3708      	adds	r7, #8
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	24000019 	.word	0x24000019

08011fe4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	4603      	mov	r3, r0
 8011fec:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011fee:	f7ff ff25 	bl	8011e3c <BSP_SD_Init>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d107      	bne.n	8012008 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011ff8:	79fb      	ldrb	r3, [r7, #7]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7ff ffd4 	bl	8011fa8 <SD_CheckStatus>
 8012000:	4603      	mov	r3, r0
 8012002:	461a      	mov	r2, r3
 8012004:	4b04      	ldr	r3, [pc, #16]	; (8012018 <SD_initialize+0x34>)
 8012006:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012008:	4b03      	ldr	r3, [pc, #12]	; (8012018 <SD_initialize+0x34>)
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	b2db      	uxtb	r3, r3
}
 801200e:	4618      	mov	r0, r3
 8012010:	3708      	adds	r7, #8
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
 8012016:	bf00      	nop
 8012018:	24000019 	.word	0x24000019

0801201c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b082      	sub	sp, #8
 8012020:	af00      	add	r7, sp, #0
 8012022:	4603      	mov	r3, r0
 8012024:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012026:	79fb      	ldrb	r3, [r7, #7]
 8012028:	4618      	mov	r0, r3
 801202a:	f7ff ffbd 	bl	8011fa8 <SD_CheckStatus>
 801202e:	4603      	mov	r3, r0
}
 8012030:	4618      	mov	r0, r3
 8012032:	3708      	adds	r7, #8
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b086      	sub	sp, #24
 801203c:	af00      	add	r7, sp, #0
 801203e:	60b9      	str	r1, [r7, #8]
 8012040:	607a      	str	r2, [r7, #4]
 8012042:	603b      	str	r3, [r7, #0]
 8012044:	4603      	mov	r3, r0
 8012046:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012048:	2301      	movs	r3, #1
 801204a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801204c:	f247 5030 	movw	r0, #30000	; 0x7530
 8012050:	f7ff ff8d 	bl	8011f6e <SD_CheckStatusWithTimeout>
 8012054:	4603      	mov	r3, r0
 8012056:	2b00      	cmp	r3, #0
 8012058:	da01      	bge.n	801205e <SD_read+0x26>
  {
    return res;
 801205a:	7dfb      	ldrb	r3, [r7, #23]
 801205c:	e03b      	b.n	80120d6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801205e:	683a      	ldr	r2, [r7, #0]
 8012060:	6879      	ldr	r1, [r7, #4]
 8012062:	68b8      	ldr	r0, [r7, #8]
 8012064:	f7ff ff10 	bl	8011e88 <BSP_SD_ReadBlocks_DMA>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d132      	bne.n	80120d4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801206e:	4b1c      	ldr	r3, [pc, #112]	; (80120e0 <SD_read+0xa8>)
 8012070:	2200      	movs	r2, #0
 8012072:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012074:	f7f1 fe3c 	bl	8003cf0 <HAL_GetTick>
 8012078:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801207a:	bf00      	nop
 801207c:	4b18      	ldr	r3, [pc, #96]	; (80120e0 <SD_read+0xa8>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d108      	bne.n	8012096 <SD_read+0x5e>
 8012084:	f7f1 fe34 	bl	8003cf0 <HAL_GetTick>
 8012088:	4602      	mov	r2, r0
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	1ad3      	subs	r3, r2, r3
 801208e:	f247 522f 	movw	r2, #29999	; 0x752f
 8012092:	4293      	cmp	r3, r2
 8012094:	d9f2      	bls.n	801207c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8012096:	4b12      	ldr	r3, [pc, #72]	; (80120e0 <SD_read+0xa8>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d102      	bne.n	80120a4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801209e:	2301      	movs	r3, #1
 80120a0:	75fb      	strb	r3, [r7, #23]
 80120a2:	e017      	b.n	80120d4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80120a4:	4b0e      	ldr	r3, [pc, #56]	; (80120e0 <SD_read+0xa8>)
 80120a6:	2200      	movs	r2, #0
 80120a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80120aa:	f7f1 fe21 	bl	8003cf0 <HAL_GetTick>
 80120ae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80120b0:	e007      	b.n	80120c2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80120b2:	f7ff ff1d 	bl	8011ef0 <BSP_SD_GetCardState>
 80120b6:	4603      	mov	r3, r0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d102      	bne.n	80120c2 <SD_read+0x8a>
          {
            res = RES_OK;
 80120bc:	2300      	movs	r3, #0
 80120be:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80120c0:	e008      	b.n	80120d4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80120c2:	f7f1 fe15 	bl	8003cf0 <HAL_GetTick>
 80120c6:	4602      	mov	r2, r0
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80120d0:	4293      	cmp	r3, r2
 80120d2:	d9ee      	bls.n	80120b2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80120d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3718      	adds	r7, #24
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	24008dec 	.word	0x24008dec

080120e4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b086      	sub	sp, #24
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60b9      	str	r1, [r7, #8]
 80120ec:	607a      	str	r2, [r7, #4]
 80120ee:	603b      	str	r3, [r7, #0]
 80120f0:	4603      	mov	r3, r0
 80120f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80120f4:	2301      	movs	r3, #1
 80120f6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80120f8:	4b24      	ldr	r3, [pc, #144]	; (801218c <SD_write+0xa8>)
 80120fa:	2200      	movs	r2, #0
 80120fc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80120fe:	f247 5030 	movw	r0, #30000	; 0x7530
 8012102:	f7ff ff34 	bl	8011f6e <SD_CheckStatusWithTimeout>
 8012106:	4603      	mov	r3, r0
 8012108:	2b00      	cmp	r3, #0
 801210a:	da01      	bge.n	8012110 <SD_write+0x2c>
  {
    return res;
 801210c:	7dfb      	ldrb	r3, [r7, #23]
 801210e:	e038      	b.n	8012182 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012110:	683a      	ldr	r2, [r7, #0]
 8012112:	6879      	ldr	r1, [r7, #4]
 8012114:	68b8      	ldr	r0, [r7, #8]
 8012116:	f7ff fed1 	bl	8011ebc <BSP_SD_WriteBlocks_DMA>
 801211a:	4603      	mov	r3, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d12f      	bne.n	8012180 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012120:	f7f1 fde6 	bl	8003cf0 <HAL_GetTick>
 8012124:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012126:	bf00      	nop
 8012128:	4b18      	ldr	r3, [pc, #96]	; (801218c <SD_write+0xa8>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d108      	bne.n	8012142 <SD_write+0x5e>
 8012130:	f7f1 fdde 	bl	8003cf0 <HAL_GetTick>
 8012134:	4602      	mov	r2, r0
 8012136:	693b      	ldr	r3, [r7, #16]
 8012138:	1ad3      	subs	r3, r2, r3
 801213a:	f247 522f 	movw	r2, #29999	; 0x752f
 801213e:	4293      	cmp	r3, r2
 8012140:	d9f2      	bls.n	8012128 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8012142:	4b12      	ldr	r3, [pc, #72]	; (801218c <SD_write+0xa8>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d102      	bne.n	8012150 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801214a:	2301      	movs	r3, #1
 801214c:	75fb      	strb	r3, [r7, #23]
 801214e:	e017      	b.n	8012180 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012150:	4b0e      	ldr	r3, [pc, #56]	; (801218c <SD_write+0xa8>)
 8012152:	2200      	movs	r2, #0
 8012154:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012156:	f7f1 fdcb 	bl	8003cf0 <HAL_GetTick>
 801215a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801215c:	e007      	b.n	801216e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801215e:	f7ff fec7 	bl	8011ef0 <BSP_SD_GetCardState>
 8012162:	4603      	mov	r3, r0
 8012164:	2b00      	cmp	r3, #0
 8012166:	d102      	bne.n	801216e <SD_write+0x8a>
          {
            res = RES_OK;
 8012168:	2300      	movs	r3, #0
 801216a:	75fb      	strb	r3, [r7, #23]
            break;
 801216c:	e008      	b.n	8012180 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801216e:	f7f1 fdbf 	bl	8003cf0 <HAL_GetTick>
 8012172:	4602      	mov	r2, r0
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	1ad3      	subs	r3, r2, r3
 8012178:	f247 522f 	movw	r2, #29999	; 0x752f
 801217c:	4293      	cmp	r3, r2
 801217e:	d9ee      	bls.n	801215e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012180:	7dfb      	ldrb	r3, [r7, #23]
}
 8012182:	4618      	mov	r0, r3
 8012184:	3718      	adds	r7, #24
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	24008de8 	.word	0x24008de8

08012190 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b08c      	sub	sp, #48	; 0x30
 8012194:	af00      	add	r7, sp, #0
 8012196:	4603      	mov	r3, r0
 8012198:	603a      	str	r2, [r7, #0]
 801219a:	71fb      	strb	r3, [r7, #7]
 801219c:	460b      	mov	r3, r1
 801219e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80121a0:	2301      	movs	r3, #1
 80121a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80121a6:	4b25      	ldr	r3, [pc, #148]	; (801223c <SD_ioctl+0xac>)
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	f003 0301 	and.w	r3, r3, #1
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d001      	beq.n	80121b8 <SD_ioctl+0x28>
 80121b4:	2303      	movs	r3, #3
 80121b6:	e03c      	b.n	8012232 <SD_ioctl+0xa2>

  switch (cmd)
 80121b8:	79bb      	ldrb	r3, [r7, #6]
 80121ba:	2b03      	cmp	r3, #3
 80121bc:	d834      	bhi.n	8012228 <SD_ioctl+0x98>
 80121be:	a201      	add	r2, pc, #4	; (adr r2, 80121c4 <SD_ioctl+0x34>)
 80121c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121c4:	080121d5 	.word	0x080121d5
 80121c8:	080121dd 	.word	0x080121dd
 80121cc:	080121f5 	.word	0x080121f5
 80121d0:	0801220f 	.word	0x0801220f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80121d4:	2300      	movs	r3, #0
 80121d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80121da:	e028      	b.n	801222e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80121dc:	f107 0308 	add.w	r3, r7, #8
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7ff fe95 	bl	8011f10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80121e6:	6a3a      	ldr	r2, [r7, #32]
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80121ec:	2300      	movs	r3, #0
 80121ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80121f2:	e01c      	b.n	801222e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80121f4:	f107 0308 	add.w	r3, r7, #8
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7ff fe89 	bl	8011f10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80121fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012200:	b29a      	uxth	r2, r3
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012206:	2300      	movs	r3, #0
 8012208:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801220c:	e00f      	b.n	801222e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801220e:	f107 0308 	add.w	r3, r7, #8
 8012212:	4618      	mov	r0, r3
 8012214:	f7ff fe7c 	bl	8011f10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221a:	0a5a      	lsrs	r2, r3, #9
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012220:	2300      	movs	r3, #0
 8012222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012226:	e002      	b.n	801222e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012228:	2304      	movs	r3, #4
 801222a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801222e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012232:	4618      	mov	r0, r3
 8012234:	3730      	adds	r7, #48	; 0x30
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	24000019 	.word	0x24000019

08012240 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012240:	b480      	push	{r7}
 8012242:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012244:	4b03      	ldr	r3, [pc, #12]	; (8012254 <BSP_SD_WriteCpltCallback+0x14>)
 8012246:	2201      	movs	r2, #1
 8012248:	601a      	str	r2, [r3, #0]
}
 801224a:	bf00      	nop
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr
 8012254:	24008de8 	.word	0x24008de8

08012258 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012258:	b480      	push	{r7}
 801225a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801225c:	4b03      	ldr	r3, [pc, #12]	; (801226c <BSP_SD_ReadCpltCallback+0x14>)
 801225e:	2201      	movs	r2, #1
 8012260:	601a      	str	r2, [r3, #0]
}
 8012262:	bf00      	nop
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr
 801226c:	24008dec 	.word	0x24008dec

08012270 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	4603      	mov	r3, r0
 8012278:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801227a:	79fb      	ldrb	r3, [r7, #7]
 801227c:	4a08      	ldr	r2, [pc, #32]	; (80122a0 <disk_status+0x30>)
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	4413      	add	r3, r2
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	79fa      	ldrb	r2, [r7, #7]
 8012288:	4905      	ldr	r1, [pc, #20]	; (80122a0 <disk_status+0x30>)
 801228a:	440a      	add	r2, r1
 801228c:	7a12      	ldrb	r2, [r2, #8]
 801228e:	4610      	mov	r0, r2
 8012290:	4798      	blx	r3
 8012292:	4603      	mov	r3, r0
 8012294:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012296:	7bfb      	ldrb	r3, [r7, #15]
}
 8012298:	4618      	mov	r0, r3
 801229a:	3710      	adds	r7, #16
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	24008e18 	.word	0x24008e18

080122a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	4603      	mov	r3, r0
 80122ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80122ae:	2300      	movs	r3, #0
 80122b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80122b2:	79fb      	ldrb	r3, [r7, #7]
 80122b4:	4a0d      	ldr	r2, [pc, #52]	; (80122ec <disk_initialize+0x48>)
 80122b6:	5cd3      	ldrb	r3, [r2, r3]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d111      	bne.n	80122e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80122bc:	79fb      	ldrb	r3, [r7, #7]
 80122be:	4a0b      	ldr	r2, [pc, #44]	; (80122ec <disk_initialize+0x48>)
 80122c0:	2101      	movs	r1, #1
 80122c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80122c4:	79fb      	ldrb	r3, [r7, #7]
 80122c6:	4a09      	ldr	r2, [pc, #36]	; (80122ec <disk_initialize+0x48>)
 80122c8:	009b      	lsls	r3, r3, #2
 80122ca:	4413      	add	r3, r2
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	79fa      	ldrb	r2, [r7, #7]
 80122d2:	4906      	ldr	r1, [pc, #24]	; (80122ec <disk_initialize+0x48>)
 80122d4:	440a      	add	r2, r1
 80122d6:	7a12      	ldrb	r2, [r2, #8]
 80122d8:	4610      	mov	r0, r2
 80122da:	4798      	blx	r3
 80122dc:	4603      	mov	r3, r0
 80122de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80122e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3710      	adds	r7, #16
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	24008e18 	.word	0x24008e18

080122f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80122f0:	b590      	push	{r4, r7, lr}
 80122f2:	b087      	sub	sp, #28
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	60b9      	str	r1, [r7, #8]
 80122f8:	607a      	str	r2, [r7, #4]
 80122fa:	603b      	str	r3, [r7, #0]
 80122fc:	4603      	mov	r3, r0
 80122fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012300:	7bfb      	ldrb	r3, [r7, #15]
 8012302:	4a0a      	ldr	r2, [pc, #40]	; (801232c <disk_read+0x3c>)
 8012304:	009b      	lsls	r3, r3, #2
 8012306:	4413      	add	r3, r2
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	689c      	ldr	r4, [r3, #8]
 801230c:	7bfb      	ldrb	r3, [r7, #15]
 801230e:	4a07      	ldr	r2, [pc, #28]	; (801232c <disk_read+0x3c>)
 8012310:	4413      	add	r3, r2
 8012312:	7a18      	ldrb	r0, [r3, #8]
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	68b9      	ldr	r1, [r7, #8]
 801231a:	47a0      	blx	r4
 801231c:	4603      	mov	r3, r0
 801231e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012320:	7dfb      	ldrb	r3, [r7, #23]
}
 8012322:	4618      	mov	r0, r3
 8012324:	371c      	adds	r7, #28
 8012326:	46bd      	mov	sp, r7
 8012328:	bd90      	pop	{r4, r7, pc}
 801232a:	bf00      	nop
 801232c:	24008e18 	.word	0x24008e18

08012330 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012330:	b590      	push	{r4, r7, lr}
 8012332:	b087      	sub	sp, #28
 8012334:	af00      	add	r7, sp, #0
 8012336:	60b9      	str	r1, [r7, #8]
 8012338:	607a      	str	r2, [r7, #4]
 801233a:	603b      	str	r3, [r7, #0]
 801233c:	4603      	mov	r3, r0
 801233e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012340:	7bfb      	ldrb	r3, [r7, #15]
 8012342:	4a0a      	ldr	r2, [pc, #40]	; (801236c <disk_write+0x3c>)
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	4413      	add	r3, r2
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	68dc      	ldr	r4, [r3, #12]
 801234c:	7bfb      	ldrb	r3, [r7, #15]
 801234e:	4a07      	ldr	r2, [pc, #28]	; (801236c <disk_write+0x3c>)
 8012350:	4413      	add	r3, r2
 8012352:	7a18      	ldrb	r0, [r3, #8]
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	687a      	ldr	r2, [r7, #4]
 8012358:	68b9      	ldr	r1, [r7, #8]
 801235a:	47a0      	blx	r4
 801235c:	4603      	mov	r3, r0
 801235e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012360:	7dfb      	ldrb	r3, [r7, #23]
}
 8012362:	4618      	mov	r0, r3
 8012364:	371c      	adds	r7, #28
 8012366:	46bd      	mov	sp, r7
 8012368:	bd90      	pop	{r4, r7, pc}
 801236a:	bf00      	nop
 801236c:	24008e18 	.word	0x24008e18

08012370 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b084      	sub	sp, #16
 8012374:	af00      	add	r7, sp, #0
 8012376:	4603      	mov	r3, r0
 8012378:	603a      	str	r2, [r7, #0]
 801237a:	71fb      	strb	r3, [r7, #7]
 801237c:	460b      	mov	r3, r1
 801237e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012380:	79fb      	ldrb	r3, [r7, #7]
 8012382:	4a09      	ldr	r2, [pc, #36]	; (80123a8 <disk_ioctl+0x38>)
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	4413      	add	r3, r2
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	691b      	ldr	r3, [r3, #16]
 801238c:	79fa      	ldrb	r2, [r7, #7]
 801238e:	4906      	ldr	r1, [pc, #24]	; (80123a8 <disk_ioctl+0x38>)
 8012390:	440a      	add	r2, r1
 8012392:	7a10      	ldrb	r0, [r2, #8]
 8012394:	79b9      	ldrb	r1, [r7, #6]
 8012396:	683a      	ldr	r2, [r7, #0]
 8012398:	4798      	blx	r3
 801239a:	4603      	mov	r3, r0
 801239c:	73fb      	strb	r3, [r7, #15]
  return res;
 801239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	24008e18 	.word	0x24008e18

080123ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80123ac:	b480      	push	{r7}
 80123ae:	b085      	sub	sp, #20
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	3301      	adds	r3, #1
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80123bc:	89fb      	ldrh	r3, [r7, #14]
 80123be:	021b      	lsls	r3, r3, #8
 80123c0:	b21a      	sxth	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	b21b      	sxth	r3, r3
 80123c8:	4313      	orrs	r3, r2
 80123ca:	b21b      	sxth	r3, r3
 80123cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80123ce:	89fb      	ldrh	r3, [r7, #14]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3714      	adds	r7, #20
 80123d4:	46bd      	mov	sp, r7
 80123d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123da:	4770      	bx	lr

080123dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80123dc:	b480      	push	{r7}
 80123de:	b085      	sub	sp, #20
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	3303      	adds	r3, #3
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	021b      	lsls	r3, r3, #8
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	3202      	adds	r2, #2
 80123f4:	7812      	ldrb	r2, [r2, #0]
 80123f6:	4313      	orrs	r3, r2
 80123f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	021b      	lsls	r3, r3, #8
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	3201      	adds	r2, #1
 8012402:	7812      	ldrb	r2, [r2, #0]
 8012404:	4313      	orrs	r3, r2
 8012406:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	021b      	lsls	r3, r3, #8
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	7812      	ldrb	r2, [r2, #0]
 8012410:	4313      	orrs	r3, r2
 8012412:	60fb      	str	r3, [r7, #12]
	return rv;
 8012414:	68fb      	ldr	r3, [r7, #12]
}
 8012416:	4618      	mov	r0, r3
 8012418:	3714      	adds	r7, #20
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr

08012422 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012422:	b480      	push	{r7}
 8012424:	b083      	sub	sp, #12
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
 801242a:	460b      	mov	r3, r1
 801242c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	1c5a      	adds	r2, r3, #1
 8012432:	607a      	str	r2, [r7, #4]
 8012434:	887a      	ldrh	r2, [r7, #2]
 8012436:	b2d2      	uxtb	r2, r2
 8012438:	701a      	strb	r2, [r3, #0]
 801243a:	887b      	ldrh	r3, [r7, #2]
 801243c:	0a1b      	lsrs	r3, r3, #8
 801243e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	1c5a      	adds	r2, r3, #1
 8012444:	607a      	str	r2, [r7, #4]
 8012446:	887a      	ldrh	r2, [r7, #2]
 8012448:	b2d2      	uxtb	r2, r2
 801244a:	701a      	strb	r2, [r3, #0]
}
 801244c:	bf00      	nop
 801244e:	370c      	adds	r7, #12
 8012450:	46bd      	mov	sp, r7
 8012452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012456:	4770      	bx	lr

08012458 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	1c5a      	adds	r2, r3, #1
 8012466:	607a      	str	r2, [r7, #4]
 8012468:	683a      	ldr	r2, [r7, #0]
 801246a:	b2d2      	uxtb	r2, r2
 801246c:	701a      	strb	r2, [r3, #0]
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	0a1b      	lsrs	r3, r3, #8
 8012472:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	1c5a      	adds	r2, r3, #1
 8012478:	607a      	str	r2, [r7, #4]
 801247a:	683a      	ldr	r2, [r7, #0]
 801247c:	b2d2      	uxtb	r2, r2
 801247e:	701a      	strb	r2, [r3, #0]
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	0a1b      	lsrs	r3, r3, #8
 8012484:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	1c5a      	adds	r2, r3, #1
 801248a:	607a      	str	r2, [r7, #4]
 801248c:	683a      	ldr	r2, [r7, #0]
 801248e:	b2d2      	uxtb	r2, r2
 8012490:	701a      	strb	r2, [r3, #0]
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	0a1b      	lsrs	r3, r3, #8
 8012496:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	1c5a      	adds	r2, r3, #1
 801249c:	607a      	str	r2, [r7, #4]
 801249e:	683a      	ldr	r2, [r7, #0]
 80124a0:	b2d2      	uxtb	r2, r2
 80124a2:	701a      	strb	r2, [r3, #0]
}
 80124a4:	bf00      	nop
 80124a6:	370c      	adds	r7, #12
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr

080124b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80124b0:	b480      	push	{r7}
 80124b2:	b087      	sub	sp, #28
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d00d      	beq.n	80124e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80124ca:	693a      	ldr	r2, [r7, #16]
 80124cc:	1c53      	adds	r3, r2, #1
 80124ce:	613b      	str	r3, [r7, #16]
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	1c59      	adds	r1, r3, #1
 80124d4:	6179      	str	r1, [r7, #20]
 80124d6:	7812      	ldrb	r2, [r2, #0]
 80124d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	3b01      	subs	r3, #1
 80124de:	607b      	str	r3, [r7, #4]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d1f1      	bne.n	80124ca <mem_cpy+0x1a>
	}
}
 80124e6:	bf00      	nop
 80124e8:	371c      	adds	r7, #28
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr

080124f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80124f2:	b480      	push	{r7}
 80124f4:	b087      	sub	sp, #28
 80124f6:	af00      	add	r7, sp, #0
 80124f8:	60f8      	str	r0, [r7, #12]
 80124fa:	60b9      	str	r1, [r7, #8]
 80124fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	1c5a      	adds	r2, r3, #1
 8012506:	617a      	str	r2, [r7, #20]
 8012508:	68ba      	ldr	r2, [r7, #8]
 801250a:	b2d2      	uxtb	r2, r2
 801250c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	3b01      	subs	r3, #1
 8012512:	607b      	str	r3, [r7, #4]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d1f3      	bne.n	8012502 <mem_set+0x10>
}
 801251a:	bf00      	nop
 801251c:	bf00      	nop
 801251e:	371c      	adds	r7, #28
 8012520:	46bd      	mov	sp, r7
 8012522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012526:	4770      	bx	lr

08012528 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012528:	b480      	push	{r7}
 801252a:	b089      	sub	sp, #36	; 0x24
 801252c:	af00      	add	r7, sp, #0
 801252e:	60f8      	str	r0, [r7, #12]
 8012530:	60b9      	str	r1, [r7, #8]
 8012532:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	61fb      	str	r3, [r7, #28]
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801253c:	2300      	movs	r3, #0
 801253e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	1c5a      	adds	r2, r3, #1
 8012544:	61fa      	str	r2, [r7, #28]
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	4619      	mov	r1, r3
 801254a:	69bb      	ldr	r3, [r7, #24]
 801254c:	1c5a      	adds	r2, r3, #1
 801254e:	61ba      	str	r2, [r7, #24]
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	1acb      	subs	r3, r1, r3
 8012554:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	3b01      	subs	r3, #1
 801255a:	607b      	str	r3, [r7, #4]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d002      	beq.n	8012568 <mem_cmp+0x40>
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d0eb      	beq.n	8012540 <mem_cmp+0x18>

	return r;
 8012568:	697b      	ldr	r3, [r7, #20]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3724      	adds	r7, #36	; 0x24
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr

08012576 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012576:	b480      	push	{r7}
 8012578:	b083      	sub	sp, #12
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012580:	e002      	b.n	8012588 <chk_chr+0x12>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	3301      	adds	r3, #1
 8012586:	607b      	str	r3, [r7, #4]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d005      	beq.n	801259c <chk_chr+0x26>
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	781b      	ldrb	r3, [r3, #0]
 8012594:	461a      	mov	r2, r3
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	4293      	cmp	r3, r2
 801259a:	d1f2      	bne.n	8012582 <chk_chr+0xc>
	return *str;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	781b      	ldrb	r3, [r3, #0]
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr

080125ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b085      	sub	sp, #20
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80125b6:	2300      	movs	r3, #0
 80125b8:	60bb      	str	r3, [r7, #8]
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	60fb      	str	r3, [r7, #12]
 80125be:	e029      	b.n	8012614 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80125c0:	4a27      	ldr	r2, [pc, #156]	; (8012660 <chk_lock+0xb4>)
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	011b      	lsls	r3, r3, #4
 80125c6:	4413      	add	r3, r2
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d01d      	beq.n	801260a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80125ce:	4a24      	ldr	r2, [pc, #144]	; (8012660 <chk_lock+0xb4>)
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	011b      	lsls	r3, r3, #4
 80125d4:	4413      	add	r3, r2
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d116      	bne.n	801260e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80125e0:	4a1f      	ldr	r2, [pc, #124]	; (8012660 <chk_lock+0xb4>)
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	011b      	lsls	r3, r3, #4
 80125e6:	4413      	add	r3, r2
 80125e8:	3304      	adds	r3, #4
 80125ea:	681a      	ldr	r2, [r3, #0]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d10c      	bne.n	801260e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80125f4:	4a1a      	ldr	r2, [pc, #104]	; (8012660 <chk_lock+0xb4>)
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	011b      	lsls	r3, r3, #4
 80125fa:	4413      	add	r3, r2
 80125fc:	3308      	adds	r3, #8
 80125fe:	681a      	ldr	r2, [r3, #0]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012604:	429a      	cmp	r2, r3
 8012606:	d102      	bne.n	801260e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012608:	e007      	b.n	801261a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801260a:	2301      	movs	r3, #1
 801260c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	3301      	adds	r3, #1
 8012612:	60fb      	str	r3, [r7, #12]
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	2b01      	cmp	r3, #1
 8012618:	d9d2      	bls.n	80125c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2b02      	cmp	r3, #2
 801261e:	d109      	bne.n	8012634 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d102      	bne.n	801262c <chk_lock+0x80>
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	2b02      	cmp	r3, #2
 801262a:	d101      	bne.n	8012630 <chk_lock+0x84>
 801262c:	2300      	movs	r3, #0
 801262e:	e010      	b.n	8012652 <chk_lock+0xa6>
 8012630:	2312      	movs	r3, #18
 8012632:	e00e      	b.n	8012652 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d108      	bne.n	801264c <chk_lock+0xa0>
 801263a:	4a09      	ldr	r2, [pc, #36]	; (8012660 <chk_lock+0xb4>)
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	011b      	lsls	r3, r3, #4
 8012640:	4413      	add	r3, r2
 8012642:	330c      	adds	r3, #12
 8012644:	881b      	ldrh	r3, [r3, #0]
 8012646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801264a:	d101      	bne.n	8012650 <chk_lock+0xa4>
 801264c:	2310      	movs	r3, #16
 801264e:	e000      	b.n	8012652 <chk_lock+0xa6>
 8012650:	2300      	movs	r3, #0
}
 8012652:	4618      	mov	r0, r3
 8012654:	3714      	adds	r7, #20
 8012656:	46bd      	mov	sp, r7
 8012658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop
 8012660:	24008df8 	.word	0x24008df8

08012664 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012664:	b480      	push	{r7}
 8012666:	b083      	sub	sp, #12
 8012668:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801266a:	2300      	movs	r3, #0
 801266c:	607b      	str	r3, [r7, #4]
 801266e:	e002      	b.n	8012676 <enq_lock+0x12>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	3301      	adds	r3, #1
 8012674:	607b      	str	r3, [r7, #4]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2b01      	cmp	r3, #1
 801267a:	d806      	bhi.n	801268a <enq_lock+0x26>
 801267c:	4a09      	ldr	r2, [pc, #36]	; (80126a4 <enq_lock+0x40>)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	011b      	lsls	r3, r3, #4
 8012682:	4413      	add	r3, r2
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d1f2      	bne.n	8012670 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2b02      	cmp	r3, #2
 801268e:	bf14      	ite	ne
 8012690:	2301      	movne	r3, #1
 8012692:	2300      	moveq	r3, #0
 8012694:	b2db      	uxtb	r3, r3
}
 8012696:	4618      	mov	r0, r3
 8012698:	370c      	adds	r7, #12
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr
 80126a2:	bf00      	nop
 80126a4:	24008df8 	.word	0x24008df8

080126a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80126a8:	b480      	push	{r7}
 80126aa:	b085      	sub	sp, #20
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80126b2:	2300      	movs	r3, #0
 80126b4:	60fb      	str	r3, [r7, #12]
 80126b6:	e01f      	b.n	80126f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80126b8:	4a41      	ldr	r2, [pc, #260]	; (80127c0 <inc_lock+0x118>)
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	011b      	lsls	r3, r3, #4
 80126be:	4413      	add	r3, r2
 80126c0:	681a      	ldr	r2, [r3, #0]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d113      	bne.n	80126f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80126ca:	4a3d      	ldr	r2, [pc, #244]	; (80127c0 <inc_lock+0x118>)
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	011b      	lsls	r3, r3, #4
 80126d0:	4413      	add	r3, r2
 80126d2:	3304      	adds	r3, #4
 80126d4:	681a      	ldr	r2, [r3, #0]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80126da:	429a      	cmp	r2, r3
 80126dc:	d109      	bne.n	80126f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80126de:	4a38      	ldr	r2, [pc, #224]	; (80127c0 <inc_lock+0x118>)
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	011b      	lsls	r3, r3, #4
 80126e4:	4413      	add	r3, r2
 80126e6:	3308      	adds	r3, #8
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d006      	beq.n	8012700 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	3301      	adds	r3, #1
 80126f6:	60fb      	str	r3, [r7, #12]
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	d9dc      	bls.n	80126b8 <inc_lock+0x10>
 80126fe:	e000      	b.n	8012702 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012700:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	2b02      	cmp	r3, #2
 8012706:	d132      	bne.n	801276e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012708:	2300      	movs	r3, #0
 801270a:	60fb      	str	r3, [r7, #12]
 801270c:	e002      	b.n	8012714 <inc_lock+0x6c>
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	3301      	adds	r3, #1
 8012712:	60fb      	str	r3, [r7, #12]
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2b01      	cmp	r3, #1
 8012718:	d806      	bhi.n	8012728 <inc_lock+0x80>
 801271a:	4a29      	ldr	r2, [pc, #164]	; (80127c0 <inc_lock+0x118>)
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	011b      	lsls	r3, r3, #4
 8012720:	4413      	add	r3, r2
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1f2      	bne.n	801270e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	2b02      	cmp	r3, #2
 801272c:	d101      	bne.n	8012732 <inc_lock+0x8a>
 801272e:	2300      	movs	r3, #0
 8012730:	e040      	b.n	80127b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681a      	ldr	r2, [r3, #0]
 8012736:	4922      	ldr	r1, [pc, #136]	; (80127c0 <inc_lock+0x118>)
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	011b      	lsls	r3, r3, #4
 801273c:	440b      	add	r3, r1
 801273e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	689a      	ldr	r2, [r3, #8]
 8012744:	491e      	ldr	r1, [pc, #120]	; (80127c0 <inc_lock+0x118>)
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	011b      	lsls	r3, r3, #4
 801274a:	440b      	add	r3, r1
 801274c:	3304      	adds	r3, #4
 801274e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	695a      	ldr	r2, [r3, #20]
 8012754:	491a      	ldr	r1, [pc, #104]	; (80127c0 <inc_lock+0x118>)
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	011b      	lsls	r3, r3, #4
 801275a:	440b      	add	r3, r1
 801275c:	3308      	adds	r3, #8
 801275e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012760:	4a17      	ldr	r2, [pc, #92]	; (80127c0 <inc_lock+0x118>)
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	011b      	lsls	r3, r3, #4
 8012766:	4413      	add	r3, r2
 8012768:	330c      	adds	r3, #12
 801276a:	2200      	movs	r2, #0
 801276c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d009      	beq.n	8012788 <inc_lock+0xe0>
 8012774:	4a12      	ldr	r2, [pc, #72]	; (80127c0 <inc_lock+0x118>)
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	011b      	lsls	r3, r3, #4
 801277a:	4413      	add	r3, r2
 801277c:	330c      	adds	r3, #12
 801277e:	881b      	ldrh	r3, [r3, #0]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d001      	beq.n	8012788 <inc_lock+0xe0>
 8012784:	2300      	movs	r3, #0
 8012786:	e015      	b.n	80127b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d108      	bne.n	80127a0 <inc_lock+0xf8>
 801278e:	4a0c      	ldr	r2, [pc, #48]	; (80127c0 <inc_lock+0x118>)
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	011b      	lsls	r3, r3, #4
 8012794:	4413      	add	r3, r2
 8012796:	330c      	adds	r3, #12
 8012798:	881b      	ldrh	r3, [r3, #0]
 801279a:	3301      	adds	r3, #1
 801279c:	b29a      	uxth	r2, r3
 801279e:	e001      	b.n	80127a4 <inc_lock+0xfc>
 80127a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80127a4:	4906      	ldr	r1, [pc, #24]	; (80127c0 <inc_lock+0x118>)
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	011b      	lsls	r3, r3, #4
 80127aa:	440b      	add	r3, r1
 80127ac:	330c      	adds	r3, #12
 80127ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	3301      	adds	r3, #1
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	3714      	adds	r7, #20
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr
 80127c0:	24008df8 	.word	0x24008df8

080127c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80127c4:	b480      	push	{r7}
 80127c6:	b085      	sub	sp, #20
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	3b01      	subs	r3, #1
 80127d0:	607b      	str	r3, [r7, #4]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2b01      	cmp	r3, #1
 80127d6:	d825      	bhi.n	8012824 <dec_lock+0x60>
		n = Files[i].ctr;
 80127d8:	4a17      	ldr	r2, [pc, #92]	; (8012838 <dec_lock+0x74>)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	011b      	lsls	r3, r3, #4
 80127de:	4413      	add	r3, r2
 80127e0:	330c      	adds	r3, #12
 80127e2:	881b      	ldrh	r3, [r3, #0]
 80127e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80127e6:	89fb      	ldrh	r3, [r7, #14]
 80127e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127ec:	d101      	bne.n	80127f2 <dec_lock+0x2e>
 80127ee:	2300      	movs	r3, #0
 80127f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80127f2:	89fb      	ldrh	r3, [r7, #14]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d002      	beq.n	80127fe <dec_lock+0x3a>
 80127f8:	89fb      	ldrh	r3, [r7, #14]
 80127fa:	3b01      	subs	r3, #1
 80127fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80127fe:	4a0e      	ldr	r2, [pc, #56]	; (8012838 <dec_lock+0x74>)
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	011b      	lsls	r3, r3, #4
 8012804:	4413      	add	r3, r2
 8012806:	330c      	adds	r3, #12
 8012808:	89fa      	ldrh	r2, [r7, #14]
 801280a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801280c:	89fb      	ldrh	r3, [r7, #14]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d105      	bne.n	801281e <dec_lock+0x5a>
 8012812:	4a09      	ldr	r2, [pc, #36]	; (8012838 <dec_lock+0x74>)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	011b      	lsls	r3, r3, #4
 8012818:	4413      	add	r3, r2
 801281a:	2200      	movs	r2, #0
 801281c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801281e:	2300      	movs	r3, #0
 8012820:	737b      	strb	r3, [r7, #13]
 8012822:	e001      	b.n	8012828 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012824:	2302      	movs	r3, #2
 8012826:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012828:	7b7b      	ldrb	r3, [r7, #13]
}
 801282a:	4618      	mov	r0, r3
 801282c:	3714      	adds	r7, #20
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	24008df8 	.word	0x24008df8

0801283c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801283c:	b480      	push	{r7}
 801283e:	b085      	sub	sp, #20
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012844:	2300      	movs	r3, #0
 8012846:	60fb      	str	r3, [r7, #12]
 8012848:	e010      	b.n	801286c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801284a:	4a0d      	ldr	r2, [pc, #52]	; (8012880 <clear_lock+0x44>)
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	011b      	lsls	r3, r3, #4
 8012850:	4413      	add	r3, r2
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	429a      	cmp	r2, r3
 8012858:	d105      	bne.n	8012866 <clear_lock+0x2a>
 801285a:	4a09      	ldr	r2, [pc, #36]	; (8012880 <clear_lock+0x44>)
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	011b      	lsls	r3, r3, #4
 8012860:	4413      	add	r3, r2
 8012862:	2200      	movs	r2, #0
 8012864:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	3301      	adds	r3, #1
 801286a:	60fb      	str	r3, [r7, #12]
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	2b01      	cmp	r3, #1
 8012870:	d9eb      	bls.n	801284a <clear_lock+0xe>
	}
}
 8012872:	bf00      	nop
 8012874:	bf00      	nop
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr
 8012880:	24008df8 	.word	0x24008df8

08012884 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b086      	sub	sp, #24
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801288c:	2300      	movs	r3, #0
 801288e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	78db      	ldrb	r3, [r3, #3]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d034      	beq.n	8012902 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801289c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	7858      	ldrb	r0, [r3, #1]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128a8:	2301      	movs	r3, #1
 80128aa:	697a      	ldr	r2, [r7, #20]
 80128ac:	f7ff fd40 	bl	8012330 <disk_write>
 80128b0:	4603      	mov	r3, r0
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d002      	beq.n	80128bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80128b6:	2301      	movs	r3, #1
 80128b8:	73fb      	strb	r3, [r7, #15]
 80128ba:	e022      	b.n	8012902 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2200      	movs	r2, #0
 80128c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6a1b      	ldr	r3, [r3, #32]
 80128c6:	697a      	ldr	r2, [r7, #20]
 80128c8:	1ad2      	subs	r2, r2, r3
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	699b      	ldr	r3, [r3, #24]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d217      	bcs.n	8012902 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	789b      	ldrb	r3, [r3, #2]
 80128d6:	613b      	str	r3, [r7, #16]
 80128d8:	e010      	b.n	80128fc <sync_window+0x78>
					wsect += fs->fsize;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	699b      	ldr	r3, [r3, #24]
 80128de:	697a      	ldr	r2, [r7, #20]
 80128e0:	4413      	add	r3, r2
 80128e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	7858      	ldrb	r0, [r3, #1]
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128ee:	2301      	movs	r3, #1
 80128f0:	697a      	ldr	r2, [r7, #20]
 80128f2:	f7ff fd1d 	bl	8012330 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128f6:	693b      	ldr	r3, [r7, #16]
 80128f8:	3b01      	subs	r3, #1
 80128fa:	613b      	str	r3, [r7, #16]
 80128fc:	693b      	ldr	r3, [r7, #16]
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d8eb      	bhi.n	80128da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012902:	7bfb      	ldrb	r3, [r7, #15]
}
 8012904:	4618      	mov	r0, r3
 8012906:	3718      	adds	r7, #24
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012916:	2300      	movs	r3, #0
 8012918:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801291e:	683a      	ldr	r2, [r7, #0]
 8012920:	429a      	cmp	r2, r3
 8012922:	d01b      	beq.n	801295c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f7ff ffad 	bl	8012884 <sync_window>
 801292a:	4603      	mov	r3, r0
 801292c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801292e:	7bfb      	ldrb	r3, [r7, #15]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d113      	bne.n	801295c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	7858      	ldrb	r0, [r3, #1]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801293e:	2301      	movs	r3, #1
 8012940:	683a      	ldr	r2, [r7, #0]
 8012942:	f7ff fcd5 	bl	80122f0 <disk_read>
 8012946:	4603      	mov	r3, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d004      	beq.n	8012956 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801294c:	f04f 33ff 	mov.w	r3, #4294967295
 8012950:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012952:	2301      	movs	r3, #1
 8012954:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	683a      	ldr	r2, [r7, #0]
 801295a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 801295c:	7bfb      	ldrb	r3, [r7, #15]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
	...

08012968 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f7ff ff87 	bl	8012884 <sync_window>
 8012976:	4603      	mov	r3, r0
 8012978:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801297a:	7bfb      	ldrb	r3, [r7, #15]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d158      	bne.n	8012a32 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	2b03      	cmp	r3, #3
 8012986:	d148      	bne.n	8012a1a <sync_fs+0xb2>
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	791b      	ldrb	r3, [r3, #4]
 801298c:	2b01      	cmp	r3, #1
 801298e:	d144      	bne.n	8012a1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	3330      	adds	r3, #48	; 0x30
 8012994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012998:	2100      	movs	r1, #0
 801299a:	4618      	mov	r0, r3
 801299c:	f7ff fda9 	bl	80124f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	3330      	adds	r3, #48	; 0x30
 80129a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80129a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7ff fd38 	bl	8012422 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	3330      	adds	r3, #48	; 0x30
 80129b6:	4921      	ldr	r1, [pc, #132]	; (8012a3c <sync_fs+0xd4>)
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7ff fd4d 	bl	8012458 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	3330      	adds	r3, #48	; 0x30
 80129c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80129c6:	491e      	ldr	r1, [pc, #120]	; (8012a40 <sync_fs+0xd8>)
 80129c8:	4618      	mov	r0, r3
 80129ca:	f7ff fd45 	bl	8012458 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	3330      	adds	r3, #48	; 0x30
 80129d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	691b      	ldr	r3, [r3, #16]
 80129da:	4619      	mov	r1, r3
 80129dc:	4610      	mov	r0, r2
 80129de:	f7ff fd3b 	bl	8012458 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	3330      	adds	r3, #48	; 0x30
 80129e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	68db      	ldr	r3, [r3, #12]
 80129ee:	4619      	mov	r1, r3
 80129f0:	4610      	mov	r0, r2
 80129f2:	f7ff fd31 	bl	8012458 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	69db      	ldr	r3, [r3, #28]
 80129fa:	1c5a      	adds	r2, r3, #1
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	7858      	ldrb	r0, [r3, #1]
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a0e:	2301      	movs	r3, #1
 8012a10:	f7ff fc8e 	bl	8012330 <disk_write>
			fs->fsi_flag = 0;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2200      	movs	r2, #0
 8012a18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	785b      	ldrb	r3, [r3, #1]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	2100      	movs	r1, #0
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7ff fca4 	bl	8012370 <disk_ioctl>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d001      	beq.n	8012a32 <sync_fs+0xca>
 8012a2e:	2301      	movs	r3, #1
 8012a30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3710      	adds	r7, #16
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	41615252 	.word	0x41615252
 8012a40:	61417272 	.word	0x61417272

08012a44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012a44:	b480      	push	{r7}
 8012a46:	b083      	sub	sp, #12
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	3b02      	subs	r3, #2
 8012a52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	695b      	ldr	r3, [r3, #20]
 8012a58:	3b02      	subs	r3, #2
 8012a5a:	683a      	ldr	r2, [r7, #0]
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d301      	bcc.n	8012a64 <clust2sect+0x20>
 8012a60:	2300      	movs	r3, #0
 8012a62:	e008      	b.n	8012a76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	895b      	ldrh	r3, [r3, #10]
 8012a68:	461a      	mov	r2, r3
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	fb03 f202 	mul.w	r2, r3, r2
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a74:	4413      	add	r3, r2
}
 8012a76:	4618      	mov	r0, r3
 8012a78:	370c      	adds	r7, #12
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a80:	4770      	bx	lr

08012a82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a82:	b580      	push	{r7, lr}
 8012a84:	b086      	sub	sp, #24
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	6078      	str	r0, [r7, #4]
 8012a8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d904      	bls.n	8012aa2 <get_fat+0x20>
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	695b      	ldr	r3, [r3, #20]
 8012a9c:	683a      	ldr	r2, [r7, #0]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d302      	bcc.n	8012aa8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	617b      	str	r3, [r7, #20]
 8012aa6:	e08f      	b.n	8012bc8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8012aac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	2b03      	cmp	r3, #3
 8012ab4:	d062      	beq.n	8012b7c <get_fat+0xfa>
 8012ab6:	2b03      	cmp	r3, #3
 8012ab8:	dc7c      	bgt.n	8012bb4 <get_fat+0x132>
 8012aba:	2b01      	cmp	r3, #1
 8012abc:	d002      	beq.n	8012ac4 <get_fat+0x42>
 8012abe:	2b02      	cmp	r3, #2
 8012ac0:	d042      	beq.n	8012b48 <get_fat+0xc6>
 8012ac2:	e077      	b.n	8012bb4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	60fb      	str	r3, [r7, #12]
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	085b      	lsrs	r3, r3, #1
 8012acc:	68fa      	ldr	r2, [r7, #12]
 8012ace:	4413      	add	r3, r2
 8012ad0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	6a1a      	ldr	r2, [r3, #32]
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	0a5b      	lsrs	r3, r3, #9
 8012ada:	4413      	add	r3, r2
 8012adc:	4619      	mov	r1, r3
 8012ade:	6938      	ldr	r0, [r7, #16]
 8012ae0:	f7ff ff14 	bl	801290c <move_window>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d167      	bne.n	8012bba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	1c5a      	adds	r2, r3, #1
 8012aee:	60fa      	str	r2, [r7, #12]
 8012af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012af4:	693a      	ldr	r2, [r7, #16]
 8012af6:	4413      	add	r3, r2
 8012af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012afc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	6a1a      	ldr	r2, [r3, #32]
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	0a5b      	lsrs	r3, r3, #9
 8012b06:	4413      	add	r3, r2
 8012b08:	4619      	mov	r1, r3
 8012b0a:	6938      	ldr	r0, [r7, #16]
 8012b0c:	f7ff fefe 	bl	801290c <move_window>
 8012b10:	4603      	mov	r3, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d153      	bne.n	8012bbe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b1c:	693a      	ldr	r2, [r7, #16]
 8012b1e:	4413      	add	r3, r2
 8012b20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b24:	021b      	lsls	r3, r3, #8
 8012b26:	461a      	mov	r2, r3
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	4313      	orrs	r3, r2
 8012b2c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	f003 0301 	and.w	r3, r3, #1
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d002      	beq.n	8012b3e <get_fat+0xbc>
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	091b      	lsrs	r3, r3, #4
 8012b3c:	e002      	b.n	8012b44 <get_fat+0xc2>
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b44:	617b      	str	r3, [r7, #20]
			break;
 8012b46:	e03f      	b.n	8012bc8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	6a1a      	ldr	r2, [r3, #32]
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	0a1b      	lsrs	r3, r3, #8
 8012b50:	4413      	add	r3, r2
 8012b52:	4619      	mov	r1, r3
 8012b54:	6938      	ldr	r0, [r7, #16]
 8012b56:	f7ff fed9 	bl	801290c <move_window>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d130      	bne.n	8012bc2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	005b      	lsls	r3, r3, #1
 8012b6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012b6e:	4413      	add	r3, r2
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7ff fc1b 	bl	80123ac <ld_word>
 8012b76:	4603      	mov	r3, r0
 8012b78:	617b      	str	r3, [r7, #20]
			break;
 8012b7a:	e025      	b.n	8012bc8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	6a1a      	ldr	r2, [r3, #32]
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	09db      	lsrs	r3, r3, #7
 8012b84:	4413      	add	r3, r2
 8012b86:	4619      	mov	r1, r3
 8012b88:	6938      	ldr	r0, [r7, #16]
 8012b8a:	f7ff febf 	bl	801290c <move_window>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d118      	bne.n	8012bc6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	009b      	lsls	r3, r3, #2
 8012b9e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012ba2:	4413      	add	r3, r2
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7ff fc19 	bl	80123dc <ld_dword>
 8012baa:	4603      	mov	r3, r0
 8012bac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012bb0:	617b      	str	r3, [r7, #20]
			break;
 8012bb2:	e009      	b.n	8012bc8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	617b      	str	r3, [r7, #20]
 8012bb8:	e006      	b.n	8012bc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012bba:	bf00      	nop
 8012bbc:	e004      	b.n	8012bc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012bbe:	bf00      	nop
 8012bc0:	e002      	b.n	8012bc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012bc2:	bf00      	nop
 8012bc4:	e000      	b.n	8012bc8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012bc6:	bf00      	nop
		}
	}

	return val;
 8012bc8:	697b      	ldr	r3, [r7, #20]
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3718      	adds	r7, #24
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bd80      	pop	{r7, pc}

08012bd2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012bd2:	b590      	push	{r4, r7, lr}
 8012bd4:	b089      	sub	sp, #36	; 0x24
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	60f8      	str	r0, [r7, #12]
 8012bda:	60b9      	str	r1, [r7, #8]
 8012bdc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012bde:	2302      	movs	r3, #2
 8012be0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	f240 80d2 	bls.w	8012d8e <put_fat+0x1bc>
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	695b      	ldr	r3, [r3, #20]
 8012bee:	68ba      	ldr	r2, [r7, #8]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	f080 80cc 	bcs.w	8012d8e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	2b03      	cmp	r3, #3
 8012bfc:	f000 8096 	beq.w	8012d2c <put_fat+0x15a>
 8012c00:	2b03      	cmp	r3, #3
 8012c02:	f300 80cd 	bgt.w	8012da0 <put_fat+0x1ce>
 8012c06:	2b01      	cmp	r3, #1
 8012c08:	d002      	beq.n	8012c10 <put_fat+0x3e>
 8012c0a:	2b02      	cmp	r3, #2
 8012c0c:	d06e      	beq.n	8012cec <put_fat+0x11a>
 8012c0e:	e0c7      	b.n	8012da0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	61bb      	str	r3, [r7, #24]
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	085b      	lsrs	r3, r3, #1
 8012c18:	69ba      	ldr	r2, [r7, #24]
 8012c1a:	4413      	add	r3, r2
 8012c1c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	6a1a      	ldr	r2, [r3, #32]
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	0a5b      	lsrs	r3, r3, #9
 8012c26:	4413      	add	r3, r2
 8012c28:	4619      	mov	r1, r3
 8012c2a:	68f8      	ldr	r0, [r7, #12]
 8012c2c:	f7ff fe6e 	bl	801290c <move_window>
 8012c30:	4603      	mov	r3, r0
 8012c32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c34:	7ffb      	ldrb	r3, [r7, #31]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	f040 80ab 	bne.w	8012d92 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c42:	69bb      	ldr	r3, [r7, #24]
 8012c44:	1c59      	adds	r1, r3, #1
 8012c46:	61b9      	str	r1, [r7, #24]
 8012c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c4c:	4413      	add	r3, r2
 8012c4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	f003 0301 	and.w	r3, r3, #1
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d00d      	beq.n	8012c76 <put_fat+0xa4>
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	b25b      	sxtb	r3, r3
 8012c60:	f003 030f 	and.w	r3, r3, #15
 8012c64:	b25a      	sxtb	r2, r3
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	011b      	lsls	r3, r3, #4
 8012c6c:	b25b      	sxtb	r3, r3
 8012c6e:	4313      	orrs	r3, r2
 8012c70:	b25b      	sxtb	r3, r3
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	e001      	b.n	8012c7a <put_fat+0xa8>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	b2db      	uxtb	r3, r3
 8012c7a:	697a      	ldr	r2, [r7, #20]
 8012c7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	2201      	movs	r2, #1
 8012c82:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	6a1a      	ldr	r2, [r3, #32]
 8012c88:	69bb      	ldr	r3, [r7, #24]
 8012c8a:	0a5b      	lsrs	r3, r3, #9
 8012c8c:	4413      	add	r3, r2
 8012c8e:	4619      	mov	r1, r3
 8012c90:	68f8      	ldr	r0, [r7, #12]
 8012c92:	f7ff fe3b 	bl	801290c <move_window>
 8012c96:	4603      	mov	r3, r0
 8012c98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c9a:	7ffb      	ldrb	r3, [r7, #31]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d17a      	bne.n	8012d96 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ca6:	69bb      	ldr	r3, [r7, #24]
 8012ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cac:	4413      	add	r3, r2
 8012cae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	f003 0301 	and.w	r3, r3, #1
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d003      	beq.n	8012cc2 <put_fat+0xf0>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	091b      	lsrs	r3, r3, #4
 8012cbe:	b2db      	uxtb	r3, r3
 8012cc0:	e00e      	b.n	8012ce0 <put_fat+0x10e>
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	b25b      	sxtb	r3, r3
 8012cc8:	f023 030f 	bic.w	r3, r3, #15
 8012ccc:	b25a      	sxtb	r2, r3
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	0a1b      	lsrs	r3, r3, #8
 8012cd2:	b25b      	sxtb	r3, r3
 8012cd4:	f003 030f 	and.w	r3, r3, #15
 8012cd8:	b25b      	sxtb	r3, r3
 8012cda:	4313      	orrs	r3, r2
 8012cdc:	b25b      	sxtb	r3, r3
 8012cde:	b2db      	uxtb	r3, r3
 8012ce0:	697a      	ldr	r2, [r7, #20]
 8012ce2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	2201      	movs	r2, #1
 8012ce8:	70da      	strb	r2, [r3, #3]
			break;
 8012cea:	e059      	b.n	8012da0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	6a1a      	ldr	r2, [r3, #32]
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	0a1b      	lsrs	r3, r3, #8
 8012cf4:	4413      	add	r3, r2
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	68f8      	ldr	r0, [r7, #12]
 8012cfa:	f7ff fe07 	bl	801290c <move_window>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012d02:	7ffb      	ldrb	r3, [r7, #31]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d148      	bne.n	8012d9a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	005b      	lsls	r3, r3, #1
 8012d12:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012d16:	4413      	add	r3, r2
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	b292      	uxth	r2, r2
 8012d1c:	4611      	mov	r1, r2
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7ff fb7f 	bl	8012422 <st_word>
			fs->wflag = 1;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	2201      	movs	r2, #1
 8012d28:	70da      	strb	r2, [r3, #3]
			break;
 8012d2a:	e039      	b.n	8012da0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	6a1a      	ldr	r2, [r3, #32]
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	09db      	lsrs	r3, r3, #7
 8012d34:	4413      	add	r3, r2
 8012d36:	4619      	mov	r1, r3
 8012d38:	68f8      	ldr	r0, [r7, #12]
 8012d3a:	f7ff fde7 	bl	801290c <move_window>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012d42:	7ffb      	ldrb	r3, [r7, #31]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d12a      	bne.n	8012d9e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	009b      	lsls	r3, r3, #2
 8012d58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012d5c:	4413      	add	r3, r2
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7ff fb3c 	bl	80123dc <ld_dword>
 8012d64:	4603      	mov	r3, r0
 8012d66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012d6a:	4323      	orrs	r3, r4
 8012d6c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	009b      	lsls	r3, r3, #2
 8012d78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012d7c:	4413      	add	r3, r2
 8012d7e:	6879      	ldr	r1, [r7, #4]
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7ff fb69 	bl	8012458 <st_dword>
			fs->wflag = 1;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2201      	movs	r2, #1
 8012d8a:	70da      	strb	r2, [r3, #3]
			break;
 8012d8c:	e008      	b.n	8012da0 <put_fat+0x1ce>
		}
	}
 8012d8e:	bf00      	nop
 8012d90:	e006      	b.n	8012da0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d92:	bf00      	nop
 8012d94:	e004      	b.n	8012da0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d96:	bf00      	nop
 8012d98:	e002      	b.n	8012da0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d9a:	bf00      	nop
 8012d9c:	e000      	b.n	8012da0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d9e:	bf00      	nop
	return res;
 8012da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3724      	adds	r7, #36	; 0x24
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd90      	pop	{r4, r7, pc}

08012daa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012daa:	b580      	push	{r7, lr}
 8012dac:	b088      	sub	sp, #32
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	60f8      	str	r0, [r7, #12]
 8012db2:	60b9      	str	r1, [r7, #8]
 8012db4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012db6:	2300      	movs	r3, #0
 8012db8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	d904      	bls.n	8012dd0 <remove_chain+0x26>
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	695b      	ldr	r3, [r3, #20]
 8012dca:	68ba      	ldr	r2, [r7, #8]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d301      	bcc.n	8012dd4 <remove_chain+0x2a>
 8012dd0:	2302      	movs	r3, #2
 8012dd2:	e04b      	b.n	8012e6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00c      	beq.n	8012df4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012dda:	f04f 32ff 	mov.w	r2, #4294967295
 8012dde:	6879      	ldr	r1, [r7, #4]
 8012de0:	69b8      	ldr	r0, [r7, #24]
 8012de2:	f7ff fef6 	bl	8012bd2 <put_fat>
 8012de6:	4603      	mov	r3, r0
 8012de8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012dea:	7ffb      	ldrb	r3, [r7, #31]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d001      	beq.n	8012df4 <remove_chain+0x4a>
 8012df0:	7ffb      	ldrb	r3, [r7, #31]
 8012df2:	e03b      	b.n	8012e6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012df4:	68b9      	ldr	r1, [r7, #8]
 8012df6:	68f8      	ldr	r0, [r7, #12]
 8012df8:	f7ff fe43 	bl	8012a82 <get_fat>
 8012dfc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d031      	beq.n	8012e68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d101      	bne.n	8012e0e <remove_chain+0x64>
 8012e0a:	2302      	movs	r3, #2
 8012e0c:	e02e      	b.n	8012e6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e14:	d101      	bne.n	8012e1a <remove_chain+0x70>
 8012e16:	2301      	movs	r3, #1
 8012e18:	e028      	b.n	8012e6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	68b9      	ldr	r1, [r7, #8]
 8012e1e:	69b8      	ldr	r0, [r7, #24]
 8012e20:	f7ff fed7 	bl	8012bd2 <put_fat>
 8012e24:	4603      	mov	r3, r0
 8012e26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012e28:	7ffb      	ldrb	r3, [r7, #31]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d001      	beq.n	8012e32 <remove_chain+0x88>
 8012e2e:	7ffb      	ldrb	r3, [r7, #31]
 8012e30:	e01c      	b.n	8012e6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012e32:	69bb      	ldr	r3, [r7, #24]
 8012e34:	691a      	ldr	r2, [r3, #16]
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	695b      	ldr	r3, [r3, #20]
 8012e3a:	3b02      	subs	r3, #2
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d20b      	bcs.n	8012e58 <remove_chain+0xae>
			fs->free_clst++;
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	691b      	ldr	r3, [r3, #16]
 8012e44:	1c5a      	adds	r2, r3, #1
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	791b      	ldrb	r3, [r3, #4]
 8012e4e:	f043 0301 	orr.w	r3, r3, #1
 8012e52:	b2da      	uxtb	r2, r3
 8012e54:	69bb      	ldr	r3, [r7, #24]
 8012e56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012e5c:	69bb      	ldr	r3, [r7, #24]
 8012e5e:	695b      	ldr	r3, [r3, #20]
 8012e60:	68ba      	ldr	r2, [r7, #8]
 8012e62:	429a      	cmp	r2, r3
 8012e64:	d3c6      	bcc.n	8012df4 <remove_chain+0x4a>
 8012e66:	e000      	b.n	8012e6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012e68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012e6a:	2300      	movs	r3, #0
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3720      	adds	r7, #32
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}

08012e74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b088      	sub	sp, #32
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d10d      	bne.n	8012ea6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	68db      	ldr	r3, [r3, #12]
 8012e8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012e90:	69bb      	ldr	r3, [r7, #24]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d004      	beq.n	8012ea0 <create_chain+0x2c>
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	695b      	ldr	r3, [r3, #20]
 8012e9a:	69ba      	ldr	r2, [r7, #24]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d31b      	bcc.n	8012ed8 <create_chain+0x64>
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	61bb      	str	r3, [r7, #24]
 8012ea4:	e018      	b.n	8012ed8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012ea6:	6839      	ldr	r1, [r7, #0]
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f7ff fdea 	bl	8012a82 <get_fat>
 8012eae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d801      	bhi.n	8012eba <create_chain+0x46>
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	e070      	b.n	8012f9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ec0:	d101      	bne.n	8012ec6 <create_chain+0x52>
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	e06a      	b.n	8012f9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	695b      	ldr	r3, [r3, #20]
 8012eca:	68fa      	ldr	r2, [r7, #12]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d201      	bcs.n	8012ed4 <create_chain+0x60>
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	e063      	b.n	8012f9c <create_chain+0x128>
		scl = clst;
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012ed8:	69bb      	ldr	r3, [r7, #24]
 8012eda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012edc:	69fb      	ldr	r3, [r7, #28]
 8012ede:	3301      	adds	r3, #1
 8012ee0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	695b      	ldr	r3, [r3, #20]
 8012ee6:	69fa      	ldr	r2, [r7, #28]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d307      	bcc.n	8012efc <create_chain+0x88>
				ncl = 2;
 8012eec:	2302      	movs	r3, #2
 8012eee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012ef0:	69fa      	ldr	r2, [r7, #28]
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	d901      	bls.n	8012efc <create_chain+0x88>
 8012ef8:	2300      	movs	r3, #0
 8012efa:	e04f      	b.n	8012f9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012efc:	69f9      	ldr	r1, [r7, #28]
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f7ff fdbf 	bl	8012a82 <get_fat>
 8012f04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d00e      	beq.n	8012f2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2b01      	cmp	r3, #1
 8012f10:	d003      	beq.n	8012f1a <create_chain+0xa6>
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f18:	d101      	bne.n	8012f1e <create_chain+0xaa>
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	e03e      	b.n	8012f9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012f1e:	69fa      	ldr	r2, [r7, #28]
 8012f20:	69bb      	ldr	r3, [r7, #24]
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d1da      	bne.n	8012edc <create_chain+0x68>
 8012f26:	2300      	movs	r3, #0
 8012f28:	e038      	b.n	8012f9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012f2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8012f30:	69f9      	ldr	r1, [r7, #28]
 8012f32:	6938      	ldr	r0, [r7, #16]
 8012f34:	f7ff fe4d 	bl	8012bd2 <put_fat>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012f3c:	7dfb      	ldrb	r3, [r7, #23]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d109      	bne.n	8012f56 <create_chain+0xe2>
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d006      	beq.n	8012f56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012f48:	69fa      	ldr	r2, [r7, #28]
 8012f4a:	6839      	ldr	r1, [r7, #0]
 8012f4c:	6938      	ldr	r0, [r7, #16]
 8012f4e:	f7ff fe40 	bl	8012bd2 <put_fat>
 8012f52:	4603      	mov	r3, r0
 8012f54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012f56:	7dfb      	ldrb	r3, [r7, #23]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d116      	bne.n	8012f8a <create_chain+0x116>
		fs->last_clst = ncl;
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	69fa      	ldr	r2, [r7, #28]
 8012f60:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	691a      	ldr	r2, [r3, #16]
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	695b      	ldr	r3, [r3, #20]
 8012f6a:	3b02      	subs	r3, #2
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d804      	bhi.n	8012f7a <create_chain+0x106>
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	691b      	ldr	r3, [r3, #16]
 8012f74:	1e5a      	subs	r2, r3, #1
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	791b      	ldrb	r3, [r3, #4]
 8012f7e:	f043 0301 	orr.w	r3, r3, #1
 8012f82:	b2da      	uxtb	r2, r3
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	711a      	strb	r2, [r3, #4]
 8012f88:	e007      	b.n	8012f9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012f8a:	7dfb      	ldrb	r3, [r7, #23]
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	d102      	bne.n	8012f96 <create_chain+0x122>
 8012f90:	f04f 33ff 	mov.w	r3, #4294967295
 8012f94:	e000      	b.n	8012f98 <create_chain+0x124>
 8012f96:	2301      	movs	r3, #1
 8012f98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012f9a:	69fb      	ldr	r3, [r7, #28]
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3720      	adds	r7, #32
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012fa4:	b480      	push	{r7}
 8012fa6:	b087      	sub	sp, #28
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fb8:	3304      	adds	r3, #4
 8012fba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	0a5b      	lsrs	r3, r3, #9
 8012fc0:	68fa      	ldr	r2, [r7, #12]
 8012fc2:	8952      	ldrh	r2, [r2, #10]
 8012fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fc8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	1d1a      	adds	r2, r3, #4
 8012fce:	613a      	str	r2, [r7, #16]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d101      	bne.n	8012fde <clmt_clust+0x3a>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	e010      	b.n	8013000 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012fde:	697a      	ldr	r2, [r7, #20]
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d307      	bcc.n	8012ff6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012fe6:	697a      	ldr	r2, [r7, #20]
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	1ad3      	subs	r3, r2, r3
 8012fec:	617b      	str	r3, [r7, #20]
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	3304      	adds	r3, #4
 8012ff2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012ff4:	e7e9      	b.n	8012fca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012ff6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	681a      	ldr	r2, [r3, #0]
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	4413      	add	r3, r2
}
 8013000:	4618      	mov	r0, r3
 8013002:	371c      	adds	r7, #28
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr

0801300c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b086      	sub	sp, #24
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013022:	d204      	bcs.n	801302e <dir_sdi+0x22>
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	f003 031f 	and.w	r3, r3, #31
 801302a:	2b00      	cmp	r3, #0
 801302c:	d001      	beq.n	8013032 <dir_sdi+0x26>
		return FR_INT_ERR;
 801302e:	2302      	movs	r3, #2
 8013030:	e063      	b.n	80130fa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	683a      	ldr	r2, [r7, #0]
 8013036:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	689b      	ldr	r3, [r3, #8]
 801303c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d106      	bne.n	8013052 <dir_sdi+0x46>
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	2b02      	cmp	r3, #2
 801304a:	d902      	bls.n	8013052 <dir_sdi+0x46>
		clst = fs->dirbase;
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013050:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d10c      	bne.n	8013072 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	095b      	lsrs	r3, r3, #5
 801305c:	693a      	ldr	r2, [r7, #16]
 801305e:	8912      	ldrh	r2, [r2, #8]
 8013060:	4293      	cmp	r3, r2
 8013062:	d301      	bcc.n	8013068 <dir_sdi+0x5c>
 8013064:	2302      	movs	r3, #2
 8013066:	e048      	b.n	80130fa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	61da      	str	r2, [r3, #28]
 8013070:	e029      	b.n	80130c6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	895b      	ldrh	r3, [r3, #10]
 8013076:	025b      	lsls	r3, r3, #9
 8013078:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801307a:	e019      	b.n	80130b0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6979      	ldr	r1, [r7, #20]
 8013080:	4618      	mov	r0, r3
 8013082:	f7ff fcfe 	bl	8012a82 <get_fat>
 8013086:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801308e:	d101      	bne.n	8013094 <dir_sdi+0x88>
 8013090:	2301      	movs	r3, #1
 8013092:	e032      	b.n	80130fa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	2b01      	cmp	r3, #1
 8013098:	d904      	bls.n	80130a4 <dir_sdi+0x98>
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	695b      	ldr	r3, [r3, #20]
 801309e:	697a      	ldr	r2, [r7, #20]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d301      	bcc.n	80130a8 <dir_sdi+0x9c>
 80130a4:	2302      	movs	r3, #2
 80130a6:	e028      	b.n	80130fa <dir_sdi+0xee>
			ofs -= csz;
 80130a8:	683a      	ldr	r2, [r7, #0]
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	1ad3      	subs	r3, r2, r3
 80130ae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80130b0:	683a      	ldr	r2, [r7, #0]
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d2e1      	bcs.n	801307c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80130b8:	6979      	ldr	r1, [r7, #20]
 80130ba:	6938      	ldr	r0, [r7, #16]
 80130bc:	f7ff fcc2 	bl	8012a44 <clust2sect>
 80130c0:	4602      	mov	r2, r0
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	697a      	ldr	r2, [r7, #20]
 80130ca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	69db      	ldr	r3, [r3, #28]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d101      	bne.n	80130d8 <dir_sdi+0xcc>
 80130d4:	2302      	movs	r3, #2
 80130d6:	e010      	b.n	80130fa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	69da      	ldr	r2, [r3, #28]
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	0a5b      	lsrs	r3, r3, #9
 80130e0:	441a      	add	r2, r3
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130f2:	441a      	add	r2, r3
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80130f8:	2300      	movs	r3, #0
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3718      	adds	r7, #24
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}

08013102 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013102:	b580      	push	{r7, lr}
 8013104:	b086      	sub	sp, #24
 8013106:	af00      	add	r7, sp, #0
 8013108:	6078      	str	r0, [r7, #4]
 801310a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	695b      	ldr	r3, [r3, #20]
 8013116:	3320      	adds	r3, #32
 8013118:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	69db      	ldr	r3, [r3, #28]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d003      	beq.n	801312a <dir_next+0x28>
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013128:	d301      	bcc.n	801312e <dir_next+0x2c>
 801312a:	2304      	movs	r3, #4
 801312c:	e0aa      	b.n	8013284 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013134:	2b00      	cmp	r3, #0
 8013136:	f040 8098 	bne.w	801326a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	69db      	ldr	r3, [r3, #28]
 801313e:	1c5a      	adds	r2, r3, #1
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	699b      	ldr	r3, [r3, #24]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d10b      	bne.n	8013164 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	095b      	lsrs	r3, r3, #5
 8013150:	68fa      	ldr	r2, [r7, #12]
 8013152:	8912      	ldrh	r2, [r2, #8]
 8013154:	4293      	cmp	r3, r2
 8013156:	f0c0 8088 	bcc.w	801326a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2200      	movs	r2, #0
 801315e:	61da      	str	r2, [r3, #28]
 8013160:	2304      	movs	r3, #4
 8013162:	e08f      	b.n	8013284 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	0a5b      	lsrs	r3, r3, #9
 8013168:	68fa      	ldr	r2, [r7, #12]
 801316a:	8952      	ldrh	r2, [r2, #10]
 801316c:	3a01      	subs	r2, #1
 801316e:	4013      	ands	r3, r2
 8013170:	2b00      	cmp	r3, #0
 8013172:	d17a      	bne.n	801326a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013174:	687a      	ldr	r2, [r7, #4]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	699b      	ldr	r3, [r3, #24]
 801317a:	4619      	mov	r1, r3
 801317c:	4610      	mov	r0, r2
 801317e:	f7ff fc80 	bl	8012a82 <get_fat>
 8013182:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	2b01      	cmp	r3, #1
 8013188:	d801      	bhi.n	801318e <dir_next+0x8c>
 801318a:	2302      	movs	r3, #2
 801318c:	e07a      	b.n	8013284 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013194:	d101      	bne.n	801319a <dir_next+0x98>
 8013196:	2301      	movs	r3, #1
 8013198:	e074      	b.n	8013284 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	695b      	ldr	r3, [r3, #20]
 801319e:	697a      	ldr	r2, [r7, #20]
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d358      	bcc.n	8013256 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d104      	bne.n	80131b4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2200      	movs	r2, #0
 80131ae:	61da      	str	r2, [r3, #28]
 80131b0:	2304      	movs	r3, #4
 80131b2:	e067      	b.n	8013284 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80131b4:	687a      	ldr	r2, [r7, #4]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	699b      	ldr	r3, [r3, #24]
 80131ba:	4619      	mov	r1, r3
 80131bc:	4610      	mov	r0, r2
 80131be:	f7ff fe59 	bl	8012e74 <create_chain>
 80131c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d101      	bne.n	80131ce <dir_next+0xcc>
 80131ca:	2307      	movs	r3, #7
 80131cc:	e05a      	b.n	8013284 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	2b01      	cmp	r3, #1
 80131d2:	d101      	bne.n	80131d8 <dir_next+0xd6>
 80131d4:	2302      	movs	r3, #2
 80131d6:	e055      	b.n	8013284 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131de:	d101      	bne.n	80131e4 <dir_next+0xe2>
 80131e0:	2301      	movs	r3, #1
 80131e2:	e04f      	b.n	8013284 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80131e4:	68f8      	ldr	r0, [r7, #12]
 80131e6:	f7ff fb4d 	bl	8012884 <sync_window>
 80131ea:	4603      	mov	r3, r0
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d001      	beq.n	80131f4 <dir_next+0xf2>
 80131f0:	2301      	movs	r3, #1
 80131f2:	e047      	b.n	8013284 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	3330      	adds	r3, #48	; 0x30
 80131f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80131fc:	2100      	movs	r1, #0
 80131fe:	4618      	mov	r0, r3
 8013200:	f7ff f977 	bl	80124f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013204:	2300      	movs	r3, #0
 8013206:	613b      	str	r3, [r7, #16]
 8013208:	6979      	ldr	r1, [r7, #20]
 801320a:	68f8      	ldr	r0, [r7, #12]
 801320c:	f7ff fc1a 	bl	8012a44 <clust2sect>
 8013210:	4602      	mov	r2, r0
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	62da      	str	r2, [r3, #44]	; 0x2c
 8013216:	e012      	b.n	801323e <dir_next+0x13c>
						fs->wflag = 1;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2201      	movs	r2, #1
 801321c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801321e:	68f8      	ldr	r0, [r7, #12]
 8013220:	f7ff fb30 	bl	8012884 <sync_window>
 8013224:	4603      	mov	r3, r0
 8013226:	2b00      	cmp	r3, #0
 8013228:	d001      	beq.n	801322e <dir_next+0x12c>
 801322a:	2301      	movs	r3, #1
 801322c:	e02a      	b.n	8013284 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801322e:	693b      	ldr	r3, [r7, #16]
 8013230:	3301      	adds	r3, #1
 8013232:	613b      	str	r3, [r7, #16]
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013238:	1c5a      	adds	r2, r3, #1
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	62da      	str	r2, [r3, #44]	; 0x2c
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	895b      	ldrh	r3, [r3, #10]
 8013242:	461a      	mov	r2, r3
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	4293      	cmp	r3, r2
 8013248:	d3e6      	bcc.n	8013218 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	1ad2      	subs	r2, r2, r3
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	697a      	ldr	r2, [r7, #20]
 801325a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801325c:	6979      	ldr	r1, [r7, #20]
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f7ff fbf0 	bl	8012a44 <clust2sect>
 8013264:	4602      	mov	r2, r0
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	68ba      	ldr	r2, [r7, #8]
 801326e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801327c:	441a      	add	r2, r3
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013282:	2300      	movs	r3, #0
}
 8013284:	4618      	mov	r0, r3
 8013286:	3718      	adds	r7, #24
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}

0801328c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b086      	sub	sp, #24
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
 8013294:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801329c:	2100      	movs	r1, #0
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f7ff feb4 	bl	801300c <dir_sdi>
 80132a4:	4603      	mov	r3, r0
 80132a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80132a8:	7dfb      	ldrb	r3, [r7, #23]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d12b      	bne.n	8013306 <dir_alloc+0x7a>
		n = 0;
 80132ae:	2300      	movs	r3, #0
 80132b0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	69db      	ldr	r3, [r3, #28]
 80132b6:	4619      	mov	r1, r3
 80132b8:	68f8      	ldr	r0, [r7, #12]
 80132ba:	f7ff fb27 	bl	801290c <move_window>
 80132be:	4603      	mov	r3, r0
 80132c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80132c2:	7dfb      	ldrb	r3, [r7, #23]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d11d      	bne.n	8013304 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	6a1b      	ldr	r3, [r3, #32]
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	2be5      	cmp	r3, #229	; 0xe5
 80132d0:	d004      	beq.n	80132dc <dir_alloc+0x50>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6a1b      	ldr	r3, [r3, #32]
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d107      	bne.n	80132ec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	3301      	adds	r3, #1
 80132e0:	613b      	str	r3, [r7, #16]
 80132e2:	693a      	ldr	r2, [r7, #16]
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d102      	bne.n	80132f0 <dir_alloc+0x64>
 80132ea:	e00c      	b.n	8013306 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80132ec:	2300      	movs	r3, #0
 80132ee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80132f0:	2101      	movs	r1, #1
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f7ff ff05 	bl	8013102 <dir_next>
 80132f8:	4603      	mov	r3, r0
 80132fa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80132fc:	7dfb      	ldrb	r3, [r7, #23]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d0d7      	beq.n	80132b2 <dir_alloc+0x26>
 8013302:	e000      	b.n	8013306 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013304:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013306:	7dfb      	ldrb	r3, [r7, #23]
 8013308:	2b04      	cmp	r3, #4
 801330a:	d101      	bne.n	8013310 <dir_alloc+0x84>
 801330c:	2307      	movs	r3, #7
 801330e:	75fb      	strb	r3, [r7, #23]
	return res;
 8013310:	7dfb      	ldrb	r3, [r7, #23]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3718      	adds	r7, #24
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}

0801331a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801331a:	b580      	push	{r7, lr}
 801331c:	b084      	sub	sp, #16
 801331e:	af00      	add	r7, sp, #0
 8013320:	6078      	str	r0, [r7, #4]
 8013322:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	331a      	adds	r3, #26
 8013328:	4618      	mov	r0, r3
 801332a:	f7ff f83f 	bl	80123ac <ld_word>
 801332e:	4603      	mov	r3, r0
 8013330:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	2b03      	cmp	r3, #3
 8013338:	d109      	bne.n	801334e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	3314      	adds	r3, #20
 801333e:	4618      	mov	r0, r3
 8013340:	f7ff f834 	bl	80123ac <ld_word>
 8013344:	4603      	mov	r3, r0
 8013346:	041b      	lsls	r3, r3, #16
 8013348:	68fa      	ldr	r2, [r7, #12]
 801334a:	4313      	orrs	r3, r2
 801334c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801334e:	68fb      	ldr	r3, [r7, #12]
}
 8013350:	4618      	mov	r0, r3
 8013352:	3710      	adds	r7, #16
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	60b9      	str	r1, [r7, #8]
 8013362:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	331a      	adds	r3, #26
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	b292      	uxth	r2, r2
 801336c:	4611      	mov	r1, r2
 801336e:	4618      	mov	r0, r3
 8013370:	f7ff f857 	bl	8012422 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	2b03      	cmp	r3, #3
 801337a:	d109      	bne.n	8013390 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	f103 0214 	add.w	r2, r3, #20
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	0c1b      	lsrs	r3, r3, #16
 8013386:	b29b      	uxth	r3, r3
 8013388:	4619      	mov	r1, r3
 801338a:	4610      	mov	r0, r2
 801338c:	f7ff f849 	bl	8012422 <st_word>
	}
}
 8013390:	bf00      	nop
 8013392:	3710      	adds	r7, #16
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}

08013398 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b086      	sub	sp, #24
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80133a6:	2100      	movs	r1, #0
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f7ff fe2f 	bl	801300c <dir_sdi>
 80133ae:	4603      	mov	r3, r0
 80133b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80133b2:	7dfb      	ldrb	r3, [r7, #23]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d001      	beq.n	80133bc <dir_find+0x24>
 80133b8:	7dfb      	ldrb	r3, [r7, #23]
 80133ba:	e03e      	b.n	801343a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	69db      	ldr	r3, [r3, #28]
 80133c0:	4619      	mov	r1, r3
 80133c2:	6938      	ldr	r0, [r7, #16]
 80133c4:	f7ff faa2 	bl	801290c <move_window>
 80133c8:	4603      	mov	r3, r0
 80133ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80133cc:	7dfb      	ldrb	r3, [r7, #23]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d12f      	bne.n	8013432 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6a1b      	ldr	r3, [r3, #32]
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80133da:	7bfb      	ldrb	r3, [r7, #15]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d102      	bne.n	80133e6 <dir_find+0x4e>
 80133e0:	2304      	movs	r3, #4
 80133e2:	75fb      	strb	r3, [r7, #23]
 80133e4:	e028      	b.n	8013438 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6a1b      	ldr	r3, [r3, #32]
 80133ea:	330b      	adds	r3, #11
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133f2:	b2da      	uxtb	r2, r3
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6a1b      	ldr	r3, [r3, #32]
 80133fc:	330b      	adds	r3, #11
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	f003 0308 	and.w	r3, r3, #8
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10a      	bne.n	801341e <dir_find+0x86>
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	6a18      	ldr	r0, [r3, #32]
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	3324      	adds	r3, #36	; 0x24
 8013410:	220b      	movs	r2, #11
 8013412:	4619      	mov	r1, r3
 8013414:	f7ff f888 	bl	8012528 <mem_cmp>
 8013418:	4603      	mov	r3, r0
 801341a:	2b00      	cmp	r3, #0
 801341c:	d00b      	beq.n	8013436 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801341e:	2100      	movs	r1, #0
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7ff fe6e 	bl	8013102 <dir_next>
 8013426:	4603      	mov	r3, r0
 8013428:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801342a:	7dfb      	ldrb	r3, [r7, #23]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d0c5      	beq.n	80133bc <dir_find+0x24>
 8013430:	e002      	b.n	8013438 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013432:	bf00      	nop
 8013434:	e000      	b.n	8013438 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013436:	bf00      	nop

	return res;
 8013438:	7dfb      	ldrb	r3, [r7, #23]
}
 801343a:	4618      	mov	r0, r3
 801343c:	3718      	adds	r7, #24
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}

08013442 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013442:	b580      	push	{r7, lr}
 8013444:	b084      	sub	sp, #16
 8013446:	af00      	add	r7, sp, #0
 8013448:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013450:	2101      	movs	r1, #1
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	f7ff ff1a 	bl	801328c <dir_alloc>
 8013458:	4603      	mov	r3, r0
 801345a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801345c:	7bfb      	ldrb	r3, [r7, #15]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d11c      	bne.n	801349c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	69db      	ldr	r3, [r3, #28]
 8013466:	4619      	mov	r1, r3
 8013468:	68b8      	ldr	r0, [r7, #8]
 801346a:	f7ff fa4f 	bl	801290c <move_window>
 801346e:	4603      	mov	r3, r0
 8013470:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013472:	7bfb      	ldrb	r3, [r7, #15]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d111      	bne.n	801349c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6a1b      	ldr	r3, [r3, #32]
 801347c:	2220      	movs	r2, #32
 801347e:	2100      	movs	r1, #0
 8013480:	4618      	mov	r0, r3
 8013482:	f7ff f836 	bl	80124f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a18      	ldr	r0, [r3, #32]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	3324      	adds	r3, #36	; 0x24
 801348e:	220b      	movs	r2, #11
 8013490:	4619      	mov	r1, r3
 8013492:	f7ff f80d 	bl	80124b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	2201      	movs	r2, #1
 801349a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801349c:	7bfb      	ldrb	r3, [r7, #15]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3710      	adds	r7, #16
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}
	...

080134a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b088      	sub	sp, #32
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	60fb      	str	r3, [r7, #12]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	3324      	adds	r3, #36	; 0x24
 80134bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80134be:	220b      	movs	r2, #11
 80134c0:	2120      	movs	r1, #32
 80134c2:	68b8      	ldr	r0, [r7, #8]
 80134c4:	f7ff f815 	bl	80124f2 <mem_set>
	si = i = 0; ni = 8;
 80134c8:	2300      	movs	r3, #0
 80134ca:	613b      	str	r3, [r7, #16]
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	61fb      	str	r3, [r7, #28]
 80134d0:	2308      	movs	r3, #8
 80134d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80134d4:	69fb      	ldr	r3, [r7, #28]
 80134d6:	1c5a      	adds	r2, r3, #1
 80134d8:	61fa      	str	r2, [r7, #28]
 80134da:	68fa      	ldr	r2, [r7, #12]
 80134dc:	4413      	add	r3, r2
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80134e2:	7efb      	ldrb	r3, [r7, #27]
 80134e4:	2b20      	cmp	r3, #32
 80134e6:	d94e      	bls.n	8013586 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80134e8:	7efb      	ldrb	r3, [r7, #27]
 80134ea:	2b2f      	cmp	r3, #47	; 0x2f
 80134ec:	d006      	beq.n	80134fc <create_name+0x54>
 80134ee:	7efb      	ldrb	r3, [r7, #27]
 80134f0:	2b5c      	cmp	r3, #92	; 0x5c
 80134f2:	d110      	bne.n	8013516 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80134f4:	e002      	b.n	80134fc <create_name+0x54>
 80134f6:	69fb      	ldr	r3, [r7, #28]
 80134f8:	3301      	adds	r3, #1
 80134fa:	61fb      	str	r3, [r7, #28]
 80134fc:	68fa      	ldr	r2, [r7, #12]
 80134fe:	69fb      	ldr	r3, [r7, #28]
 8013500:	4413      	add	r3, r2
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	2b2f      	cmp	r3, #47	; 0x2f
 8013506:	d0f6      	beq.n	80134f6 <create_name+0x4e>
 8013508:	68fa      	ldr	r2, [r7, #12]
 801350a:	69fb      	ldr	r3, [r7, #28]
 801350c:	4413      	add	r3, r2
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	2b5c      	cmp	r3, #92	; 0x5c
 8013512:	d0f0      	beq.n	80134f6 <create_name+0x4e>
			break;
 8013514:	e038      	b.n	8013588 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013516:	7efb      	ldrb	r3, [r7, #27]
 8013518:	2b2e      	cmp	r3, #46	; 0x2e
 801351a:	d003      	beq.n	8013524 <create_name+0x7c>
 801351c:	693a      	ldr	r2, [r7, #16]
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	429a      	cmp	r2, r3
 8013522:	d30c      	bcc.n	801353e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	2b0b      	cmp	r3, #11
 8013528:	d002      	beq.n	8013530 <create_name+0x88>
 801352a:	7efb      	ldrb	r3, [r7, #27]
 801352c:	2b2e      	cmp	r3, #46	; 0x2e
 801352e:	d001      	beq.n	8013534 <create_name+0x8c>
 8013530:	2306      	movs	r3, #6
 8013532:	e044      	b.n	80135be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013534:	2308      	movs	r3, #8
 8013536:	613b      	str	r3, [r7, #16]
 8013538:	230b      	movs	r3, #11
 801353a:	617b      	str	r3, [r7, #20]
			continue;
 801353c:	e022      	b.n	8013584 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801353e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013542:	2b00      	cmp	r3, #0
 8013544:	da04      	bge.n	8013550 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013546:	7efb      	ldrb	r3, [r7, #27]
 8013548:	3b80      	subs	r3, #128	; 0x80
 801354a:	4a1f      	ldr	r2, [pc, #124]	; (80135c8 <create_name+0x120>)
 801354c:	5cd3      	ldrb	r3, [r2, r3]
 801354e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013550:	7efb      	ldrb	r3, [r7, #27]
 8013552:	4619      	mov	r1, r3
 8013554:	481d      	ldr	r0, [pc, #116]	; (80135cc <create_name+0x124>)
 8013556:	f7ff f80e 	bl	8012576 <chk_chr>
 801355a:	4603      	mov	r3, r0
 801355c:	2b00      	cmp	r3, #0
 801355e:	d001      	beq.n	8013564 <create_name+0xbc>
 8013560:	2306      	movs	r3, #6
 8013562:	e02c      	b.n	80135be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013564:	7efb      	ldrb	r3, [r7, #27]
 8013566:	2b60      	cmp	r3, #96	; 0x60
 8013568:	d905      	bls.n	8013576 <create_name+0xce>
 801356a:	7efb      	ldrb	r3, [r7, #27]
 801356c:	2b7a      	cmp	r3, #122	; 0x7a
 801356e:	d802      	bhi.n	8013576 <create_name+0xce>
 8013570:	7efb      	ldrb	r3, [r7, #27]
 8013572:	3b20      	subs	r3, #32
 8013574:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	1c5a      	adds	r2, r3, #1
 801357a:	613a      	str	r2, [r7, #16]
 801357c:	68ba      	ldr	r2, [r7, #8]
 801357e:	4413      	add	r3, r2
 8013580:	7efa      	ldrb	r2, [r7, #27]
 8013582:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013584:	e7a6      	b.n	80134d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013586:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013588:	68fa      	ldr	r2, [r7, #12]
 801358a:	69fb      	ldr	r3, [r7, #28]
 801358c:	441a      	add	r2, r3
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d101      	bne.n	801359c <create_name+0xf4>
 8013598:	2306      	movs	r3, #6
 801359a:	e010      	b.n	80135be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	2be5      	cmp	r3, #229	; 0xe5
 80135a2:	d102      	bne.n	80135aa <create_name+0x102>
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	2205      	movs	r2, #5
 80135a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80135aa:	7efb      	ldrb	r3, [r7, #27]
 80135ac:	2b20      	cmp	r3, #32
 80135ae:	d801      	bhi.n	80135b4 <create_name+0x10c>
 80135b0:	2204      	movs	r2, #4
 80135b2:	e000      	b.n	80135b6 <create_name+0x10e>
 80135b4:	2200      	movs	r2, #0
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	330b      	adds	r3, #11
 80135ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80135bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80135be:	4618      	mov	r0, r3
 80135c0:	3720      	adds	r7, #32
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}
 80135c6:	bf00      	nop
 80135c8:	08017d4c 	.word	0x08017d4c
 80135cc:	08017cb4 	.word	0x08017cb4

080135d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b086      	sub	sp, #24
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
 80135d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80135e4:	e002      	b.n	80135ec <follow_path+0x1c>
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	3301      	adds	r3, #1
 80135ea:	603b      	str	r3, [r7, #0]
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	781b      	ldrb	r3, [r3, #0]
 80135f0:	2b2f      	cmp	r3, #47	; 0x2f
 80135f2:	d0f8      	beq.n	80135e6 <follow_path+0x16>
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	2b5c      	cmp	r3, #92	; 0x5c
 80135fa:	d0f4      	beq.n	80135e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	2200      	movs	r2, #0
 8013600:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	2b1f      	cmp	r3, #31
 8013608:	d80a      	bhi.n	8013620 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2280      	movs	r2, #128	; 0x80
 801360e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013612:	2100      	movs	r1, #0
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f7ff fcf9 	bl	801300c <dir_sdi>
 801361a:	4603      	mov	r3, r0
 801361c:	75fb      	strb	r3, [r7, #23]
 801361e:	e043      	b.n	80136a8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013620:	463b      	mov	r3, r7
 8013622:	4619      	mov	r1, r3
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f7ff ff3f 	bl	80134a8 <create_name>
 801362a:	4603      	mov	r3, r0
 801362c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801362e:	7dfb      	ldrb	r3, [r7, #23]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d134      	bne.n	801369e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f7ff feaf 	bl	8013398 <dir_find>
 801363a:	4603      	mov	r3, r0
 801363c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013644:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013646:	7dfb      	ldrb	r3, [r7, #23]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d00a      	beq.n	8013662 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801364c:	7dfb      	ldrb	r3, [r7, #23]
 801364e:	2b04      	cmp	r3, #4
 8013650:	d127      	bne.n	80136a2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013652:	7afb      	ldrb	r3, [r7, #11]
 8013654:	f003 0304 	and.w	r3, r3, #4
 8013658:	2b00      	cmp	r3, #0
 801365a:	d122      	bne.n	80136a2 <follow_path+0xd2>
 801365c:	2305      	movs	r3, #5
 801365e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013660:	e01f      	b.n	80136a2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013662:	7afb      	ldrb	r3, [r7, #11]
 8013664:	f003 0304 	and.w	r3, r3, #4
 8013668:	2b00      	cmp	r3, #0
 801366a:	d11c      	bne.n	80136a6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	799b      	ldrb	r3, [r3, #6]
 8013670:	f003 0310 	and.w	r3, r3, #16
 8013674:	2b00      	cmp	r3, #0
 8013676:	d102      	bne.n	801367e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013678:	2305      	movs	r3, #5
 801367a:	75fb      	strb	r3, [r7, #23]
 801367c:	e014      	b.n	80136a8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	695b      	ldr	r3, [r3, #20]
 8013688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801368c:	4413      	add	r3, r2
 801368e:	4619      	mov	r1, r3
 8013690:	68f8      	ldr	r0, [r7, #12]
 8013692:	f7ff fe42 	bl	801331a <ld_clust>
 8013696:	4602      	mov	r2, r0
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801369c:	e7c0      	b.n	8013620 <follow_path+0x50>
			if (res != FR_OK) break;
 801369e:	bf00      	nop
 80136a0:	e002      	b.n	80136a8 <follow_path+0xd8>
				break;
 80136a2:	bf00      	nop
 80136a4:	e000      	b.n	80136a8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80136a6:	bf00      	nop
			}
		}
	}

	return res;
 80136a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3718      	adds	r7, #24
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80136b2:	b480      	push	{r7}
 80136b4:	b087      	sub	sp, #28
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80136ba:	f04f 33ff 	mov.w	r3, #4294967295
 80136be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d031      	beq.n	801372c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	617b      	str	r3, [r7, #20]
 80136ce:	e002      	b.n	80136d6 <get_ldnumber+0x24>
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	3301      	adds	r3, #1
 80136d4:	617b      	str	r3, [r7, #20]
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	2b20      	cmp	r3, #32
 80136dc:	d903      	bls.n	80136e6 <get_ldnumber+0x34>
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	2b3a      	cmp	r3, #58	; 0x3a
 80136e4:	d1f4      	bne.n	80136d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	2b3a      	cmp	r3, #58	; 0x3a
 80136ec:	d11c      	bne.n	8013728 <get_ldnumber+0x76>
			tp = *path;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	1c5a      	adds	r2, r3, #1
 80136f8:	60fa      	str	r2, [r7, #12]
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	3b30      	subs	r3, #48	; 0x30
 80136fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	2b09      	cmp	r3, #9
 8013704:	d80e      	bhi.n	8013724 <get_ldnumber+0x72>
 8013706:	68fa      	ldr	r2, [r7, #12]
 8013708:	697b      	ldr	r3, [r7, #20]
 801370a:	429a      	cmp	r2, r3
 801370c:	d10a      	bne.n	8013724 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d107      	bne.n	8013724 <get_ldnumber+0x72>
					vol = (int)i;
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	3301      	adds	r3, #1
 801371c:	617b      	str	r3, [r7, #20]
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	697a      	ldr	r2, [r7, #20]
 8013722:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	e002      	b.n	801372e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013728:	2300      	movs	r3, #0
 801372a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801372c:	693b      	ldr	r3, [r7, #16]
}
 801372e:	4618      	mov	r0, r3
 8013730:	371c      	adds	r7, #28
 8013732:	46bd      	mov	sp, r7
 8013734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013738:	4770      	bx	lr
	...

0801373c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2200      	movs	r2, #0
 801374a:	70da      	strb	r2, [r3, #3]
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f04f 32ff 	mov.w	r2, #4294967295
 8013752:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013754:	6839      	ldr	r1, [r7, #0]
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f7ff f8d8 	bl	801290c <move_window>
 801375c:	4603      	mov	r3, r0
 801375e:	2b00      	cmp	r3, #0
 8013760:	d001      	beq.n	8013766 <check_fs+0x2a>
 8013762:	2304      	movs	r3, #4
 8013764:	e038      	b.n	80137d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	3330      	adds	r3, #48	; 0x30
 801376a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801376e:	4618      	mov	r0, r3
 8013770:	f7fe fe1c 	bl	80123ac <ld_word>
 8013774:	4603      	mov	r3, r0
 8013776:	461a      	mov	r2, r3
 8013778:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801377c:	429a      	cmp	r2, r3
 801377e:	d001      	beq.n	8013784 <check_fs+0x48>
 8013780:	2303      	movs	r3, #3
 8013782:	e029      	b.n	80137d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801378a:	2be9      	cmp	r3, #233	; 0xe9
 801378c:	d009      	beq.n	80137a2 <check_fs+0x66>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013794:	2beb      	cmp	r3, #235	; 0xeb
 8013796:	d11e      	bne.n	80137d6 <check_fs+0x9a>
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801379e:	2b90      	cmp	r3, #144	; 0x90
 80137a0:	d119      	bne.n	80137d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	3330      	adds	r3, #48	; 0x30
 80137a6:	3336      	adds	r3, #54	; 0x36
 80137a8:	4618      	mov	r0, r3
 80137aa:	f7fe fe17 	bl	80123dc <ld_dword>
 80137ae:	4603      	mov	r3, r0
 80137b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80137b4:	4a0a      	ldr	r2, [pc, #40]	; (80137e0 <check_fs+0xa4>)
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d101      	bne.n	80137be <check_fs+0x82>
 80137ba:	2300      	movs	r3, #0
 80137bc:	e00c      	b.n	80137d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	3330      	adds	r3, #48	; 0x30
 80137c2:	3352      	adds	r3, #82	; 0x52
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fe fe09 	bl	80123dc <ld_dword>
 80137ca:	4603      	mov	r3, r0
 80137cc:	4a05      	ldr	r2, [pc, #20]	; (80137e4 <check_fs+0xa8>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d101      	bne.n	80137d6 <check_fs+0x9a>
 80137d2:	2300      	movs	r3, #0
 80137d4:	e000      	b.n	80137d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80137d6:	2302      	movs	r3, #2
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3708      	adds	r7, #8
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	00544146 	.word	0x00544146
 80137e4:	33544146 	.word	0x33544146

080137e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b096      	sub	sp, #88	; 0x58
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	4613      	mov	r3, r2
 80137f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	2200      	movs	r2, #0
 80137fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80137fc:	68f8      	ldr	r0, [r7, #12]
 80137fe:	f7ff ff58 	bl	80136b2 <get_ldnumber>
 8013802:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013806:	2b00      	cmp	r3, #0
 8013808:	da01      	bge.n	801380e <find_volume+0x26>
 801380a:	230b      	movs	r3, #11
 801380c:	e22d      	b.n	8013c6a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801380e:	4aa1      	ldr	r2, [pc, #644]	; (8013a94 <find_volume+0x2ac>)
 8013810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013816:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801381a:	2b00      	cmp	r3, #0
 801381c:	d101      	bne.n	8013822 <find_volume+0x3a>
 801381e:	230c      	movs	r3, #12
 8013820:	e223      	b.n	8013c6a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013826:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013828:	79fb      	ldrb	r3, [r7, #7]
 801382a:	f023 0301 	bic.w	r3, r3, #1
 801382e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d01a      	beq.n	801386e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801383a:	785b      	ldrb	r3, [r3, #1]
 801383c:	4618      	mov	r0, r3
 801383e:	f7fe fd17 	bl	8012270 <disk_status>
 8013842:	4603      	mov	r3, r0
 8013844:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801384c:	f003 0301 	and.w	r3, r3, #1
 8013850:	2b00      	cmp	r3, #0
 8013852:	d10c      	bne.n	801386e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013854:	79fb      	ldrb	r3, [r7, #7]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d007      	beq.n	801386a <find_volume+0x82>
 801385a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801385e:	f003 0304 	and.w	r3, r3, #4
 8013862:	2b00      	cmp	r3, #0
 8013864:	d001      	beq.n	801386a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013866:	230a      	movs	r3, #10
 8013868:	e1ff      	b.n	8013c6a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801386a:	2300      	movs	r3, #0
 801386c:	e1fd      	b.n	8013c6a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013870:	2200      	movs	r2, #0
 8013872:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013876:	b2da      	uxtb	r2, r3
 8013878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801387a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801387e:	785b      	ldrb	r3, [r3, #1]
 8013880:	4618      	mov	r0, r3
 8013882:	f7fe fd0f 	bl	80122a4 <disk_initialize>
 8013886:	4603      	mov	r3, r0
 8013888:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801388c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013890:	f003 0301 	and.w	r3, r3, #1
 8013894:	2b00      	cmp	r3, #0
 8013896:	d001      	beq.n	801389c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013898:	2303      	movs	r3, #3
 801389a:	e1e6      	b.n	8013c6a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801389c:	79fb      	ldrb	r3, [r7, #7]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d007      	beq.n	80138b2 <find_volume+0xca>
 80138a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138a6:	f003 0304 	and.w	r3, r3, #4
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d001      	beq.n	80138b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80138ae:	230a      	movs	r3, #10
 80138b0:	e1db      	b.n	8013c6a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80138b2:	2300      	movs	r3, #0
 80138b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80138b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80138b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80138ba:	f7ff ff3f 	bl	801373c <check_fs>
 80138be:	4603      	mov	r3, r0
 80138c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80138c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138c8:	2b02      	cmp	r3, #2
 80138ca:	d149      	bne.n	8013960 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80138cc:	2300      	movs	r3, #0
 80138ce:	643b      	str	r3, [r7, #64]	; 0x40
 80138d0:	e01e      	b.n	8013910 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80138d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80138d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138da:	011b      	lsls	r3, r3, #4
 80138dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80138e0:	4413      	add	r3, r2
 80138e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80138e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e6:	3304      	adds	r3, #4
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d006      	beq.n	80138fc <find_volume+0x114>
 80138ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f0:	3308      	adds	r3, #8
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7fe fd72 	bl	80123dc <ld_dword>
 80138f8:	4602      	mov	r2, r0
 80138fa:	e000      	b.n	80138fe <find_volume+0x116>
 80138fc:	2200      	movs	r2, #0
 80138fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	3358      	adds	r3, #88	; 0x58
 8013904:	443b      	add	r3, r7
 8013906:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801390a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801390c:	3301      	adds	r3, #1
 801390e:	643b      	str	r3, [r7, #64]	; 0x40
 8013910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013912:	2b03      	cmp	r3, #3
 8013914:	d9dd      	bls.n	80138d2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013916:	2300      	movs	r3, #0
 8013918:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801391a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801391c:	2b00      	cmp	r3, #0
 801391e:	d002      	beq.n	8013926 <find_volume+0x13e>
 8013920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013922:	3b01      	subs	r3, #1
 8013924:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013928:	009b      	lsls	r3, r3, #2
 801392a:	3358      	adds	r3, #88	; 0x58
 801392c:	443b      	add	r3, r7
 801392e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013932:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013936:	2b00      	cmp	r3, #0
 8013938:	d005      	beq.n	8013946 <find_volume+0x15e>
 801393a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801393c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801393e:	f7ff fefd 	bl	801373c <check_fs>
 8013942:	4603      	mov	r3, r0
 8013944:	e000      	b.n	8013948 <find_volume+0x160>
 8013946:	2303      	movs	r3, #3
 8013948:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801394c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013950:	2b01      	cmp	r3, #1
 8013952:	d905      	bls.n	8013960 <find_volume+0x178>
 8013954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013956:	3301      	adds	r3, #1
 8013958:	643b      	str	r3, [r7, #64]	; 0x40
 801395a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801395c:	2b03      	cmp	r3, #3
 801395e:	d9e2      	bls.n	8013926 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013960:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013964:	2b04      	cmp	r3, #4
 8013966:	d101      	bne.n	801396c <find_volume+0x184>
 8013968:	2301      	movs	r3, #1
 801396a:	e17e      	b.n	8013c6a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801396c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013970:	2b01      	cmp	r3, #1
 8013972:	d901      	bls.n	8013978 <find_volume+0x190>
 8013974:	230d      	movs	r3, #13
 8013976:	e178      	b.n	8013c6a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397a:	3330      	adds	r3, #48	; 0x30
 801397c:	330b      	adds	r3, #11
 801397e:	4618      	mov	r0, r3
 8013980:	f7fe fd14 	bl	80123ac <ld_word>
 8013984:	4603      	mov	r3, r0
 8013986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801398a:	d001      	beq.n	8013990 <find_volume+0x1a8>
 801398c:	230d      	movs	r3, #13
 801398e:	e16c      	b.n	8013c6a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013992:	3330      	adds	r3, #48	; 0x30
 8013994:	3316      	adds	r3, #22
 8013996:	4618      	mov	r0, r3
 8013998:	f7fe fd08 	bl	80123ac <ld_word>
 801399c:	4603      	mov	r3, r0
 801399e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80139a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d106      	bne.n	80139b4 <find_volume+0x1cc>
 80139a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a8:	3330      	adds	r3, #48	; 0x30
 80139aa:	3324      	adds	r3, #36	; 0x24
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7fe fd15 	bl	80123dc <ld_dword>
 80139b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80139b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139b8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80139ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139bc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80139c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80139c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c6:	789b      	ldrb	r3, [r3, #2]
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	d005      	beq.n	80139d8 <find_volume+0x1f0>
 80139cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ce:	789b      	ldrb	r3, [r3, #2]
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	d001      	beq.n	80139d8 <find_volume+0x1f0>
 80139d4:	230d      	movs	r3, #13
 80139d6:	e148      	b.n	8013c6a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80139d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139da:	789b      	ldrb	r3, [r3, #2]
 80139dc:	461a      	mov	r2, r3
 80139de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139e0:	fb02 f303 	mul.w	r3, r2, r3
 80139e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80139e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80139f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f4:	895b      	ldrh	r3, [r3, #10]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d008      	beq.n	8013a0c <find_volume+0x224>
 80139fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139fc:	895b      	ldrh	r3, [r3, #10]
 80139fe:	461a      	mov	r2, r3
 8013a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a02:	895b      	ldrh	r3, [r3, #10]
 8013a04:	3b01      	subs	r3, #1
 8013a06:	4013      	ands	r3, r2
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d001      	beq.n	8013a10 <find_volume+0x228>
 8013a0c:	230d      	movs	r3, #13
 8013a0e:	e12c      	b.n	8013c6a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a12:	3330      	adds	r3, #48	; 0x30
 8013a14:	3311      	adds	r3, #17
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7fe fcc8 	bl	80123ac <ld_word>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	461a      	mov	r2, r3
 8013a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a26:	891b      	ldrh	r3, [r3, #8]
 8013a28:	f003 030f 	and.w	r3, r3, #15
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <find_volume+0x24e>
 8013a32:	230d      	movs	r3, #13
 8013a34:	e119      	b.n	8013c6a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a38:	3330      	adds	r3, #48	; 0x30
 8013a3a:	3313      	adds	r3, #19
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7fe fcb5 	bl	80123ac <ld_word>
 8013a42:	4603      	mov	r3, r0
 8013a44:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d106      	bne.n	8013a5a <find_volume+0x272>
 8013a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4e:	3330      	adds	r3, #48	; 0x30
 8013a50:	3320      	adds	r3, #32
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7fe fcc2 	bl	80123dc <ld_dword>
 8013a58:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5c:	3330      	adds	r3, #48	; 0x30
 8013a5e:	330e      	adds	r3, #14
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7fe fca3 	bl	80123ac <ld_word>
 8013a66:	4603      	mov	r3, r0
 8013a68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013a6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d101      	bne.n	8013a74 <find_volume+0x28c>
 8013a70:	230d      	movs	r3, #13
 8013a72:	e0fa      	b.n	8013c6a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013a74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a78:	4413      	add	r3, r2
 8013a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a7c:	8912      	ldrh	r2, [r2, #8]
 8013a7e:	0912      	lsrs	r2, r2, #4
 8013a80:	b292      	uxth	r2, r2
 8013a82:	4413      	add	r3, r2
 8013a84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d204      	bcs.n	8013a98 <find_volume+0x2b0>
 8013a8e:	230d      	movs	r3, #13
 8013a90:	e0eb      	b.n	8013c6a <find_volume+0x482>
 8013a92:	bf00      	nop
 8013a94:	24008df0 	.word	0x24008df0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9c:	1ad3      	subs	r3, r2, r3
 8013a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013aa0:	8952      	ldrh	r2, [r2, #10]
 8013aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8013aa6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d101      	bne.n	8013ab2 <find_volume+0x2ca>
 8013aae:	230d      	movs	r3, #13
 8013ab0:	e0db      	b.n	8013c6a <find_volume+0x482>
		fmt = FS_FAT32;
 8013ab2:	2303      	movs	r3, #3
 8013ab4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013abe:	4293      	cmp	r3, r2
 8013ac0:	d802      	bhi.n	8013ac8 <find_volume+0x2e0>
 8013ac2:	2302      	movs	r3, #2
 8013ac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aca:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013ace:	4293      	cmp	r3, r2
 8013ad0:	d802      	bhi.n	8013ad8 <find_volume+0x2f0>
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ada:	1c9a      	adds	r2, r3, #2
 8013adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ade:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013ae4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013ae6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aea:	441a      	add	r2, r3
 8013aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aee:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013af0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af4:	441a      	add	r2, r3
 8013af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013afa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013afe:	2b03      	cmp	r3, #3
 8013b00:	d11e      	bne.n	8013b40 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b04:	3330      	adds	r3, #48	; 0x30
 8013b06:	332a      	adds	r3, #42	; 0x2a
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7fe fc4f 	bl	80123ac <ld_word>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d001      	beq.n	8013b18 <find_volume+0x330>
 8013b14:	230d      	movs	r3, #13
 8013b16:	e0a8      	b.n	8013c6a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b1a:	891b      	ldrh	r3, [r3, #8]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d001      	beq.n	8013b24 <find_volume+0x33c>
 8013b20:	230d      	movs	r3, #13
 8013b22:	e0a2      	b.n	8013c6a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b26:	3330      	adds	r3, #48	; 0x30
 8013b28:	332c      	adds	r3, #44	; 0x2c
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7fe fc56 	bl	80123dc <ld_dword>
 8013b30:	4602      	mov	r2, r0
 8013b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b34:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b38:	695b      	ldr	r3, [r3, #20]
 8013b3a:	009b      	lsls	r3, r3, #2
 8013b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8013b3e:	e01f      	b.n	8013b80 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b42:	891b      	ldrh	r3, [r3, #8]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d101      	bne.n	8013b4c <find_volume+0x364>
 8013b48:	230d      	movs	r3, #13
 8013b4a:	e08e      	b.n	8013c6a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b4e:	6a1a      	ldr	r2, [r3, #32]
 8013b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b52:	441a      	add	r2, r3
 8013b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b56:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013b58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b5c:	2b02      	cmp	r3, #2
 8013b5e:	d103      	bne.n	8013b68 <find_volume+0x380>
 8013b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b62:	695b      	ldr	r3, [r3, #20]
 8013b64:	005b      	lsls	r3, r3, #1
 8013b66:	e00a      	b.n	8013b7e <find_volume+0x396>
 8013b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b6a:	695a      	ldr	r2, [r3, #20]
 8013b6c:	4613      	mov	r3, r2
 8013b6e:	005b      	lsls	r3, r3, #1
 8013b70:	4413      	add	r3, r2
 8013b72:	085a      	lsrs	r2, r3, #1
 8013b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b76:	695b      	ldr	r3, [r3, #20]
 8013b78:	f003 0301 	and.w	r3, r3, #1
 8013b7c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013b7e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b82:	699a      	ldr	r2, [r3, #24]
 8013b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013b8a:	0a5b      	lsrs	r3, r3, #9
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d201      	bcs.n	8013b94 <find_volume+0x3ac>
 8013b90:	230d      	movs	r3, #13
 8013b92:	e06a      	b.n	8013c6a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b96:	f04f 32ff 	mov.w	r2, #4294967295
 8013b9a:	611a      	str	r2, [r3, #16]
 8013b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b9e:	691a      	ldr	r2, [r3, #16]
 8013ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba6:	2280      	movs	r2, #128	; 0x80
 8013ba8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013baa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013bae:	2b03      	cmp	r3, #3
 8013bb0:	d149      	bne.n	8013c46 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb4:	3330      	adds	r3, #48	; 0x30
 8013bb6:	3330      	adds	r3, #48	; 0x30
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fe fbf7 	bl	80123ac <ld_word>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	2b01      	cmp	r3, #1
 8013bc2:	d140      	bne.n	8013c46 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	4619      	mov	r1, r3
 8013bca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bcc:	f7fe fe9e 	bl	801290c <move_window>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d137      	bne.n	8013c46 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8013bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd8:	2200      	movs	r2, #0
 8013bda:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bde:	3330      	adds	r3, #48	; 0x30
 8013be0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7fe fbe1 	bl	80123ac <ld_word>
 8013bea:	4603      	mov	r3, r0
 8013bec:	461a      	mov	r2, r3
 8013bee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d127      	bne.n	8013c46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bf8:	3330      	adds	r3, #48	; 0x30
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7fe fbee 	bl	80123dc <ld_dword>
 8013c00:	4603      	mov	r3, r0
 8013c02:	4a1c      	ldr	r2, [pc, #112]	; (8013c74 <find_volume+0x48c>)
 8013c04:	4293      	cmp	r3, r2
 8013c06:	d11e      	bne.n	8013c46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0a:	3330      	adds	r3, #48	; 0x30
 8013c0c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7fe fbe3 	bl	80123dc <ld_dword>
 8013c16:	4603      	mov	r3, r0
 8013c18:	4a17      	ldr	r2, [pc, #92]	; (8013c78 <find_volume+0x490>)
 8013c1a:	4293      	cmp	r3, r2
 8013c1c:	d113      	bne.n	8013c46 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c20:	3330      	adds	r3, #48	; 0x30
 8013c22:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7fe fbd8 	bl	80123dc <ld_dword>
 8013c2c:	4602      	mov	r2, r0
 8013c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c30:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c34:	3330      	adds	r3, #48	; 0x30
 8013c36:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7fe fbce 	bl	80123dc <ld_dword>
 8013c40:	4602      	mov	r2, r0
 8013c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c44:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c48:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013c4c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013c4e:	4b0b      	ldr	r3, [pc, #44]	; (8013c7c <find_volume+0x494>)
 8013c50:	881b      	ldrh	r3, [r3, #0]
 8013c52:	3301      	adds	r3, #1
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	4b09      	ldr	r3, [pc, #36]	; (8013c7c <find_volume+0x494>)
 8013c58:	801a      	strh	r2, [r3, #0]
 8013c5a:	4b08      	ldr	r3, [pc, #32]	; (8013c7c <find_volume+0x494>)
 8013c5c:	881a      	ldrh	r2, [r3, #0]
 8013c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c60:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013c62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c64:	f7fe fdea 	bl	801283c <clear_lock>
#endif
	return FR_OK;
 8013c68:	2300      	movs	r3, #0
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3758      	adds	r7, #88	; 0x58
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
 8013c72:	bf00      	nop
 8013c74:	41615252 	.word	0x41615252
 8013c78:	61417272 	.word	0x61417272
 8013c7c:	24008df4 	.word	0x24008df4

08013c80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013c8a:	2309      	movs	r3, #9
 8013c8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d01c      	beq.n	8013cce <validate+0x4e>
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d018      	beq.n	8013cce <validate+0x4e>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	781b      	ldrb	r3, [r3, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d013      	beq.n	8013cce <validate+0x4e>
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	889a      	ldrh	r2, [r3, #4]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	88db      	ldrh	r3, [r3, #6]
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	d10c      	bne.n	8013cce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	785b      	ldrb	r3, [r3, #1]
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f7fe fad8 	bl	8012270 <disk_status>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	f003 0301 	and.w	r3, r3, #1
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d101      	bne.n	8013cce <validate+0x4e>
			res = FR_OK;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013cce:	7bfb      	ldrb	r3, [r7, #15]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d102      	bne.n	8013cda <validate+0x5a>
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	e000      	b.n	8013cdc <validate+0x5c>
 8013cda:	2300      	movs	r3, #0
 8013cdc:	683a      	ldr	r2, [r7, #0]
 8013cde:	6013      	str	r3, [r2, #0]
	return res;
 8013ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3710      	adds	r7, #16
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
	...

08013cec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b088      	sub	sp, #32
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	60f8      	str	r0, [r7, #12]
 8013cf4:	60b9      	str	r1, [r7, #8]
 8013cf6:	4613      	mov	r3, r2
 8013cf8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013cfe:	f107 0310 	add.w	r3, r7, #16
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7ff fcd5 	bl	80136b2 <get_ldnumber>
 8013d08:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	da01      	bge.n	8013d14 <f_mount+0x28>
 8013d10:	230b      	movs	r3, #11
 8013d12:	e02b      	b.n	8013d6c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013d14:	4a17      	ldr	r2, [pc, #92]	; (8013d74 <f_mount+0x88>)
 8013d16:	69fb      	ldr	r3, [r7, #28]
 8013d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d1c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013d1e:	69bb      	ldr	r3, [r7, #24]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d005      	beq.n	8013d30 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013d24:	69b8      	ldr	r0, [r7, #24]
 8013d26:	f7fe fd89 	bl	801283c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013d2a:	69bb      	ldr	r3, [r7, #24]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d002      	beq.n	8013d3c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	490d      	ldr	r1, [pc, #52]	; (8013d74 <f_mount+0x88>)
 8013d40:	69fb      	ldr	r3, [r7, #28]
 8013d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d002      	beq.n	8013d52 <f_mount+0x66>
 8013d4c:	79fb      	ldrb	r3, [r7, #7]
 8013d4e:	2b01      	cmp	r3, #1
 8013d50:	d001      	beq.n	8013d56 <f_mount+0x6a>
 8013d52:	2300      	movs	r3, #0
 8013d54:	e00a      	b.n	8013d6c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013d56:	f107 010c 	add.w	r1, r7, #12
 8013d5a:	f107 0308 	add.w	r3, r7, #8
 8013d5e:	2200      	movs	r2, #0
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7ff fd41 	bl	80137e8 <find_volume>
 8013d66:	4603      	mov	r3, r0
 8013d68:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3720      	adds	r7, #32
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}
 8013d74:	24008df0 	.word	0x24008df0

08013d78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b098      	sub	sp, #96	; 0x60
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	60f8      	str	r0, [r7, #12]
 8013d80:	60b9      	str	r1, [r7, #8]
 8013d82:	4613      	mov	r3, r2
 8013d84:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d101      	bne.n	8013d90 <f_open+0x18>
 8013d8c:	2309      	movs	r3, #9
 8013d8e:	e1ad      	b.n	80140ec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013d90:	79fb      	ldrb	r3, [r7, #7]
 8013d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d96:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013d98:	79fa      	ldrb	r2, [r7, #7]
 8013d9a:	f107 0110 	add.w	r1, r7, #16
 8013d9e:	f107 0308 	add.w	r3, r7, #8
 8013da2:	4618      	mov	r0, r3
 8013da4:	f7ff fd20 	bl	80137e8 <find_volume>
 8013da8:	4603      	mov	r3, r0
 8013daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	f040 8191 	bne.w	80140da <f_open+0x362>
		dj.obj.fs = fs;
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013dbc:	68ba      	ldr	r2, [r7, #8]
 8013dbe:	f107 0314 	add.w	r3, r7, #20
 8013dc2:	4611      	mov	r1, r2
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7ff fc03 	bl	80135d0 <follow_path>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d11a      	bne.n	8013e0e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013dd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013ddc:	b25b      	sxtb	r3, r3
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	da03      	bge.n	8013dea <f_open+0x72>
				res = FR_INVALID_NAME;
 8013de2:	2306      	movs	r3, #6
 8013de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013de8:	e011      	b.n	8013e0e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013dea:	79fb      	ldrb	r3, [r7, #7]
 8013dec:	f023 0301 	bic.w	r3, r3, #1
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	bf14      	ite	ne
 8013df4:	2301      	movne	r3, #1
 8013df6:	2300      	moveq	r3, #0
 8013df8:	b2db      	uxtb	r3, r3
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	f107 0314 	add.w	r3, r7, #20
 8013e00:	4611      	mov	r1, r2
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fe fbd2 	bl	80125ac <chk_lock>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013e0e:	79fb      	ldrb	r3, [r7, #7]
 8013e10:	f003 031c 	and.w	r3, r3, #28
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d07f      	beq.n	8013f18 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d017      	beq.n	8013e50 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013e20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e24:	2b04      	cmp	r3, #4
 8013e26:	d10e      	bne.n	8013e46 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013e28:	f7fe fc1c 	bl	8012664 <enq_lock>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d006      	beq.n	8013e40 <f_open+0xc8>
 8013e32:	f107 0314 	add.w	r3, r7, #20
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7ff fb03 	bl	8013442 <dir_register>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	e000      	b.n	8013e42 <f_open+0xca>
 8013e40:	2312      	movs	r3, #18
 8013e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013e46:	79fb      	ldrb	r3, [r7, #7]
 8013e48:	f043 0308 	orr.w	r3, r3, #8
 8013e4c:	71fb      	strb	r3, [r7, #7]
 8013e4e:	e010      	b.n	8013e72 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013e50:	7ebb      	ldrb	r3, [r7, #26]
 8013e52:	f003 0311 	and.w	r3, r3, #17
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d003      	beq.n	8013e62 <f_open+0xea>
					res = FR_DENIED;
 8013e5a:	2307      	movs	r3, #7
 8013e5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013e60:	e007      	b.n	8013e72 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013e62:	79fb      	ldrb	r3, [r7, #7]
 8013e64:	f003 0304 	and.w	r3, r3, #4
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d002      	beq.n	8013e72 <f_open+0xfa>
 8013e6c:	2308      	movs	r3, #8
 8013e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d168      	bne.n	8013f4c <f_open+0x1d4>
 8013e7a:	79fb      	ldrb	r3, [r7, #7]
 8013e7c:	f003 0308 	and.w	r3, r3, #8
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d063      	beq.n	8013f4c <f_open+0x1d4>
				dw = GET_FATTIME();
 8013e84:	f7fd ffd2 	bl	8011e2c <get_fattime>
 8013e88:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e8c:	330e      	adds	r3, #14
 8013e8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7fe fae1 	bl	8012458 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e98:	3316      	adds	r3, #22
 8013e9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7fe fadb 	bl	8012458 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ea4:	330b      	adds	r3, #11
 8013ea6:	2220      	movs	r2, #32
 8013ea8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013eae:	4611      	mov	r1, r2
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7ff fa32 	bl	801331a <ld_clust>
 8013eb6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7ff fa4a 	bl	8013358 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec6:	331c      	adds	r3, #28
 8013ec8:	2100      	movs	r1, #0
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7fe fac4 	bl	8012458 <st_dword>
					fs->wflag = 1;
 8013ed0:	693b      	ldr	r3, [r7, #16]
 8013ed2:	2201      	movs	r2, #1
 8013ed4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d037      	beq.n	8013f4c <f_open+0x1d4>
						dw = fs->winsect;
 8013edc:	693b      	ldr	r3, [r7, #16]
 8013ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013ee2:	f107 0314 	add.w	r3, r7, #20
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7fe ff5d 	bl	8012daa <remove_chain>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d126      	bne.n	8013f4c <f_open+0x1d4>
							res = move_window(fs, dw);
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7fe fd02 	bl	801290c <move_window>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013f12:	3a01      	subs	r2, #1
 8013f14:	60da      	str	r2, [r3, #12]
 8013f16:	e019      	b.n	8013f4c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013f18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d115      	bne.n	8013f4c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013f20:	7ebb      	ldrb	r3, [r7, #26]
 8013f22:	f003 0310 	and.w	r3, r3, #16
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d003      	beq.n	8013f32 <f_open+0x1ba>
					res = FR_NO_FILE;
 8013f2a:	2304      	movs	r3, #4
 8013f2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013f30:	e00c      	b.n	8013f4c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013f32:	79fb      	ldrb	r3, [r7, #7]
 8013f34:	f003 0302 	and.w	r3, r3, #2
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d007      	beq.n	8013f4c <f_open+0x1d4>
 8013f3c:	7ebb      	ldrb	r3, [r7, #26]
 8013f3e:	f003 0301 	and.w	r3, r3, #1
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d002      	beq.n	8013f4c <f_open+0x1d4>
						res = FR_DENIED;
 8013f46:	2307      	movs	r3, #7
 8013f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d128      	bne.n	8013fa6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013f54:	79fb      	ldrb	r3, [r7, #7]
 8013f56:	f003 0308 	and.w	r3, r3, #8
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d003      	beq.n	8013f66 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013f5e:	79fb      	ldrb	r3, [r7, #7]
 8013f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f64:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013f66:	693b      	ldr	r3, [r7, #16]
 8013f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013f74:	79fb      	ldrb	r3, [r7, #7]
 8013f76:	f023 0301 	bic.w	r3, r3, #1
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	bf14      	ite	ne
 8013f7e:	2301      	movne	r3, #1
 8013f80:	2300      	moveq	r3, #0
 8013f82:	b2db      	uxtb	r3, r3
 8013f84:	461a      	mov	r2, r3
 8013f86:	f107 0314 	add.w	r3, r7, #20
 8013f8a:	4611      	mov	r1, r2
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f7fe fb8b 	bl	80126a8 <inc_lock>
 8013f92:	4602      	mov	r2, r0
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	691b      	ldr	r3, [r3, #16]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d102      	bne.n	8013fa6 <f_open+0x22e>
 8013fa0:	2302      	movs	r3, #2
 8013fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	f040 8095 	bne.w	80140da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fb4:	4611      	mov	r1, r2
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7ff f9af 	bl	801331a <ld_clust>
 8013fbc:	4602      	mov	r2, r0
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fc4:	331c      	adds	r3, #28
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7fe fa08 	bl	80123dc <ld_dword>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013fd8:	693a      	ldr	r2, [r7, #16]
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	88da      	ldrh	r2, [r3, #6]
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	79fa      	ldrb	r2, [r7, #7]
 8013fea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	3330      	adds	r3, #48	; 0x30
 8014002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014006:	2100      	movs	r1, #0
 8014008:	4618      	mov	r0, r3
 801400a:	f7fe fa72 	bl	80124f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801400e:	79fb      	ldrb	r3, [r7, #7]
 8014010:	f003 0320 	and.w	r3, r3, #32
 8014014:	2b00      	cmp	r3, #0
 8014016:	d060      	beq.n	80140da <f_open+0x362>
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d05c      	beq.n	80140da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	68da      	ldr	r2, [r3, #12]
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014028:	693b      	ldr	r3, [r7, #16]
 801402a:	895b      	ldrh	r3, [r3, #10]
 801402c:	025b      	lsls	r3, r3, #9
 801402e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	689b      	ldr	r3, [r3, #8]
 8014034:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	68db      	ldr	r3, [r3, #12]
 801403a:	657b      	str	r3, [r7, #84]	; 0x54
 801403c:	e016      	b.n	801406c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014042:	4618      	mov	r0, r3
 8014044:	f7fe fd1d 	bl	8012a82 <get_fat>
 8014048:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801404a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801404c:	2b01      	cmp	r3, #1
 801404e:	d802      	bhi.n	8014056 <f_open+0x2de>
 8014050:	2302      	movs	r3, #2
 8014052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014058:	f1b3 3fff 	cmp.w	r3, #4294967295
 801405c:	d102      	bne.n	8014064 <f_open+0x2ec>
 801405e:	2301      	movs	r3, #1
 8014060:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014064:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014068:	1ad3      	subs	r3, r2, r3
 801406a:	657b      	str	r3, [r7, #84]	; 0x54
 801406c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014070:	2b00      	cmp	r3, #0
 8014072:	d103      	bne.n	801407c <f_open+0x304>
 8014074:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014078:	429a      	cmp	r2, r3
 801407a:	d8e0      	bhi.n	801403e <f_open+0x2c6>
				}
				fp->clust = clst;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014080:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014082:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014086:	2b00      	cmp	r3, #0
 8014088:	d127      	bne.n	80140da <f_open+0x362>
 801408a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014090:	2b00      	cmp	r3, #0
 8014092:	d022      	beq.n	80140da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014098:	4618      	mov	r0, r3
 801409a:	f7fe fcd3 	bl	8012a44 <clust2sect>
 801409e:	6478      	str	r0, [r7, #68]	; 0x44
 80140a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d103      	bne.n	80140ae <f_open+0x336>
						res = FR_INT_ERR;
 80140a6:	2302      	movs	r3, #2
 80140a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80140ac:	e015      	b.n	80140da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80140ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140b0:	0a5a      	lsrs	r2, r3, #9
 80140b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140b4:	441a      	add	r2, r3
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80140ba:	693b      	ldr	r3, [r7, #16]
 80140bc:	7858      	ldrb	r0, [r3, #1]
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	6a1a      	ldr	r2, [r3, #32]
 80140c8:	2301      	movs	r3, #1
 80140ca:	f7fe f911 	bl	80122f0 <disk_read>
 80140ce:	4603      	mov	r3, r0
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d002      	beq.n	80140da <f_open+0x362>
 80140d4:	2301      	movs	r3, #1
 80140d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80140da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d002      	beq.n	80140e8 <f_open+0x370>
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2200      	movs	r2, #0
 80140e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80140e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80140ec:	4618      	mov	r0, r3
 80140ee:	3760      	adds	r7, #96	; 0x60
 80140f0:	46bd      	mov	sp, r7
 80140f2:	bd80      	pop	{r7, pc}

080140f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b08e      	sub	sp, #56	; 0x38
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	60f8      	str	r0, [r7, #12]
 80140fc:	60b9      	str	r1, [r7, #8]
 80140fe:	607a      	str	r2, [r7, #4]
 8014100:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014106:	683b      	ldr	r3, [r7, #0]
 8014108:	2200      	movs	r2, #0
 801410a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	f107 0214 	add.w	r2, r7, #20
 8014112:	4611      	mov	r1, r2
 8014114:	4618      	mov	r0, r3
 8014116:	f7ff fdb3 	bl	8013c80 <validate>
 801411a:	4603      	mov	r3, r0
 801411c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014124:	2b00      	cmp	r3, #0
 8014126:	d107      	bne.n	8014138 <f_read+0x44>
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	7d5b      	ldrb	r3, [r3, #21]
 801412c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014130:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014134:	2b00      	cmp	r3, #0
 8014136:	d002      	beq.n	801413e <f_read+0x4a>
 8014138:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801413c:	e115      	b.n	801436a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	7d1b      	ldrb	r3, [r3, #20]
 8014142:	f003 0301 	and.w	r3, r3, #1
 8014146:	2b00      	cmp	r3, #0
 8014148:	d101      	bne.n	801414e <f_read+0x5a>
 801414a:	2307      	movs	r3, #7
 801414c:	e10d      	b.n	801436a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	68da      	ldr	r2, [r3, #12]
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	699b      	ldr	r3, [r3, #24]
 8014156:	1ad3      	subs	r3, r2, r3
 8014158:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	6a3b      	ldr	r3, [r7, #32]
 801415e:	429a      	cmp	r2, r3
 8014160:	f240 80fe 	bls.w	8014360 <f_read+0x26c>
 8014164:	6a3b      	ldr	r3, [r7, #32]
 8014166:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014168:	e0fa      	b.n	8014360 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	699b      	ldr	r3, [r3, #24]
 801416e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014172:	2b00      	cmp	r3, #0
 8014174:	f040 80c6 	bne.w	8014304 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	699b      	ldr	r3, [r3, #24]
 801417c:	0a5b      	lsrs	r3, r3, #9
 801417e:	697a      	ldr	r2, [r7, #20]
 8014180:	8952      	ldrh	r2, [r2, #10]
 8014182:	3a01      	subs	r2, #1
 8014184:	4013      	ands	r3, r2
 8014186:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014188:	69fb      	ldr	r3, [r7, #28]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d12f      	bne.n	80141ee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	699b      	ldr	r3, [r3, #24]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d103      	bne.n	801419e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	689b      	ldr	r3, [r3, #8]
 801419a:	633b      	str	r3, [r7, #48]	; 0x30
 801419c:	e013      	b.n	80141c6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d007      	beq.n	80141b6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	699b      	ldr	r3, [r3, #24]
 80141aa:	4619      	mov	r1, r3
 80141ac:	68f8      	ldr	r0, [r7, #12]
 80141ae:	f7fe fef9 	bl	8012fa4 <clmt_clust>
 80141b2:	6338      	str	r0, [r7, #48]	; 0x30
 80141b4:	e007      	b.n	80141c6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80141b6:	68fa      	ldr	r2, [r7, #12]
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	69db      	ldr	r3, [r3, #28]
 80141bc:	4619      	mov	r1, r3
 80141be:	4610      	mov	r0, r2
 80141c0:	f7fe fc5f 	bl	8012a82 <get_fat>
 80141c4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80141c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d804      	bhi.n	80141d6 <f_read+0xe2>
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2202      	movs	r2, #2
 80141d0:	755a      	strb	r2, [r3, #21]
 80141d2:	2302      	movs	r3, #2
 80141d4:	e0c9      	b.n	801436a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80141d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141dc:	d104      	bne.n	80141e8 <f_read+0xf4>
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	2201      	movs	r2, #1
 80141e2:	755a      	strb	r2, [r3, #21]
 80141e4:	2301      	movs	r3, #1
 80141e6:	e0c0      	b.n	801436a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141ec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80141ee:	697a      	ldr	r2, [r7, #20]
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	69db      	ldr	r3, [r3, #28]
 80141f4:	4619      	mov	r1, r3
 80141f6:	4610      	mov	r0, r2
 80141f8:	f7fe fc24 	bl	8012a44 <clust2sect>
 80141fc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80141fe:	69bb      	ldr	r3, [r7, #24]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d104      	bne.n	801420e <f_read+0x11a>
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	2202      	movs	r2, #2
 8014208:	755a      	strb	r2, [r3, #21]
 801420a:	2302      	movs	r3, #2
 801420c:	e0ad      	b.n	801436a <f_read+0x276>
			sect += csect;
 801420e:	69ba      	ldr	r2, [r7, #24]
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	4413      	add	r3, r2
 8014214:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	0a5b      	lsrs	r3, r3, #9
 801421a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421e:	2b00      	cmp	r3, #0
 8014220:	d039      	beq.n	8014296 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014222:	69fa      	ldr	r2, [r7, #28]
 8014224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014226:	4413      	add	r3, r2
 8014228:	697a      	ldr	r2, [r7, #20]
 801422a:	8952      	ldrh	r2, [r2, #10]
 801422c:	4293      	cmp	r3, r2
 801422e:	d905      	bls.n	801423c <f_read+0x148>
					cc = fs->csize - csect;
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	895b      	ldrh	r3, [r3, #10]
 8014234:	461a      	mov	r2, r3
 8014236:	69fb      	ldr	r3, [r7, #28]
 8014238:	1ad3      	subs	r3, r2, r3
 801423a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	7858      	ldrb	r0, [r3, #1]
 8014240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014242:	69ba      	ldr	r2, [r7, #24]
 8014244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014246:	f7fe f853 	bl	80122f0 <disk_read>
 801424a:	4603      	mov	r3, r0
 801424c:	2b00      	cmp	r3, #0
 801424e:	d004      	beq.n	801425a <f_read+0x166>
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2201      	movs	r2, #1
 8014254:	755a      	strb	r2, [r3, #21]
 8014256:	2301      	movs	r3, #1
 8014258:	e087      	b.n	801436a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	7d1b      	ldrb	r3, [r3, #20]
 801425e:	b25b      	sxtb	r3, r3
 8014260:	2b00      	cmp	r3, #0
 8014262:	da14      	bge.n	801428e <f_read+0x19a>
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	6a1a      	ldr	r2, [r3, #32]
 8014268:	69bb      	ldr	r3, [r7, #24]
 801426a:	1ad3      	subs	r3, r2, r3
 801426c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801426e:	429a      	cmp	r2, r3
 8014270:	d90d      	bls.n	801428e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	6a1a      	ldr	r2, [r3, #32]
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	1ad3      	subs	r3, r2, r3
 801427a:	025b      	lsls	r3, r3, #9
 801427c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801427e:	18d0      	adds	r0, r2, r3
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	3330      	adds	r3, #48	; 0x30
 8014284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014288:	4619      	mov	r1, r3
 801428a:	f7fe f911 	bl	80124b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014290:	025b      	lsls	r3, r3, #9
 8014292:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014294:	e050      	b.n	8014338 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	6a1b      	ldr	r3, [r3, #32]
 801429a:	69ba      	ldr	r2, [r7, #24]
 801429c:	429a      	cmp	r2, r3
 801429e:	d02e      	beq.n	80142fe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	7d1b      	ldrb	r3, [r3, #20]
 80142a4:	b25b      	sxtb	r3, r3
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	da18      	bge.n	80142dc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	7858      	ldrb	r0, [r3, #1]
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	6a1a      	ldr	r2, [r3, #32]
 80142b8:	2301      	movs	r3, #1
 80142ba:	f7fe f839 	bl	8012330 <disk_write>
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d004      	beq.n	80142ce <f_read+0x1da>
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	2201      	movs	r2, #1
 80142c8:	755a      	strb	r2, [r3, #21]
 80142ca:	2301      	movs	r3, #1
 80142cc:	e04d      	b.n	801436a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	7d1b      	ldrb	r3, [r3, #20]
 80142d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142d6:	b2da      	uxtb	r2, r3
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	7858      	ldrb	r0, [r3, #1]
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142e6:	2301      	movs	r3, #1
 80142e8:	69ba      	ldr	r2, [r7, #24]
 80142ea:	f7fe f801 	bl	80122f0 <disk_read>
 80142ee:	4603      	mov	r3, r0
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d004      	beq.n	80142fe <f_read+0x20a>
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	2201      	movs	r2, #1
 80142f8:	755a      	strb	r2, [r3, #21]
 80142fa:	2301      	movs	r3, #1
 80142fc:	e035      	b.n	801436a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	69ba      	ldr	r2, [r7, #24]
 8014302:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	699b      	ldr	r3, [r3, #24]
 8014308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801430c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014310:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	429a      	cmp	r2, r3
 8014318:	d901      	bls.n	801431e <f_read+0x22a>
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	699b      	ldr	r3, [r3, #24]
 8014328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801432c:	4413      	add	r3, r2
 801432e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014330:	4619      	mov	r1, r3
 8014332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014334:	f7fe f8bc 	bl	80124b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433c:	4413      	add	r3, r2
 801433e:	627b      	str	r3, [r7, #36]	; 0x24
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	699a      	ldr	r2, [r3, #24]
 8014344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014346:	441a      	add	r2, r3
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	619a      	str	r2, [r3, #24]
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014352:	441a      	add	r2, r3
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	601a      	str	r2, [r3, #0]
 8014358:	687a      	ldr	r2, [r7, #4]
 801435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435c:	1ad3      	subs	r3, r2, r3
 801435e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	f47f af01 	bne.w	801416a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014368:	2300      	movs	r3, #0
}
 801436a:	4618      	mov	r0, r3
 801436c:	3738      	adds	r7, #56	; 0x38
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}

08014372 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014372:	b580      	push	{r7, lr}
 8014374:	b08c      	sub	sp, #48	; 0x30
 8014376:	af00      	add	r7, sp, #0
 8014378:	60f8      	str	r0, [r7, #12]
 801437a:	60b9      	str	r1, [r7, #8]
 801437c:	607a      	str	r2, [r7, #4]
 801437e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	2200      	movs	r2, #0
 8014388:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	f107 0210 	add.w	r2, r7, #16
 8014390:	4611      	mov	r1, r2
 8014392:	4618      	mov	r0, r3
 8014394:	f7ff fc74 	bl	8013c80 <validate>
 8014398:	4603      	mov	r3, r0
 801439a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801439e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d107      	bne.n	80143b6 <f_write+0x44>
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	7d5b      	ldrb	r3, [r3, #21]
 80143aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80143ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d002      	beq.n	80143bc <f_write+0x4a>
 80143b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143ba:	e14b      	b.n	8014654 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	7d1b      	ldrb	r3, [r3, #20]
 80143c0:	f003 0302 	and.w	r3, r3, #2
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d101      	bne.n	80143cc <f_write+0x5a>
 80143c8:	2307      	movs	r3, #7
 80143ca:	e143      	b.n	8014654 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	699a      	ldr	r2, [r3, #24]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	441a      	add	r2, r3
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	699b      	ldr	r3, [r3, #24]
 80143d8:	429a      	cmp	r2, r3
 80143da:	f080 812d 	bcs.w	8014638 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	699b      	ldr	r3, [r3, #24]
 80143e2:	43db      	mvns	r3, r3
 80143e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80143e6:	e127      	b.n	8014638 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	699b      	ldr	r3, [r3, #24]
 80143ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	f040 80e3 	bne.w	80145bc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	699b      	ldr	r3, [r3, #24]
 80143fa:	0a5b      	lsrs	r3, r3, #9
 80143fc:	693a      	ldr	r2, [r7, #16]
 80143fe:	8952      	ldrh	r2, [r2, #10]
 8014400:	3a01      	subs	r2, #1
 8014402:	4013      	ands	r3, r2
 8014404:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014406:	69bb      	ldr	r3, [r7, #24]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d143      	bne.n	8014494 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	699b      	ldr	r3, [r3, #24]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d10c      	bne.n	801442e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	689b      	ldr	r3, [r3, #8]
 8014418:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801441c:	2b00      	cmp	r3, #0
 801441e:	d11a      	bne.n	8014456 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2100      	movs	r1, #0
 8014424:	4618      	mov	r0, r3
 8014426:	f7fe fd25 	bl	8012e74 <create_chain>
 801442a:	62b8      	str	r0, [r7, #40]	; 0x28
 801442c:	e013      	b.n	8014456 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014432:	2b00      	cmp	r3, #0
 8014434:	d007      	beq.n	8014446 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	699b      	ldr	r3, [r3, #24]
 801443a:	4619      	mov	r1, r3
 801443c:	68f8      	ldr	r0, [r7, #12]
 801443e:	f7fe fdb1 	bl	8012fa4 <clmt_clust>
 8014442:	62b8      	str	r0, [r7, #40]	; 0x28
 8014444:	e007      	b.n	8014456 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014446:	68fa      	ldr	r2, [r7, #12]
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	69db      	ldr	r3, [r3, #28]
 801444c:	4619      	mov	r1, r3
 801444e:	4610      	mov	r0, r2
 8014450:	f7fe fd10 	bl	8012e74 <create_chain>
 8014454:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014458:	2b00      	cmp	r3, #0
 801445a:	f000 80f2 	beq.w	8014642 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014460:	2b01      	cmp	r3, #1
 8014462:	d104      	bne.n	801446e <f_write+0xfc>
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	2202      	movs	r2, #2
 8014468:	755a      	strb	r2, [r3, #21]
 801446a:	2302      	movs	r3, #2
 801446c:	e0f2      	b.n	8014654 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014474:	d104      	bne.n	8014480 <f_write+0x10e>
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	2201      	movs	r2, #1
 801447a:	755a      	strb	r2, [r3, #21]
 801447c:	2301      	movs	r3, #1
 801447e:	e0e9      	b.n	8014654 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014484:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	689b      	ldr	r3, [r3, #8]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d102      	bne.n	8014494 <f_write+0x122>
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014492:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	7d1b      	ldrb	r3, [r3, #20]
 8014498:	b25b      	sxtb	r3, r3
 801449a:	2b00      	cmp	r3, #0
 801449c:	da18      	bge.n	80144d0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801449e:	693b      	ldr	r3, [r7, #16]
 80144a0:	7858      	ldrb	r0, [r3, #1]
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	6a1a      	ldr	r2, [r3, #32]
 80144ac:	2301      	movs	r3, #1
 80144ae:	f7fd ff3f 	bl	8012330 <disk_write>
 80144b2:	4603      	mov	r3, r0
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d004      	beq.n	80144c2 <f_write+0x150>
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	2201      	movs	r2, #1
 80144bc:	755a      	strb	r2, [r3, #21]
 80144be:	2301      	movs	r3, #1
 80144c0:	e0c8      	b.n	8014654 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	7d1b      	ldrb	r3, [r3, #20]
 80144c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144ca:	b2da      	uxtb	r2, r3
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80144d0:	693a      	ldr	r2, [r7, #16]
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	69db      	ldr	r3, [r3, #28]
 80144d6:	4619      	mov	r1, r3
 80144d8:	4610      	mov	r0, r2
 80144da:	f7fe fab3 	bl	8012a44 <clust2sect>
 80144de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d104      	bne.n	80144f0 <f_write+0x17e>
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	2202      	movs	r2, #2
 80144ea:	755a      	strb	r2, [r3, #21]
 80144ec:	2302      	movs	r3, #2
 80144ee:	e0b1      	b.n	8014654 <f_write+0x2e2>
			sect += csect;
 80144f0:	697a      	ldr	r2, [r7, #20]
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	4413      	add	r3, r2
 80144f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	0a5b      	lsrs	r3, r3, #9
 80144fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80144fe:	6a3b      	ldr	r3, [r7, #32]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d03c      	beq.n	801457e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014504:	69ba      	ldr	r2, [r7, #24]
 8014506:	6a3b      	ldr	r3, [r7, #32]
 8014508:	4413      	add	r3, r2
 801450a:	693a      	ldr	r2, [r7, #16]
 801450c:	8952      	ldrh	r2, [r2, #10]
 801450e:	4293      	cmp	r3, r2
 8014510:	d905      	bls.n	801451e <f_write+0x1ac>
					cc = fs->csize - csect;
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	895b      	ldrh	r3, [r3, #10]
 8014516:	461a      	mov	r2, r3
 8014518:	69bb      	ldr	r3, [r7, #24]
 801451a:	1ad3      	subs	r3, r2, r3
 801451c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	7858      	ldrb	r0, [r3, #1]
 8014522:	6a3b      	ldr	r3, [r7, #32]
 8014524:	697a      	ldr	r2, [r7, #20]
 8014526:	69f9      	ldr	r1, [r7, #28]
 8014528:	f7fd ff02 	bl	8012330 <disk_write>
 801452c:	4603      	mov	r3, r0
 801452e:	2b00      	cmp	r3, #0
 8014530:	d004      	beq.n	801453c <f_write+0x1ca>
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	2201      	movs	r2, #1
 8014536:	755a      	strb	r2, [r3, #21]
 8014538:	2301      	movs	r3, #1
 801453a:	e08b      	b.n	8014654 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	6a1a      	ldr	r2, [r3, #32]
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	1ad3      	subs	r3, r2, r3
 8014544:	6a3a      	ldr	r2, [r7, #32]
 8014546:	429a      	cmp	r2, r3
 8014548:	d915      	bls.n	8014576 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	6a1a      	ldr	r2, [r3, #32]
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	1ad3      	subs	r3, r2, r3
 8014558:	025b      	lsls	r3, r3, #9
 801455a:	69fa      	ldr	r2, [r7, #28]
 801455c:	4413      	add	r3, r2
 801455e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014562:	4619      	mov	r1, r3
 8014564:	f7fd ffa4 	bl	80124b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	7d1b      	ldrb	r3, [r3, #20]
 801456c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014570:	b2da      	uxtb	r2, r3
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014576:	6a3b      	ldr	r3, [r7, #32]
 8014578:	025b      	lsls	r3, r3, #9
 801457a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801457c:	e03f      	b.n	80145fe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	6a1b      	ldr	r3, [r3, #32]
 8014582:	697a      	ldr	r2, [r7, #20]
 8014584:	429a      	cmp	r2, r3
 8014586:	d016      	beq.n	80145b6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	699a      	ldr	r2, [r3, #24]
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014590:	429a      	cmp	r2, r3
 8014592:	d210      	bcs.n	80145b6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	7858      	ldrb	r0, [r3, #1]
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801459e:	2301      	movs	r3, #1
 80145a0:	697a      	ldr	r2, [r7, #20]
 80145a2:	f7fd fea5 	bl	80122f0 <disk_read>
 80145a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d004      	beq.n	80145b6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	2201      	movs	r2, #1
 80145b0:	755a      	strb	r2, [r3, #21]
 80145b2:	2301      	movs	r3, #1
 80145b4:	e04e      	b.n	8014654 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	697a      	ldr	r2, [r7, #20]
 80145ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	699b      	ldr	r3, [r3, #24]
 80145c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80145c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80145ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d901      	bls.n	80145d6 <f_write+0x264>
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	699b      	ldr	r3, [r3, #24]
 80145e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145e4:	4413      	add	r3, r2
 80145e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145e8:	69f9      	ldr	r1, [r7, #28]
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7fd ff60 	bl	80124b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	7d1b      	ldrb	r3, [r3, #20]
 80145f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80145f8:	b2da      	uxtb	r2, r3
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80145fe:	69fa      	ldr	r2, [r7, #28]
 8014600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014602:	4413      	add	r3, r2
 8014604:	61fb      	str	r3, [r7, #28]
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	699a      	ldr	r2, [r3, #24]
 801460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460c:	441a      	add	r2, r3
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	619a      	str	r2, [r3, #24]
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	68da      	ldr	r2, [r3, #12]
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	699b      	ldr	r3, [r3, #24]
 801461a:	429a      	cmp	r2, r3
 801461c:	bf38      	it	cc
 801461e:	461a      	movcc	r2, r3
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	60da      	str	r2, [r3, #12]
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	681a      	ldr	r2, [r3, #0]
 8014628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801462a:	441a      	add	r2, r3
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	601a      	str	r2, [r3, #0]
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2b00      	cmp	r3, #0
 801463c:	f47f aed4 	bne.w	80143e8 <f_write+0x76>
 8014640:	e000      	b.n	8014644 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014642:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	7d1b      	ldrb	r3, [r3, #20]
 8014648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801464c:	b2da      	uxtb	r2, r3
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014652:	2300      	movs	r3, #0
}
 8014654:	4618      	mov	r0, r3
 8014656:	3730      	adds	r7, #48	; 0x30
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}

0801465c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b086      	sub	sp, #24
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f107 0208 	add.w	r2, r7, #8
 801466a:	4611      	mov	r1, r2
 801466c:	4618      	mov	r0, r3
 801466e:	f7ff fb07 	bl	8013c80 <validate>
 8014672:	4603      	mov	r3, r0
 8014674:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014676:	7dfb      	ldrb	r3, [r7, #23]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d168      	bne.n	801474e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	7d1b      	ldrb	r3, [r3, #20]
 8014680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014684:	2b00      	cmp	r3, #0
 8014686:	d062      	beq.n	801474e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	7d1b      	ldrb	r3, [r3, #20]
 801468c:	b25b      	sxtb	r3, r3
 801468e:	2b00      	cmp	r3, #0
 8014690:	da15      	bge.n	80146be <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	7858      	ldrb	r0, [r3, #1]
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	6a1a      	ldr	r2, [r3, #32]
 80146a0:	2301      	movs	r3, #1
 80146a2:	f7fd fe45 	bl	8012330 <disk_write>
 80146a6:	4603      	mov	r3, r0
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d001      	beq.n	80146b0 <f_sync+0x54>
 80146ac:	2301      	movs	r3, #1
 80146ae:	e04f      	b.n	8014750 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	7d1b      	ldrb	r3, [r3, #20]
 80146b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146b8:	b2da      	uxtb	r2, r3
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80146be:	f7fd fbb5 	bl	8011e2c <get_fattime>
 80146c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80146c4:	68ba      	ldr	r2, [r7, #8]
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ca:	4619      	mov	r1, r3
 80146cc:	4610      	mov	r0, r2
 80146ce:	f7fe f91d 	bl	801290c <move_window>
 80146d2:	4603      	mov	r3, r0
 80146d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80146d6:	7dfb      	ldrb	r3, [r7, #23]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d138      	bne.n	801474e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	330b      	adds	r3, #11
 80146e6:	781a      	ldrb	r2, [r3, #0]
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	330b      	adds	r3, #11
 80146ec:	f042 0220 	orr.w	r2, r2, #32
 80146f0:	b2d2      	uxtb	r2, r2
 80146f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6818      	ldr	r0, [r3, #0]
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	689b      	ldr	r3, [r3, #8]
 80146fc:	461a      	mov	r2, r3
 80146fe:	68f9      	ldr	r1, [r7, #12]
 8014700:	f7fe fe2a 	bl	8013358 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	f103 021c 	add.w	r2, r3, #28
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	4619      	mov	r1, r3
 8014710:	4610      	mov	r0, r2
 8014712:	f7fd fea1 	bl	8012458 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	3316      	adds	r3, #22
 801471a:	6939      	ldr	r1, [r7, #16]
 801471c:	4618      	mov	r0, r3
 801471e:	f7fd fe9b 	bl	8012458 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	3312      	adds	r3, #18
 8014726:	2100      	movs	r1, #0
 8014728:	4618      	mov	r0, r3
 801472a:	f7fd fe7a 	bl	8012422 <st_word>
					fs->wflag = 1;
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	2201      	movs	r2, #1
 8014732:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	4618      	mov	r0, r3
 8014738:	f7fe f916 	bl	8012968 <sync_fs>
 801473c:	4603      	mov	r3, r0
 801473e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	7d1b      	ldrb	r3, [r3, #20]
 8014744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014748:	b2da      	uxtb	r2, r3
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801474e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014750:	4618      	mov	r0, r3
 8014752:	3718      	adds	r7, #24
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}

08014758 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b084      	sub	sp, #16
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7ff ff7b 	bl	801465c <f_sync>
 8014766:	4603      	mov	r3, r0
 8014768:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801476a:	7bfb      	ldrb	r3, [r7, #15]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d118      	bne.n	80147a2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f107 0208 	add.w	r2, r7, #8
 8014776:	4611      	mov	r1, r2
 8014778:	4618      	mov	r0, r3
 801477a:	f7ff fa81 	bl	8013c80 <validate>
 801477e:	4603      	mov	r3, r0
 8014780:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014782:	7bfb      	ldrb	r3, [r7, #15]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d10c      	bne.n	80147a2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	691b      	ldr	r3, [r3, #16]
 801478c:	4618      	mov	r0, r3
 801478e:	f7fe f819 	bl	80127c4 <dec_lock>
 8014792:	4603      	mov	r3, r0
 8014794:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014796:	7bfb      	ldrb	r3, [r7, #15]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d102      	bne.n	80147a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2200      	movs	r2, #0
 80147a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80147a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	3710      	adds	r7, #16
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}

080147ac <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b088      	sub	sp, #32
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	607a      	str	r2, [r7, #4]
	int n = 0;
 80147b8:	2300      	movs	r3, #0
 80147ba:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147c0:	e01b      	b.n	80147fa <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80147c2:	f107 0310 	add.w	r3, r7, #16
 80147c6:	f107 0114 	add.w	r1, r7, #20
 80147ca:	2201      	movs	r2, #1
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f7ff fc91 	bl	80140f4 <f_read>
		if (rc != 1) break;
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	2b01      	cmp	r3, #1
 80147d6:	d116      	bne.n	8014806 <f_gets+0x5a>
		c = s[0];
 80147d8:	7d3b      	ldrb	r3, [r7, #20]
 80147da:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80147dc:	7dfb      	ldrb	r3, [r7, #23]
 80147de:	2b0d      	cmp	r3, #13
 80147e0:	d100      	bne.n	80147e4 <f_gets+0x38>
 80147e2:	e00a      	b.n	80147fa <f_gets+0x4e>
		*p++ = c;
 80147e4:	69bb      	ldr	r3, [r7, #24]
 80147e6:	1c5a      	adds	r2, r3, #1
 80147e8:	61ba      	str	r2, [r7, #24]
 80147ea:	7dfa      	ldrb	r2, [r7, #23]
 80147ec:	701a      	strb	r2, [r3, #0]
		n++;
 80147ee:	69fb      	ldr	r3, [r7, #28]
 80147f0:	3301      	adds	r3, #1
 80147f2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80147f4:	7dfb      	ldrb	r3, [r7, #23]
 80147f6:	2b0a      	cmp	r3, #10
 80147f8:	d007      	beq.n	801480a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	3b01      	subs	r3, #1
 80147fe:	69fa      	ldr	r2, [r7, #28]
 8014800:	429a      	cmp	r2, r3
 8014802:	dbde      	blt.n	80147c2 <f_gets+0x16>
 8014804:	e002      	b.n	801480c <f_gets+0x60>
		if (rc != 1) break;
 8014806:	bf00      	nop
 8014808:	e000      	b.n	801480c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801480a:	bf00      	nop
	}
	*p = 0;
 801480c:	69bb      	ldr	r3, [r7, #24]
 801480e:	2200      	movs	r2, #0
 8014810:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014812:	69fb      	ldr	r3, [r7, #28]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d001      	beq.n	801481c <f_gets+0x70>
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	e000      	b.n	801481e <f_gets+0x72>
 801481c:	2300      	movs	r3, #0
}
 801481e:	4618      	mov	r0, r3
 8014820:	3720      	adds	r7, #32
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}
	...

08014828 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014828:	b480      	push	{r7}
 801482a:	b087      	sub	sp, #28
 801482c:	af00      	add	r7, sp, #0
 801482e:	60f8      	str	r0, [r7, #12]
 8014830:	60b9      	str	r1, [r7, #8]
 8014832:	4613      	mov	r3, r2
 8014834:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014836:	2301      	movs	r3, #1
 8014838:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801483a:	2300      	movs	r3, #0
 801483c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801483e:	4b1f      	ldr	r3, [pc, #124]	; (80148bc <FATFS_LinkDriverEx+0x94>)
 8014840:	7a5b      	ldrb	r3, [r3, #9]
 8014842:	b2db      	uxtb	r3, r3
 8014844:	2b00      	cmp	r3, #0
 8014846:	d131      	bne.n	80148ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014848:	4b1c      	ldr	r3, [pc, #112]	; (80148bc <FATFS_LinkDriverEx+0x94>)
 801484a:	7a5b      	ldrb	r3, [r3, #9]
 801484c:	b2db      	uxtb	r3, r3
 801484e:	461a      	mov	r2, r3
 8014850:	4b1a      	ldr	r3, [pc, #104]	; (80148bc <FATFS_LinkDriverEx+0x94>)
 8014852:	2100      	movs	r1, #0
 8014854:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014856:	4b19      	ldr	r3, [pc, #100]	; (80148bc <FATFS_LinkDriverEx+0x94>)
 8014858:	7a5b      	ldrb	r3, [r3, #9]
 801485a:	b2db      	uxtb	r3, r3
 801485c:	4a17      	ldr	r2, [pc, #92]	; (80148bc <FATFS_LinkDriverEx+0x94>)
 801485e:	009b      	lsls	r3, r3, #2
 8014860:	4413      	add	r3, r2
 8014862:	68fa      	ldr	r2, [r7, #12]
 8014864:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014866:	4b15      	ldr	r3, [pc, #84]	; (80148bc <FATFS_LinkDriverEx+0x94>)
 8014868:	7a5b      	ldrb	r3, [r3, #9]
 801486a:	b2db      	uxtb	r3, r3
 801486c:	461a      	mov	r2, r3
 801486e:	4b13      	ldr	r3, [pc, #76]	; (80148bc <FATFS_LinkDriverEx+0x94>)
 8014870:	4413      	add	r3, r2
 8014872:	79fa      	ldrb	r2, [r7, #7]
 8014874:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014876:	4b11      	ldr	r3, [pc, #68]	; (80148bc <FATFS_LinkDriverEx+0x94>)
 8014878:	7a5b      	ldrb	r3, [r3, #9]
 801487a:	b2db      	uxtb	r3, r3
 801487c:	1c5a      	adds	r2, r3, #1
 801487e:	b2d1      	uxtb	r1, r2
 8014880:	4a0e      	ldr	r2, [pc, #56]	; (80148bc <FATFS_LinkDriverEx+0x94>)
 8014882:	7251      	strb	r1, [r2, #9]
 8014884:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014886:	7dbb      	ldrb	r3, [r7, #22]
 8014888:	3330      	adds	r3, #48	; 0x30
 801488a:	b2da      	uxtb	r2, r3
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	3301      	adds	r3, #1
 8014894:	223a      	movs	r2, #58	; 0x3a
 8014896:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	3302      	adds	r3, #2
 801489c:	222f      	movs	r2, #47	; 0x2f
 801489e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	3303      	adds	r3, #3
 80148a4:	2200      	movs	r2, #0
 80148a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148a8:	2300      	movs	r3, #0
 80148aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	371c      	adds	r7, #28
 80148b2:	46bd      	mov	sp, r7
 80148b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b8:	4770      	bx	lr
 80148ba:	bf00      	nop
 80148bc:	24008e18 	.word	0x24008e18

080148c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b082      	sub	sp, #8
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80148ca:	2200      	movs	r2, #0
 80148cc:	6839      	ldr	r1, [r7, #0]
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f7ff ffaa 	bl	8014828 <FATFS_LinkDriverEx>
 80148d4:	4603      	mov	r3, r0
}
 80148d6:	4618      	mov	r0, r3
 80148d8:	3708      	adds	r7, #8
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}

080148de <atof>:
 80148de:	2100      	movs	r1, #0
 80148e0:	f000 be28 	b.w	8015534 <strtod>

080148e4 <atoi>:
 80148e4:	220a      	movs	r2, #10
 80148e6:	2100      	movs	r1, #0
 80148e8:	f000 bf0e 	b.w	8015708 <strtol>

080148ec <__errno>:
 80148ec:	4b01      	ldr	r3, [pc, #4]	; (80148f4 <__errno+0x8>)
 80148ee:	6818      	ldr	r0, [r3, #0]
 80148f0:	4770      	bx	lr
 80148f2:	bf00      	nop
 80148f4:	2400001c 	.word	0x2400001c

080148f8 <__libc_init_array>:
 80148f8:	b570      	push	{r4, r5, r6, lr}
 80148fa:	4d0d      	ldr	r5, [pc, #52]	; (8014930 <__libc_init_array+0x38>)
 80148fc:	4c0d      	ldr	r4, [pc, #52]	; (8014934 <__libc_init_array+0x3c>)
 80148fe:	1b64      	subs	r4, r4, r5
 8014900:	10a4      	asrs	r4, r4, #2
 8014902:	2600      	movs	r6, #0
 8014904:	42a6      	cmp	r6, r4
 8014906:	d109      	bne.n	801491c <__libc_init_array+0x24>
 8014908:	4d0b      	ldr	r5, [pc, #44]	; (8014938 <__libc_init_array+0x40>)
 801490a:	4c0c      	ldr	r4, [pc, #48]	; (801493c <__libc_init_array+0x44>)
 801490c:	f003 f93c 	bl	8017b88 <_init>
 8014910:	1b64      	subs	r4, r4, r5
 8014912:	10a4      	asrs	r4, r4, #2
 8014914:	2600      	movs	r6, #0
 8014916:	42a6      	cmp	r6, r4
 8014918:	d105      	bne.n	8014926 <__libc_init_array+0x2e>
 801491a:	bd70      	pop	{r4, r5, r6, pc}
 801491c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014920:	4798      	blx	r3
 8014922:	3601      	adds	r6, #1
 8014924:	e7ee      	b.n	8014904 <__libc_init_array+0xc>
 8014926:	f855 3b04 	ldr.w	r3, [r5], #4
 801492a:	4798      	blx	r3
 801492c:	3601      	adds	r6, #1
 801492e:	e7f2      	b.n	8014916 <__libc_init_array+0x1e>
 8014930:	08018260 	.word	0x08018260
 8014934:	08018260 	.word	0x08018260
 8014938:	08018260 	.word	0x08018260
 801493c:	08018264 	.word	0x08018264

08014940 <memset>:
 8014940:	4402      	add	r2, r0
 8014942:	4603      	mov	r3, r0
 8014944:	4293      	cmp	r3, r2
 8014946:	d100      	bne.n	801494a <memset+0xa>
 8014948:	4770      	bx	lr
 801494a:	f803 1b01 	strb.w	r1, [r3], #1
 801494e:	e7f9      	b.n	8014944 <memset+0x4>

08014950 <siprintf>:
 8014950:	b40e      	push	{r1, r2, r3}
 8014952:	b500      	push	{lr}
 8014954:	b09c      	sub	sp, #112	; 0x70
 8014956:	ab1d      	add	r3, sp, #116	; 0x74
 8014958:	9002      	str	r0, [sp, #8]
 801495a:	9006      	str	r0, [sp, #24]
 801495c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014960:	4809      	ldr	r0, [pc, #36]	; (8014988 <siprintf+0x38>)
 8014962:	9107      	str	r1, [sp, #28]
 8014964:	9104      	str	r1, [sp, #16]
 8014966:	4909      	ldr	r1, [pc, #36]	; (801498c <siprintf+0x3c>)
 8014968:	f853 2b04 	ldr.w	r2, [r3], #4
 801496c:	9105      	str	r1, [sp, #20]
 801496e:	6800      	ldr	r0, [r0, #0]
 8014970:	9301      	str	r3, [sp, #4]
 8014972:	a902      	add	r1, sp, #8
 8014974:	f002 f8aa 	bl	8016acc <_svfiprintf_r>
 8014978:	9b02      	ldr	r3, [sp, #8]
 801497a:	2200      	movs	r2, #0
 801497c:	701a      	strb	r2, [r3, #0]
 801497e:	b01c      	add	sp, #112	; 0x70
 8014980:	f85d eb04 	ldr.w	lr, [sp], #4
 8014984:	b003      	add	sp, #12
 8014986:	4770      	bx	lr
 8014988:	2400001c 	.word	0x2400001c
 801498c:	ffff0208 	.word	0xffff0208

08014990 <sulp>:
 8014990:	b570      	push	{r4, r5, r6, lr}
 8014992:	4604      	mov	r4, r0
 8014994:	460d      	mov	r5, r1
 8014996:	4616      	mov	r6, r2
 8014998:	ec45 4b10 	vmov	d0, r4, r5
 801499c:	f001 fdf8 	bl	8016590 <__ulp>
 80149a0:	b17e      	cbz	r6, 80149c2 <sulp+0x32>
 80149a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80149a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	dd09      	ble.n	80149c2 <sulp+0x32>
 80149ae:	051b      	lsls	r3, r3, #20
 80149b0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80149b4:	2000      	movs	r0, #0
 80149b6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80149ba:	ec41 0b17 	vmov	d7, r0, r1
 80149be:	ee20 0b07 	vmul.f64	d0, d0, d7
 80149c2:	bd70      	pop	{r4, r5, r6, pc}
 80149c4:	0000      	movs	r0, r0
	...

080149c8 <_strtod_l>:
 80149c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149cc:	ed2d 8b0e 	vpush	{d8-d14}
 80149d0:	b097      	sub	sp, #92	; 0x5c
 80149d2:	461f      	mov	r7, r3
 80149d4:	2300      	movs	r3, #0
 80149d6:	9312      	str	r3, [sp, #72]	; 0x48
 80149d8:	4ba1      	ldr	r3, [pc, #644]	; (8014c60 <_strtod_l+0x298>)
 80149da:	920d      	str	r2, [sp, #52]	; 0x34
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	9307      	str	r3, [sp, #28]
 80149e0:	4604      	mov	r4, r0
 80149e2:	4618      	mov	r0, r3
 80149e4:	468b      	mov	fp, r1
 80149e6:	f7eb fc8d 	bl	8000304 <strlen>
 80149ea:	f04f 0800 	mov.w	r8, #0
 80149ee:	4605      	mov	r5, r0
 80149f0:	f04f 0900 	mov.w	r9, #0
 80149f4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80149f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80149fa:	7813      	ldrb	r3, [r2, #0]
 80149fc:	2b2b      	cmp	r3, #43	; 0x2b
 80149fe:	d04d      	beq.n	8014a9c <_strtod_l+0xd4>
 8014a00:	d83a      	bhi.n	8014a78 <_strtod_l+0xb0>
 8014a02:	2b0d      	cmp	r3, #13
 8014a04:	d833      	bhi.n	8014a6e <_strtod_l+0xa6>
 8014a06:	2b08      	cmp	r3, #8
 8014a08:	d833      	bhi.n	8014a72 <_strtod_l+0xaa>
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d03d      	beq.n	8014a8a <_strtod_l+0xc2>
 8014a0e:	2300      	movs	r3, #0
 8014a10:	9308      	str	r3, [sp, #32]
 8014a12:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014a14:	7833      	ldrb	r3, [r6, #0]
 8014a16:	2b30      	cmp	r3, #48	; 0x30
 8014a18:	f040 80b0 	bne.w	8014b7c <_strtod_l+0x1b4>
 8014a1c:	7873      	ldrb	r3, [r6, #1]
 8014a1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014a22:	2b58      	cmp	r3, #88	; 0x58
 8014a24:	d167      	bne.n	8014af6 <_strtod_l+0x12e>
 8014a26:	9b08      	ldr	r3, [sp, #32]
 8014a28:	9301      	str	r3, [sp, #4]
 8014a2a:	ab12      	add	r3, sp, #72	; 0x48
 8014a2c:	9702      	str	r7, [sp, #8]
 8014a2e:	9300      	str	r3, [sp, #0]
 8014a30:	4a8c      	ldr	r2, [pc, #560]	; (8014c64 <_strtod_l+0x29c>)
 8014a32:	ab13      	add	r3, sp, #76	; 0x4c
 8014a34:	a911      	add	r1, sp, #68	; 0x44
 8014a36:	4620      	mov	r0, r4
 8014a38:	f000 ff08 	bl	801584c <__gethex>
 8014a3c:	f010 0507 	ands.w	r5, r0, #7
 8014a40:	4607      	mov	r7, r0
 8014a42:	d005      	beq.n	8014a50 <_strtod_l+0x88>
 8014a44:	2d06      	cmp	r5, #6
 8014a46:	d12b      	bne.n	8014aa0 <_strtod_l+0xd8>
 8014a48:	3601      	adds	r6, #1
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	9611      	str	r6, [sp, #68]	; 0x44
 8014a4e:	9308      	str	r3, [sp, #32]
 8014a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	f040 854e 	bne.w	80154f4 <_strtod_l+0xb2c>
 8014a58:	9b08      	ldr	r3, [sp, #32]
 8014a5a:	b1e3      	cbz	r3, 8014a96 <_strtod_l+0xce>
 8014a5c:	ec49 8b17 	vmov	d7, r8, r9
 8014a60:	eeb1 0b47 	vneg.f64	d0, d7
 8014a64:	b017      	add	sp, #92	; 0x5c
 8014a66:	ecbd 8b0e 	vpop	{d8-d14}
 8014a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a6e:	2b20      	cmp	r3, #32
 8014a70:	d1cd      	bne.n	8014a0e <_strtod_l+0x46>
 8014a72:	3201      	adds	r2, #1
 8014a74:	9211      	str	r2, [sp, #68]	; 0x44
 8014a76:	e7bf      	b.n	80149f8 <_strtod_l+0x30>
 8014a78:	2b2d      	cmp	r3, #45	; 0x2d
 8014a7a:	d1c8      	bne.n	8014a0e <_strtod_l+0x46>
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	9308      	str	r3, [sp, #32]
 8014a80:	1c53      	adds	r3, r2, #1
 8014a82:	9311      	str	r3, [sp, #68]	; 0x44
 8014a84:	7853      	ldrb	r3, [r2, #1]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d1c3      	bne.n	8014a12 <_strtod_l+0x4a>
 8014a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a8c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	f040 852d 	bne.w	80154f0 <_strtod_l+0xb28>
 8014a96:	ec49 8b10 	vmov	d0, r8, r9
 8014a9a:	e7e3      	b.n	8014a64 <_strtod_l+0x9c>
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	e7ee      	b.n	8014a7e <_strtod_l+0xb6>
 8014aa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014aa2:	b13a      	cbz	r2, 8014ab4 <_strtod_l+0xec>
 8014aa4:	2135      	movs	r1, #53	; 0x35
 8014aa6:	a814      	add	r0, sp, #80	; 0x50
 8014aa8:	f001 fe7a 	bl	80167a0 <__copybits>
 8014aac:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014aae:	4620      	mov	r0, r4
 8014ab0:	f001 fa3c 	bl	8015f2c <_Bfree>
 8014ab4:	3d01      	subs	r5, #1
 8014ab6:	2d04      	cmp	r5, #4
 8014ab8:	d806      	bhi.n	8014ac8 <_strtod_l+0x100>
 8014aba:	e8df f005 	tbb	[pc, r5]
 8014abe:	030a      	.short	0x030a
 8014ac0:	1714      	.short	0x1714
 8014ac2:	0a          	.byte	0x0a
 8014ac3:	00          	.byte	0x00
 8014ac4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8014ac8:	073f      	lsls	r7, r7, #28
 8014aca:	d5c1      	bpl.n	8014a50 <_strtod_l+0x88>
 8014acc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8014ad0:	e7be      	b.n	8014a50 <_strtod_l+0x88>
 8014ad2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8014ad6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014ad8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014adc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014ae0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014ae4:	e7f0      	b.n	8014ac8 <_strtod_l+0x100>
 8014ae6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8014c68 <_strtod_l+0x2a0>
 8014aea:	e7ed      	b.n	8014ac8 <_strtod_l+0x100>
 8014aec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014af0:	f04f 38ff 	mov.w	r8, #4294967295
 8014af4:	e7e8      	b.n	8014ac8 <_strtod_l+0x100>
 8014af6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014af8:	1c5a      	adds	r2, r3, #1
 8014afa:	9211      	str	r2, [sp, #68]	; 0x44
 8014afc:	785b      	ldrb	r3, [r3, #1]
 8014afe:	2b30      	cmp	r3, #48	; 0x30
 8014b00:	d0f9      	beq.n	8014af6 <_strtod_l+0x12e>
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d0a4      	beq.n	8014a50 <_strtod_l+0x88>
 8014b06:	2301      	movs	r3, #1
 8014b08:	f04f 0a00 	mov.w	sl, #0
 8014b0c:	9304      	str	r3, [sp, #16]
 8014b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b10:	930a      	str	r3, [sp, #40]	; 0x28
 8014b12:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014b16:	f8cd a018 	str.w	sl, [sp, #24]
 8014b1a:	220a      	movs	r2, #10
 8014b1c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014b1e:	7807      	ldrb	r7, [r0, #0]
 8014b20:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014b24:	b2d9      	uxtb	r1, r3
 8014b26:	2909      	cmp	r1, #9
 8014b28:	d92a      	bls.n	8014b80 <_strtod_l+0x1b8>
 8014b2a:	9907      	ldr	r1, [sp, #28]
 8014b2c:	462a      	mov	r2, r5
 8014b2e:	f002 fbd3 	bl	80172d8 <strncmp>
 8014b32:	2800      	cmp	r0, #0
 8014b34:	d033      	beq.n	8014b9e <_strtod_l+0x1d6>
 8014b36:	2000      	movs	r0, #0
 8014b38:	9b06      	ldr	r3, [sp, #24]
 8014b3a:	463a      	mov	r2, r7
 8014b3c:	4601      	mov	r1, r0
 8014b3e:	4607      	mov	r7, r0
 8014b40:	2a65      	cmp	r2, #101	; 0x65
 8014b42:	d001      	beq.n	8014b48 <_strtod_l+0x180>
 8014b44:	2a45      	cmp	r2, #69	; 0x45
 8014b46:	d117      	bne.n	8014b78 <_strtod_l+0x1b0>
 8014b48:	b91b      	cbnz	r3, 8014b52 <_strtod_l+0x18a>
 8014b4a:	9b04      	ldr	r3, [sp, #16]
 8014b4c:	4303      	orrs	r3, r0
 8014b4e:	d09c      	beq.n	8014a8a <_strtod_l+0xc2>
 8014b50:	2300      	movs	r3, #0
 8014b52:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8014b56:	f10b 0201 	add.w	r2, fp, #1
 8014b5a:	9211      	str	r2, [sp, #68]	; 0x44
 8014b5c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8014b60:	2a2b      	cmp	r2, #43	; 0x2b
 8014b62:	d071      	beq.n	8014c48 <_strtod_l+0x280>
 8014b64:	2a2d      	cmp	r2, #45	; 0x2d
 8014b66:	d077      	beq.n	8014c58 <_strtod_l+0x290>
 8014b68:	f04f 0e00 	mov.w	lr, #0
 8014b6c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8014b70:	2d09      	cmp	r5, #9
 8014b72:	d97f      	bls.n	8014c74 <_strtod_l+0x2ac>
 8014b74:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014b78:	2500      	movs	r5, #0
 8014b7a:	e09b      	b.n	8014cb4 <_strtod_l+0x2ec>
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	e7c3      	b.n	8014b08 <_strtod_l+0x140>
 8014b80:	9906      	ldr	r1, [sp, #24]
 8014b82:	2908      	cmp	r1, #8
 8014b84:	bfdd      	ittte	le
 8014b86:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014b88:	fb02 3301 	mlale	r3, r2, r1, r3
 8014b8c:	9309      	strle	r3, [sp, #36]	; 0x24
 8014b8e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014b92:	9b06      	ldr	r3, [sp, #24]
 8014b94:	3001      	adds	r0, #1
 8014b96:	3301      	adds	r3, #1
 8014b98:	9306      	str	r3, [sp, #24]
 8014b9a:	9011      	str	r0, [sp, #68]	; 0x44
 8014b9c:	e7be      	b.n	8014b1c <_strtod_l+0x154>
 8014b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ba0:	195a      	adds	r2, r3, r5
 8014ba2:	9211      	str	r2, [sp, #68]	; 0x44
 8014ba4:	5d5a      	ldrb	r2, [r3, r5]
 8014ba6:	9b06      	ldr	r3, [sp, #24]
 8014ba8:	b3a3      	cbz	r3, 8014c14 <_strtod_l+0x24c>
 8014baa:	4607      	mov	r7, r0
 8014bac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014bb0:	2909      	cmp	r1, #9
 8014bb2:	d912      	bls.n	8014bda <_strtod_l+0x212>
 8014bb4:	2101      	movs	r1, #1
 8014bb6:	e7c3      	b.n	8014b40 <_strtod_l+0x178>
 8014bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014bba:	1c5a      	adds	r2, r3, #1
 8014bbc:	9211      	str	r2, [sp, #68]	; 0x44
 8014bbe:	785a      	ldrb	r2, [r3, #1]
 8014bc0:	3001      	adds	r0, #1
 8014bc2:	2a30      	cmp	r2, #48	; 0x30
 8014bc4:	d0f8      	beq.n	8014bb8 <_strtod_l+0x1f0>
 8014bc6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014bca:	2b08      	cmp	r3, #8
 8014bcc:	f200 8497 	bhi.w	80154fe <_strtod_l+0xb36>
 8014bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8014bd4:	4607      	mov	r7, r0
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	4603      	mov	r3, r0
 8014bda:	3a30      	subs	r2, #48	; 0x30
 8014bdc:	f100 0101 	add.w	r1, r0, #1
 8014be0:	d012      	beq.n	8014c08 <_strtod_l+0x240>
 8014be2:	440f      	add	r7, r1
 8014be4:	eb00 0c03 	add.w	ip, r0, r3
 8014be8:	4619      	mov	r1, r3
 8014bea:	250a      	movs	r5, #10
 8014bec:	4561      	cmp	r1, ip
 8014bee:	d113      	bne.n	8014c18 <_strtod_l+0x250>
 8014bf0:	1819      	adds	r1, r3, r0
 8014bf2:	2908      	cmp	r1, #8
 8014bf4:	f103 0301 	add.w	r3, r3, #1
 8014bf8:	4403      	add	r3, r0
 8014bfa:	dc1c      	bgt.n	8014c36 <_strtod_l+0x26e>
 8014bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bfe:	210a      	movs	r1, #10
 8014c00:	fb01 2200 	mla	r2, r1, r0, r2
 8014c04:	9209      	str	r2, [sp, #36]	; 0x24
 8014c06:	2100      	movs	r1, #0
 8014c08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c0a:	1c50      	adds	r0, r2, #1
 8014c0c:	9011      	str	r0, [sp, #68]	; 0x44
 8014c0e:	7852      	ldrb	r2, [r2, #1]
 8014c10:	4608      	mov	r0, r1
 8014c12:	e7cb      	b.n	8014bac <_strtod_l+0x1e4>
 8014c14:	9806      	ldr	r0, [sp, #24]
 8014c16:	e7d4      	b.n	8014bc2 <_strtod_l+0x1fa>
 8014c18:	2908      	cmp	r1, #8
 8014c1a:	dc04      	bgt.n	8014c26 <_strtod_l+0x25e>
 8014c1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014c1e:	436e      	muls	r6, r5
 8014c20:	9609      	str	r6, [sp, #36]	; 0x24
 8014c22:	3101      	adds	r1, #1
 8014c24:	e7e2      	b.n	8014bec <_strtod_l+0x224>
 8014c26:	f101 0e01 	add.w	lr, r1, #1
 8014c2a:	f1be 0f10 	cmp.w	lr, #16
 8014c2e:	bfd8      	it	le
 8014c30:	fb05 fa0a 	mulle.w	sl, r5, sl
 8014c34:	e7f5      	b.n	8014c22 <_strtod_l+0x25a>
 8014c36:	2b10      	cmp	r3, #16
 8014c38:	bfdc      	itt	le
 8014c3a:	210a      	movle	r1, #10
 8014c3c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8014c40:	e7e1      	b.n	8014c06 <_strtod_l+0x23e>
 8014c42:	2700      	movs	r7, #0
 8014c44:	2101      	movs	r1, #1
 8014c46:	e780      	b.n	8014b4a <_strtod_l+0x182>
 8014c48:	f04f 0e00 	mov.w	lr, #0
 8014c4c:	f10b 0202 	add.w	r2, fp, #2
 8014c50:	9211      	str	r2, [sp, #68]	; 0x44
 8014c52:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8014c56:	e789      	b.n	8014b6c <_strtod_l+0x1a4>
 8014c58:	f04f 0e01 	mov.w	lr, #1
 8014c5c:	e7f6      	b.n	8014c4c <_strtod_l+0x284>
 8014c5e:	bf00      	nop
 8014c60:	08018058 	.word	0x08018058
 8014c64:	08017ddc 	.word	0x08017ddc
 8014c68:	7ff00000 	.word	0x7ff00000
 8014c6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c6e:	1c55      	adds	r5, r2, #1
 8014c70:	9511      	str	r5, [sp, #68]	; 0x44
 8014c72:	7852      	ldrb	r2, [r2, #1]
 8014c74:	2a30      	cmp	r2, #48	; 0x30
 8014c76:	d0f9      	beq.n	8014c6c <_strtod_l+0x2a4>
 8014c78:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8014c7c:	2d08      	cmp	r5, #8
 8014c7e:	f63f af7b 	bhi.w	8014b78 <_strtod_l+0x1b0>
 8014c82:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8014c86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c88:	9207      	str	r2, [sp, #28]
 8014c8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c8c:	1c55      	adds	r5, r2, #1
 8014c8e:	9511      	str	r5, [sp, #68]	; 0x44
 8014c90:	7852      	ldrb	r2, [r2, #1]
 8014c92:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014c96:	2e09      	cmp	r6, #9
 8014c98:	d937      	bls.n	8014d0a <_strtod_l+0x342>
 8014c9a:	9e07      	ldr	r6, [sp, #28]
 8014c9c:	1bad      	subs	r5, r5, r6
 8014c9e:	2d08      	cmp	r5, #8
 8014ca0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8014ca4:	dc02      	bgt.n	8014cac <_strtod_l+0x2e4>
 8014ca6:	4565      	cmp	r5, ip
 8014ca8:	bfa8      	it	ge
 8014caa:	4665      	movge	r5, ip
 8014cac:	f1be 0f00 	cmp.w	lr, #0
 8014cb0:	d000      	beq.n	8014cb4 <_strtod_l+0x2ec>
 8014cb2:	426d      	negs	r5, r5
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d14d      	bne.n	8014d54 <_strtod_l+0x38c>
 8014cb8:	9b04      	ldr	r3, [sp, #16]
 8014cba:	4303      	orrs	r3, r0
 8014cbc:	f47f aec8 	bne.w	8014a50 <_strtod_l+0x88>
 8014cc0:	2900      	cmp	r1, #0
 8014cc2:	f47f aee2 	bne.w	8014a8a <_strtod_l+0xc2>
 8014cc6:	2a69      	cmp	r2, #105	; 0x69
 8014cc8:	d027      	beq.n	8014d1a <_strtod_l+0x352>
 8014cca:	dc24      	bgt.n	8014d16 <_strtod_l+0x34e>
 8014ccc:	2a49      	cmp	r2, #73	; 0x49
 8014cce:	d024      	beq.n	8014d1a <_strtod_l+0x352>
 8014cd0:	2a4e      	cmp	r2, #78	; 0x4e
 8014cd2:	f47f aeda 	bne.w	8014a8a <_strtod_l+0xc2>
 8014cd6:	4996      	ldr	r1, [pc, #600]	; (8014f30 <_strtod_l+0x568>)
 8014cd8:	a811      	add	r0, sp, #68	; 0x44
 8014cda:	f001 f80f 	bl	8015cfc <__match>
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	f43f aed3 	beq.w	8014a8a <_strtod_l+0xc2>
 8014ce4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ce6:	781b      	ldrb	r3, [r3, #0]
 8014ce8:	2b28      	cmp	r3, #40	; 0x28
 8014cea:	d12d      	bne.n	8014d48 <_strtod_l+0x380>
 8014cec:	4991      	ldr	r1, [pc, #580]	; (8014f34 <_strtod_l+0x56c>)
 8014cee:	aa14      	add	r2, sp, #80	; 0x50
 8014cf0:	a811      	add	r0, sp, #68	; 0x44
 8014cf2:	f001 f817 	bl	8015d24 <__hexnan>
 8014cf6:	2805      	cmp	r0, #5
 8014cf8:	d126      	bne.n	8014d48 <_strtod_l+0x380>
 8014cfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cfc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014d00:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014d04:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014d08:	e6a2      	b.n	8014a50 <_strtod_l+0x88>
 8014d0a:	250a      	movs	r5, #10
 8014d0c:	fb05 250c 	mla	r5, r5, ip, r2
 8014d10:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8014d14:	e7b9      	b.n	8014c8a <_strtod_l+0x2c2>
 8014d16:	2a6e      	cmp	r2, #110	; 0x6e
 8014d18:	e7db      	b.n	8014cd2 <_strtod_l+0x30a>
 8014d1a:	4987      	ldr	r1, [pc, #540]	; (8014f38 <_strtod_l+0x570>)
 8014d1c:	a811      	add	r0, sp, #68	; 0x44
 8014d1e:	f000 ffed 	bl	8015cfc <__match>
 8014d22:	2800      	cmp	r0, #0
 8014d24:	f43f aeb1 	beq.w	8014a8a <_strtod_l+0xc2>
 8014d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d2a:	4984      	ldr	r1, [pc, #528]	; (8014f3c <_strtod_l+0x574>)
 8014d2c:	3b01      	subs	r3, #1
 8014d2e:	a811      	add	r0, sp, #68	; 0x44
 8014d30:	9311      	str	r3, [sp, #68]	; 0x44
 8014d32:	f000 ffe3 	bl	8015cfc <__match>
 8014d36:	b910      	cbnz	r0, 8014d3e <_strtod_l+0x376>
 8014d38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	9311      	str	r3, [sp, #68]	; 0x44
 8014d3e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8014f50 <_strtod_l+0x588>
 8014d42:	f04f 0800 	mov.w	r8, #0
 8014d46:	e683      	b.n	8014a50 <_strtod_l+0x88>
 8014d48:	487d      	ldr	r0, [pc, #500]	; (8014f40 <_strtod_l+0x578>)
 8014d4a:	f002 faad 	bl	80172a8 <nan>
 8014d4e:	ec59 8b10 	vmov	r8, r9, d0
 8014d52:	e67d      	b.n	8014a50 <_strtod_l+0x88>
 8014d54:	1bea      	subs	r2, r5, r7
 8014d56:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8014d5a:	9207      	str	r2, [sp, #28]
 8014d5c:	9a06      	ldr	r2, [sp, #24]
 8014d5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014d62:	2a00      	cmp	r2, #0
 8014d64:	bf08      	it	eq
 8014d66:	461a      	moveq	r2, r3
 8014d68:	2b10      	cmp	r3, #16
 8014d6a:	9206      	str	r2, [sp, #24]
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	bfa8      	it	ge
 8014d70:	2210      	movge	r2, #16
 8014d72:	2b09      	cmp	r3, #9
 8014d74:	ec59 8b17 	vmov	r8, r9, d7
 8014d78:	dd0c      	ble.n	8014d94 <_strtod_l+0x3cc>
 8014d7a:	4972      	ldr	r1, [pc, #456]	; (8014f44 <_strtod_l+0x57c>)
 8014d7c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014d80:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8014d84:	ee06 aa90 	vmov	s13, sl
 8014d88:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8014d8c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014d90:	ec59 8b16 	vmov	r8, r9, d6
 8014d94:	2b0f      	cmp	r3, #15
 8014d96:	dc36      	bgt.n	8014e06 <_strtod_l+0x43e>
 8014d98:	9907      	ldr	r1, [sp, #28]
 8014d9a:	2900      	cmp	r1, #0
 8014d9c:	f43f ae58 	beq.w	8014a50 <_strtod_l+0x88>
 8014da0:	dd23      	ble.n	8014dea <_strtod_l+0x422>
 8014da2:	2916      	cmp	r1, #22
 8014da4:	dc0b      	bgt.n	8014dbe <_strtod_l+0x3f6>
 8014da6:	4b67      	ldr	r3, [pc, #412]	; (8014f44 <_strtod_l+0x57c>)
 8014da8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8014dac:	ed93 7b00 	vldr	d7, [r3]
 8014db0:	ec49 8b16 	vmov	d6, r8, r9
 8014db4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014db8:	ec59 8b17 	vmov	r8, r9, d7
 8014dbc:	e648      	b.n	8014a50 <_strtod_l+0x88>
 8014dbe:	9807      	ldr	r0, [sp, #28]
 8014dc0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8014dc4:	4281      	cmp	r1, r0
 8014dc6:	db1e      	blt.n	8014e06 <_strtod_l+0x43e>
 8014dc8:	4a5e      	ldr	r2, [pc, #376]	; (8014f44 <_strtod_l+0x57c>)
 8014dca:	f1c3 030f 	rsb	r3, r3, #15
 8014dce:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014dd2:	ed91 7b00 	vldr	d7, [r1]
 8014dd6:	ec49 8b16 	vmov	d6, r8, r9
 8014dda:	1ac3      	subs	r3, r0, r3
 8014ddc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014de0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014de4:	ed92 6b00 	vldr	d6, [r2]
 8014de8:	e7e4      	b.n	8014db4 <_strtod_l+0x3ec>
 8014dea:	9907      	ldr	r1, [sp, #28]
 8014dec:	3116      	adds	r1, #22
 8014dee:	db0a      	blt.n	8014e06 <_strtod_l+0x43e>
 8014df0:	4b54      	ldr	r3, [pc, #336]	; (8014f44 <_strtod_l+0x57c>)
 8014df2:	1b7d      	subs	r5, r7, r5
 8014df4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014df8:	ed95 7b00 	vldr	d7, [r5]
 8014dfc:	ec49 8b16 	vmov	d6, r8, r9
 8014e00:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014e04:	e7d8      	b.n	8014db8 <_strtod_l+0x3f0>
 8014e06:	9907      	ldr	r1, [sp, #28]
 8014e08:	1a9a      	subs	r2, r3, r2
 8014e0a:	440a      	add	r2, r1
 8014e0c:	2a00      	cmp	r2, #0
 8014e0e:	dd6f      	ble.n	8014ef0 <_strtod_l+0x528>
 8014e10:	f012 000f 	ands.w	r0, r2, #15
 8014e14:	d00a      	beq.n	8014e2c <_strtod_l+0x464>
 8014e16:	494b      	ldr	r1, [pc, #300]	; (8014f44 <_strtod_l+0x57c>)
 8014e18:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014e1c:	ed91 7b00 	vldr	d7, [r1]
 8014e20:	ec49 8b16 	vmov	d6, r8, r9
 8014e24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014e28:	ec59 8b17 	vmov	r8, r9, d7
 8014e2c:	f032 020f 	bics.w	r2, r2, #15
 8014e30:	d04f      	beq.n	8014ed2 <_strtod_l+0x50a>
 8014e32:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8014e36:	dd22      	ble.n	8014e7e <_strtod_l+0x4b6>
 8014e38:	2500      	movs	r5, #0
 8014e3a:	462e      	mov	r6, r5
 8014e3c:	9506      	str	r5, [sp, #24]
 8014e3e:	462f      	mov	r7, r5
 8014e40:	2322      	movs	r3, #34	; 0x22
 8014e42:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8014f50 <_strtod_l+0x588>
 8014e46:	6023      	str	r3, [r4, #0]
 8014e48:	f04f 0800 	mov.w	r8, #0
 8014e4c:	9b06      	ldr	r3, [sp, #24]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	f43f adfe 	beq.w	8014a50 <_strtod_l+0x88>
 8014e54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014e56:	4620      	mov	r0, r4
 8014e58:	f001 f868 	bl	8015f2c <_Bfree>
 8014e5c:	4639      	mov	r1, r7
 8014e5e:	4620      	mov	r0, r4
 8014e60:	f001 f864 	bl	8015f2c <_Bfree>
 8014e64:	4631      	mov	r1, r6
 8014e66:	4620      	mov	r0, r4
 8014e68:	f001 f860 	bl	8015f2c <_Bfree>
 8014e6c:	9906      	ldr	r1, [sp, #24]
 8014e6e:	4620      	mov	r0, r4
 8014e70:	f001 f85c 	bl	8015f2c <_Bfree>
 8014e74:	4629      	mov	r1, r5
 8014e76:	4620      	mov	r0, r4
 8014e78:	f001 f858 	bl	8015f2c <_Bfree>
 8014e7c:	e5e8      	b.n	8014a50 <_strtod_l+0x88>
 8014e7e:	2000      	movs	r0, #0
 8014e80:	ec49 8b17 	vmov	d7, r8, r9
 8014e84:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8014f48 <_strtod_l+0x580>
 8014e88:	1112      	asrs	r2, r2, #4
 8014e8a:	4601      	mov	r1, r0
 8014e8c:	2a01      	cmp	r2, #1
 8014e8e:	dc23      	bgt.n	8014ed8 <_strtod_l+0x510>
 8014e90:	b108      	cbz	r0, 8014e96 <_strtod_l+0x4ce>
 8014e92:	ec59 8b17 	vmov	r8, r9, d7
 8014e96:	4a2c      	ldr	r2, [pc, #176]	; (8014f48 <_strtod_l+0x580>)
 8014e98:	482c      	ldr	r0, [pc, #176]	; (8014f4c <_strtod_l+0x584>)
 8014e9a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014e9e:	ed92 7b00 	vldr	d7, [r2]
 8014ea2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014ea6:	ec49 8b16 	vmov	d6, r8, r9
 8014eaa:	4a29      	ldr	r2, [pc, #164]	; (8014f50 <_strtod_l+0x588>)
 8014eac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014eb0:	ee17 1a90 	vmov	r1, s15
 8014eb4:	400a      	ands	r2, r1
 8014eb6:	4282      	cmp	r2, r0
 8014eb8:	ec59 8b17 	vmov	r8, r9, d7
 8014ebc:	d8bc      	bhi.n	8014e38 <_strtod_l+0x470>
 8014ebe:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8014ec2:	4282      	cmp	r2, r0
 8014ec4:	bf86      	itte	hi
 8014ec6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8014f54 <_strtod_l+0x58c>
 8014eca:	f04f 38ff 	movhi.w	r8, #4294967295
 8014ece:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	9204      	str	r2, [sp, #16]
 8014ed6:	e078      	b.n	8014fca <_strtod_l+0x602>
 8014ed8:	07d6      	lsls	r6, r2, #31
 8014eda:	d504      	bpl.n	8014ee6 <_strtod_l+0x51e>
 8014edc:	ed9c 6b00 	vldr	d6, [ip]
 8014ee0:	2001      	movs	r0, #1
 8014ee2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ee6:	3101      	adds	r1, #1
 8014ee8:	1052      	asrs	r2, r2, #1
 8014eea:	f10c 0c08 	add.w	ip, ip, #8
 8014eee:	e7cd      	b.n	8014e8c <_strtod_l+0x4c4>
 8014ef0:	d0ef      	beq.n	8014ed2 <_strtod_l+0x50a>
 8014ef2:	4252      	negs	r2, r2
 8014ef4:	f012 000f 	ands.w	r0, r2, #15
 8014ef8:	d00a      	beq.n	8014f10 <_strtod_l+0x548>
 8014efa:	4912      	ldr	r1, [pc, #72]	; (8014f44 <_strtod_l+0x57c>)
 8014efc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014f00:	ed91 7b00 	vldr	d7, [r1]
 8014f04:	ec49 8b16 	vmov	d6, r8, r9
 8014f08:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014f0c:	ec59 8b17 	vmov	r8, r9, d7
 8014f10:	1112      	asrs	r2, r2, #4
 8014f12:	d0de      	beq.n	8014ed2 <_strtod_l+0x50a>
 8014f14:	2a1f      	cmp	r2, #31
 8014f16:	dd1f      	ble.n	8014f58 <_strtod_l+0x590>
 8014f18:	2500      	movs	r5, #0
 8014f1a:	462e      	mov	r6, r5
 8014f1c:	9506      	str	r5, [sp, #24]
 8014f1e:	462f      	mov	r7, r5
 8014f20:	2322      	movs	r3, #34	; 0x22
 8014f22:	f04f 0800 	mov.w	r8, #0
 8014f26:	f04f 0900 	mov.w	r9, #0
 8014f2a:	6023      	str	r3, [r4, #0]
 8014f2c:	e78e      	b.n	8014e4c <_strtod_l+0x484>
 8014f2e:	bf00      	nop
 8014f30:	08017dd9 	.word	0x08017dd9
 8014f34:	08017df0 	.word	0x08017df0
 8014f38:	08017dd0 	.word	0x08017dd0
 8014f3c:	08017dd3 	.word	0x08017dd3
 8014f40:	08017edf 	.word	0x08017edf
 8014f44:	080180f0 	.word	0x080180f0
 8014f48:	080180c8 	.word	0x080180c8
 8014f4c:	7ca00000 	.word	0x7ca00000
 8014f50:	7ff00000 	.word	0x7ff00000
 8014f54:	7fefffff 	.word	0x7fefffff
 8014f58:	f012 0110 	ands.w	r1, r2, #16
 8014f5c:	bf18      	it	ne
 8014f5e:	216a      	movne	r1, #106	; 0x6a
 8014f60:	9104      	str	r1, [sp, #16]
 8014f62:	ec49 8b17 	vmov	d7, r8, r9
 8014f66:	49be      	ldr	r1, [pc, #760]	; (8015260 <_strtod_l+0x898>)
 8014f68:	2000      	movs	r0, #0
 8014f6a:	07d6      	lsls	r6, r2, #31
 8014f6c:	d504      	bpl.n	8014f78 <_strtod_l+0x5b0>
 8014f6e:	ed91 6b00 	vldr	d6, [r1]
 8014f72:	2001      	movs	r0, #1
 8014f74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014f78:	1052      	asrs	r2, r2, #1
 8014f7a:	f101 0108 	add.w	r1, r1, #8
 8014f7e:	d1f4      	bne.n	8014f6a <_strtod_l+0x5a2>
 8014f80:	b108      	cbz	r0, 8014f86 <_strtod_l+0x5be>
 8014f82:	ec59 8b17 	vmov	r8, r9, d7
 8014f86:	9a04      	ldr	r2, [sp, #16]
 8014f88:	b1c2      	cbz	r2, 8014fbc <_strtod_l+0x5f4>
 8014f8a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8014f8e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8014f92:	2a00      	cmp	r2, #0
 8014f94:	4648      	mov	r0, r9
 8014f96:	dd11      	ble.n	8014fbc <_strtod_l+0x5f4>
 8014f98:	2a1f      	cmp	r2, #31
 8014f9a:	f340 812e 	ble.w	80151fa <_strtod_l+0x832>
 8014f9e:	2a34      	cmp	r2, #52	; 0x34
 8014fa0:	bfde      	ittt	le
 8014fa2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8014fa6:	f04f 32ff 	movle.w	r2, #4294967295
 8014faa:	fa02 f101 	lslle.w	r1, r2, r1
 8014fae:	f04f 0800 	mov.w	r8, #0
 8014fb2:	bfcc      	ite	gt
 8014fb4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014fb8:	ea01 0900 	andle.w	r9, r1, r0
 8014fbc:	ec49 8b17 	vmov	d7, r8, r9
 8014fc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fc8:	d0a6      	beq.n	8014f18 <_strtod_l+0x550>
 8014fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fcc:	9200      	str	r2, [sp, #0]
 8014fce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014fd0:	9a06      	ldr	r2, [sp, #24]
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	f001 f812 	bl	8015ffc <__s2b>
 8014fd8:	9006      	str	r0, [sp, #24]
 8014fda:	2800      	cmp	r0, #0
 8014fdc:	f43f af2c 	beq.w	8014e38 <_strtod_l+0x470>
 8014fe0:	9b07      	ldr	r3, [sp, #28]
 8014fe2:	1b7d      	subs	r5, r7, r5
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	bfb4      	ite	lt
 8014fe8:	462b      	movlt	r3, r5
 8014fea:	2300      	movge	r3, #0
 8014fec:	9309      	str	r3, [sp, #36]	; 0x24
 8014fee:	9b07      	ldr	r3, [sp, #28]
 8014ff0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8015240 <_strtod_l+0x878>
 8014ff4:	ed9f ab94 	vldr	d10, [pc, #592]	; 8015248 <_strtod_l+0x880>
 8014ff8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8015250 <_strtod_l+0x888>
 8014ffc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015000:	2500      	movs	r5, #0
 8015002:	930c      	str	r3, [sp, #48]	; 0x30
 8015004:	462e      	mov	r6, r5
 8015006:	9b06      	ldr	r3, [sp, #24]
 8015008:	4620      	mov	r0, r4
 801500a:	6859      	ldr	r1, [r3, #4]
 801500c:	f000 ff4e 	bl	8015eac <_Balloc>
 8015010:	4607      	mov	r7, r0
 8015012:	2800      	cmp	r0, #0
 8015014:	f43f af14 	beq.w	8014e40 <_strtod_l+0x478>
 8015018:	9b06      	ldr	r3, [sp, #24]
 801501a:	691a      	ldr	r2, [r3, #16]
 801501c:	3202      	adds	r2, #2
 801501e:	f103 010c 	add.w	r1, r3, #12
 8015022:	0092      	lsls	r2, r2, #2
 8015024:	300c      	adds	r0, #12
 8015026:	f000 ff33 	bl	8015e90 <memcpy>
 801502a:	ec49 8b10 	vmov	d0, r8, r9
 801502e:	aa14      	add	r2, sp, #80	; 0x50
 8015030:	a913      	add	r1, sp, #76	; 0x4c
 8015032:	4620      	mov	r0, r4
 8015034:	f001 fb28 	bl	8016688 <__d2b>
 8015038:	ec49 8b18 	vmov	d8, r8, r9
 801503c:	9012      	str	r0, [sp, #72]	; 0x48
 801503e:	2800      	cmp	r0, #0
 8015040:	f43f aefe 	beq.w	8014e40 <_strtod_l+0x478>
 8015044:	2101      	movs	r1, #1
 8015046:	4620      	mov	r0, r4
 8015048:	f001 f872 	bl	8016130 <__i2b>
 801504c:	4606      	mov	r6, r0
 801504e:	2800      	cmp	r0, #0
 8015050:	f43f aef6 	beq.w	8014e40 <_strtod_l+0x478>
 8015054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015056:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015058:	2b00      	cmp	r3, #0
 801505a:	bfab      	itete	ge
 801505c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801505e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8015060:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8015064:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8015068:	bfac      	ite	ge
 801506a:	eb03 0b02 	addge.w	fp, r3, r2
 801506e:	eba2 0a03 	sublt.w	sl, r2, r3
 8015072:	9a04      	ldr	r2, [sp, #16]
 8015074:	1a9b      	subs	r3, r3, r2
 8015076:	440b      	add	r3, r1
 8015078:	4a7a      	ldr	r2, [pc, #488]	; (8015264 <_strtod_l+0x89c>)
 801507a:	3b01      	subs	r3, #1
 801507c:	4293      	cmp	r3, r2
 801507e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8015082:	f280 80cd 	bge.w	8015220 <_strtod_l+0x858>
 8015086:	1ad2      	subs	r2, r2, r3
 8015088:	2a1f      	cmp	r2, #31
 801508a:	eba1 0102 	sub.w	r1, r1, r2
 801508e:	f04f 0001 	mov.w	r0, #1
 8015092:	f300 80b9 	bgt.w	8015208 <_strtod_l+0x840>
 8015096:	fa00 f302 	lsl.w	r3, r0, r2
 801509a:	930b      	str	r3, [sp, #44]	; 0x2c
 801509c:	2300      	movs	r3, #0
 801509e:	930a      	str	r3, [sp, #40]	; 0x28
 80150a0:	eb0b 0301 	add.w	r3, fp, r1
 80150a4:	9a04      	ldr	r2, [sp, #16]
 80150a6:	459b      	cmp	fp, r3
 80150a8:	448a      	add	sl, r1
 80150aa:	4492      	add	sl, r2
 80150ac:	465a      	mov	r2, fp
 80150ae:	bfa8      	it	ge
 80150b0:	461a      	movge	r2, r3
 80150b2:	4552      	cmp	r2, sl
 80150b4:	bfa8      	it	ge
 80150b6:	4652      	movge	r2, sl
 80150b8:	2a00      	cmp	r2, #0
 80150ba:	bfc2      	ittt	gt
 80150bc:	1a9b      	subgt	r3, r3, r2
 80150be:	ebaa 0a02 	subgt.w	sl, sl, r2
 80150c2:	ebab 0b02 	subgt.w	fp, fp, r2
 80150c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150c8:	2a00      	cmp	r2, #0
 80150ca:	dd18      	ble.n	80150fe <_strtod_l+0x736>
 80150cc:	4631      	mov	r1, r6
 80150ce:	4620      	mov	r0, r4
 80150d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80150d2:	f001 f8ed 	bl	80162b0 <__pow5mult>
 80150d6:	4606      	mov	r6, r0
 80150d8:	2800      	cmp	r0, #0
 80150da:	f43f aeb1 	beq.w	8014e40 <_strtod_l+0x478>
 80150de:	4601      	mov	r1, r0
 80150e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80150e2:	4620      	mov	r0, r4
 80150e4:	f001 f83a 	bl	801615c <__multiply>
 80150e8:	900e      	str	r0, [sp, #56]	; 0x38
 80150ea:	2800      	cmp	r0, #0
 80150ec:	f43f aea8 	beq.w	8014e40 <_strtod_l+0x478>
 80150f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80150f2:	4620      	mov	r0, r4
 80150f4:	f000 ff1a 	bl	8015f2c <_Bfree>
 80150f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80150fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150fc:	9212      	str	r2, [sp, #72]	; 0x48
 80150fe:	2b00      	cmp	r3, #0
 8015100:	f300 8093 	bgt.w	801522a <_strtod_l+0x862>
 8015104:	9b07      	ldr	r3, [sp, #28]
 8015106:	2b00      	cmp	r3, #0
 8015108:	dd08      	ble.n	801511c <_strtod_l+0x754>
 801510a:	4639      	mov	r1, r7
 801510c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801510e:	4620      	mov	r0, r4
 8015110:	f001 f8ce 	bl	80162b0 <__pow5mult>
 8015114:	4607      	mov	r7, r0
 8015116:	2800      	cmp	r0, #0
 8015118:	f43f ae92 	beq.w	8014e40 <_strtod_l+0x478>
 801511c:	f1ba 0f00 	cmp.w	sl, #0
 8015120:	dd08      	ble.n	8015134 <_strtod_l+0x76c>
 8015122:	4639      	mov	r1, r7
 8015124:	4652      	mov	r2, sl
 8015126:	4620      	mov	r0, r4
 8015128:	f001 f91c 	bl	8016364 <__lshift>
 801512c:	4607      	mov	r7, r0
 801512e:	2800      	cmp	r0, #0
 8015130:	f43f ae86 	beq.w	8014e40 <_strtod_l+0x478>
 8015134:	f1bb 0f00 	cmp.w	fp, #0
 8015138:	dd08      	ble.n	801514c <_strtod_l+0x784>
 801513a:	4631      	mov	r1, r6
 801513c:	465a      	mov	r2, fp
 801513e:	4620      	mov	r0, r4
 8015140:	f001 f910 	bl	8016364 <__lshift>
 8015144:	4606      	mov	r6, r0
 8015146:	2800      	cmp	r0, #0
 8015148:	f43f ae7a 	beq.w	8014e40 <_strtod_l+0x478>
 801514c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801514e:	463a      	mov	r2, r7
 8015150:	4620      	mov	r0, r4
 8015152:	f001 f993 	bl	801647c <__mdiff>
 8015156:	4605      	mov	r5, r0
 8015158:	2800      	cmp	r0, #0
 801515a:	f43f ae71 	beq.w	8014e40 <_strtod_l+0x478>
 801515e:	2300      	movs	r3, #0
 8015160:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8015164:	60c3      	str	r3, [r0, #12]
 8015166:	4631      	mov	r1, r6
 8015168:	f001 f96c 	bl	8016444 <__mcmp>
 801516c:	2800      	cmp	r0, #0
 801516e:	da7d      	bge.n	801526c <_strtod_l+0x8a4>
 8015170:	ea5a 0308 	orrs.w	r3, sl, r8
 8015174:	f040 80a3 	bne.w	80152be <_strtod_l+0x8f6>
 8015178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801517c:	2b00      	cmp	r3, #0
 801517e:	f040 809e 	bne.w	80152be <_strtod_l+0x8f6>
 8015182:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015186:	0d1b      	lsrs	r3, r3, #20
 8015188:	051b      	lsls	r3, r3, #20
 801518a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801518e:	f240 8096 	bls.w	80152be <_strtod_l+0x8f6>
 8015192:	696b      	ldr	r3, [r5, #20]
 8015194:	b91b      	cbnz	r3, 801519e <_strtod_l+0x7d6>
 8015196:	692b      	ldr	r3, [r5, #16]
 8015198:	2b01      	cmp	r3, #1
 801519a:	f340 8090 	ble.w	80152be <_strtod_l+0x8f6>
 801519e:	4629      	mov	r1, r5
 80151a0:	2201      	movs	r2, #1
 80151a2:	4620      	mov	r0, r4
 80151a4:	f001 f8de 	bl	8016364 <__lshift>
 80151a8:	4631      	mov	r1, r6
 80151aa:	4605      	mov	r5, r0
 80151ac:	f001 f94a 	bl	8016444 <__mcmp>
 80151b0:	2800      	cmp	r0, #0
 80151b2:	f340 8084 	ble.w	80152be <_strtod_l+0x8f6>
 80151b6:	9904      	ldr	r1, [sp, #16]
 80151b8:	4a2b      	ldr	r2, [pc, #172]	; (8015268 <_strtod_l+0x8a0>)
 80151ba:	464b      	mov	r3, r9
 80151bc:	2900      	cmp	r1, #0
 80151be:	f000 809d 	beq.w	80152fc <_strtod_l+0x934>
 80151c2:	ea02 0109 	and.w	r1, r2, r9
 80151c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80151ca:	f300 8097 	bgt.w	80152fc <_strtod_l+0x934>
 80151ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80151d2:	f77f aea5 	ble.w	8014f20 <_strtod_l+0x558>
 80151d6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015258 <_strtod_l+0x890>
 80151da:	ec49 8b16 	vmov	d6, r8, r9
 80151de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80151e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80151e6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80151ea:	4313      	orrs	r3, r2
 80151ec:	bf08      	it	eq
 80151ee:	2322      	moveq	r3, #34	; 0x22
 80151f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80151f4:	bf08      	it	eq
 80151f6:	6023      	streq	r3, [r4, #0]
 80151f8:	e62c      	b.n	8014e54 <_strtod_l+0x48c>
 80151fa:	f04f 31ff 	mov.w	r1, #4294967295
 80151fe:	fa01 f202 	lsl.w	r2, r1, r2
 8015202:	ea02 0808 	and.w	r8, r2, r8
 8015206:	e6d9      	b.n	8014fbc <_strtod_l+0x5f4>
 8015208:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801520c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8015210:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8015214:	33e2      	adds	r3, #226	; 0xe2
 8015216:	fa00 f303 	lsl.w	r3, r0, r3
 801521a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801521e:	e73f      	b.n	80150a0 <_strtod_l+0x6d8>
 8015220:	2200      	movs	r2, #0
 8015222:	2301      	movs	r3, #1
 8015224:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015228:	e73a      	b.n	80150a0 <_strtod_l+0x6d8>
 801522a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801522c:	461a      	mov	r2, r3
 801522e:	4620      	mov	r0, r4
 8015230:	f001 f898 	bl	8016364 <__lshift>
 8015234:	9012      	str	r0, [sp, #72]	; 0x48
 8015236:	2800      	cmp	r0, #0
 8015238:	f47f af64 	bne.w	8015104 <_strtod_l+0x73c>
 801523c:	e600      	b.n	8014e40 <_strtod_l+0x478>
 801523e:	bf00      	nop
 8015240:	94a03595 	.word	0x94a03595
 8015244:	3fcfffff 	.word	0x3fcfffff
 8015248:	94a03595 	.word	0x94a03595
 801524c:	3fdfffff 	.word	0x3fdfffff
 8015250:	35afe535 	.word	0x35afe535
 8015254:	3fe00000 	.word	0x3fe00000
 8015258:	00000000 	.word	0x00000000
 801525c:	39500000 	.word	0x39500000
 8015260:	08017e08 	.word	0x08017e08
 8015264:	fffffc02 	.word	0xfffffc02
 8015268:	7ff00000 	.word	0x7ff00000
 801526c:	46cb      	mov	fp, r9
 801526e:	d15f      	bne.n	8015330 <_strtod_l+0x968>
 8015270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015274:	f1ba 0f00 	cmp.w	sl, #0
 8015278:	d02a      	beq.n	80152d0 <_strtod_l+0x908>
 801527a:	4aa7      	ldr	r2, [pc, #668]	; (8015518 <_strtod_l+0xb50>)
 801527c:	4293      	cmp	r3, r2
 801527e:	d12b      	bne.n	80152d8 <_strtod_l+0x910>
 8015280:	9b04      	ldr	r3, [sp, #16]
 8015282:	4642      	mov	r2, r8
 8015284:	b1fb      	cbz	r3, 80152c6 <_strtod_l+0x8fe>
 8015286:	4ba5      	ldr	r3, [pc, #660]	; (801551c <_strtod_l+0xb54>)
 8015288:	ea09 0303 	and.w	r3, r9, r3
 801528c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015290:	f04f 31ff 	mov.w	r1, #4294967295
 8015294:	d81a      	bhi.n	80152cc <_strtod_l+0x904>
 8015296:	0d1b      	lsrs	r3, r3, #20
 8015298:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801529c:	fa01 f303 	lsl.w	r3, r1, r3
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d119      	bne.n	80152d8 <_strtod_l+0x910>
 80152a4:	4b9e      	ldr	r3, [pc, #632]	; (8015520 <_strtod_l+0xb58>)
 80152a6:	459b      	cmp	fp, r3
 80152a8:	d102      	bne.n	80152b0 <_strtod_l+0x8e8>
 80152aa:	3201      	adds	r2, #1
 80152ac:	f43f adc8 	beq.w	8014e40 <_strtod_l+0x478>
 80152b0:	4b9a      	ldr	r3, [pc, #616]	; (801551c <_strtod_l+0xb54>)
 80152b2:	ea0b 0303 	and.w	r3, fp, r3
 80152b6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80152ba:	f04f 0800 	mov.w	r8, #0
 80152be:	9b04      	ldr	r3, [sp, #16]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d188      	bne.n	80151d6 <_strtod_l+0x80e>
 80152c4:	e5c6      	b.n	8014e54 <_strtod_l+0x48c>
 80152c6:	f04f 33ff 	mov.w	r3, #4294967295
 80152ca:	e7e9      	b.n	80152a0 <_strtod_l+0x8d8>
 80152cc:	460b      	mov	r3, r1
 80152ce:	e7e7      	b.n	80152a0 <_strtod_l+0x8d8>
 80152d0:	ea53 0308 	orrs.w	r3, r3, r8
 80152d4:	f43f af6f 	beq.w	80151b6 <_strtod_l+0x7ee>
 80152d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152da:	b1cb      	cbz	r3, 8015310 <_strtod_l+0x948>
 80152dc:	ea13 0f0b 	tst.w	r3, fp
 80152e0:	d0ed      	beq.n	80152be <_strtod_l+0x8f6>
 80152e2:	9a04      	ldr	r2, [sp, #16]
 80152e4:	4640      	mov	r0, r8
 80152e6:	4649      	mov	r1, r9
 80152e8:	f1ba 0f00 	cmp.w	sl, #0
 80152ec:	d014      	beq.n	8015318 <_strtod_l+0x950>
 80152ee:	f7ff fb4f 	bl	8014990 <sulp>
 80152f2:	ee38 7b00 	vadd.f64	d7, d8, d0
 80152f6:	ec59 8b17 	vmov	r8, r9, d7
 80152fa:	e7e0      	b.n	80152be <_strtod_l+0x8f6>
 80152fc:	4013      	ands	r3, r2
 80152fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015302:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8015306:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801530a:	f04f 38ff 	mov.w	r8, #4294967295
 801530e:	e7d6      	b.n	80152be <_strtod_l+0x8f6>
 8015310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015312:	ea13 0f08 	tst.w	r3, r8
 8015316:	e7e3      	b.n	80152e0 <_strtod_l+0x918>
 8015318:	f7ff fb3a 	bl	8014990 <sulp>
 801531c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8015320:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015328:	ec59 8b10 	vmov	r8, r9, d0
 801532c:	d1c7      	bne.n	80152be <_strtod_l+0x8f6>
 801532e:	e5f7      	b.n	8014f20 <_strtod_l+0x558>
 8015330:	4631      	mov	r1, r6
 8015332:	4628      	mov	r0, r5
 8015334:	f001 fa04 	bl	8016740 <__ratio>
 8015338:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801533c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015344:	d865      	bhi.n	8015412 <_strtod_l+0xa4a>
 8015346:	f1ba 0f00 	cmp.w	sl, #0
 801534a:	d042      	beq.n	80153d2 <_strtod_l+0xa0a>
 801534c:	4b75      	ldr	r3, [pc, #468]	; (8015524 <_strtod_l+0xb5c>)
 801534e:	2200      	movs	r2, #0
 8015350:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8015354:	4871      	ldr	r0, [pc, #452]	; (801551c <_strtod_l+0xb54>)
 8015356:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8015530 <_strtod_l+0xb68>
 801535a:	ea0b 0100 	and.w	r1, fp, r0
 801535e:	4561      	cmp	r1, ip
 8015360:	f040 808e 	bne.w	8015480 <_strtod_l+0xab8>
 8015364:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8015368:	ec49 8b10 	vmov	d0, r8, r9
 801536c:	ec43 2b1c 	vmov	d12, r2, r3
 8015370:	910a      	str	r1, [sp, #40]	; 0x28
 8015372:	f001 f90d 	bl	8016590 <__ulp>
 8015376:	ec49 8b1e 	vmov	d14, r8, r9
 801537a:	4868      	ldr	r0, [pc, #416]	; (801551c <_strtod_l+0xb54>)
 801537c:	eeac eb00 	vfma.f64	d14, d12, d0
 8015380:	ee1e 3a90 	vmov	r3, s29
 8015384:	4a68      	ldr	r2, [pc, #416]	; (8015528 <_strtod_l+0xb60>)
 8015386:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015388:	4018      	ands	r0, r3
 801538a:	4290      	cmp	r0, r2
 801538c:	ec59 8b1e 	vmov	r8, r9, d14
 8015390:	d94e      	bls.n	8015430 <_strtod_l+0xa68>
 8015392:	ee18 3a90 	vmov	r3, s17
 8015396:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801539a:	4293      	cmp	r3, r2
 801539c:	d104      	bne.n	80153a8 <_strtod_l+0x9e0>
 801539e:	ee18 3a10 	vmov	r3, s16
 80153a2:	3301      	adds	r3, #1
 80153a4:	f43f ad4c 	beq.w	8014e40 <_strtod_l+0x478>
 80153a8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8015520 <_strtod_l+0xb58>
 80153ac:	f04f 38ff 	mov.w	r8, #4294967295
 80153b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80153b2:	4620      	mov	r0, r4
 80153b4:	f000 fdba 	bl	8015f2c <_Bfree>
 80153b8:	4639      	mov	r1, r7
 80153ba:	4620      	mov	r0, r4
 80153bc:	f000 fdb6 	bl	8015f2c <_Bfree>
 80153c0:	4631      	mov	r1, r6
 80153c2:	4620      	mov	r0, r4
 80153c4:	f000 fdb2 	bl	8015f2c <_Bfree>
 80153c8:	4629      	mov	r1, r5
 80153ca:	4620      	mov	r0, r4
 80153cc:	f000 fdae 	bl	8015f2c <_Bfree>
 80153d0:	e619      	b.n	8015006 <_strtod_l+0x63e>
 80153d2:	f1b8 0f00 	cmp.w	r8, #0
 80153d6:	d112      	bne.n	80153fe <_strtod_l+0xa36>
 80153d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153dc:	b9b3      	cbnz	r3, 801540c <_strtod_l+0xa44>
 80153de:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80153e2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80153e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ea:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80153ee:	bf58      	it	pl
 80153f0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80153f4:	eeb1 7b4d 	vneg.f64	d7, d13
 80153f8:	ec53 2b17 	vmov	r2, r3, d7
 80153fc:	e7aa      	b.n	8015354 <_strtod_l+0x98c>
 80153fe:	f1b8 0f01 	cmp.w	r8, #1
 8015402:	d103      	bne.n	801540c <_strtod_l+0xa44>
 8015404:	f1b9 0f00 	cmp.w	r9, #0
 8015408:	f43f ad8a 	beq.w	8014f20 <_strtod_l+0x558>
 801540c:	4b47      	ldr	r3, [pc, #284]	; (801552c <_strtod_l+0xb64>)
 801540e:	2200      	movs	r2, #0
 8015410:	e79e      	b.n	8015350 <_strtod_l+0x988>
 8015412:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8015416:	ee20 db0d 	vmul.f64	d13, d0, d13
 801541a:	f1ba 0f00 	cmp.w	sl, #0
 801541e:	d104      	bne.n	801542a <_strtod_l+0xa62>
 8015420:	eeb1 7b4d 	vneg.f64	d7, d13
 8015424:	ec53 2b17 	vmov	r2, r3, d7
 8015428:	e794      	b.n	8015354 <_strtod_l+0x98c>
 801542a:	eeb0 7b4d 	vmov.f64	d7, d13
 801542e:	e7f9      	b.n	8015424 <_strtod_l+0xa5c>
 8015430:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8015434:	9b04      	ldr	r3, [sp, #16]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d1ba      	bne.n	80153b0 <_strtod_l+0x9e8>
 801543a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801543e:	0d1b      	lsrs	r3, r3, #20
 8015440:	051b      	lsls	r3, r3, #20
 8015442:	4299      	cmp	r1, r3
 8015444:	d1b4      	bne.n	80153b0 <_strtod_l+0x9e8>
 8015446:	ec51 0b1d 	vmov	r0, r1, d13
 801544a:	f7eb f98d 	bl	8000768 <__aeabi_d2lz>
 801544e:	f7eb f945 	bl	80006dc <__aeabi_l2d>
 8015452:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015456:	ec41 0b17 	vmov	d7, r0, r1
 801545a:	ea43 0308 	orr.w	r3, r3, r8
 801545e:	ea53 030a 	orrs.w	r3, r3, sl
 8015462:	ee3d db47 	vsub.f64	d13, d13, d7
 8015466:	d03c      	beq.n	80154e2 <_strtod_l+0xb1a>
 8015468:	eeb4 dbca 	vcmpe.f64	d13, d10
 801546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015470:	f53f acf0 	bmi.w	8014e54 <_strtod_l+0x48c>
 8015474:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8015478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801547c:	dd98      	ble.n	80153b0 <_strtod_l+0x9e8>
 801547e:	e4e9      	b.n	8014e54 <_strtod_l+0x48c>
 8015480:	9804      	ldr	r0, [sp, #16]
 8015482:	b1f0      	cbz	r0, 80154c2 <_strtod_l+0xafa>
 8015484:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8015488:	d81b      	bhi.n	80154c2 <_strtod_l+0xafa>
 801548a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8015510 <_strtod_l+0xb48>
 801548e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8015492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015496:	d811      	bhi.n	80154bc <_strtod_l+0xaf4>
 8015498:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801549c:	ee1d 3a10 	vmov	r3, s26
 80154a0:	2b01      	cmp	r3, #1
 80154a2:	bf38      	it	cc
 80154a4:	2301      	movcc	r3, #1
 80154a6:	ee0d 3a10 	vmov	s26, r3
 80154aa:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80154ae:	f1ba 0f00 	cmp.w	sl, #0
 80154b2:	d113      	bne.n	80154dc <_strtod_l+0xb14>
 80154b4:	eeb1 7b4d 	vneg.f64	d7, d13
 80154b8:	ec53 2b17 	vmov	r2, r3, d7
 80154bc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80154c0:	1a43      	subs	r3, r0, r1
 80154c2:	eeb0 0b48 	vmov.f64	d0, d8
 80154c6:	ec43 2b1c 	vmov	d12, r2, r3
 80154ca:	910a      	str	r1, [sp, #40]	; 0x28
 80154cc:	f001 f860 	bl	8016590 <__ulp>
 80154d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80154d2:	eeac 8b00 	vfma.f64	d8, d12, d0
 80154d6:	ec59 8b18 	vmov	r8, r9, d8
 80154da:	e7ab      	b.n	8015434 <_strtod_l+0xa6c>
 80154dc:	eeb0 7b4d 	vmov.f64	d7, d13
 80154e0:	e7ea      	b.n	80154b8 <_strtod_l+0xaf0>
 80154e2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80154e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ea:	f57f af61 	bpl.w	80153b0 <_strtod_l+0x9e8>
 80154ee:	e4b1      	b.n	8014e54 <_strtod_l+0x48c>
 80154f0:	2300      	movs	r3, #0
 80154f2:	9308      	str	r3, [sp, #32]
 80154f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154f8:	6013      	str	r3, [r2, #0]
 80154fa:	f7ff baad 	b.w	8014a58 <_strtod_l+0x90>
 80154fe:	2a65      	cmp	r2, #101	; 0x65
 8015500:	f43f ab9f 	beq.w	8014c42 <_strtod_l+0x27a>
 8015504:	2a45      	cmp	r2, #69	; 0x45
 8015506:	f43f ab9c 	beq.w	8014c42 <_strtod_l+0x27a>
 801550a:	2101      	movs	r1, #1
 801550c:	f7ff bbd4 	b.w	8014cb8 <_strtod_l+0x2f0>
 8015510:	ffc00000 	.word	0xffc00000
 8015514:	41dfffff 	.word	0x41dfffff
 8015518:	000fffff 	.word	0x000fffff
 801551c:	7ff00000 	.word	0x7ff00000
 8015520:	7fefffff 	.word	0x7fefffff
 8015524:	3ff00000 	.word	0x3ff00000
 8015528:	7c9fffff 	.word	0x7c9fffff
 801552c:	bff00000 	.word	0xbff00000
 8015530:	7fe00000 	.word	0x7fe00000

08015534 <strtod>:
 8015534:	460a      	mov	r2, r1
 8015536:	4601      	mov	r1, r0
 8015538:	4802      	ldr	r0, [pc, #8]	; (8015544 <strtod+0x10>)
 801553a:	4b03      	ldr	r3, [pc, #12]	; (8015548 <strtod+0x14>)
 801553c:	6800      	ldr	r0, [r0, #0]
 801553e:	f7ff ba43 	b.w	80149c8 <_strtod_l>
 8015542:	bf00      	nop
 8015544:	2400001c 	.word	0x2400001c
 8015548:	24000084 	.word	0x24000084

0801554c <strtok>:
 801554c:	4b16      	ldr	r3, [pc, #88]	; (80155a8 <strtok+0x5c>)
 801554e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015550:	681e      	ldr	r6, [r3, #0]
 8015552:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8015554:	4605      	mov	r5, r0
 8015556:	b9fc      	cbnz	r4, 8015598 <strtok+0x4c>
 8015558:	2050      	movs	r0, #80	; 0x50
 801555a:	9101      	str	r1, [sp, #4]
 801555c:	f000 fc7e 	bl	8015e5c <malloc>
 8015560:	9901      	ldr	r1, [sp, #4]
 8015562:	65b0      	str	r0, [r6, #88]	; 0x58
 8015564:	4602      	mov	r2, r0
 8015566:	b920      	cbnz	r0, 8015572 <strtok+0x26>
 8015568:	4b10      	ldr	r3, [pc, #64]	; (80155ac <strtok+0x60>)
 801556a:	4811      	ldr	r0, [pc, #68]	; (80155b0 <strtok+0x64>)
 801556c:	2157      	movs	r1, #87	; 0x57
 801556e:	f000 f8d5 	bl	801571c <__assert_func>
 8015572:	e9c0 4400 	strd	r4, r4, [r0]
 8015576:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801557a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801557e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8015582:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8015586:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801558a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801558e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8015592:	6184      	str	r4, [r0, #24]
 8015594:	7704      	strb	r4, [r0, #28]
 8015596:	6244      	str	r4, [r0, #36]	; 0x24
 8015598:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801559a:	2301      	movs	r3, #1
 801559c:	4628      	mov	r0, r5
 801559e:	b002      	add	sp, #8
 80155a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155a4:	f000 b806 	b.w	80155b4 <__strtok_r>
 80155a8:	2400001c 	.word	0x2400001c
 80155ac:	08017e30 	.word	0x08017e30
 80155b0:	08017e47 	.word	0x08017e47

080155b4 <__strtok_r>:
 80155b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155b6:	b908      	cbnz	r0, 80155bc <__strtok_r+0x8>
 80155b8:	6810      	ldr	r0, [r2, #0]
 80155ba:	b188      	cbz	r0, 80155e0 <__strtok_r+0x2c>
 80155bc:	4604      	mov	r4, r0
 80155be:	4620      	mov	r0, r4
 80155c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80155c4:	460f      	mov	r7, r1
 80155c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80155ca:	b91e      	cbnz	r6, 80155d4 <__strtok_r+0x20>
 80155cc:	b965      	cbnz	r5, 80155e8 <__strtok_r+0x34>
 80155ce:	6015      	str	r5, [r2, #0]
 80155d0:	4628      	mov	r0, r5
 80155d2:	e005      	b.n	80155e0 <__strtok_r+0x2c>
 80155d4:	42b5      	cmp	r5, r6
 80155d6:	d1f6      	bne.n	80155c6 <__strtok_r+0x12>
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d1f0      	bne.n	80155be <__strtok_r+0xa>
 80155dc:	6014      	str	r4, [r2, #0]
 80155de:	7003      	strb	r3, [r0, #0]
 80155e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155e2:	461c      	mov	r4, r3
 80155e4:	e00c      	b.n	8015600 <__strtok_r+0x4c>
 80155e6:	b915      	cbnz	r5, 80155ee <__strtok_r+0x3a>
 80155e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80155ec:	460e      	mov	r6, r1
 80155ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 80155f2:	42ab      	cmp	r3, r5
 80155f4:	d1f7      	bne.n	80155e6 <__strtok_r+0x32>
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d0f3      	beq.n	80155e2 <__strtok_r+0x2e>
 80155fa:	2300      	movs	r3, #0
 80155fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015600:	6014      	str	r4, [r2, #0]
 8015602:	e7ed      	b.n	80155e0 <__strtok_r+0x2c>

08015604 <_strtol_l.constprop.0>:
 8015604:	2b01      	cmp	r3, #1
 8015606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801560a:	d001      	beq.n	8015610 <_strtol_l.constprop.0+0xc>
 801560c:	2b24      	cmp	r3, #36	; 0x24
 801560e:	d906      	bls.n	801561e <_strtol_l.constprop.0+0x1a>
 8015610:	f7ff f96c 	bl	80148ec <__errno>
 8015614:	2316      	movs	r3, #22
 8015616:	6003      	str	r3, [r0, #0]
 8015618:	2000      	movs	r0, #0
 801561a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801561e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015704 <_strtol_l.constprop.0+0x100>
 8015622:	460d      	mov	r5, r1
 8015624:	462e      	mov	r6, r5
 8015626:	f815 4b01 	ldrb.w	r4, [r5], #1
 801562a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801562e:	f017 0708 	ands.w	r7, r7, #8
 8015632:	d1f7      	bne.n	8015624 <_strtol_l.constprop.0+0x20>
 8015634:	2c2d      	cmp	r4, #45	; 0x2d
 8015636:	d132      	bne.n	801569e <_strtol_l.constprop.0+0x9a>
 8015638:	782c      	ldrb	r4, [r5, #0]
 801563a:	2701      	movs	r7, #1
 801563c:	1cb5      	adds	r5, r6, #2
 801563e:	2b00      	cmp	r3, #0
 8015640:	d05b      	beq.n	80156fa <_strtol_l.constprop.0+0xf6>
 8015642:	2b10      	cmp	r3, #16
 8015644:	d109      	bne.n	801565a <_strtol_l.constprop.0+0x56>
 8015646:	2c30      	cmp	r4, #48	; 0x30
 8015648:	d107      	bne.n	801565a <_strtol_l.constprop.0+0x56>
 801564a:	782c      	ldrb	r4, [r5, #0]
 801564c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015650:	2c58      	cmp	r4, #88	; 0x58
 8015652:	d14d      	bne.n	80156f0 <_strtol_l.constprop.0+0xec>
 8015654:	786c      	ldrb	r4, [r5, #1]
 8015656:	2310      	movs	r3, #16
 8015658:	3502      	adds	r5, #2
 801565a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801565e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015662:	f04f 0c00 	mov.w	ip, #0
 8015666:	fbb8 f9f3 	udiv	r9, r8, r3
 801566a:	4666      	mov	r6, ip
 801566c:	fb03 8a19 	mls	sl, r3, r9, r8
 8015670:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8015674:	f1be 0f09 	cmp.w	lr, #9
 8015678:	d816      	bhi.n	80156a8 <_strtol_l.constprop.0+0xa4>
 801567a:	4674      	mov	r4, lr
 801567c:	42a3      	cmp	r3, r4
 801567e:	dd24      	ble.n	80156ca <_strtol_l.constprop.0+0xc6>
 8015680:	f1bc 0f00 	cmp.w	ip, #0
 8015684:	db1e      	blt.n	80156c4 <_strtol_l.constprop.0+0xc0>
 8015686:	45b1      	cmp	r9, r6
 8015688:	d31c      	bcc.n	80156c4 <_strtol_l.constprop.0+0xc0>
 801568a:	d101      	bne.n	8015690 <_strtol_l.constprop.0+0x8c>
 801568c:	45a2      	cmp	sl, r4
 801568e:	db19      	blt.n	80156c4 <_strtol_l.constprop.0+0xc0>
 8015690:	fb06 4603 	mla	r6, r6, r3, r4
 8015694:	f04f 0c01 	mov.w	ip, #1
 8015698:	f815 4b01 	ldrb.w	r4, [r5], #1
 801569c:	e7e8      	b.n	8015670 <_strtol_l.constprop.0+0x6c>
 801569e:	2c2b      	cmp	r4, #43	; 0x2b
 80156a0:	bf04      	itt	eq
 80156a2:	782c      	ldrbeq	r4, [r5, #0]
 80156a4:	1cb5      	addeq	r5, r6, #2
 80156a6:	e7ca      	b.n	801563e <_strtol_l.constprop.0+0x3a>
 80156a8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80156ac:	f1be 0f19 	cmp.w	lr, #25
 80156b0:	d801      	bhi.n	80156b6 <_strtol_l.constprop.0+0xb2>
 80156b2:	3c37      	subs	r4, #55	; 0x37
 80156b4:	e7e2      	b.n	801567c <_strtol_l.constprop.0+0x78>
 80156b6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80156ba:	f1be 0f19 	cmp.w	lr, #25
 80156be:	d804      	bhi.n	80156ca <_strtol_l.constprop.0+0xc6>
 80156c0:	3c57      	subs	r4, #87	; 0x57
 80156c2:	e7db      	b.n	801567c <_strtol_l.constprop.0+0x78>
 80156c4:	f04f 3cff 	mov.w	ip, #4294967295
 80156c8:	e7e6      	b.n	8015698 <_strtol_l.constprop.0+0x94>
 80156ca:	f1bc 0f00 	cmp.w	ip, #0
 80156ce:	da05      	bge.n	80156dc <_strtol_l.constprop.0+0xd8>
 80156d0:	2322      	movs	r3, #34	; 0x22
 80156d2:	6003      	str	r3, [r0, #0]
 80156d4:	4646      	mov	r6, r8
 80156d6:	b942      	cbnz	r2, 80156ea <_strtol_l.constprop.0+0xe6>
 80156d8:	4630      	mov	r0, r6
 80156da:	e79e      	b.n	801561a <_strtol_l.constprop.0+0x16>
 80156dc:	b107      	cbz	r7, 80156e0 <_strtol_l.constprop.0+0xdc>
 80156de:	4276      	negs	r6, r6
 80156e0:	2a00      	cmp	r2, #0
 80156e2:	d0f9      	beq.n	80156d8 <_strtol_l.constprop.0+0xd4>
 80156e4:	f1bc 0f00 	cmp.w	ip, #0
 80156e8:	d000      	beq.n	80156ec <_strtol_l.constprop.0+0xe8>
 80156ea:	1e69      	subs	r1, r5, #1
 80156ec:	6011      	str	r1, [r2, #0]
 80156ee:	e7f3      	b.n	80156d8 <_strtol_l.constprop.0+0xd4>
 80156f0:	2430      	movs	r4, #48	; 0x30
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d1b1      	bne.n	801565a <_strtol_l.constprop.0+0x56>
 80156f6:	2308      	movs	r3, #8
 80156f8:	e7af      	b.n	801565a <_strtol_l.constprop.0+0x56>
 80156fa:	2c30      	cmp	r4, #48	; 0x30
 80156fc:	d0a5      	beq.n	801564a <_strtol_l.constprop.0+0x46>
 80156fe:	230a      	movs	r3, #10
 8015700:	e7ab      	b.n	801565a <_strtol_l.constprop.0+0x56>
 8015702:	bf00      	nop
 8015704:	08017ee1 	.word	0x08017ee1

08015708 <strtol>:
 8015708:	4613      	mov	r3, r2
 801570a:	460a      	mov	r2, r1
 801570c:	4601      	mov	r1, r0
 801570e:	4802      	ldr	r0, [pc, #8]	; (8015718 <strtol+0x10>)
 8015710:	6800      	ldr	r0, [r0, #0]
 8015712:	f7ff bf77 	b.w	8015604 <_strtol_l.constprop.0>
 8015716:	bf00      	nop
 8015718:	2400001c 	.word	0x2400001c

0801571c <__assert_func>:
 801571c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801571e:	4614      	mov	r4, r2
 8015720:	461a      	mov	r2, r3
 8015722:	4b09      	ldr	r3, [pc, #36]	; (8015748 <__assert_func+0x2c>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	4605      	mov	r5, r0
 8015728:	68d8      	ldr	r0, [r3, #12]
 801572a:	b14c      	cbz	r4, 8015740 <__assert_func+0x24>
 801572c:	4b07      	ldr	r3, [pc, #28]	; (801574c <__assert_func+0x30>)
 801572e:	9100      	str	r1, [sp, #0]
 8015730:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015734:	4906      	ldr	r1, [pc, #24]	; (8015750 <__assert_func+0x34>)
 8015736:	462b      	mov	r3, r5
 8015738:	f000 f80e 	bl	8015758 <fiprintf>
 801573c:	f001 feae 	bl	801749c <abort>
 8015740:	4b04      	ldr	r3, [pc, #16]	; (8015754 <__assert_func+0x38>)
 8015742:	461c      	mov	r4, r3
 8015744:	e7f3      	b.n	801572e <__assert_func+0x12>
 8015746:	bf00      	nop
 8015748:	2400001c 	.word	0x2400001c
 801574c:	08017ea4 	.word	0x08017ea4
 8015750:	08017eb1 	.word	0x08017eb1
 8015754:	08017edf 	.word	0x08017edf

08015758 <fiprintf>:
 8015758:	b40e      	push	{r1, r2, r3}
 801575a:	b503      	push	{r0, r1, lr}
 801575c:	4601      	mov	r1, r0
 801575e:	ab03      	add	r3, sp, #12
 8015760:	4805      	ldr	r0, [pc, #20]	; (8015778 <fiprintf+0x20>)
 8015762:	f853 2b04 	ldr.w	r2, [r3], #4
 8015766:	6800      	ldr	r0, [r0, #0]
 8015768:	9301      	str	r3, [sp, #4]
 801576a:	f001 fad9 	bl	8016d20 <_vfiprintf_r>
 801576e:	b002      	add	sp, #8
 8015770:	f85d eb04 	ldr.w	lr, [sp], #4
 8015774:	b003      	add	sp, #12
 8015776:	4770      	bx	lr
 8015778:	2400001c 	.word	0x2400001c

0801577c <rshift>:
 801577c:	6903      	ldr	r3, [r0, #16]
 801577e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015782:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015786:	ea4f 1261 	mov.w	r2, r1, asr #5
 801578a:	f100 0414 	add.w	r4, r0, #20
 801578e:	dd45      	ble.n	801581c <rshift+0xa0>
 8015790:	f011 011f 	ands.w	r1, r1, #31
 8015794:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015798:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801579c:	d10c      	bne.n	80157b8 <rshift+0x3c>
 801579e:	f100 0710 	add.w	r7, r0, #16
 80157a2:	4629      	mov	r1, r5
 80157a4:	42b1      	cmp	r1, r6
 80157a6:	d334      	bcc.n	8015812 <rshift+0x96>
 80157a8:	1a9b      	subs	r3, r3, r2
 80157aa:	009b      	lsls	r3, r3, #2
 80157ac:	1eea      	subs	r2, r5, #3
 80157ae:	4296      	cmp	r6, r2
 80157b0:	bf38      	it	cc
 80157b2:	2300      	movcc	r3, #0
 80157b4:	4423      	add	r3, r4
 80157b6:	e015      	b.n	80157e4 <rshift+0x68>
 80157b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80157bc:	f1c1 0820 	rsb	r8, r1, #32
 80157c0:	40cf      	lsrs	r7, r1
 80157c2:	f105 0e04 	add.w	lr, r5, #4
 80157c6:	46a1      	mov	r9, r4
 80157c8:	4576      	cmp	r6, lr
 80157ca:	46f4      	mov	ip, lr
 80157cc:	d815      	bhi.n	80157fa <rshift+0x7e>
 80157ce:	1a9a      	subs	r2, r3, r2
 80157d0:	0092      	lsls	r2, r2, #2
 80157d2:	3a04      	subs	r2, #4
 80157d4:	3501      	adds	r5, #1
 80157d6:	42ae      	cmp	r6, r5
 80157d8:	bf38      	it	cc
 80157da:	2200      	movcc	r2, #0
 80157dc:	18a3      	adds	r3, r4, r2
 80157de:	50a7      	str	r7, [r4, r2]
 80157e0:	b107      	cbz	r7, 80157e4 <rshift+0x68>
 80157e2:	3304      	adds	r3, #4
 80157e4:	1b1a      	subs	r2, r3, r4
 80157e6:	42a3      	cmp	r3, r4
 80157e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80157ec:	bf08      	it	eq
 80157ee:	2300      	moveq	r3, #0
 80157f0:	6102      	str	r2, [r0, #16]
 80157f2:	bf08      	it	eq
 80157f4:	6143      	streq	r3, [r0, #20]
 80157f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157fa:	f8dc c000 	ldr.w	ip, [ip]
 80157fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8015802:	ea4c 0707 	orr.w	r7, ip, r7
 8015806:	f849 7b04 	str.w	r7, [r9], #4
 801580a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801580e:	40cf      	lsrs	r7, r1
 8015810:	e7da      	b.n	80157c8 <rshift+0x4c>
 8015812:	f851 cb04 	ldr.w	ip, [r1], #4
 8015816:	f847 cf04 	str.w	ip, [r7, #4]!
 801581a:	e7c3      	b.n	80157a4 <rshift+0x28>
 801581c:	4623      	mov	r3, r4
 801581e:	e7e1      	b.n	80157e4 <rshift+0x68>

08015820 <__hexdig_fun>:
 8015820:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015824:	2b09      	cmp	r3, #9
 8015826:	d802      	bhi.n	801582e <__hexdig_fun+0xe>
 8015828:	3820      	subs	r0, #32
 801582a:	b2c0      	uxtb	r0, r0
 801582c:	4770      	bx	lr
 801582e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015832:	2b05      	cmp	r3, #5
 8015834:	d801      	bhi.n	801583a <__hexdig_fun+0x1a>
 8015836:	3847      	subs	r0, #71	; 0x47
 8015838:	e7f7      	b.n	801582a <__hexdig_fun+0xa>
 801583a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801583e:	2b05      	cmp	r3, #5
 8015840:	d801      	bhi.n	8015846 <__hexdig_fun+0x26>
 8015842:	3827      	subs	r0, #39	; 0x27
 8015844:	e7f1      	b.n	801582a <__hexdig_fun+0xa>
 8015846:	2000      	movs	r0, #0
 8015848:	4770      	bx	lr
	...

0801584c <__gethex>:
 801584c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015850:	ed2d 8b02 	vpush	{d8}
 8015854:	b089      	sub	sp, #36	; 0x24
 8015856:	ee08 0a10 	vmov	s16, r0
 801585a:	9304      	str	r3, [sp, #16]
 801585c:	4bb4      	ldr	r3, [pc, #720]	; (8015b30 <__gethex+0x2e4>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	9301      	str	r3, [sp, #4]
 8015862:	4618      	mov	r0, r3
 8015864:	468b      	mov	fp, r1
 8015866:	4690      	mov	r8, r2
 8015868:	f7ea fd4c 	bl	8000304 <strlen>
 801586c:	9b01      	ldr	r3, [sp, #4]
 801586e:	f8db 2000 	ldr.w	r2, [fp]
 8015872:	4403      	add	r3, r0
 8015874:	4682      	mov	sl, r0
 8015876:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801587a:	9305      	str	r3, [sp, #20]
 801587c:	1c93      	adds	r3, r2, #2
 801587e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015882:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015886:	32fe      	adds	r2, #254	; 0xfe
 8015888:	18d1      	adds	r1, r2, r3
 801588a:	461f      	mov	r7, r3
 801588c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015890:	9100      	str	r1, [sp, #0]
 8015892:	2830      	cmp	r0, #48	; 0x30
 8015894:	d0f8      	beq.n	8015888 <__gethex+0x3c>
 8015896:	f7ff ffc3 	bl	8015820 <__hexdig_fun>
 801589a:	4604      	mov	r4, r0
 801589c:	2800      	cmp	r0, #0
 801589e:	d13a      	bne.n	8015916 <__gethex+0xca>
 80158a0:	9901      	ldr	r1, [sp, #4]
 80158a2:	4652      	mov	r2, sl
 80158a4:	4638      	mov	r0, r7
 80158a6:	f001 fd17 	bl	80172d8 <strncmp>
 80158aa:	4605      	mov	r5, r0
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d168      	bne.n	8015982 <__gethex+0x136>
 80158b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80158b4:	eb07 060a 	add.w	r6, r7, sl
 80158b8:	f7ff ffb2 	bl	8015820 <__hexdig_fun>
 80158bc:	2800      	cmp	r0, #0
 80158be:	d062      	beq.n	8015986 <__gethex+0x13a>
 80158c0:	4633      	mov	r3, r6
 80158c2:	7818      	ldrb	r0, [r3, #0]
 80158c4:	2830      	cmp	r0, #48	; 0x30
 80158c6:	461f      	mov	r7, r3
 80158c8:	f103 0301 	add.w	r3, r3, #1
 80158cc:	d0f9      	beq.n	80158c2 <__gethex+0x76>
 80158ce:	f7ff ffa7 	bl	8015820 <__hexdig_fun>
 80158d2:	2301      	movs	r3, #1
 80158d4:	fab0 f480 	clz	r4, r0
 80158d8:	0964      	lsrs	r4, r4, #5
 80158da:	4635      	mov	r5, r6
 80158dc:	9300      	str	r3, [sp, #0]
 80158de:	463a      	mov	r2, r7
 80158e0:	4616      	mov	r6, r2
 80158e2:	3201      	adds	r2, #1
 80158e4:	7830      	ldrb	r0, [r6, #0]
 80158e6:	f7ff ff9b 	bl	8015820 <__hexdig_fun>
 80158ea:	2800      	cmp	r0, #0
 80158ec:	d1f8      	bne.n	80158e0 <__gethex+0x94>
 80158ee:	9901      	ldr	r1, [sp, #4]
 80158f0:	4652      	mov	r2, sl
 80158f2:	4630      	mov	r0, r6
 80158f4:	f001 fcf0 	bl	80172d8 <strncmp>
 80158f8:	b980      	cbnz	r0, 801591c <__gethex+0xd0>
 80158fa:	b94d      	cbnz	r5, 8015910 <__gethex+0xc4>
 80158fc:	eb06 050a 	add.w	r5, r6, sl
 8015900:	462a      	mov	r2, r5
 8015902:	4616      	mov	r6, r2
 8015904:	3201      	adds	r2, #1
 8015906:	7830      	ldrb	r0, [r6, #0]
 8015908:	f7ff ff8a 	bl	8015820 <__hexdig_fun>
 801590c:	2800      	cmp	r0, #0
 801590e:	d1f8      	bne.n	8015902 <__gethex+0xb6>
 8015910:	1bad      	subs	r5, r5, r6
 8015912:	00ad      	lsls	r5, r5, #2
 8015914:	e004      	b.n	8015920 <__gethex+0xd4>
 8015916:	2400      	movs	r4, #0
 8015918:	4625      	mov	r5, r4
 801591a:	e7e0      	b.n	80158de <__gethex+0x92>
 801591c:	2d00      	cmp	r5, #0
 801591e:	d1f7      	bne.n	8015910 <__gethex+0xc4>
 8015920:	7833      	ldrb	r3, [r6, #0]
 8015922:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015926:	2b50      	cmp	r3, #80	; 0x50
 8015928:	d13b      	bne.n	80159a2 <__gethex+0x156>
 801592a:	7873      	ldrb	r3, [r6, #1]
 801592c:	2b2b      	cmp	r3, #43	; 0x2b
 801592e:	d02c      	beq.n	801598a <__gethex+0x13e>
 8015930:	2b2d      	cmp	r3, #45	; 0x2d
 8015932:	d02e      	beq.n	8015992 <__gethex+0x146>
 8015934:	1c71      	adds	r1, r6, #1
 8015936:	f04f 0900 	mov.w	r9, #0
 801593a:	7808      	ldrb	r0, [r1, #0]
 801593c:	f7ff ff70 	bl	8015820 <__hexdig_fun>
 8015940:	1e43      	subs	r3, r0, #1
 8015942:	b2db      	uxtb	r3, r3
 8015944:	2b18      	cmp	r3, #24
 8015946:	d82c      	bhi.n	80159a2 <__gethex+0x156>
 8015948:	f1a0 0210 	sub.w	r2, r0, #16
 801594c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015950:	f7ff ff66 	bl	8015820 <__hexdig_fun>
 8015954:	1e43      	subs	r3, r0, #1
 8015956:	b2db      	uxtb	r3, r3
 8015958:	2b18      	cmp	r3, #24
 801595a:	d91d      	bls.n	8015998 <__gethex+0x14c>
 801595c:	f1b9 0f00 	cmp.w	r9, #0
 8015960:	d000      	beq.n	8015964 <__gethex+0x118>
 8015962:	4252      	negs	r2, r2
 8015964:	4415      	add	r5, r2
 8015966:	f8cb 1000 	str.w	r1, [fp]
 801596a:	b1e4      	cbz	r4, 80159a6 <__gethex+0x15a>
 801596c:	9b00      	ldr	r3, [sp, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	bf14      	ite	ne
 8015972:	2700      	movne	r7, #0
 8015974:	2706      	moveq	r7, #6
 8015976:	4638      	mov	r0, r7
 8015978:	b009      	add	sp, #36	; 0x24
 801597a:	ecbd 8b02 	vpop	{d8}
 801597e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015982:	463e      	mov	r6, r7
 8015984:	4625      	mov	r5, r4
 8015986:	2401      	movs	r4, #1
 8015988:	e7ca      	b.n	8015920 <__gethex+0xd4>
 801598a:	f04f 0900 	mov.w	r9, #0
 801598e:	1cb1      	adds	r1, r6, #2
 8015990:	e7d3      	b.n	801593a <__gethex+0xee>
 8015992:	f04f 0901 	mov.w	r9, #1
 8015996:	e7fa      	b.n	801598e <__gethex+0x142>
 8015998:	230a      	movs	r3, #10
 801599a:	fb03 0202 	mla	r2, r3, r2, r0
 801599e:	3a10      	subs	r2, #16
 80159a0:	e7d4      	b.n	801594c <__gethex+0x100>
 80159a2:	4631      	mov	r1, r6
 80159a4:	e7df      	b.n	8015966 <__gethex+0x11a>
 80159a6:	1bf3      	subs	r3, r6, r7
 80159a8:	3b01      	subs	r3, #1
 80159aa:	4621      	mov	r1, r4
 80159ac:	2b07      	cmp	r3, #7
 80159ae:	dc0b      	bgt.n	80159c8 <__gethex+0x17c>
 80159b0:	ee18 0a10 	vmov	r0, s16
 80159b4:	f000 fa7a 	bl	8015eac <_Balloc>
 80159b8:	4604      	mov	r4, r0
 80159ba:	b940      	cbnz	r0, 80159ce <__gethex+0x182>
 80159bc:	4b5d      	ldr	r3, [pc, #372]	; (8015b34 <__gethex+0x2e8>)
 80159be:	4602      	mov	r2, r0
 80159c0:	21de      	movs	r1, #222	; 0xde
 80159c2:	485d      	ldr	r0, [pc, #372]	; (8015b38 <__gethex+0x2ec>)
 80159c4:	f7ff feaa 	bl	801571c <__assert_func>
 80159c8:	3101      	adds	r1, #1
 80159ca:	105b      	asrs	r3, r3, #1
 80159cc:	e7ee      	b.n	80159ac <__gethex+0x160>
 80159ce:	f100 0914 	add.w	r9, r0, #20
 80159d2:	f04f 0b00 	mov.w	fp, #0
 80159d6:	f1ca 0301 	rsb	r3, sl, #1
 80159da:	f8cd 9008 	str.w	r9, [sp, #8]
 80159de:	f8cd b000 	str.w	fp, [sp]
 80159e2:	9306      	str	r3, [sp, #24]
 80159e4:	42b7      	cmp	r7, r6
 80159e6:	d340      	bcc.n	8015a6a <__gethex+0x21e>
 80159e8:	9802      	ldr	r0, [sp, #8]
 80159ea:	9b00      	ldr	r3, [sp, #0]
 80159ec:	f840 3b04 	str.w	r3, [r0], #4
 80159f0:	eba0 0009 	sub.w	r0, r0, r9
 80159f4:	1080      	asrs	r0, r0, #2
 80159f6:	0146      	lsls	r6, r0, #5
 80159f8:	6120      	str	r0, [r4, #16]
 80159fa:	4618      	mov	r0, r3
 80159fc:	f000 fb48 	bl	8016090 <__hi0bits>
 8015a00:	1a30      	subs	r0, r6, r0
 8015a02:	f8d8 6000 	ldr.w	r6, [r8]
 8015a06:	42b0      	cmp	r0, r6
 8015a08:	dd63      	ble.n	8015ad2 <__gethex+0x286>
 8015a0a:	1b87      	subs	r7, r0, r6
 8015a0c:	4639      	mov	r1, r7
 8015a0e:	4620      	mov	r0, r4
 8015a10:	f000 fee9 	bl	80167e6 <__any_on>
 8015a14:	4682      	mov	sl, r0
 8015a16:	b1a8      	cbz	r0, 8015a44 <__gethex+0x1f8>
 8015a18:	1e7b      	subs	r3, r7, #1
 8015a1a:	1159      	asrs	r1, r3, #5
 8015a1c:	f003 021f 	and.w	r2, r3, #31
 8015a20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015a24:	f04f 0a01 	mov.w	sl, #1
 8015a28:	fa0a f202 	lsl.w	r2, sl, r2
 8015a2c:	420a      	tst	r2, r1
 8015a2e:	d009      	beq.n	8015a44 <__gethex+0x1f8>
 8015a30:	4553      	cmp	r3, sl
 8015a32:	dd05      	ble.n	8015a40 <__gethex+0x1f4>
 8015a34:	1eb9      	subs	r1, r7, #2
 8015a36:	4620      	mov	r0, r4
 8015a38:	f000 fed5 	bl	80167e6 <__any_on>
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	d145      	bne.n	8015acc <__gethex+0x280>
 8015a40:	f04f 0a02 	mov.w	sl, #2
 8015a44:	4639      	mov	r1, r7
 8015a46:	4620      	mov	r0, r4
 8015a48:	f7ff fe98 	bl	801577c <rshift>
 8015a4c:	443d      	add	r5, r7
 8015a4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a52:	42ab      	cmp	r3, r5
 8015a54:	da4c      	bge.n	8015af0 <__gethex+0x2a4>
 8015a56:	ee18 0a10 	vmov	r0, s16
 8015a5a:	4621      	mov	r1, r4
 8015a5c:	f000 fa66 	bl	8015f2c <_Bfree>
 8015a60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a62:	2300      	movs	r3, #0
 8015a64:	6013      	str	r3, [r2, #0]
 8015a66:	27a3      	movs	r7, #163	; 0xa3
 8015a68:	e785      	b.n	8015976 <__gethex+0x12a>
 8015a6a:	1e73      	subs	r3, r6, #1
 8015a6c:	9a05      	ldr	r2, [sp, #20]
 8015a6e:	9303      	str	r3, [sp, #12]
 8015a70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015a74:	4293      	cmp	r3, r2
 8015a76:	d019      	beq.n	8015aac <__gethex+0x260>
 8015a78:	f1bb 0f20 	cmp.w	fp, #32
 8015a7c:	d107      	bne.n	8015a8e <__gethex+0x242>
 8015a7e:	9b02      	ldr	r3, [sp, #8]
 8015a80:	9a00      	ldr	r2, [sp, #0]
 8015a82:	f843 2b04 	str.w	r2, [r3], #4
 8015a86:	9302      	str	r3, [sp, #8]
 8015a88:	2300      	movs	r3, #0
 8015a8a:	9300      	str	r3, [sp, #0]
 8015a8c:	469b      	mov	fp, r3
 8015a8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015a92:	f7ff fec5 	bl	8015820 <__hexdig_fun>
 8015a96:	9b00      	ldr	r3, [sp, #0]
 8015a98:	f000 000f 	and.w	r0, r0, #15
 8015a9c:	fa00 f00b 	lsl.w	r0, r0, fp
 8015aa0:	4303      	orrs	r3, r0
 8015aa2:	9300      	str	r3, [sp, #0]
 8015aa4:	f10b 0b04 	add.w	fp, fp, #4
 8015aa8:	9b03      	ldr	r3, [sp, #12]
 8015aaa:	e00d      	b.n	8015ac8 <__gethex+0x27c>
 8015aac:	9b03      	ldr	r3, [sp, #12]
 8015aae:	9a06      	ldr	r2, [sp, #24]
 8015ab0:	4413      	add	r3, r2
 8015ab2:	42bb      	cmp	r3, r7
 8015ab4:	d3e0      	bcc.n	8015a78 <__gethex+0x22c>
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	9901      	ldr	r1, [sp, #4]
 8015aba:	9307      	str	r3, [sp, #28]
 8015abc:	4652      	mov	r2, sl
 8015abe:	f001 fc0b 	bl	80172d8 <strncmp>
 8015ac2:	9b07      	ldr	r3, [sp, #28]
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	d1d7      	bne.n	8015a78 <__gethex+0x22c>
 8015ac8:	461e      	mov	r6, r3
 8015aca:	e78b      	b.n	80159e4 <__gethex+0x198>
 8015acc:	f04f 0a03 	mov.w	sl, #3
 8015ad0:	e7b8      	b.n	8015a44 <__gethex+0x1f8>
 8015ad2:	da0a      	bge.n	8015aea <__gethex+0x29e>
 8015ad4:	1a37      	subs	r7, r6, r0
 8015ad6:	4621      	mov	r1, r4
 8015ad8:	ee18 0a10 	vmov	r0, s16
 8015adc:	463a      	mov	r2, r7
 8015ade:	f000 fc41 	bl	8016364 <__lshift>
 8015ae2:	1bed      	subs	r5, r5, r7
 8015ae4:	4604      	mov	r4, r0
 8015ae6:	f100 0914 	add.w	r9, r0, #20
 8015aea:	f04f 0a00 	mov.w	sl, #0
 8015aee:	e7ae      	b.n	8015a4e <__gethex+0x202>
 8015af0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015af4:	42a8      	cmp	r0, r5
 8015af6:	dd72      	ble.n	8015bde <__gethex+0x392>
 8015af8:	1b45      	subs	r5, r0, r5
 8015afa:	42ae      	cmp	r6, r5
 8015afc:	dc36      	bgt.n	8015b6c <__gethex+0x320>
 8015afe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b02:	2b02      	cmp	r3, #2
 8015b04:	d02a      	beq.n	8015b5c <__gethex+0x310>
 8015b06:	2b03      	cmp	r3, #3
 8015b08:	d02c      	beq.n	8015b64 <__gethex+0x318>
 8015b0a:	2b01      	cmp	r3, #1
 8015b0c:	d11c      	bne.n	8015b48 <__gethex+0x2fc>
 8015b0e:	42ae      	cmp	r6, r5
 8015b10:	d11a      	bne.n	8015b48 <__gethex+0x2fc>
 8015b12:	2e01      	cmp	r6, #1
 8015b14:	d112      	bne.n	8015b3c <__gethex+0x2f0>
 8015b16:	9a04      	ldr	r2, [sp, #16]
 8015b18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015b1c:	6013      	str	r3, [r2, #0]
 8015b1e:	2301      	movs	r3, #1
 8015b20:	6123      	str	r3, [r4, #16]
 8015b22:	f8c9 3000 	str.w	r3, [r9]
 8015b26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b28:	2762      	movs	r7, #98	; 0x62
 8015b2a:	601c      	str	r4, [r3, #0]
 8015b2c:	e723      	b.n	8015976 <__gethex+0x12a>
 8015b2e:	bf00      	nop
 8015b30:	08018058 	.word	0x08018058
 8015b34:	08017fe1 	.word	0x08017fe1
 8015b38:	08017ff2 	.word	0x08017ff2
 8015b3c:	1e71      	subs	r1, r6, #1
 8015b3e:	4620      	mov	r0, r4
 8015b40:	f000 fe51 	bl	80167e6 <__any_on>
 8015b44:	2800      	cmp	r0, #0
 8015b46:	d1e6      	bne.n	8015b16 <__gethex+0x2ca>
 8015b48:	ee18 0a10 	vmov	r0, s16
 8015b4c:	4621      	mov	r1, r4
 8015b4e:	f000 f9ed 	bl	8015f2c <_Bfree>
 8015b52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b54:	2300      	movs	r3, #0
 8015b56:	6013      	str	r3, [r2, #0]
 8015b58:	2750      	movs	r7, #80	; 0x50
 8015b5a:	e70c      	b.n	8015976 <__gethex+0x12a>
 8015b5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d1f2      	bne.n	8015b48 <__gethex+0x2fc>
 8015b62:	e7d8      	b.n	8015b16 <__gethex+0x2ca>
 8015b64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d1d5      	bne.n	8015b16 <__gethex+0x2ca>
 8015b6a:	e7ed      	b.n	8015b48 <__gethex+0x2fc>
 8015b6c:	1e6f      	subs	r7, r5, #1
 8015b6e:	f1ba 0f00 	cmp.w	sl, #0
 8015b72:	d131      	bne.n	8015bd8 <__gethex+0x38c>
 8015b74:	b127      	cbz	r7, 8015b80 <__gethex+0x334>
 8015b76:	4639      	mov	r1, r7
 8015b78:	4620      	mov	r0, r4
 8015b7a:	f000 fe34 	bl	80167e6 <__any_on>
 8015b7e:	4682      	mov	sl, r0
 8015b80:	117b      	asrs	r3, r7, #5
 8015b82:	2101      	movs	r1, #1
 8015b84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015b88:	f007 071f 	and.w	r7, r7, #31
 8015b8c:	fa01 f707 	lsl.w	r7, r1, r7
 8015b90:	421f      	tst	r7, r3
 8015b92:	4629      	mov	r1, r5
 8015b94:	4620      	mov	r0, r4
 8015b96:	bf18      	it	ne
 8015b98:	f04a 0a02 	orrne.w	sl, sl, #2
 8015b9c:	1b76      	subs	r6, r6, r5
 8015b9e:	f7ff fded 	bl	801577c <rshift>
 8015ba2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015ba6:	2702      	movs	r7, #2
 8015ba8:	f1ba 0f00 	cmp.w	sl, #0
 8015bac:	d048      	beq.n	8015c40 <__gethex+0x3f4>
 8015bae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015bb2:	2b02      	cmp	r3, #2
 8015bb4:	d015      	beq.n	8015be2 <__gethex+0x396>
 8015bb6:	2b03      	cmp	r3, #3
 8015bb8:	d017      	beq.n	8015bea <__gethex+0x39e>
 8015bba:	2b01      	cmp	r3, #1
 8015bbc:	d109      	bne.n	8015bd2 <__gethex+0x386>
 8015bbe:	f01a 0f02 	tst.w	sl, #2
 8015bc2:	d006      	beq.n	8015bd2 <__gethex+0x386>
 8015bc4:	f8d9 0000 	ldr.w	r0, [r9]
 8015bc8:	ea4a 0a00 	orr.w	sl, sl, r0
 8015bcc:	f01a 0f01 	tst.w	sl, #1
 8015bd0:	d10e      	bne.n	8015bf0 <__gethex+0x3a4>
 8015bd2:	f047 0710 	orr.w	r7, r7, #16
 8015bd6:	e033      	b.n	8015c40 <__gethex+0x3f4>
 8015bd8:	f04f 0a01 	mov.w	sl, #1
 8015bdc:	e7d0      	b.n	8015b80 <__gethex+0x334>
 8015bde:	2701      	movs	r7, #1
 8015be0:	e7e2      	b.n	8015ba8 <__gethex+0x35c>
 8015be2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015be4:	f1c3 0301 	rsb	r3, r3, #1
 8015be8:	9315      	str	r3, [sp, #84]	; 0x54
 8015bea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d0f0      	beq.n	8015bd2 <__gethex+0x386>
 8015bf0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015bf4:	f104 0314 	add.w	r3, r4, #20
 8015bf8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015bfc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015c00:	f04f 0c00 	mov.w	ip, #0
 8015c04:	4618      	mov	r0, r3
 8015c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015c0e:	d01c      	beq.n	8015c4a <__gethex+0x3fe>
 8015c10:	3201      	adds	r2, #1
 8015c12:	6002      	str	r2, [r0, #0]
 8015c14:	2f02      	cmp	r7, #2
 8015c16:	f104 0314 	add.w	r3, r4, #20
 8015c1a:	d13f      	bne.n	8015c9c <__gethex+0x450>
 8015c1c:	f8d8 2000 	ldr.w	r2, [r8]
 8015c20:	3a01      	subs	r2, #1
 8015c22:	42b2      	cmp	r2, r6
 8015c24:	d10a      	bne.n	8015c3c <__gethex+0x3f0>
 8015c26:	1171      	asrs	r1, r6, #5
 8015c28:	2201      	movs	r2, #1
 8015c2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015c2e:	f006 061f 	and.w	r6, r6, #31
 8015c32:	fa02 f606 	lsl.w	r6, r2, r6
 8015c36:	421e      	tst	r6, r3
 8015c38:	bf18      	it	ne
 8015c3a:	4617      	movne	r7, r2
 8015c3c:	f047 0720 	orr.w	r7, r7, #32
 8015c40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c42:	601c      	str	r4, [r3, #0]
 8015c44:	9b04      	ldr	r3, [sp, #16]
 8015c46:	601d      	str	r5, [r3, #0]
 8015c48:	e695      	b.n	8015976 <__gethex+0x12a>
 8015c4a:	4299      	cmp	r1, r3
 8015c4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8015c50:	d8d8      	bhi.n	8015c04 <__gethex+0x3b8>
 8015c52:	68a3      	ldr	r3, [r4, #8]
 8015c54:	459b      	cmp	fp, r3
 8015c56:	db19      	blt.n	8015c8c <__gethex+0x440>
 8015c58:	6861      	ldr	r1, [r4, #4]
 8015c5a:	ee18 0a10 	vmov	r0, s16
 8015c5e:	3101      	adds	r1, #1
 8015c60:	f000 f924 	bl	8015eac <_Balloc>
 8015c64:	4681      	mov	r9, r0
 8015c66:	b918      	cbnz	r0, 8015c70 <__gethex+0x424>
 8015c68:	4b1a      	ldr	r3, [pc, #104]	; (8015cd4 <__gethex+0x488>)
 8015c6a:	4602      	mov	r2, r0
 8015c6c:	2184      	movs	r1, #132	; 0x84
 8015c6e:	e6a8      	b.n	80159c2 <__gethex+0x176>
 8015c70:	6922      	ldr	r2, [r4, #16]
 8015c72:	3202      	adds	r2, #2
 8015c74:	f104 010c 	add.w	r1, r4, #12
 8015c78:	0092      	lsls	r2, r2, #2
 8015c7a:	300c      	adds	r0, #12
 8015c7c:	f000 f908 	bl	8015e90 <memcpy>
 8015c80:	4621      	mov	r1, r4
 8015c82:	ee18 0a10 	vmov	r0, s16
 8015c86:	f000 f951 	bl	8015f2c <_Bfree>
 8015c8a:	464c      	mov	r4, r9
 8015c8c:	6923      	ldr	r3, [r4, #16]
 8015c8e:	1c5a      	adds	r2, r3, #1
 8015c90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015c94:	6122      	str	r2, [r4, #16]
 8015c96:	2201      	movs	r2, #1
 8015c98:	615a      	str	r2, [r3, #20]
 8015c9a:	e7bb      	b.n	8015c14 <__gethex+0x3c8>
 8015c9c:	6922      	ldr	r2, [r4, #16]
 8015c9e:	455a      	cmp	r2, fp
 8015ca0:	dd0b      	ble.n	8015cba <__gethex+0x46e>
 8015ca2:	2101      	movs	r1, #1
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	f7ff fd69 	bl	801577c <rshift>
 8015caa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015cae:	3501      	adds	r5, #1
 8015cb0:	42ab      	cmp	r3, r5
 8015cb2:	f6ff aed0 	blt.w	8015a56 <__gethex+0x20a>
 8015cb6:	2701      	movs	r7, #1
 8015cb8:	e7c0      	b.n	8015c3c <__gethex+0x3f0>
 8015cba:	f016 061f 	ands.w	r6, r6, #31
 8015cbe:	d0fa      	beq.n	8015cb6 <__gethex+0x46a>
 8015cc0:	4453      	add	r3, sl
 8015cc2:	f1c6 0620 	rsb	r6, r6, #32
 8015cc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015cca:	f000 f9e1 	bl	8016090 <__hi0bits>
 8015cce:	42b0      	cmp	r0, r6
 8015cd0:	dbe7      	blt.n	8015ca2 <__gethex+0x456>
 8015cd2:	e7f0      	b.n	8015cb6 <__gethex+0x46a>
 8015cd4:	08017fe1 	.word	0x08017fe1

08015cd8 <L_shift>:
 8015cd8:	f1c2 0208 	rsb	r2, r2, #8
 8015cdc:	0092      	lsls	r2, r2, #2
 8015cde:	b570      	push	{r4, r5, r6, lr}
 8015ce0:	f1c2 0620 	rsb	r6, r2, #32
 8015ce4:	6843      	ldr	r3, [r0, #4]
 8015ce6:	6804      	ldr	r4, [r0, #0]
 8015ce8:	fa03 f506 	lsl.w	r5, r3, r6
 8015cec:	432c      	orrs	r4, r5
 8015cee:	40d3      	lsrs	r3, r2
 8015cf0:	6004      	str	r4, [r0, #0]
 8015cf2:	f840 3f04 	str.w	r3, [r0, #4]!
 8015cf6:	4288      	cmp	r0, r1
 8015cf8:	d3f4      	bcc.n	8015ce4 <L_shift+0xc>
 8015cfa:	bd70      	pop	{r4, r5, r6, pc}

08015cfc <__match>:
 8015cfc:	b530      	push	{r4, r5, lr}
 8015cfe:	6803      	ldr	r3, [r0, #0]
 8015d00:	3301      	adds	r3, #1
 8015d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d06:	b914      	cbnz	r4, 8015d0e <__match+0x12>
 8015d08:	6003      	str	r3, [r0, #0]
 8015d0a:	2001      	movs	r0, #1
 8015d0c:	bd30      	pop	{r4, r5, pc}
 8015d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015d16:	2d19      	cmp	r5, #25
 8015d18:	bf98      	it	ls
 8015d1a:	3220      	addls	r2, #32
 8015d1c:	42a2      	cmp	r2, r4
 8015d1e:	d0f0      	beq.n	8015d02 <__match+0x6>
 8015d20:	2000      	movs	r0, #0
 8015d22:	e7f3      	b.n	8015d0c <__match+0x10>

08015d24 <__hexnan>:
 8015d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d28:	680b      	ldr	r3, [r1, #0]
 8015d2a:	115e      	asrs	r6, r3, #5
 8015d2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015d30:	f013 031f 	ands.w	r3, r3, #31
 8015d34:	b087      	sub	sp, #28
 8015d36:	bf18      	it	ne
 8015d38:	3604      	addne	r6, #4
 8015d3a:	2500      	movs	r5, #0
 8015d3c:	1f37      	subs	r7, r6, #4
 8015d3e:	4690      	mov	r8, r2
 8015d40:	6802      	ldr	r2, [r0, #0]
 8015d42:	9301      	str	r3, [sp, #4]
 8015d44:	4682      	mov	sl, r0
 8015d46:	f846 5c04 	str.w	r5, [r6, #-4]
 8015d4a:	46b9      	mov	r9, r7
 8015d4c:	463c      	mov	r4, r7
 8015d4e:	9502      	str	r5, [sp, #8]
 8015d50:	46ab      	mov	fp, r5
 8015d52:	7851      	ldrb	r1, [r2, #1]
 8015d54:	1c53      	adds	r3, r2, #1
 8015d56:	9303      	str	r3, [sp, #12]
 8015d58:	b341      	cbz	r1, 8015dac <__hexnan+0x88>
 8015d5a:	4608      	mov	r0, r1
 8015d5c:	9205      	str	r2, [sp, #20]
 8015d5e:	9104      	str	r1, [sp, #16]
 8015d60:	f7ff fd5e 	bl	8015820 <__hexdig_fun>
 8015d64:	2800      	cmp	r0, #0
 8015d66:	d14f      	bne.n	8015e08 <__hexnan+0xe4>
 8015d68:	9904      	ldr	r1, [sp, #16]
 8015d6a:	9a05      	ldr	r2, [sp, #20]
 8015d6c:	2920      	cmp	r1, #32
 8015d6e:	d818      	bhi.n	8015da2 <__hexnan+0x7e>
 8015d70:	9b02      	ldr	r3, [sp, #8]
 8015d72:	459b      	cmp	fp, r3
 8015d74:	dd13      	ble.n	8015d9e <__hexnan+0x7a>
 8015d76:	454c      	cmp	r4, r9
 8015d78:	d206      	bcs.n	8015d88 <__hexnan+0x64>
 8015d7a:	2d07      	cmp	r5, #7
 8015d7c:	dc04      	bgt.n	8015d88 <__hexnan+0x64>
 8015d7e:	462a      	mov	r2, r5
 8015d80:	4649      	mov	r1, r9
 8015d82:	4620      	mov	r0, r4
 8015d84:	f7ff ffa8 	bl	8015cd8 <L_shift>
 8015d88:	4544      	cmp	r4, r8
 8015d8a:	d950      	bls.n	8015e2e <__hexnan+0x10a>
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	f1a4 0904 	sub.w	r9, r4, #4
 8015d92:	f844 3c04 	str.w	r3, [r4, #-4]
 8015d96:	f8cd b008 	str.w	fp, [sp, #8]
 8015d9a:	464c      	mov	r4, r9
 8015d9c:	461d      	mov	r5, r3
 8015d9e:	9a03      	ldr	r2, [sp, #12]
 8015da0:	e7d7      	b.n	8015d52 <__hexnan+0x2e>
 8015da2:	2929      	cmp	r1, #41	; 0x29
 8015da4:	d156      	bne.n	8015e54 <__hexnan+0x130>
 8015da6:	3202      	adds	r2, #2
 8015da8:	f8ca 2000 	str.w	r2, [sl]
 8015dac:	f1bb 0f00 	cmp.w	fp, #0
 8015db0:	d050      	beq.n	8015e54 <__hexnan+0x130>
 8015db2:	454c      	cmp	r4, r9
 8015db4:	d206      	bcs.n	8015dc4 <__hexnan+0xa0>
 8015db6:	2d07      	cmp	r5, #7
 8015db8:	dc04      	bgt.n	8015dc4 <__hexnan+0xa0>
 8015dba:	462a      	mov	r2, r5
 8015dbc:	4649      	mov	r1, r9
 8015dbe:	4620      	mov	r0, r4
 8015dc0:	f7ff ff8a 	bl	8015cd8 <L_shift>
 8015dc4:	4544      	cmp	r4, r8
 8015dc6:	d934      	bls.n	8015e32 <__hexnan+0x10e>
 8015dc8:	f1a8 0204 	sub.w	r2, r8, #4
 8015dcc:	4623      	mov	r3, r4
 8015dce:	f853 1b04 	ldr.w	r1, [r3], #4
 8015dd2:	f842 1f04 	str.w	r1, [r2, #4]!
 8015dd6:	429f      	cmp	r7, r3
 8015dd8:	d2f9      	bcs.n	8015dce <__hexnan+0xaa>
 8015dda:	1b3b      	subs	r3, r7, r4
 8015ddc:	f023 0303 	bic.w	r3, r3, #3
 8015de0:	3304      	adds	r3, #4
 8015de2:	3401      	adds	r4, #1
 8015de4:	3e03      	subs	r6, #3
 8015de6:	42b4      	cmp	r4, r6
 8015de8:	bf88      	it	hi
 8015dea:	2304      	movhi	r3, #4
 8015dec:	4443      	add	r3, r8
 8015dee:	2200      	movs	r2, #0
 8015df0:	f843 2b04 	str.w	r2, [r3], #4
 8015df4:	429f      	cmp	r7, r3
 8015df6:	d2fb      	bcs.n	8015df0 <__hexnan+0xcc>
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	b91b      	cbnz	r3, 8015e04 <__hexnan+0xe0>
 8015dfc:	4547      	cmp	r7, r8
 8015dfe:	d127      	bne.n	8015e50 <__hexnan+0x12c>
 8015e00:	2301      	movs	r3, #1
 8015e02:	603b      	str	r3, [r7, #0]
 8015e04:	2005      	movs	r0, #5
 8015e06:	e026      	b.n	8015e56 <__hexnan+0x132>
 8015e08:	3501      	adds	r5, #1
 8015e0a:	2d08      	cmp	r5, #8
 8015e0c:	f10b 0b01 	add.w	fp, fp, #1
 8015e10:	dd06      	ble.n	8015e20 <__hexnan+0xfc>
 8015e12:	4544      	cmp	r4, r8
 8015e14:	d9c3      	bls.n	8015d9e <__hexnan+0x7a>
 8015e16:	2300      	movs	r3, #0
 8015e18:	f844 3c04 	str.w	r3, [r4, #-4]
 8015e1c:	2501      	movs	r5, #1
 8015e1e:	3c04      	subs	r4, #4
 8015e20:	6822      	ldr	r2, [r4, #0]
 8015e22:	f000 000f 	and.w	r0, r0, #15
 8015e26:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015e2a:	6022      	str	r2, [r4, #0]
 8015e2c:	e7b7      	b.n	8015d9e <__hexnan+0x7a>
 8015e2e:	2508      	movs	r5, #8
 8015e30:	e7b5      	b.n	8015d9e <__hexnan+0x7a>
 8015e32:	9b01      	ldr	r3, [sp, #4]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d0df      	beq.n	8015df8 <__hexnan+0xd4>
 8015e38:	f04f 32ff 	mov.w	r2, #4294967295
 8015e3c:	f1c3 0320 	rsb	r3, r3, #32
 8015e40:	fa22 f303 	lsr.w	r3, r2, r3
 8015e44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015e48:	401a      	ands	r2, r3
 8015e4a:	f846 2c04 	str.w	r2, [r6, #-4]
 8015e4e:	e7d3      	b.n	8015df8 <__hexnan+0xd4>
 8015e50:	3f04      	subs	r7, #4
 8015e52:	e7d1      	b.n	8015df8 <__hexnan+0xd4>
 8015e54:	2004      	movs	r0, #4
 8015e56:	b007      	add	sp, #28
 8015e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e5c <malloc>:
 8015e5c:	4b02      	ldr	r3, [pc, #8]	; (8015e68 <malloc+0xc>)
 8015e5e:	4601      	mov	r1, r0
 8015e60:	6818      	ldr	r0, [r3, #0]
 8015e62:	f000 bd63 	b.w	801692c <_malloc_r>
 8015e66:	bf00      	nop
 8015e68:	2400001c 	.word	0x2400001c

08015e6c <__ascii_mbtowc>:
 8015e6c:	b082      	sub	sp, #8
 8015e6e:	b901      	cbnz	r1, 8015e72 <__ascii_mbtowc+0x6>
 8015e70:	a901      	add	r1, sp, #4
 8015e72:	b142      	cbz	r2, 8015e86 <__ascii_mbtowc+0x1a>
 8015e74:	b14b      	cbz	r3, 8015e8a <__ascii_mbtowc+0x1e>
 8015e76:	7813      	ldrb	r3, [r2, #0]
 8015e78:	600b      	str	r3, [r1, #0]
 8015e7a:	7812      	ldrb	r2, [r2, #0]
 8015e7c:	1e10      	subs	r0, r2, #0
 8015e7e:	bf18      	it	ne
 8015e80:	2001      	movne	r0, #1
 8015e82:	b002      	add	sp, #8
 8015e84:	4770      	bx	lr
 8015e86:	4610      	mov	r0, r2
 8015e88:	e7fb      	b.n	8015e82 <__ascii_mbtowc+0x16>
 8015e8a:	f06f 0001 	mvn.w	r0, #1
 8015e8e:	e7f8      	b.n	8015e82 <__ascii_mbtowc+0x16>

08015e90 <memcpy>:
 8015e90:	440a      	add	r2, r1
 8015e92:	4291      	cmp	r1, r2
 8015e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e98:	d100      	bne.n	8015e9c <memcpy+0xc>
 8015e9a:	4770      	bx	lr
 8015e9c:	b510      	push	{r4, lr}
 8015e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ea6:	4291      	cmp	r1, r2
 8015ea8:	d1f9      	bne.n	8015e9e <memcpy+0xe>
 8015eaa:	bd10      	pop	{r4, pc}

08015eac <_Balloc>:
 8015eac:	b570      	push	{r4, r5, r6, lr}
 8015eae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015eb0:	4604      	mov	r4, r0
 8015eb2:	460d      	mov	r5, r1
 8015eb4:	b976      	cbnz	r6, 8015ed4 <_Balloc+0x28>
 8015eb6:	2010      	movs	r0, #16
 8015eb8:	f7ff ffd0 	bl	8015e5c <malloc>
 8015ebc:	4602      	mov	r2, r0
 8015ebe:	6260      	str	r0, [r4, #36]	; 0x24
 8015ec0:	b920      	cbnz	r0, 8015ecc <_Balloc+0x20>
 8015ec2:	4b18      	ldr	r3, [pc, #96]	; (8015f24 <_Balloc+0x78>)
 8015ec4:	4818      	ldr	r0, [pc, #96]	; (8015f28 <_Balloc+0x7c>)
 8015ec6:	2166      	movs	r1, #102	; 0x66
 8015ec8:	f7ff fc28 	bl	801571c <__assert_func>
 8015ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ed0:	6006      	str	r6, [r0, #0]
 8015ed2:	60c6      	str	r6, [r0, #12]
 8015ed4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015ed6:	68f3      	ldr	r3, [r6, #12]
 8015ed8:	b183      	cbz	r3, 8015efc <_Balloc+0x50>
 8015eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015edc:	68db      	ldr	r3, [r3, #12]
 8015ede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015ee2:	b9b8      	cbnz	r0, 8015f14 <_Balloc+0x68>
 8015ee4:	2101      	movs	r1, #1
 8015ee6:	fa01 f605 	lsl.w	r6, r1, r5
 8015eea:	1d72      	adds	r2, r6, #5
 8015eec:	0092      	lsls	r2, r2, #2
 8015eee:	4620      	mov	r0, r4
 8015ef0:	f000 fc9a 	bl	8016828 <_calloc_r>
 8015ef4:	b160      	cbz	r0, 8015f10 <_Balloc+0x64>
 8015ef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015efa:	e00e      	b.n	8015f1a <_Balloc+0x6e>
 8015efc:	2221      	movs	r2, #33	; 0x21
 8015efe:	2104      	movs	r1, #4
 8015f00:	4620      	mov	r0, r4
 8015f02:	f000 fc91 	bl	8016828 <_calloc_r>
 8015f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f08:	60f0      	str	r0, [r6, #12]
 8015f0a:	68db      	ldr	r3, [r3, #12]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d1e4      	bne.n	8015eda <_Balloc+0x2e>
 8015f10:	2000      	movs	r0, #0
 8015f12:	bd70      	pop	{r4, r5, r6, pc}
 8015f14:	6802      	ldr	r2, [r0, #0]
 8015f16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015f20:	e7f7      	b.n	8015f12 <_Balloc+0x66>
 8015f22:	bf00      	nop
 8015f24:	08017e30 	.word	0x08017e30
 8015f28:	0801806c 	.word	0x0801806c

08015f2c <_Bfree>:
 8015f2c:	b570      	push	{r4, r5, r6, lr}
 8015f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015f30:	4605      	mov	r5, r0
 8015f32:	460c      	mov	r4, r1
 8015f34:	b976      	cbnz	r6, 8015f54 <_Bfree+0x28>
 8015f36:	2010      	movs	r0, #16
 8015f38:	f7ff ff90 	bl	8015e5c <malloc>
 8015f3c:	4602      	mov	r2, r0
 8015f3e:	6268      	str	r0, [r5, #36]	; 0x24
 8015f40:	b920      	cbnz	r0, 8015f4c <_Bfree+0x20>
 8015f42:	4b09      	ldr	r3, [pc, #36]	; (8015f68 <_Bfree+0x3c>)
 8015f44:	4809      	ldr	r0, [pc, #36]	; (8015f6c <_Bfree+0x40>)
 8015f46:	218a      	movs	r1, #138	; 0x8a
 8015f48:	f7ff fbe8 	bl	801571c <__assert_func>
 8015f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015f50:	6006      	str	r6, [r0, #0]
 8015f52:	60c6      	str	r6, [r0, #12]
 8015f54:	b13c      	cbz	r4, 8015f66 <_Bfree+0x3a>
 8015f56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015f58:	6862      	ldr	r2, [r4, #4]
 8015f5a:	68db      	ldr	r3, [r3, #12]
 8015f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015f60:	6021      	str	r1, [r4, #0]
 8015f62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015f66:	bd70      	pop	{r4, r5, r6, pc}
 8015f68:	08017e30 	.word	0x08017e30
 8015f6c:	0801806c 	.word	0x0801806c

08015f70 <__multadd>:
 8015f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f74:	690d      	ldr	r5, [r1, #16]
 8015f76:	4607      	mov	r7, r0
 8015f78:	460c      	mov	r4, r1
 8015f7a:	461e      	mov	r6, r3
 8015f7c:	f101 0c14 	add.w	ip, r1, #20
 8015f80:	2000      	movs	r0, #0
 8015f82:	f8dc 3000 	ldr.w	r3, [ip]
 8015f86:	b299      	uxth	r1, r3
 8015f88:	fb02 6101 	mla	r1, r2, r1, r6
 8015f8c:	0c1e      	lsrs	r6, r3, #16
 8015f8e:	0c0b      	lsrs	r3, r1, #16
 8015f90:	fb02 3306 	mla	r3, r2, r6, r3
 8015f94:	b289      	uxth	r1, r1
 8015f96:	3001      	adds	r0, #1
 8015f98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015f9c:	4285      	cmp	r5, r0
 8015f9e:	f84c 1b04 	str.w	r1, [ip], #4
 8015fa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015fa6:	dcec      	bgt.n	8015f82 <__multadd+0x12>
 8015fa8:	b30e      	cbz	r6, 8015fee <__multadd+0x7e>
 8015faa:	68a3      	ldr	r3, [r4, #8]
 8015fac:	42ab      	cmp	r3, r5
 8015fae:	dc19      	bgt.n	8015fe4 <__multadd+0x74>
 8015fb0:	6861      	ldr	r1, [r4, #4]
 8015fb2:	4638      	mov	r0, r7
 8015fb4:	3101      	adds	r1, #1
 8015fb6:	f7ff ff79 	bl	8015eac <_Balloc>
 8015fba:	4680      	mov	r8, r0
 8015fbc:	b928      	cbnz	r0, 8015fca <__multadd+0x5a>
 8015fbe:	4602      	mov	r2, r0
 8015fc0:	4b0c      	ldr	r3, [pc, #48]	; (8015ff4 <__multadd+0x84>)
 8015fc2:	480d      	ldr	r0, [pc, #52]	; (8015ff8 <__multadd+0x88>)
 8015fc4:	21b5      	movs	r1, #181	; 0xb5
 8015fc6:	f7ff fba9 	bl	801571c <__assert_func>
 8015fca:	6922      	ldr	r2, [r4, #16]
 8015fcc:	3202      	adds	r2, #2
 8015fce:	f104 010c 	add.w	r1, r4, #12
 8015fd2:	0092      	lsls	r2, r2, #2
 8015fd4:	300c      	adds	r0, #12
 8015fd6:	f7ff ff5b 	bl	8015e90 <memcpy>
 8015fda:	4621      	mov	r1, r4
 8015fdc:	4638      	mov	r0, r7
 8015fde:	f7ff ffa5 	bl	8015f2c <_Bfree>
 8015fe2:	4644      	mov	r4, r8
 8015fe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015fe8:	3501      	adds	r5, #1
 8015fea:	615e      	str	r6, [r3, #20]
 8015fec:	6125      	str	r5, [r4, #16]
 8015fee:	4620      	mov	r0, r4
 8015ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ff4:	08017fe1 	.word	0x08017fe1
 8015ff8:	0801806c 	.word	0x0801806c

08015ffc <__s2b>:
 8015ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016000:	460c      	mov	r4, r1
 8016002:	4615      	mov	r5, r2
 8016004:	461f      	mov	r7, r3
 8016006:	2209      	movs	r2, #9
 8016008:	3308      	adds	r3, #8
 801600a:	4606      	mov	r6, r0
 801600c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016010:	2100      	movs	r1, #0
 8016012:	2201      	movs	r2, #1
 8016014:	429a      	cmp	r2, r3
 8016016:	db09      	blt.n	801602c <__s2b+0x30>
 8016018:	4630      	mov	r0, r6
 801601a:	f7ff ff47 	bl	8015eac <_Balloc>
 801601e:	b940      	cbnz	r0, 8016032 <__s2b+0x36>
 8016020:	4602      	mov	r2, r0
 8016022:	4b19      	ldr	r3, [pc, #100]	; (8016088 <__s2b+0x8c>)
 8016024:	4819      	ldr	r0, [pc, #100]	; (801608c <__s2b+0x90>)
 8016026:	21ce      	movs	r1, #206	; 0xce
 8016028:	f7ff fb78 	bl	801571c <__assert_func>
 801602c:	0052      	lsls	r2, r2, #1
 801602e:	3101      	adds	r1, #1
 8016030:	e7f0      	b.n	8016014 <__s2b+0x18>
 8016032:	9b08      	ldr	r3, [sp, #32]
 8016034:	6143      	str	r3, [r0, #20]
 8016036:	2d09      	cmp	r5, #9
 8016038:	f04f 0301 	mov.w	r3, #1
 801603c:	6103      	str	r3, [r0, #16]
 801603e:	dd16      	ble.n	801606e <__s2b+0x72>
 8016040:	f104 0909 	add.w	r9, r4, #9
 8016044:	46c8      	mov	r8, r9
 8016046:	442c      	add	r4, r5
 8016048:	f818 3b01 	ldrb.w	r3, [r8], #1
 801604c:	4601      	mov	r1, r0
 801604e:	3b30      	subs	r3, #48	; 0x30
 8016050:	220a      	movs	r2, #10
 8016052:	4630      	mov	r0, r6
 8016054:	f7ff ff8c 	bl	8015f70 <__multadd>
 8016058:	45a0      	cmp	r8, r4
 801605a:	d1f5      	bne.n	8016048 <__s2b+0x4c>
 801605c:	f1a5 0408 	sub.w	r4, r5, #8
 8016060:	444c      	add	r4, r9
 8016062:	1b2d      	subs	r5, r5, r4
 8016064:	1963      	adds	r3, r4, r5
 8016066:	42bb      	cmp	r3, r7
 8016068:	db04      	blt.n	8016074 <__s2b+0x78>
 801606a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801606e:	340a      	adds	r4, #10
 8016070:	2509      	movs	r5, #9
 8016072:	e7f6      	b.n	8016062 <__s2b+0x66>
 8016074:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016078:	4601      	mov	r1, r0
 801607a:	3b30      	subs	r3, #48	; 0x30
 801607c:	220a      	movs	r2, #10
 801607e:	4630      	mov	r0, r6
 8016080:	f7ff ff76 	bl	8015f70 <__multadd>
 8016084:	e7ee      	b.n	8016064 <__s2b+0x68>
 8016086:	bf00      	nop
 8016088:	08017fe1 	.word	0x08017fe1
 801608c:	0801806c 	.word	0x0801806c

08016090 <__hi0bits>:
 8016090:	0c03      	lsrs	r3, r0, #16
 8016092:	041b      	lsls	r3, r3, #16
 8016094:	b9d3      	cbnz	r3, 80160cc <__hi0bits+0x3c>
 8016096:	0400      	lsls	r0, r0, #16
 8016098:	2310      	movs	r3, #16
 801609a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801609e:	bf04      	itt	eq
 80160a0:	0200      	lsleq	r0, r0, #8
 80160a2:	3308      	addeq	r3, #8
 80160a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80160a8:	bf04      	itt	eq
 80160aa:	0100      	lsleq	r0, r0, #4
 80160ac:	3304      	addeq	r3, #4
 80160ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80160b2:	bf04      	itt	eq
 80160b4:	0080      	lsleq	r0, r0, #2
 80160b6:	3302      	addeq	r3, #2
 80160b8:	2800      	cmp	r0, #0
 80160ba:	db05      	blt.n	80160c8 <__hi0bits+0x38>
 80160bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80160c0:	f103 0301 	add.w	r3, r3, #1
 80160c4:	bf08      	it	eq
 80160c6:	2320      	moveq	r3, #32
 80160c8:	4618      	mov	r0, r3
 80160ca:	4770      	bx	lr
 80160cc:	2300      	movs	r3, #0
 80160ce:	e7e4      	b.n	801609a <__hi0bits+0xa>

080160d0 <__lo0bits>:
 80160d0:	6803      	ldr	r3, [r0, #0]
 80160d2:	f013 0207 	ands.w	r2, r3, #7
 80160d6:	4601      	mov	r1, r0
 80160d8:	d00b      	beq.n	80160f2 <__lo0bits+0x22>
 80160da:	07da      	lsls	r2, r3, #31
 80160dc:	d423      	bmi.n	8016126 <__lo0bits+0x56>
 80160de:	0798      	lsls	r0, r3, #30
 80160e0:	bf49      	itett	mi
 80160e2:	085b      	lsrmi	r3, r3, #1
 80160e4:	089b      	lsrpl	r3, r3, #2
 80160e6:	2001      	movmi	r0, #1
 80160e8:	600b      	strmi	r3, [r1, #0]
 80160ea:	bf5c      	itt	pl
 80160ec:	600b      	strpl	r3, [r1, #0]
 80160ee:	2002      	movpl	r0, #2
 80160f0:	4770      	bx	lr
 80160f2:	b298      	uxth	r0, r3
 80160f4:	b9a8      	cbnz	r0, 8016122 <__lo0bits+0x52>
 80160f6:	0c1b      	lsrs	r3, r3, #16
 80160f8:	2010      	movs	r0, #16
 80160fa:	b2da      	uxtb	r2, r3
 80160fc:	b90a      	cbnz	r2, 8016102 <__lo0bits+0x32>
 80160fe:	3008      	adds	r0, #8
 8016100:	0a1b      	lsrs	r3, r3, #8
 8016102:	071a      	lsls	r2, r3, #28
 8016104:	bf04      	itt	eq
 8016106:	091b      	lsreq	r3, r3, #4
 8016108:	3004      	addeq	r0, #4
 801610a:	079a      	lsls	r2, r3, #30
 801610c:	bf04      	itt	eq
 801610e:	089b      	lsreq	r3, r3, #2
 8016110:	3002      	addeq	r0, #2
 8016112:	07da      	lsls	r2, r3, #31
 8016114:	d403      	bmi.n	801611e <__lo0bits+0x4e>
 8016116:	085b      	lsrs	r3, r3, #1
 8016118:	f100 0001 	add.w	r0, r0, #1
 801611c:	d005      	beq.n	801612a <__lo0bits+0x5a>
 801611e:	600b      	str	r3, [r1, #0]
 8016120:	4770      	bx	lr
 8016122:	4610      	mov	r0, r2
 8016124:	e7e9      	b.n	80160fa <__lo0bits+0x2a>
 8016126:	2000      	movs	r0, #0
 8016128:	4770      	bx	lr
 801612a:	2020      	movs	r0, #32
 801612c:	4770      	bx	lr
	...

08016130 <__i2b>:
 8016130:	b510      	push	{r4, lr}
 8016132:	460c      	mov	r4, r1
 8016134:	2101      	movs	r1, #1
 8016136:	f7ff feb9 	bl	8015eac <_Balloc>
 801613a:	4602      	mov	r2, r0
 801613c:	b928      	cbnz	r0, 801614a <__i2b+0x1a>
 801613e:	4b05      	ldr	r3, [pc, #20]	; (8016154 <__i2b+0x24>)
 8016140:	4805      	ldr	r0, [pc, #20]	; (8016158 <__i2b+0x28>)
 8016142:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016146:	f7ff fae9 	bl	801571c <__assert_func>
 801614a:	2301      	movs	r3, #1
 801614c:	6144      	str	r4, [r0, #20]
 801614e:	6103      	str	r3, [r0, #16]
 8016150:	bd10      	pop	{r4, pc}
 8016152:	bf00      	nop
 8016154:	08017fe1 	.word	0x08017fe1
 8016158:	0801806c 	.word	0x0801806c

0801615c <__multiply>:
 801615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016160:	4691      	mov	r9, r2
 8016162:	690a      	ldr	r2, [r1, #16]
 8016164:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016168:	429a      	cmp	r2, r3
 801616a:	bfb8      	it	lt
 801616c:	460b      	movlt	r3, r1
 801616e:	460c      	mov	r4, r1
 8016170:	bfbc      	itt	lt
 8016172:	464c      	movlt	r4, r9
 8016174:	4699      	movlt	r9, r3
 8016176:	6927      	ldr	r7, [r4, #16]
 8016178:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801617c:	68a3      	ldr	r3, [r4, #8]
 801617e:	6861      	ldr	r1, [r4, #4]
 8016180:	eb07 060a 	add.w	r6, r7, sl
 8016184:	42b3      	cmp	r3, r6
 8016186:	b085      	sub	sp, #20
 8016188:	bfb8      	it	lt
 801618a:	3101      	addlt	r1, #1
 801618c:	f7ff fe8e 	bl	8015eac <_Balloc>
 8016190:	b930      	cbnz	r0, 80161a0 <__multiply+0x44>
 8016192:	4602      	mov	r2, r0
 8016194:	4b44      	ldr	r3, [pc, #272]	; (80162a8 <__multiply+0x14c>)
 8016196:	4845      	ldr	r0, [pc, #276]	; (80162ac <__multiply+0x150>)
 8016198:	f240 115d 	movw	r1, #349	; 0x15d
 801619c:	f7ff fabe 	bl	801571c <__assert_func>
 80161a0:	f100 0514 	add.w	r5, r0, #20
 80161a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80161a8:	462b      	mov	r3, r5
 80161aa:	2200      	movs	r2, #0
 80161ac:	4543      	cmp	r3, r8
 80161ae:	d321      	bcc.n	80161f4 <__multiply+0x98>
 80161b0:	f104 0314 	add.w	r3, r4, #20
 80161b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80161b8:	f109 0314 	add.w	r3, r9, #20
 80161bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80161c0:	9202      	str	r2, [sp, #8]
 80161c2:	1b3a      	subs	r2, r7, r4
 80161c4:	3a15      	subs	r2, #21
 80161c6:	f022 0203 	bic.w	r2, r2, #3
 80161ca:	3204      	adds	r2, #4
 80161cc:	f104 0115 	add.w	r1, r4, #21
 80161d0:	428f      	cmp	r7, r1
 80161d2:	bf38      	it	cc
 80161d4:	2204      	movcc	r2, #4
 80161d6:	9201      	str	r2, [sp, #4]
 80161d8:	9a02      	ldr	r2, [sp, #8]
 80161da:	9303      	str	r3, [sp, #12]
 80161dc:	429a      	cmp	r2, r3
 80161de:	d80c      	bhi.n	80161fa <__multiply+0x9e>
 80161e0:	2e00      	cmp	r6, #0
 80161e2:	dd03      	ble.n	80161ec <__multiply+0x90>
 80161e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d05a      	beq.n	80162a2 <__multiply+0x146>
 80161ec:	6106      	str	r6, [r0, #16]
 80161ee:	b005      	add	sp, #20
 80161f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161f4:	f843 2b04 	str.w	r2, [r3], #4
 80161f8:	e7d8      	b.n	80161ac <__multiply+0x50>
 80161fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80161fe:	f1ba 0f00 	cmp.w	sl, #0
 8016202:	d024      	beq.n	801624e <__multiply+0xf2>
 8016204:	f104 0e14 	add.w	lr, r4, #20
 8016208:	46a9      	mov	r9, r5
 801620a:	f04f 0c00 	mov.w	ip, #0
 801620e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016212:	f8d9 1000 	ldr.w	r1, [r9]
 8016216:	fa1f fb82 	uxth.w	fp, r2
 801621a:	b289      	uxth	r1, r1
 801621c:	fb0a 110b 	mla	r1, sl, fp, r1
 8016220:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016224:	f8d9 2000 	ldr.w	r2, [r9]
 8016228:	4461      	add	r1, ip
 801622a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801622e:	fb0a c20b 	mla	r2, sl, fp, ip
 8016232:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016236:	b289      	uxth	r1, r1
 8016238:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801623c:	4577      	cmp	r7, lr
 801623e:	f849 1b04 	str.w	r1, [r9], #4
 8016242:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016246:	d8e2      	bhi.n	801620e <__multiply+0xb2>
 8016248:	9a01      	ldr	r2, [sp, #4]
 801624a:	f845 c002 	str.w	ip, [r5, r2]
 801624e:	9a03      	ldr	r2, [sp, #12]
 8016250:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016254:	3304      	adds	r3, #4
 8016256:	f1b9 0f00 	cmp.w	r9, #0
 801625a:	d020      	beq.n	801629e <__multiply+0x142>
 801625c:	6829      	ldr	r1, [r5, #0]
 801625e:	f104 0c14 	add.w	ip, r4, #20
 8016262:	46ae      	mov	lr, r5
 8016264:	f04f 0a00 	mov.w	sl, #0
 8016268:	f8bc b000 	ldrh.w	fp, [ip]
 801626c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016270:	fb09 220b 	mla	r2, r9, fp, r2
 8016274:	4492      	add	sl, r2
 8016276:	b289      	uxth	r1, r1
 8016278:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801627c:	f84e 1b04 	str.w	r1, [lr], #4
 8016280:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016284:	f8be 1000 	ldrh.w	r1, [lr]
 8016288:	0c12      	lsrs	r2, r2, #16
 801628a:	fb09 1102 	mla	r1, r9, r2, r1
 801628e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016292:	4567      	cmp	r7, ip
 8016294:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016298:	d8e6      	bhi.n	8016268 <__multiply+0x10c>
 801629a:	9a01      	ldr	r2, [sp, #4]
 801629c:	50a9      	str	r1, [r5, r2]
 801629e:	3504      	adds	r5, #4
 80162a0:	e79a      	b.n	80161d8 <__multiply+0x7c>
 80162a2:	3e01      	subs	r6, #1
 80162a4:	e79c      	b.n	80161e0 <__multiply+0x84>
 80162a6:	bf00      	nop
 80162a8:	08017fe1 	.word	0x08017fe1
 80162ac:	0801806c 	.word	0x0801806c

080162b0 <__pow5mult>:
 80162b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162b4:	4615      	mov	r5, r2
 80162b6:	f012 0203 	ands.w	r2, r2, #3
 80162ba:	4606      	mov	r6, r0
 80162bc:	460f      	mov	r7, r1
 80162be:	d007      	beq.n	80162d0 <__pow5mult+0x20>
 80162c0:	4c25      	ldr	r4, [pc, #148]	; (8016358 <__pow5mult+0xa8>)
 80162c2:	3a01      	subs	r2, #1
 80162c4:	2300      	movs	r3, #0
 80162c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80162ca:	f7ff fe51 	bl	8015f70 <__multadd>
 80162ce:	4607      	mov	r7, r0
 80162d0:	10ad      	asrs	r5, r5, #2
 80162d2:	d03d      	beq.n	8016350 <__pow5mult+0xa0>
 80162d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80162d6:	b97c      	cbnz	r4, 80162f8 <__pow5mult+0x48>
 80162d8:	2010      	movs	r0, #16
 80162da:	f7ff fdbf 	bl	8015e5c <malloc>
 80162de:	4602      	mov	r2, r0
 80162e0:	6270      	str	r0, [r6, #36]	; 0x24
 80162e2:	b928      	cbnz	r0, 80162f0 <__pow5mult+0x40>
 80162e4:	4b1d      	ldr	r3, [pc, #116]	; (801635c <__pow5mult+0xac>)
 80162e6:	481e      	ldr	r0, [pc, #120]	; (8016360 <__pow5mult+0xb0>)
 80162e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80162ec:	f7ff fa16 	bl	801571c <__assert_func>
 80162f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80162f4:	6004      	str	r4, [r0, #0]
 80162f6:	60c4      	str	r4, [r0, #12]
 80162f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80162fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016300:	b94c      	cbnz	r4, 8016316 <__pow5mult+0x66>
 8016302:	f240 2171 	movw	r1, #625	; 0x271
 8016306:	4630      	mov	r0, r6
 8016308:	f7ff ff12 	bl	8016130 <__i2b>
 801630c:	2300      	movs	r3, #0
 801630e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016312:	4604      	mov	r4, r0
 8016314:	6003      	str	r3, [r0, #0]
 8016316:	f04f 0900 	mov.w	r9, #0
 801631a:	07eb      	lsls	r3, r5, #31
 801631c:	d50a      	bpl.n	8016334 <__pow5mult+0x84>
 801631e:	4639      	mov	r1, r7
 8016320:	4622      	mov	r2, r4
 8016322:	4630      	mov	r0, r6
 8016324:	f7ff ff1a 	bl	801615c <__multiply>
 8016328:	4639      	mov	r1, r7
 801632a:	4680      	mov	r8, r0
 801632c:	4630      	mov	r0, r6
 801632e:	f7ff fdfd 	bl	8015f2c <_Bfree>
 8016332:	4647      	mov	r7, r8
 8016334:	106d      	asrs	r5, r5, #1
 8016336:	d00b      	beq.n	8016350 <__pow5mult+0xa0>
 8016338:	6820      	ldr	r0, [r4, #0]
 801633a:	b938      	cbnz	r0, 801634c <__pow5mult+0x9c>
 801633c:	4622      	mov	r2, r4
 801633e:	4621      	mov	r1, r4
 8016340:	4630      	mov	r0, r6
 8016342:	f7ff ff0b 	bl	801615c <__multiply>
 8016346:	6020      	str	r0, [r4, #0]
 8016348:	f8c0 9000 	str.w	r9, [r0]
 801634c:	4604      	mov	r4, r0
 801634e:	e7e4      	b.n	801631a <__pow5mult+0x6a>
 8016350:	4638      	mov	r0, r7
 8016352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016356:	bf00      	nop
 8016358:	080181b8 	.word	0x080181b8
 801635c:	08017e30 	.word	0x08017e30
 8016360:	0801806c 	.word	0x0801806c

08016364 <__lshift>:
 8016364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016368:	460c      	mov	r4, r1
 801636a:	6849      	ldr	r1, [r1, #4]
 801636c:	6923      	ldr	r3, [r4, #16]
 801636e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016372:	68a3      	ldr	r3, [r4, #8]
 8016374:	4607      	mov	r7, r0
 8016376:	4691      	mov	r9, r2
 8016378:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801637c:	f108 0601 	add.w	r6, r8, #1
 8016380:	42b3      	cmp	r3, r6
 8016382:	db0b      	blt.n	801639c <__lshift+0x38>
 8016384:	4638      	mov	r0, r7
 8016386:	f7ff fd91 	bl	8015eac <_Balloc>
 801638a:	4605      	mov	r5, r0
 801638c:	b948      	cbnz	r0, 80163a2 <__lshift+0x3e>
 801638e:	4602      	mov	r2, r0
 8016390:	4b2a      	ldr	r3, [pc, #168]	; (801643c <__lshift+0xd8>)
 8016392:	482b      	ldr	r0, [pc, #172]	; (8016440 <__lshift+0xdc>)
 8016394:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016398:	f7ff f9c0 	bl	801571c <__assert_func>
 801639c:	3101      	adds	r1, #1
 801639e:	005b      	lsls	r3, r3, #1
 80163a0:	e7ee      	b.n	8016380 <__lshift+0x1c>
 80163a2:	2300      	movs	r3, #0
 80163a4:	f100 0114 	add.w	r1, r0, #20
 80163a8:	f100 0210 	add.w	r2, r0, #16
 80163ac:	4618      	mov	r0, r3
 80163ae:	4553      	cmp	r3, sl
 80163b0:	db37      	blt.n	8016422 <__lshift+0xbe>
 80163b2:	6920      	ldr	r0, [r4, #16]
 80163b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80163b8:	f104 0314 	add.w	r3, r4, #20
 80163bc:	f019 091f 	ands.w	r9, r9, #31
 80163c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80163c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80163c8:	d02f      	beq.n	801642a <__lshift+0xc6>
 80163ca:	f1c9 0e20 	rsb	lr, r9, #32
 80163ce:	468a      	mov	sl, r1
 80163d0:	f04f 0c00 	mov.w	ip, #0
 80163d4:	681a      	ldr	r2, [r3, #0]
 80163d6:	fa02 f209 	lsl.w	r2, r2, r9
 80163da:	ea42 020c 	orr.w	r2, r2, ip
 80163de:	f84a 2b04 	str.w	r2, [sl], #4
 80163e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80163e6:	4298      	cmp	r0, r3
 80163e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80163ec:	d8f2      	bhi.n	80163d4 <__lshift+0x70>
 80163ee:	1b03      	subs	r3, r0, r4
 80163f0:	3b15      	subs	r3, #21
 80163f2:	f023 0303 	bic.w	r3, r3, #3
 80163f6:	3304      	adds	r3, #4
 80163f8:	f104 0215 	add.w	r2, r4, #21
 80163fc:	4290      	cmp	r0, r2
 80163fe:	bf38      	it	cc
 8016400:	2304      	movcc	r3, #4
 8016402:	f841 c003 	str.w	ip, [r1, r3]
 8016406:	f1bc 0f00 	cmp.w	ip, #0
 801640a:	d001      	beq.n	8016410 <__lshift+0xac>
 801640c:	f108 0602 	add.w	r6, r8, #2
 8016410:	3e01      	subs	r6, #1
 8016412:	4638      	mov	r0, r7
 8016414:	612e      	str	r6, [r5, #16]
 8016416:	4621      	mov	r1, r4
 8016418:	f7ff fd88 	bl	8015f2c <_Bfree>
 801641c:	4628      	mov	r0, r5
 801641e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016422:	f842 0f04 	str.w	r0, [r2, #4]!
 8016426:	3301      	adds	r3, #1
 8016428:	e7c1      	b.n	80163ae <__lshift+0x4a>
 801642a:	3904      	subs	r1, #4
 801642c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016430:	f841 2f04 	str.w	r2, [r1, #4]!
 8016434:	4298      	cmp	r0, r3
 8016436:	d8f9      	bhi.n	801642c <__lshift+0xc8>
 8016438:	e7ea      	b.n	8016410 <__lshift+0xac>
 801643a:	bf00      	nop
 801643c:	08017fe1 	.word	0x08017fe1
 8016440:	0801806c 	.word	0x0801806c

08016444 <__mcmp>:
 8016444:	b530      	push	{r4, r5, lr}
 8016446:	6902      	ldr	r2, [r0, #16]
 8016448:	690c      	ldr	r4, [r1, #16]
 801644a:	1b12      	subs	r2, r2, r4
 801644c:	d10e      	bne.n	801646c <__mcmp+0x28>
 801644e:	f100 0314 	add.w	r3, r0, #20
 8016452:	3114      	adds	r1, #20
 8016454:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016458:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801645c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016460:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016464:	42a5      	cmp	r5, r4
 8016466:	d003      	beq.n	8016470 <__mcmp+0x2c>
 8016468:	d305      	bcc.n	8016476 <__mcmp+0x32>
 801646a:	2201      	movs	r2, #1
 801646c:	4610      	mov	r0, r2
 801646e:	bd30      	pop	{r4, r5, pc}
 8016470:	4283      	cmp	r3, r0
 8016472:	d3f3      	bcc.n	801645c <__mcmp+0x18>
 8016474:	e7fa      	b.n	801646c <__mcmp+0x28>
 8016476:	f04f 32ff 	mov.w	r2, #4294967295
 801647a:	e7f7      	b.n	801646c <__mcmp+0x28>

0801647c <__mdiff>:
 801647c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016480:	460c      	mov	r4, r1
 8016482:	4606      	mov	r6, r0
 8016484:	4611      	mov	r1, r2
 8016486:	4620      	mov	r0, r4
 8016488:	4690      	mov	r8, r2
 801648a:	f7ff ffdb 	bl	8016444 <__mcmp>
 801648e:	1e05      	subs	r5, r0, #0
 8016490:	d110      	bne.n	80164b4 <__mdiff+0x38>
 8016492:	4629      	mov	r1, r5
 8016494:	4630      	mov	r0, r6
 8016496:	f7ff fd09 	bl	8015eac <_Balloc>
 801649a:	b930      	cbnz	r0, 80164aa <__mdiff+0x2e>
 801649c:	4b3a      	ldr	r3, [pc, #232]	; (8016588 <__mdiff+0x10c>)
 801649e:	4602      	mov	r2, r0
 80164a0:	f240 2132 	movw	r1, #562	; 0x232
 80164a4:	4839      	ldr	r0, [pc, #228]	; (801658c <__mdiff+0x110>)
 80164a6:	f7ff f939 	bl	801571c <__assert_func>
 80164aa:	2301      	movs	r3, #1
 80164ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80164b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b4:	bfa4      	itt	ge
 80164b6:	4643      	movge	r3, r8
 80164b8:	46a0      	movge	r8, r4
 80164ba:	4630      	mov	r0, r6
 80164bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80164c0:	bfa6      	itte	ge
 80164c2:	461c      	movge	r4, r3
 80164c4:	2500      	movge	r5, #0
 80164c6:	2501      	movlt	r5, #1
 80164c8:	f7ff fcf0 	bl	8015eac <_Balloc>
 80164cc:	b920      	cbnz	r0, 80164d8 <__mdiff+0x5c>
 80164ce:	4b2e      	ldr	r3, [pc, #184]	; (8016588 <__mdiff+0x10c>)
 80164d0:	4602      	mov	r2, r0
 80164d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80164d6:	e7e5      	b.n	80164a4 <__mdiff+0x28>
 80164d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80164dc:	6926      	ldr	r6, [r4, #16]
 80164de:	60c5      	str	r5, [r0, #12]
 80164e0:	f104 0914 	add.w	r9, r4, #20
 80164e4:	f108 0514 	add.w	r5, r8, #20
 80164e8:	f100 0e14 	add.w	lr, r0, #20
 80164ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80164f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80164f4:	f108 0210 	add.w	r2, r8, #16
 80164f8:	46f2      	mov	sl, lr
 80164fa:	2100      	movs	r1, #0
 80164fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8016500:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016504:	fa1f f883 	uxth.w	r8, r3
 8016508:	fa11 f18b 	uxtah	r1, r1, fp
 801650c:	0c1b      	lsrs	r3, r3, #16
 801650e:	eba1 0808 	sub.w	r8, r1, r8
 8016512:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016516:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801651a:	fa1f f888 	uxth.w	r8, r8
 801651e:	1419      	asrs	r1, r3, #16
 8016520:	454e      	cmp	r6, r9
 8016522:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016526:	f84a 3b04 	str.w	r3, [sl], #4
 801652a:	d8e7      	bhi.n	80164fc <__mdiff+0x80>
 801652c:	1b33      	subs	r3, r6, r4
 801652e:	3b15      	subs	r3, #21
 8016530:	f023 0303 	bic.w	r3, r3, #3
 8016534:	3304      	adds	r3, #4
 8016536:	3415      	adds	r4, #21
 8016538:	42a6      	cmp	r6, r4
 801653a:	bf38      	it	cc
 801653c:	2304      	movcc	r3, #4
 801653e:	441d      	add	r5, r3
 8016540:	4473      	add	r3, lr
 8016542:	469e      	mov	lr, r3
 8016544:	462e      	mov	r6, r5
 8016546:	4566      	cmp	r6, ip
 8016548:	d30e      	bcc.n	8016568 <__mdiff+0xec>
 801654a:	f10c 0203 	add.w	r2, ip, #3
 801654e:	1b52      	subs	r2, r2, r5
 8016550:	f022 0203 	bic.w	r2, r2, #3
 8016554:	3d03      	subs	r5, #3
 8016556:	45ac      	cmp	ip, r5
 8016558:	bf38      	it	cc
 801655a:	2200      	movcc	r2, #0
 801655c:	441a      	add	r2, r3
 801655e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016562:	b17b      	cbz	r3, 8016584 <__mdiff+0x108>
 8016564:	6107      	str	r7, [r0, #16]
 8016566:	e7a3      	b.n	80164b0 <__mdiff+0x34>
 8016568:	f856 8b04 	ldr.w	r8, [r6], #4
 801656c:	fa11 f288 	uxtah	r2, r1, r8
 8016570:	1414      	asrs	r4, r2, #16
 8016572:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016576:	b292      	uxth	r2, r2
 8016578:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801657c:	f84e 2b04 	str.w	r2, [lr], #4
 8016580:	1421      	asrs	r1, r4, #16
 8016582:	e7e0      	b.n	8016546 <__mdiff+0xca>
 8016584:	3f01      	subs	r7, #1
 8016586:	e7ea      	b.n	801655e <__mdiff+0xe2>
 8016588:	08017fe1 	.word	0x08017fe1
 801658c:	0801806c 	.word	0x0801806c

08016590 <__ulp>:
 8016590:	b082      	sub	sp, #8
 8016592:	ed8d 0b00 	vstr	d0, [sp]
 8016596:	9b01      	ldr	r3, [sp, #4]
 8016598:	4912      	ldr	r1, [pc, #72]	; (80165e4 <__ulp+0x54>)
 801659a:	4019      	ands	r1, r3
 801659c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80165a0:	2900      	cmp	r1, #0
 80165a2:	dd05      	ble.n	80165b0 <__ulp+0x20>
 80165a4:	2200      	movs	r2, #0
 80165a6:	460b      	mov	r3, r1
 80165a8:	ec43 2b10 	vmov	d0, r2, r3
 80165ac:	b002      	add	sp, #8
 80165ae:	4770      	bx	lr
 80165b0:	4249      	negs	r1, r1
 80165b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80165b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80165ba:	f04f 0200 	mov.w	r2, #0
 80165be:	f04f 0300 	mov.w	r3, #0
 80165c2:	da04      	bge.n	80165ce <__ulp+0x3e>
 80165c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80165c8:	fa41 f300 	asr.w	r3, r1, r0
 80165cc:	e7ec      	b.n	80165a8 <__ulp+0x18>
 80165ce:	f1a0 0114 	sub.w	r1, r0, #20
 80165d2:	291e      	cmp	r1, #30
 80165d4:	bfda      	itte	le
 80165d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80165da:	fa20 f101 	lsrle.w	r1, r0, r1
 80165de:	2101      	movgt	r1, #1
 80165e0:	460a      	mov	r2, r1
 80165e2:	e7e1      	b.n	80165a8 <__ulp+0x18>
 80165e4:	7ff00000 	.word	0x7ff00000

080165e8 <__b2d>:
 80165e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ea:	6905      	ldr	r5, [r0, #16]
 80165ec:	f100 0714 	add.w	r7, r0, #20
 80165f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80165f4:	1f2e      	subs	r6, r5, #4
 80165f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80165fa:	4620      	mov	r0, r4
 80165fc:	f7ff fd48 	bl	8016090 <__hi0bits>
 8016600:	f1c0 0320 	rsb	r3, r0, #32
 8016604:	280a      	cmp	r0, #10
 8016606:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016684 <__b2d+0x9c>
 801660a:	600b      	str	r3, [r1, #0]
 801660c:	dc14      	bgt.n	8016638 <__b2d+0x50>
 801660e:	f1c0 0e0b 	rsb	lr, r0, #11
 8016612:	fa24 f10e 	lsr.w	r1, r4, lr
 8016616:	42b7      	cmp	r7, r6
 8016618:	ea41 030c 	orr.w	r3, r1, ip
 801661c:	bf34      	ite	cc
 801661e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016622:	2100      	movcs	r1, #0
 8016624:	3015      	adds	r0, #21
 8016626:	fa04 f000 	lsl.w	r0, r4, r0
 801662a:	fa21 f10e 	lsr.w	r1, r1, lr
 801662e:	ea40 0201 	orr.w	r2, r0, r1
 8016632:	ec43 2b10 	vmov	d0, r2, r3
 8016636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016638:	42b7      	cmp	r7, r6
 801663a:	bf3a      	itte	cc
 801663c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016640:	f1a5 0608 	subcc.w	r6, r5, #8
 8016644:	2100      	movcs	r1, #0
 8016646:	380b      	subs	r0, #11
 8016648:	d017      	beq.n	801667a <__b2d+0x92>
 801664a:	f1c0 0c20 	rsb	ip, r0, #32
 801664e:	fa04 f500 	lsl.w	r5, r4, r0
 8016652:	42be      	cmp	r6, r7
 8016654:	fa21 f40c 	lsr.w	r4, r1, ip
 8016658:	ea45 0504 	orr.w	r5, r5, r4
 801665c:	bf8c      	ite	hi
 801665e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016662:	2400      	movls	r4, #0
 8016664:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016668:	fa01 f000 	lsl.w	r0, r1, r0
 801666c:	fa24 f40c 	lsr.w	r4, r4, ip
 8016670:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016674:	ea40 0204 	orr.w	r2, r0, r4
 8016678:	e7db      	b.n	8016632 <__b2d+0x4a>
 801667a:	ea44 030c 	orr.w	r3, r4, ip
 801667e:	460a      	mov	r2, r1
 8016680:	e7d7      	b.n	8016632 <__b2d+0x4a>
 8016682:	bf00      	nop
 8016684:	3ff00000 	.word	0x3ff00000

08016688 <__d2b>:
 8016688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801668c:	4689      	mov	r9, r1
 801668e:	2101      	movs	r1, #1
 8016690:	ec57 6b10 	vmov	r6, r7, d0
 8016694:	4690      	mov	r8, r2
 8016696:	f7ff fc09 	bl	8015eac <_Balloc>
 801669a:	4604      	mov	r4, r0
 801669c:	b930      	cbnz	r0, 80166ac <__d2b+0x24>
 801669e:	4602      	mov	r2, r0
 80166a0:	4b25      	ldr	r3, [pc, #148]	; (8016738 <__d2b+0xb0>)
 80166a2:	4826      	ldr	r0, [pc, #152]	; (801673c <__d2b+0xb4>)
 80166a4:	f240 310a 	movw	r1, #778	; 0x30a
 80166a8:	f7ff f838 	bl	801571c <__assert_func>
 80166ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80166b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80166b4:	bb35      	cbnz	r5, 8016704 <__d2b+0x7c>
 80166b6:	2e00      	cmp	r6, #0
 80166b8:	9301      	str	r3, [sp, #4]
 80166ba:	d028      	beq.n	801670e <__d2b+0x86>
 80166bc:	4668      	mov	r0, sp
 80166be:	9600      	str	r6, [sp, #0]
 80166c0:	f7ff fd06 	bl	80160d0 <__lo0bits>
 80166c4:	9900      	ldr	r1, [sp, #0]
 80166c6:	b300      	cbz	r0, 801670a <__d2b+0x82>
 80166c8:	9a01      	ldr	r2, [sp, #4]
 80166ca:	f1c0 0320 	rsb	r3, r0, #32
 80166ce:	fa02 f303 	lsl.w	r3, r2, r3
 80166d2:	430b      	orrs	r3, r1
 80166d4:	40c2      	lsrs	r2, r0
 80166d6:	6163      	str	r3, [r4, #20]
 80166d8:	9201      	str	r2, [sp, #4]
 80166da:	9b01      	ldr	r3, [sp, #4]
 80166dc:	61a3      	str	r3, [r4, #24]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	bf14      	ite	ne
 80166e2:	2202      	movne	r2, #2
 80166e4:	2201      	moveq	r2, #1
 80166e6:	6122      	str	r2, [r4, #16]
 80166e8:	b1d5      	cbz	r5, 8016720 <__d2b+0x98>
 80166ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80166ee:	4405      	add	r5, r0
 80166f0:	f8c9 5000 	str.w	r5, [r9]
 80166f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80166f8:	f8c8 0000 	str.w	r0, [r8]
 80166fc:	4620      	mov	r0, r4
 80166fe:	b003      	add	sp, #12
 8016700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016708:	e7d5      	b.n	80166b6 <__d2b+0x2e>
 801670a:	6161      	str	r1, [r4, #20]
 801670c:	e7e5      	b.n	80166da <__d2b+0x52>
 801670e:	a801      	add	r0, sp, #4
 8016710:	f7ff fcde 	bl	80160d0 <__lo0bits>
 8016714:	9b01      	ldr	r3, [sp, #4]
 8016716:	6163      	str	r3, [r4, #20]
 8016718:	2201      	movs	r2, #1
 801671a:	6122      	str	r2, [r4, #16]
 801671c:	3020      	adds	r0, #32
 801671e:	e7e3      	b.n	80166e8 <__d2b+0x60>
 8016720:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016724:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016728:	f8c9 0000 	str.w	r0, [r9]
 801672c:	6918      	ldr	r0, [r3, #16]
 801672e:	f7ff fcaf 	bl	8016090 <__hi0bits>
 8016732:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016736:	e7df      	b.n	80166f8 <__d2b+0x70>
 8016738:	08017fe1 	.word	0x08017fe1
 801673c:	0801806c 	.word	0x0801806c

08016740 <__ratio>:
 8016740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016744:	4688      	mov	r8, r1
 8016746:	4669      	mov	r1, sp
 8016748:	4681      	mov	r9, r0
 801674a:	f7ff ff4d 	bl	80165e8 <__b2d>
 801674e:	a901      	add	r1, sp, #4
 8016750:	4640      	mov	r0, r8
 8016752:	ec55 4b10 	vmov	r4, r5, d0
 8016756:	ee10 aa10 	vmov	sl, s0
 801675a:	f7ff ff45 	bl	80165e8 <__b2d>
 801675e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016762:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016766:	1a59      	subs	r1, r3, r1
 8016768:	e9dd 2300 	ldrd	r2, r3, [sp]
 801676c:	1ad3      	subs	r3, r2, r3
 801676e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016772:	ec57 6b10 	vmov	r6, r7, d0
 8016776:	2b00      	cmp	r3, #0
 8016778:	bfd6      	itet	le
 801677a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801677e:	462a      	movgt	r2, r5
 8016780:	463a      	movle	r2, r7
 8016782:	46ab      	mov	fp, r5
 8016784:	bfd6      	itet	le
 8016786:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801678a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801678e:	ee00 3a90 	vmovle	s1, r3
 8016792:	ec4b ab17 	vmov	d7, sl, fp
 8016796:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801679a:	b003      	add	sp, #12
 801679c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167a0 <__copybits>:
 80167a0:	3901      	subs	r1, #1
 80167a2:	b570      	push	{r4, r5, r6, lr}
 80167a4:	1149      	asrs	r1, r1, #5
 80167a6:	6914      	ldr	r4, [r2, #16]
 80167a8:	3101      	adds	r1, #1
 80167aa:	f102 0314 	add.w	r3, r2, #20
 80167ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80167b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80167b6:	1f05      	subs	r5, r0, #4
 80167b8:	42a3      	cmp	r3, r4
 80167ba:	d30c      	bcc.n	80167d6 <__copybits+0x36>
 80167bc:	1aa3      	subs	r3, r4, r2
 80167be:	3b11      	subs	r3, #17
 80167c0:	f023 0303 	bic.w	r3, r3, #3
 80167c4:	3211      	adds	r2, #17
 80167c6:	42a2      	cmp	r2, r4
 80167c8:	bf88      	it	hi
 80167ca:	2300      	movhi	r3, #0
 80167cc:	4418      	add	r0, r3
 80167ce:	2300      	movs	r3, #0
 80167d0:	4288      	cmp	r0, r1
 80167d2:	d305      	bcc.n	80167e0 <__copybits+0x40>
 80167d4:	bd70      	pop	{r4, r5, r6, pc}
 80167d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80167da:	f845 6f04 	str.w	r6, [r5, #4]!
 80167de:	e7eb      	b.n	80167b8 <__copybits+0x18>
 80167e0:	f840 3b04 	str.w	r3, [r0], #4
 80167e4:	e7f4      	b.n	80167d0 <__copybits+0x30>

080167e6 <__any_on>:
 80167e6:	f100 0214 	add.w	r2, r0, #20
 80167ea:	6900      	ldr	r0, [r0, #16]
 80167ec:	114b      	asrs	r3, r1, #5
 80167ee:	4298      	cmp	r0, r3
 80167f0:	b510      	push	{r4, lr}
 80167f2:	db11      	blt.n	8016818 <__any_on+0x32>
 80167f4:	dd0a      	ble.n	801680c <__any_on+0x26>
 80167f6:	f011 011f 	ands.w	r1, r1, #31
 80167fa:	d007      	beq.n	801680c <__any_on+0x26>
 80167fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016800:	fa24 f001 	lsr.w	r0, r4, r1
 8016804:	fa00 f101 	lsl.w	r1, r0, r1
 8016808:	428c      	cmp	r4, r1
 801680a:	d10b      	bne.n	8016824 <__any_on+0x3e>
 801680c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016810:	4293      	cmp	r3, r2
 8016812:	d803      	bhi.n	801681c <__any_on+0x36>
 8016814:	2000      	movs	r0, #0
 8016816:	bd10      	pop	{r4, pc}
 8016818:	4603      	mov	r3, r0
 801681a:	e7f7      	b.n	801680c <__any_on+0x26>
 801681c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016820:	2900      	cmp	r1, #0
 8016822:	d0f5      	beq.n	8016810 <__any_on+0x2a>
 8016824:	2001      	movs	r0, #1
 8016826:	e7f6      	b.n	8016816 <__any_on+0x30>

08016828 <_calloc_r>:
 8016828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801682a:	fba1 2402 	umull	r2, r4, r1, r2
 801682e:	b94c      	cbnz	r4, 8016844 <_calloc_r+0x1c>
 8016830:	4611      	mov	r1, r2
 8016832:	9201      	str	r2, [sp, #4]
 8016834:	f000 f87a 	bl	801692c <_malloc_r>
 8016838:	9a01      	ldr	r2, [sp, #4]
 801683a:	4605      	mov	r5, r0
 801683c:	b930      	cbnz	r0, 801684c <_calloc_r+0x24>
 801683e:	4628      	mov	r0, r5
 8016840:	b003      	add	sp, #12
 8016842:	bd30      	pop	{r4, r5, pc}
 8016844:	220c      	movs	r2, #12
 8016846:	6002      	str	r2, [r0, #0]
 8016848:	2500      	movs	r5, #0
 801684a:	e7f8      	b.n	801683e <_calloc_r+0x16>
 801684c:	4621      	mov	r1, r4
 801684e:	f7fe f877 	bl	8014940 <memset>
 8016852:	e7f4      	b.n	801683e <_calloc_r+0x16>

08016854 <_free_r>:
 8016854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016856:	2900      	cmp	r1, #0
 8016858:	d044      	beq.n	80168e4 <_free_r+0x90>
 801685a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801685e:	9001      	str	r0, [sp, #4]
 8016860:	2b00      	cmp	r3, #0
 8016862:	f1a1 0404 	sub.w	r4, r1, #4
 8016866:	bfb8      	it	lt
 8016868:	18e4      	addlt	r4, r4, r3
 801686a:	f001 f859 	bl	8017920 <__malloc_lock>
 801686e:	4a1e      	ldr	r2, [pc, #120]	; (80168e8 <_free_r+0x94>)
 8016870:	9801      	ldr	r0, [sp, #4]
 8016872:	6813      	ldr	r3, [r2, #0]
 8016874:	b933      	cbnz	r3, 8016884 <_free_r+0x30>
 8016876:	6063      	str	r3, [r4, #4]
 8016878:	6014      	str	r4, [r2, #0]
 801687a:	b003      	add	sp, #12
 801687c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016880:	f001 b854 	b.w	801792c <__malloc_unlock>
 8016884:	42a3      	cmp	r3, r4
 8016886:	d908      	bls.n	801689a <_free_r+0x46>
 8016888:	6825      	ldr	r5, [r4, #0]
 801688a:	1961      	adds	r1, r4, r5
 801688c:	428b      	cmp	r3, r1
 801688e:	bf01      	itttt	eq
 8016890:	6819      	ldreq	r1, [r3, #0]
 8016892:	685b      	ldreq	r3, [r3, #4]
 8016894:	1949      	addeq	r1, r1, r5
 8016896:	6021      	streq	r1, [r4, #0]
 8016898:	e7ed      	b.n	8016876 <_free_r+0x22>
 801689a:	461a      	mov	r2, r3
 801689c:	685b      	ldr	r3, [r3, #4]
 801689e:	b10b      	cbz	r3, 80168a4 <_free_r+0x50>
 80168a0:	42a3      	cmp	r3, r4
 80168a2:	d9fa      	bls.n	801689a <_free_r+0x46>
 80168a4:	6811      	ldr	r1, [r2, #0]
 80168a6:	1855      	adds	r5, r2, r1
 80168a8:	42a5      	cmp	r5, r4
 80168aa:	d10b      	bne.n	80168c4 <_free_r+0x70>
 80168ac:	6824      	ldr	r4, [r4, #0]
 80168ae:	4421      	add	r1, r4
 80168b0:	1854      	adds	r4, r2, r1
 80168b2:	42a3      	cmp	r3, r4
 80168b4:	6011      	str	r1, [r2, #0]
 80168b6:	d1e0      	bne.n	801687a <_free_r+0x26>
 80168b8:	681c      	ldr	r4, [r3, #0]
 80168ba:	685b      	ldr	r3, [r3, #4]
 80168bc:	6053      	str	r3, [r2, #4]
 80168be:	4421      	add	r1, r4
 80168c0:	6011      	str	r1, [r2, #0]
 80168c2:	e7da      	b.n	801687a <_free_r+0x26>
 80168c4:	d902      	bls.n	80168cc <_free_r+0x78>
 80168c6:	230c      	movs	r3, #12
 80168c8:	6003      	str	r3, [r0, #0]
 80168ca:	e7d6      	b.n	801687a <_free_r+0x26>
 80168cc:	6825      	ldr	r5, [r4, #0]
 80168ce:	1961      	adds	r1, r4, r5
 80168d0:	428b      	cmp	r3, r1
 80168d2:	bf04      	itt	eq
 80168d4:	6819      	ldreq	r1, [r3, #0]
 80168d6:	685b      	ldreq	r3, [r3, #4]
 80168d8:	6063      	str	r3, [r4, #4]
 80168da:	bf04      	itt	eq
 80168dc:	1949      	addeq	r1, r1, r5
 80168de:	6021      	streq	r1, [r4, #0]
 80168e0:	6054      	str	r4, [r2, #4]
 80168e2:	e7ca      	b.n	801687a <_free_r+0x26>
 80168e4:	b003      	add	sp, #12
 80168e6:	bd30      	pop	{r4, r5, pc}
 80168e8:	24008e24 	.word	0x24008e24

080168ec <sbrk_aligned>:
 80168ec:	b570      	push	{r4, r5, r6, lr}
 80168ee:	4e0e      	ldr	r6, [pc, #56]	; (8016928 <sbrk_aligned+0x3c>)
 80168f0:	460c      	mov	r4, r1
 80168f2:	6831      	ldr	r1, [r6, #0]
 80168f4:	4605      	mov	r5, r0
 80168f6:	b911      	cbnz	r1, 80168fe <sbrk_aligned+0x12>
 80168f8:	f000 fcde 	bl	80172b8 <_sbrk_r>
 80168fc:	6030      	str	r0, [r6, #0]
 80168fe:	4621      	mov	r1, r4
 8016900:	4628      	mov	r0, r5
 8016902:	f000 fcd9 	bl	80172b8 <_sbrk_r>
 8016906:	1c43      	adds	r3, r0, #1
 8016908:	d00a      	beq.n	8016920 <sbrk_aligned+0x34>
 801690a:	1cc4      	adds	r4, r0, #3
 801690c:	f024 0403 	bic.w	r4, r4, #3
 8016910:	42a0      	cmp	r0, r4
 8016912:	d007      	beq.n	8016924 <sbrk_aligned+0x38>
 8016914:	1a21      	subs	r1, r4, r0
 8016916:	4628      	mov	r0, r5
 8016918:	f000 fcce 	bl	80172b8 <_sbrk_r>
 801691c:	3001      	adds	r0, #1
 801691e:	d101      	bne.n	8016924 <sbrk_aligned+0x38>
 8016920:	f04f 34ff 	mov.w	r4, #4294967295
 8016924:	4620      	mov	r0, r4
 8016926:	bd70      	pop	{r4, r5, r6, pc}
 8016928:	24008e28 	.word	0x24008e28

0801692c <_malloc_r>:
 801692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016930:	1ccd      	adds	r5, r1, #3
 8016932:	f025 0503 	bic.w	r5, r5, #3
 8016936:	3508      	adds	r5, #8
 8016938:	2d0c      	cmp	r5, #12
 801693a:	bf38      	it	cc
 801693c:	250c      	movcc	r5, #12
 801693e:	2d00      	cmp	r5, #0
 8016940:	4607      	mov	r7, r0
 8016942:	db01      	blt.n	8016948 <_malloc_r+0x1c>
 8016944:	42a9      	cmp	r1, r5
 8016946:	d905      	bls.n	8016954 <_malloc_r+0x28>
 8016948:	230c      	movs	r3, #12
 801694a:	603b      	str	r3, [r7, #0]
 801694c:	2600      	movs	r6, #0
 801694e:	4630      	mov	r0, r6
 8016950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016954:	4e2e      	ldr	r6, [pc, #184]	; (8016a10 <_malloc_r+0xe4>)
 8016956:	f000 ffe3 	bl	8017920 <__malloc_lock>
 801695a:	6833      	ldr	r3, [r6, #0]
 801695c:	461c      	mov	r4, r3
 801695e:	bb34      	cbnz	r4, 80169ae <_malloc_r+0x82>
 8016960:	4629      	mov	r1, r5
 8016962:	4638      	mov	r0, r7
 8016964:	f7ff ffc2 	bl	80168ec <sbrk_aligned>
 8016968:	1c43      	adds	r3, r0, #1
 801696a:	4604      	mov	r4, r0
 801696c:	d14d      	bne.n	8016a0a <_malloc_r+0xde>
 801696e:	6834      	ldr	r4, [r6, #0]
 8016970:	4626      	mov	r6, r4
 8016972:	2e00      	cmp	r6, #0
 8016974:	d140      	bne.n	80169f8 <_malloc_r+0xcc>
 8016976:	6823      	ldr	r3, [r4, #0]
 8016978:	4631      	mov	r1, r6
 801697a:	4638      	mov	r0, r7
 801697c:	eb04 0803 	add.w	r8, r4, r3
 8016980:	f000 fc9a 	bl	80172b8 <_sbrk_r>
 8016984:	4580      	cmp	r8, r0
 8016986:	d13a      	bne.n	80169fe <_malloc_r+0xd2>
 8016988:	6821      	ldr	r1, [r4, #0]
 801698a:	3503      	adds	r5, #3
 801698c:	1a6d      	subs	r5, r5, r1
 801698e:	f025 0503 	bic.w	r5, r5, #3
 8016992:	3508      	adds	r5, #8
 8016994:	2d0c      	cmp	r5, #12
 8016996:	bf38      	it	cc
 8016998:	250c      	movcc	r5, #12
 801699a:	4629      	mov	r1, r5
 801699c:	4638      	mov	r0, r7
 801699e:	f7ff ffa5 	bl	80168ec <sbrk_aligned>
 80169a2:	3001      	adds	r0, #1
 80169a4:	d02b      	beq.n	80169fe <_malloc_r+0xd2>
 80169a6:	6823      	ldr	r3, [r4, #0]
 80169a8:	442b      	add	r3, r5
 80169aa:	6023      	str	r3, [r4, #0]
 80169ac:	e00e      	b.n	80169cc <_malloc_r+0xa0>
 80169ae:	6822      	ldr	r2, [r4, #0]
 80169b0:	1b52      	subs	r2, r2, r5
 80169b2:	d41e      	bmi.n	80169f2 <_malloc_r+0xc6>
 80169b4:	2a0b      	cmp	r2, #11
 80169b6:	d916      	bls.n	80169e6 <_malloc_r+0xba>
 80169b8:	1961      	adds	r1, r4, r5
 80169ba:	42a3      	cmp	r3, r4
 80169bc:	6025      	str	r5, [r4, #0]
 80169be:	bf18      	it	ne
 80169c0:	6059      	strne	r1, [r3, #4]
 80169c2:	6863      	ldr	r3, [r4, #4]
 80169c4:	bf08      	it	eq
 80169c6:	6031      	streq	r1, [r6, #0]
 80169c8:	5162      	str	r2, [r4, r5]
 80169ca:	604b      	str	r3, [r1, #4]
 80169cc:	4638      	mov	r0, r7
 80169ce:	f104 060b 	add.w	r6, r4, #11
 80169d2:	f000 ffab 	bl	801792c <__malloc_unlock>
 80169d6:	f026 0607 	bic.w	r6, r6, #7
 80169da:	1d23      	adds	r3, r4, #4
 80169dc:	1af2      	subs	r2, r6, r3
 80169de:	d0b6      	beq.n	801694e <_malloc_r+0x22>
 80169e0:	1b9b      	subs	r3, r3, r6
 80169e2:	50a3      	str	r3, [r4, r2]
 80169e4:	e7b3      	b.n	801694e <_malloc_r+0x22>
 80169e6:	6862      	ldr	r2, [r4, #4]
 80169e8:	42a3      	cmp	r3, r4
 80169ea:	bf0c      	ite	eq
 80169ec:	6032      	streq	r2, [r6, #0]
 80169ee:	605a      	strne	r2, [r3, #4]
 80169f0:	e7ec      	b.n	80169cc <_malloc_r+0xa0>
 80169f2:	4623      	mov	r3, r4
 80169f4:	6864      	ldr	r4, [r4, #4]
 80169f6:	e7b2      	b.n	801695e <_malloc_r+0x32>
 80169f8:	4634      	mov	r4, r6
 80169fa:	6876      	ldr	r6, [r6, #4]
 80169fc:	e7b9      	b.n	8016972 <_malloc_r+0x46>
 80169fe:	230c      	movs	r3, #12
 8016a00:	603b      	str	r3, [r7, #0]
 8016a02:	4638      	mov	r0, r7
 8016a04:	f000 ff92 	bl	801792c <__malloc_unlock>
 8016a08:	e7a1      	b.n	801694e <_malloc_r+0x22>
 8016a0a:	6025      	str	r5, [r4, #0]
 8016a0c:	e7de      	b.n	80169cc <_malloc_r+0xa0>
 8016a0e:	bf00      	nop
 8016a10:	24008e24 	.word	0x24008e24

08016a14 <__ssputs_r>:
 8016a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a18:	688e      	ldr	r6, [r1, #8]
 8016a1a:	429e      	cmp	r6, r3
 8016a1c:	4682      	mov	sl, r0
 8016a1e:	460c      	mov	r4, r1
 8016a20:	4690      	mov	r8, r2
 8016a22:	461f      	mov	r7, r3
 8016a24:	d838      	bhi.n	8016a98 <__ssputs_r+0x84>
 8016a26:	898a      	ldrh	r2, [r1, #12]
 8016a28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a2c:	d032      	beq.n	8016a94 <__ssputs_r+0x80>
 8016a2e:	6825      	ldr	r5, [r4, #0]
 8016a30:	6909      	ldr	r1, [r1, #16]
 8016a32:	eba5 0901 	sub.w	r9, r5, r1
 8016a36:	6965      	ldr	r5, [r4, #20]
 8016a38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016a40:	3301      	adds	r3, #1
 8016a42:	444b      	add	r3, r9
 8016a44:	106d      	asrs	r5, r5, #1
 8016a46:	429d      	cmp	r5, r3
 8016a48:	bf38      	it	cc
 8016a4a:	461d      	movcc	r5, r3
 8016a4c:	0553      	lsls	r3, r2, #21
 8016a4e:	d531      	bpl.n	8016ab4 <__ssputs_r+0xa0>
 8016a50:	4629      	mov	r1, r5
 8016a52:	f7ff ff6b 	bl	801692c <_malloc_r>
 8016a56:	4606      	mov	r6, r0
 8016a58:	b950      	cbnz	r0, 8016a70 <__ssputs_r+0x5c>
 8016a5a:	230c      	movs	r3, #12
 8016a5c:	f8ca 3000 	str.w	r3, [sl]
 8016a60:	89a3      	ldrh	r3, [r4, #12]
 8016a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a66:	81a3      	strh	r3, [r4, #12]
 8016a68:	f04f 30ff 	mov.w	r0, #4294967295
 8016a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a70:	6921      	ldr	r1, [r4, #16]
 8016a72:	464a      	mov	r2, r9
 8016a74:	f7ff fa0c 	bl	8015e90 <memcpy>
 8016a78:	89a3      	ldrh	r3, [r4, #12]
 8016a7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a82:	81a3      	strh	r3, [r4, #12]
 8016a84:	6126      	str	r6, [r4, #16]
 8016a86:	6165      	str	r5, [r4, #20]
 8016a88:	444e      	add	r6, r9
 8016a8a:	eba5 0509 	sub.w	r5, r5, r9
 8016a8e:	6026      	str	r6, [r4, #0]
 8016a90:	60a5      	str	r5, [r4, #8]
 8016a92:	463e      	mov	r6, r7
 8016a94:	42be      	cmp	r6, r7
 8016a96:	d900      	bls.n	8016a9a <__ssputs_r+0x86>
 8016a98:	463e      	mov	r6, r7
 8016a9a:	6820      	ldr	r0, [r4, #0]
 8016a9c:	4632      	mov	r2, r6
 8016a9e:	4641      	mov	r1, r8
 8016aa0:	f000 ff24 	bl	80178ec <memmove>
 8016aa4:	68a3      	ldr	r3, [r4, #8]
 8016aa6:	1b9b      	subs	r3, r3, r6
 8016aa8:	60a3      	str	r3, [r4, #8]
 8016aaa:	6823      	ldr	r3, [r4, #0]
 8016aac:	4433      	add	r3, r6
 8016aae:	6023      	str	r3, [r4, #0]
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	e7db      	b.n	8016a6c <__ssputs_r+0x58>
 8016ab4:	462a      	mov	r2, r5
 8016ab6:	f000 ff3f 	bl	8017938 <_realloc_r>
 8016aba:	4606      	mov	r6, r0
 8016abc:	2800      	cmp	r0, #0
 8016abe:	d1e1      	bne.n	8016a84 <__ssputs_r+0x70>
 8016ac0:	6921      	ldr	r1, [r4, #16]
 8016ac2:	4650      	mov	r0, sl
 8016ac4:	f7ff fec6 	bl	8016854 <_free_r>
 8016ac8:	e7c7      	b.n	8016a5a <__ssputs_r+0x46>
	...

08016acc <_svfiprintf_r>:
 8016acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad0:	4698      	mov	r8, r3
 8016ad2:	898b      	ldrh	r3, [r1, #12]
 8016ad4:	061b      	lsls	r3, r3, #24
 8016ad6:	b09d      	sub	sp, #116	; 0x74
 8016ad8:	4607      	mov	r7, r0
 8016ada:	460d      	mov	r5, r1
 8016adc:	4614      	mov	r4, r2
 8016ade:	d50e      	bpl.n	8016afe <_svfiprintf_r+0x32>
 8016ae0:	690b      	ldr	r3, [r1, #16]
 8016ae2:	b963      	cbnz	r3, 8016afe <_svfiprintf_r+0x32>
 8016ae4:	2140      	movs	r1, #64	; 0x40
 8016ae6:	f7ff ff21 	bl	801692c <_malloc_r>
 8016aea:	6028      	str	r0, [r5, #0]
 8016aec:	6128      	str	r0, [r5, #16]
 8016aee:	b920      	cbnz	r0, 8016afa <_svfiprintf_r+0x2e>
 8016af0:	230c      	movs	r3, #12
 8016af2:	603b      	str	r3, [r7, #0]
 8016af4:	f04f 30ff 	mov.w	r0, #4294967295
 8016af8:	e0d1      	b.n	8016c9e <_svfiprintf_r+0x1d2>
 8016afa:	2340      	movs	r3, #64	; 0x40
 8016afc:	616b      	str	r3, [r5, #20]
 8016afe:	2300      	movs	r3, #0
 8016b00:	9309      	str	r3, [sp, #36]	; 0x24
 8016b02:	2320      	movs	r3, #32
 8016b04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b0c:	2330      	movs	r3, #48	; 0x30
 8016b0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016cb8 <_svfiprintf_r+0x1ec>
 8016b12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b16:	f04f 0901 	mov.w	r9, #1
 8016b1a:	4623      	mov	r3, r4
 8016b1c:	469a      	mov	sl, r3
 8016b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b22:	b10a      	cbz	r2, 8016b28 <_svfiprintf_r+0x5c>
 8016b24:	2a25      	cmp	r2, #37	; 0x25
 8016b26:	d1f9      	bne.n	8016b1c <_svfiprintf_r+0x50>
 8016b28:	ebba 0b04 	subs.w	fp, sl, r4
 8016b2c:	d00b      	beq.n	8016b46 <_svfiprintf_r+0x7a>
 8016b2e:	465b      	mov	r3, fp
 8016b30:	4622      	mov	r2, r4
 8016b32:	4629      	mov	r1, r5
 8016b34:	4638      	mov	r0, r7
 8016b36:	f7ff ff6d 	bl	8016a14 <__ssputs_r>
 8016b3a:	3001      	adds	r0, #1
 8016b3c:	f000 80aa 	beq.w	8016c94 <_svfiprintf_r+0x1c8>
 8016b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b42:	445a      	add	r2, fp
 8016b44:	9209      	str	r2, [sp, #36]	; 0x24
 8016b46:	f89a 3000 	ldrb.w	r3, [sl]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	f000 80a2 	beq.w	8016c94 <_svfiprintf_r+0x1c8>
 8016b50:	2300      	movs	r3, #0
 8016b52:	f04f 32ff 	mov.w	r2, #4294967295
 8016b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b5a:	f10a 0a01 	add.w	sl, sl, #1
 8016b5e:	9304      	str	r3, [sp, #16]
 8016b60:	9307      	str	r3, [sp, #28]
 8016b62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016b66:	931a      	str	r3, [sp, #104]	; 0x68
 8016b68:	4654      	mov	r4, sl
 8016b6a:	2205      	movs	r2, #5
 8016b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b70:	4851      	ldr	r0, [pc, #324]	; (8016cb8 <_svfiprintf_r+0x1ec>)
 8016b72:	f7e9 fbd5 	bl	8000320 <memchr>
 8016b76:	9a04      	ldr	r2, [sp, #16]
 8016b78:	b9d8      	cbnz	r0, 8016bb2 <_svfiprintf_r+0xe6>
 8016b7a:	06d0      	lsls	r0, r2, #27
 8016b7c:	bf44      	itt	mi
 8016b7e:	2320      	movmi	r3, #32
 8016b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b84:	0711      	lsls	r1, r2, #28
 8016b86:	bf44      	itt	mi
 8016b88:	232b      	movmi	r3, #43	; 0x2b
 8016b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8016b92:	2b2a      	cmp	r3, #42	; 0x2a
 8016b94:	d015      	beq.n	8016bc2 <_svfiprintf_r+0xf6>
 8016b96:	9a07      	ldr	r2, [sp, #28]
 8016b98:	4654      	mov	r4, sl
 8016b9a:	2000      	movs	r0, #0
 8016b9c:	f04f 0c0a 	mov.w	ip, #10
 8016ba0:	4621      	mov	r1, r4
 8016ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ba6:	3b30      	subs	r3, #48	; 0x30
 8016ba8:	2b09      	cmp	r3, #9
 8016baa:	d94e      	bls.n	8016c4a <_svfiprintf_r+0x17e>
 8016bac:	b1b0      	cbz	r0, 8016bdc <_svfiprintf_r+0x110>
 8016bae:	9207      	str	r2, [sp, #28]
 8016bb0:	e014      	b.n	8016bdc <_svfiprintf_r+0x110>
 8016bb2:	eba0 0308 	sub.w	r3, r0, r8
 8016bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8016bba:	4313      	orrs	r3, r2
 8016bbc:	9304      	str	r3, [sp, #16]
 8016bbe:	46a2      	mov	sl, r4
 8016bc0:	e7d2      	b.n	8016b68 <_svfiprintf_r+0x9c>
 8016bc2:	9b03      	ldr	r3, [sp, #12]
 8016bc4:	1d19      	adds	r1, r3, #4
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	9103      	str	r1, [sp, #12]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	bfbb      	ittet	lt
 8016bce:	425b      	neglt	r3, r3
 8016bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8016bd4:	9307      	strge	r3, [sp, #28]
 8016bd6:	9307      	strlt	r3, [sp, #28]
 8016bd8:	bfb8      	it	lt
 8016bda:	9204      	strlt	r2, [sp, #16]
 8016bdc:	7823      	ldrb	r3, [r4, #0]
 8016bde:	2b2e      	cmp	r3, #46	; 0x2e
 8016be0:	d10c      	bne.n	8016bfc <_svfiprintf_r+0x130>
 8016be2:	7863      	ldrb	r3, [r4, #1]
 8016be4:	2b2a      	cmp	r3, #42	; 0x2a
 8016be6:	d135      	bne.n	8016c54 <_svfiprintf_r+0x188>
 8016be8:	9b03      	ldr	r3, [sp, #12]
 8016bea:	1d1a      	adds	r2, r3, #4
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	9203      	str	r2, [sp, #12]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	bfb8      	it	lt
 8016bf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8016bf8:	3402      	adds	r4, #2
 8016bfa:	9305      	str	r3, [sp, #20]
 8016bfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016cc8 <_svfiprintf_r+0x1fc>
 8016c00:	7821      	ldrb	r1, [r4, #0]
 8016c02:	2203      	movs	r2, #3
 8016c04:	4650      	mov	r0, sl
 8016c06:	f7e9 fb8b 	bl	8000320 <memchr>
 8016c0a:	b140      	cbz	r0, 8016c1e <_svfiprintf_r+0x152>
 8016c0c:	2340      	movs	r3, #64	; 0x40
 8016c0e:	eba0 000a 	sub.w	r0, r0, sl
 8016c12:	fa03 f000 	lsl.w	r0, r3, r0
 8016c16:	9b04      	ldr	r3, [sp, #16]
 8016c18:	4303      	orrs	r3, r0
 8016c1a:	3401      	adds	r4, #1
 8016c1c:	9304      	str	r3, [sp, #16]
 8016c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c22:	4826      	ldr	r0, [pc, #152]	; (8016cbc <_svfiprintf_r+0x1f0>)
 8016c24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c28:	2206      	movs	r2, #6
 8016c2a:	f7e9 fb79 	bl	8000320 <memchr>
 8016c2e:	2800      	cmp	r0, #0
 8016c30:	d038      	beq.n	8016ca4 <_svfiprintf_r+0x1d8>
 8016c32:	4b23      	ldr	r3, [pc, #140]	; (8016cc0 <_svfiprintf_r+0x1f4>)
 8016c34:	bb1b      	cbnz	r3, 8016c7e <_svfiprintf_r+0x1b2>
 8016c36:	9b03      	ldr	r3, [sp, #12]
 8016c38:	3307      	adds	r3, #7
 8016c3a:	f023 0307 	bic.w	r3, r3, #7
 8016c3e:	3308      	adds	r3, #8
 8016c40:	9303      	str	r3, [sp, #12]
 8016c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c44:	4433      	add	r3, r6
 8016c46:	9309      	str	r3, [sp, #36]	; 0x24
 8016c48:	e767      	b.n	8016b1a <_svfiprintf_r+0x4e>
 8016c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c4e:	460c      	mov	r4, r1
 8016c50:	2001      	movs	r0, #1
 8016c52:	e7a5      	b.n	8016ba0 <_svfiprintf_r+0xd4>
 8016c54:	2300      	movs	r3, #0
 8016c56:	3401      	adds	r4, #1
 8016c58:	9305      	str	r3, [sp, #20]
 8016c5a:	4619      	mov	r1, r3
 8016c5c:	f04f 0c0a 	mov.w	ip, #10
 8016c60:	4620      	mov	r0, r4
 8016c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c66:	3a30      	subs	r2, #48	; 0x30
 8016c68:	2a09      	cmp	r2, #9
 8016c6a:	d903      	bls.n	8016c74 <_svfiprintf_r+0x1a8>
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d0c5      	beq.n	8016bfc <_svfiprintf_r+0x130>
 8016c70:	9105      	str	r1, [sp, #20]
 8016c72:	e7c3      	b.n	8016bfc <_svfiprintf_r+0x130>
 8016c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c78:	4604      	mov	r4, r0
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	e7f0      	b.n	8016c60 <_svfiprintf_r+0x194>
 8016c7e:	ab03      	add	r3, sp, #12
 8016c80:	9300      	str	r3, [sp, #0]
 8016c82:	462a      	mov	r2, r5
 8016c84:	4b0f      	ldr	r3, [pc, #60]	; (8016cc4 <_svfiprintf_r+0x1f8>)
 8016c86:	a904      	add	r1, sp, #16
 8016c88:	4638      	mov	r0, r7
 8016c8a:	f3af 8000 	nop.w
 8016c8e:	1c42      	adds	r2, r0, #1
 8016c90:	4606      	mov	r6, r0
 8016c92:	d1d6      	bne.n	8016c42 <_svfiprintf_r+0x176>
 8016c94:	89ab      	ldrh	r3, [r5, #12]
 8016c96:	065b      	lsls	r3, r3, #25
 8016c98:	f53f af2c 	bmi.w	8016af4 <_svfiprintf_r+0x28>
 8016c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c9e:	b01d      	add	sp, #116	; 0x74
 8016ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ca4:	ab03      	add	r3, sp, #12
 8016ca6:	9300      	str	r3, [sp, #0]
 8016ca8:	462a      	mov	r2, r5
 8016caa:	4b06      	ldr	r3, [pc, #24]	; (8016cc4 <_svfiprintf_r+0x1f8>)
 8016cac:	a904      	add	r1, sp, #16
 8016cae:	4638      	mov	r0, r7
 8016cb0:	f000 f9d4 	bl	801705c <_printf_i>
 8016cb4:	e7eb      	b.n	8016c8e <_svfiprintf_r+0x1c2>
 8016cb6:	bf00      	nop
 8016cb8:	080181c4 	.word	0x080181c4
 8016cbc:	080181ce 	.word	0x080181ce
 8016cc0:	00000000 	.word	0x00000000
 8016cc4:	08016a15 	.word	0x08016a15
 8016cc8:	080181ca 	.word	0x080181ca

08016ccc <__sfputc_r>:
 8016ccc:	6893      	ldr	r3, [r2, #8]
 8016cce:	3b01      	subs	r3, #1
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	b410      	push	{r4}
 8016cd4:	6093      	str	r3, [r2, #8]
 8016cd6:	da08      	bge.n	8016cea <__sfputc_r+0x1e>
 8016cd8:	6994      	ldr	r4, [r2, #24]
 8016cda:	42a3      	cmp	r3, r4
 8016cdc:	db01      	blt.n	8016ce2 <__sfputc_r+0x16>
 8016cde:	290a      	cmp	r1, #10
 8016ce0:	d103      	bne.n	8016cea <__sfputc_r+0x1e>
 8016ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ce6:	f000 bb0b 	b.w	8017300 <__swbuf_r>
 8016cea:	6813      	ldr	r3, [r2, #0]
 8016cec:	1c58      	adds	r0, r3, #1
 8016cee:	6010      	str	r0, [r2, #0]
 8016cf0:	7019      	strb	r1, [r3, #0]
 8016cf2:	4608      	mov	r0, r1
 8016cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cf8:	4770      	bx	lr

08016cfa <__sfputs_r>:
 8016cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cfc:	4606      	mov	r6, r0
 8016cfe:	460f      	mov	r7, r1
 8016d00:	4614      	mov	r4, r2
 8016d02:	18d5      	adds	r5, r2, r3
 8016d04:	42ac      	cmp	r4, r5
 8016d06:	d101      	bne.n	8016d0c <__sfputs_r+0x12>
 8016d08:	2000      	movs	r0, #0
 8016d0a:	e007      	b.n	8016d1c <__sfputs_r+0x22>
 8016d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d10:	463a      	mov	r2, r7
 8016d12:	4630      	mov	r0, r6
 8016d14:	f7ff ffda 	bl	8016ccc <__sfputc_r>
 8016d18:	1c43      	adds	r3, r0, #1
 8016d1a:	d1f3      	bne.n	8016d04 <__sfputs_r+0xa>
 8016d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d20 <_vfiprintf_r>:
 8016d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d24:	460d      	mov	r5, r1
 8016d26:	b09d      	sub	sp, #116	; 0x74
 8016d28:	4614      	mov	r4, r2
 8016d2a:	4698      	mov	r8, r3
 8016d2c:	4606      	mov	r6, r0
 8016d2e:	b118      	cbz	r0, 8016d38 <_vfiprintf_r+0x18>
 8016d30:	6983      	ldr	r3, [r0, #24]
 8016d32:	b90b      	cbnz	r3, 8016d38 <_vfiprintf_r+0x18>
 8016d34:	f000 fcd4 	bl	80176e0 <__sinit>
 8016d38:	4b89      	ldr	r3, [pc, #548]	; (8016f60 <_vfiprintf_r+0x240>)
 8016d3a:	429d      	cmp	r5, r3
 8016d3c:	d11b      	bne.n	8016d76 <_vfiprintf_r+0x56>
 8016d3e:	6875      	ldr	r5, [r6, #4]
 8016d40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d42:	07d9      	lsls	r1, r3, #31
 8016d44:	d405      	bmi.n	8016d52 <_vfiprintf_r+0x32>
 8016d46:	89ab      	ldrh	r3, [r5, #12]
 8016d48:	059a      	lsls	r2, r3, #22
 8016d4a:	d402      	bmi.n	8016d52 <_vfiprintf_r+0x32>
 8016d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d4e:	f000 fd65 	bl	801781c <__retarget_lock_acquire_recursive>
 8016d52:	89ab      	ldrh	r3, [r5, #12]
 8016d54:	071b      	lsls	r3, r3, #28
 8016d56:	d501      	bpl.n	8016d5c <_vfiprintf_r+0x3c>
 8016d58:	692b      	ldr	r3, [r5, #16]
 8016d5a:	b9eb      	cbnz	r3, 8016d98 <_vfiprintf_r+0x78>
 8016d5c:	4629      	mov	r1, r5
 8016d5e:	4630      	mov	r0, r6
 8016d60:	f000 fb2e 	bl	80173c0 <__swsetup_r>
 8016d64:	b1c0      	cbz	r0, 8016d98 <_vfiprintf_r+0x78>
 8016d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d68:	07dc      	lsls	r4, r3, #31
 8016d6a:	d50e      	bpl.n	8016d8a <_vfiprintf_r+0x6a>
 8016d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d70:	b01d      	add	sp, #116	; 0x74
 8016d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d76:	4b7b      	ldr	r3, [pc, #492]	; (8016f64 <_vfiprintf_r+0x244>)
 8016d78:	429d      	cmp	r5, r3
 8016d7a:	d101      	bne.n	8016d80 <_vfiprintf_r+0x60>
 8016d7c:	68b5      	ldr	r5, [r6, #8]
 8016d7e:	e7df      	b.n	8016d40 <_vfiprintf_r+0x20>
 8016d80:	4b79      	ldr	r3, [pc, #484]	; (8016f68 <_vfiprintf_r+0x248>)
 8016d82:	429d      	cmp	r5, r3
 8016d84:	bf08      	it	eq
 8016d86:	68f5      	ldreq	r5, [r6, #12]
 8016d88:	e7da      	b.n	8016d40 <_vfiprintf_r+0x20>
 8016d8a:	89ab      	ldrh	r3, [r5, #12]
 8016d8c:	0598      	lsls	r0, r3, #22
 8016d8e:	d4ed      	bmi.n	8016d6c <_vfiprintf_r+0x4c>
 8016d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d92:	f000 fd44 	bl	801781e <__retarget_lock_release_recursive>
 8016d96:	e7e9      	b.n	8016d6c <_vfiprintf_r+0x4c>
 8016d98:	2300      	movs	r3, #0
 8016d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8016d9c:	2320      	movs	r3, #32
 8016d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8016da6:	2330      	movs	r3, #48	; 0x30
 8016da8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016f6c <_vfiprintf_r+0x24c>
 8016dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016db0:	f04f 0901 	mov.w	r9, #1
 8016db4:	4623      	mov	r3, r4
 8016db6:	469a      	mov	sl, r3
 8016db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016dbc:	b10a      	cbz	r2, 8016dc2 <_vfiprintf_r+0xa2>
 8016dbe:	2a25      	cmp	r2, #37	; 0x25
 8016dc0:	d1f9      	bne.n	8016db6 <_vfiprintf_r+0x96>
 8016dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8016dc6:	d00b      	beq.n	8016de0 <_vfiprintf_r+0xc0>
 8016dc8:	465b      	mov	r3, fp
 8016dca:	4622      	mov	r2, r4
 8016dcc:	4629      	mov	r1, r5
 8016dce:	4630      	mov	r0, r6
 8016dd0:	f7ff ff93 	bl	8016cfa <__sfputs_r>
 8016dd4:	3001      	adds	r0, #1
 8016dd6:	f000 80aa 	beq.w	8016f2e <_vfiprintf_r+0x20e>
 8016dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ddc:	445a      	add	r2, fp
 8016dde:	9209      	str	r2, [sp, #36]	; 0x24
 8016de0:	f89a 3000 	ldrb.w	r3, [sl]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	f000 80a2 	beq.w	8016f2e <_vfiprintf_r+0x20e>
 8016dea:	2300      	movs	r3, #0
 8016dec:	f04f 32ff 	mov.w	r2, #4294967295
 8016df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016df4:	f10a 0a01 	add.w	sl, sl, #1
 8016df8:	9304      	str	r3, [sp, #16]
 8016dfa:	9307      	str	r3, [sp, #28]
 8016dfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e00:	931a      	str	r3, [sp, #104]	; 0x68
 8016e02:	4654      	mov	r4, sl
 8016e04:	2205      	movs	r2, #5
 8016e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e0a:	4858      	ldr	r0, [pc, #352]	; (8016f6c <_vfiprintf_r+0x24c>)
 8016e0c:	f7e9 fa88 	bl	8000320 <memchr>
 8016e10:	9a04      	ldr	r2, [sp, #16]
 8016e12:	b9d8      	cbnz	r0, 8016e4c <_vfiprintf_r+0x12c>
 8016e14:	06d1      	lsls	r1, r2, #27
 8016e16:	bf44      	itt	mi
 8016e18:	2320      	movmi	r3, #32
 8016e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e1e:	0713      	lsls	r3, r2, #28
 8016e20:	bf44      	itt	mi
 8016e22:	232b      	movmi	r3, #43	; 0x2b
 8016e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e28:	f89a 3000 	ldrb.w	r3, [sl]
 8016e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8016e2e:	d015      	beq.n	8016e5c <_vfiprintf_r+0x13c>
 8016e30:	9a07      	ldr	r2, [sp, #28]
 8016e32:	4654      	mov	r4, sl
 8016e34:	2000      	movs	r0, #0
 8016e36:	f04f 0c0a 	mov.w	ip, #10
 8016e3a:	4621      	mov	r1, r4
 8016e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e40:	3b30      	subs	r3, #48	; 0x30
 8016e42:	2b09      	cmp	r3, #9
 8016e44:	d94e      	bls.n	8016ee4 <_vfiprintf_r+0x1c4>
 8016e46:	b1b0      	cbz	r0, 8016e76 <_vfiprintf_r+0x156>
 8016e48:	9207      	str	r2, [sp, #28]
 8016e4a:	e014      	b.n	8016e76 <_vfiprintf_r+0x156>
 8016e4c:	eba0 0308 	sub.w	r3, r0, r8
 8016e50:	fa09 f303 	lsl.w	r3, r9, r3
 8016e54:	4313      	orrs	r3, r2
 8016e56:	9304      	str	r3, [sp, #16]
 8016e58:	46a2      	mov	sl, r4
 8016e5a:	e7d2      	b.n	8016e02 <_vfiprintf_r+0xe2>
 8016e5c:	9b03      	ldr	r3, [sp, #12]
 8016e5e:	1d19      	adds	r1, r3, #4
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	9103      	str	r1, [sp, #12]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	bfbb      	ittet	lt
 8016e68:	425b      	neglt	r3, r3
 8016e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8016e6e:	9307      	strge	r3, [sp, #28]
 8016e70:	9307      	strlt	r3, [sp, #28]
 8016e72:	bfb8      	it	lt
 8016e74:	9204      	strlt	r2, [sp, #16]
 8016e76:	7823      	ldrb	r3, [r4, #0]
 8016e78:	2b2e      	cmp	r3, #46	; 0x2e
 8016e7a:	d10c      	bne.n	8016e96 <_vfiprintf_r+0x176>
 8016e7c:	7863      	ldrb	r3, [r4, #1]
 8016e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8016e80:	d135      	bne.n	8016eee <_vfiprintf_r+0x1ce>
 8016e82:	9b03      	ldr	r3, [sp, #12]
 8016e84:	1d1a      	adds	r2, r3, #4
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	9203      	str	r2, [sp, #12]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	bfb8      	it	lt
 8016e8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e92:	3402      	adds	r4, #2
 8016e94:	9305      	str	r3, [sp, #20]
 8016e96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016f7c <_vfiprintf_r+0x25c>
 8016e9a:	7821      	ldrb	r1, [r4, #0]
 8016e9c:	2203      	movs	r2, #3
 8016e9e:	4650      	mov	r0, sl
 8016ea0:	f7e9 fa3e 	bl	8000320 <memchr>
 8016ea4:	b140      	cbz	r0, 8016eb8 <_vfiprintf_r+0x198>
 8016ea6:	2340      	movs	r3, #64	; 0x40
 8016ea8:	eba0 000a 	sub.w	r0, r0, sl
 8016eac:	fa03 f000 	lsl.w	r0, r3, r0
 8016eb0:	9b04      	ldr	r3, [sp, #16]
 8016eb2:	4303      	orrs	r3, r0
 8016eb4:	3401      	adds	r4, #1
 8016eb6:	9304      	str	r3, [sp, #16]
 8016eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ebc:	482c      	ldr	r0, [pc, #176]	; (8016f70 <_vfiprintf_r+0x250>)
 8016ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ec2:	2206      	movs	r2, #6
 8016ec4:	f7e9 fa2c 	bl	8000320 <memchr>
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	d03f      	beq.n	8016f4c <_vfiprintf_r+0x22c>
 8016ecc:	4b29      	ldr	r3, [pc, #164]	; (8016f74 <_vfiprintf_r+0x254>)
 8016ece:	bb1b      	cbnz	r3, 8016f18 <_vfiprintf_r+0x1f8>
 8016ed0:	9b03      	ldr	r3, [sp, #12]
 8016ed2:	3307      	adds	r3, #7
 8016ed4:	f023 0307 	bic.w	r3, r3, #7
 8016ed8:	3308      	adds	r3, #8
 8016eda:	9303      	str	r3, [sp, #12]
 8016edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ede:	443b      	add	r3, r7
 8016ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ee2:	e767      	b.n	8016db4 <_vfiprintf_r+0x94>
 8016ee4:	fb0c 3202 	mla	r2, ip, r2, r3
 8016ee8:	460c      	mov	r4, r1
 8016eea:	2001      	movs	r0, #1
 8016eec:	e7a5      	b.n	8016e3a <_vfiprintf_r+0x11a>
 8016eee:	2300      	movs	r3, #0
 8016ef0:	3401      	adds	r4, #1
 8016ef2:	9305      	str	r3, [sp, #20]
 8016ef4:	4619      	mov	r1, r3
 8016ef6:	f04f 0c0a 	mov.w	ip, #10
 8016efa:	4620      	mov	r0, r4
 8016efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f00:	3a30      	subs	r2, #48	; 0x30
 8016f02:	2a09      	cmp	r2, #9
 8016f04:	d903      	bls.n	8016f0e <_vfiprintf_r+0x1ee>
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d0c5      	beq.n	8016e96 <_vfiprintf_r+0x176>
 8016f0a:	9105      	str	r1, [sp, #20]
 8016f0c:	e7c3      	b.n	8016e96 <_vfiprintf_r+0x176>
 8016f0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f12:	4604      	mov	r4, r0
 8016f14:	2301      	movs	r3, #1
 8016f16:	e7f0      	b.n	8016efa <_vfiprintf_r+0x1da>
 8016f18:	ab03      	add	r3, sp, #12
 8016f1a:	9300      	str	r3, [sp, #0]
 8016f1c:	462a      	mov	r2, r5
 8016f1e:	4b16      	ldr	r3, [pc, #88]	; (8016f78 <_vfiprintf_r+0x258>)
 8016f20:	a904      	add	r1, sp, #16
 8016f22:	4630      	mov	r0, r6
 8016f24:	f3af 8000 	nop.w
 8016f28:	4607      	mov	r7, r0
 8016f2a:	1c78      	adds	r0, r7, #1
 8016f2c:	d1d6      	bne.n	8016edc <_vfiprintf_r+0x1bc>
 8016f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f30:	07d9      	lsls	r1, r3, #31
 8016f32:	d405      	bmi.n	8016f40 <_vfiprintf_r+0x220>
 8016f34:	89ab      	ldrh	r3, [r5, #12]
 8016f36:	059a      	lsls	r2, r3, #22
 8016f38:	d402      	bmi.n	8016f40 <_vfiprintf_r+0x220>
 8016f3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f3c:	f000 fc6f 	bl	801781e <__retarget_lock_release_recursive>
 8016f40:	89ab      	ldrh	r3, [r5, #12]
 8016f42:	065b      	lsls	r3, r3, #25
 8016f44:	f53f af12 	bmi.w	8016d6c <_vfiprintf_r+0x4c>
 8016f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f4a:	e711      	b.n	8016d70 <_vfiprintf_r+0x50>
 8016f4c:	ab03      	add	r3, sp, #12
 8016f4e:	9300      	str	r3, [sp, #0]
 8016f50:	462a      	mov	r2, r5
 8016f52:	4b09      	ldr	r3, [pc, #36]	; (8016f78 <_vfiprintf_r+0x258>)
 8016f54:	a904      	add	r1, sp, #16
 8016f56:	4630      	mov	r0, r6
 8016f58:	f000 f880 	bl	801705c <_printf_i>
 8016f5c:	e7e4      	b.n	8016f28 <_vfiprintf_r+0x208>
 8016f5e:	bf00      	nop
 8016f60:	08018218 	.word	0x08018218
 8016f64:	08018238 	.word	0x08018238
 8016f68:	080181f8 	.word	0x080181f8
 8016f6c:	080181c4 	.word	0x080181c4
 8016f70:	080181ce 	.word	0x080181ce
 8016f74:	00000000 	.word	0x00000000
 8016f78:	08016cfb 	.word	0x08016cfb
 8016f7c:	080181ca 	.word	0x080181ca

08016f80 <_printf_common>:
 8016f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f84:	4616      	mov	r6, r2
 8016f86:	4699      	mov	r9, r3
 8016f88:	688a      	ldr	r2, [r1, #8]
 8016f8a:	690b      	ldr	r3, [r1, #16]
 8016f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016f90:	4293      	cmp	r3, r2
 8016f92:	bfb8      	it	lt
 8016f94:	4613      	movlt	r3, r2
 8016f96:	6033      	str	r3, [r6, #0]
 8016f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016f9c:	4607      	mov	r7, r0
 8016f9e:	460c      	mov	r4, r1
 8016fa0:	b10a      	cbz	r2, 8016fa6 <_printf_common+0x26>
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	6033      	str	r3, [r6, #0]
 8016fa6:	6823      	ldr	r3, [r4, #0]
 8016fa8:	0699      	lsls	r1, r3, #26
 8016faa:	bf42      	ittt	mi
 8016fac:	6833      	ldrmi	r3, [r6, #0]
 8016fae:	3302      	addmi	r3, #2
 8016fb0:	6033      	strmi	r3, [r6, #0]
 8016fb2:	6825      	ldr	r5, [r4, #0]
 8016fb4:	f015 0506 	ands.w	r5, r5, #6
 8016fb8:	d106      	bne.n	8016fc8 <_printf_common+0x48>
 8016fba:	f104 0a19 	add.w	sl, r4, #25
 8016fbe:	68e3      	ldr	r3, [r4, #12]
 8016fc0:	6832      	ldr	r2, [r6, #0]
 8016fc2:	1a9b      	subs	r3, r3, r2
 8016fc4:	42ab      	cmp	r3, r5
 8016fc6:	dc26      	bgt.n	8017016 <_printf_common+0x96>
 8016fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016fcc:	1e13      	subs	r3, r2, #0
 8016fce:	6822      	ldr	r2, [r4, #0]
 8016fd0:	bf18      	it	ne
 8016fd2:	2301      	movne	r3, #1
 8016fd4:	0692      	lsls	r2, r2, #26
 8016fd6:	d42b      	bmi.n	8017030 <_printf_common+0xb0>
 8016fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016fdc:	4649      	mov	r1, r9
 8016fde:	4638      	mov	r0, r7
 8016fe0:	47c0      	blx	r8
 8016fe2:	3001      	adds	r0, #1
 8016fe4:	d01e      	beq.n	8017024 <_printf_common+0xa4>
 8016fe6:	6823      	ldr	r3, [r4, #0]
 8016fe8:	68e5      	ldr	r5, [r4, #12]
 8016fea:	6832      	ldr	r2, [r6, #0]
 8016fec:	f003 0306 	and.w	r3, r3, #6
 8016ff0:	2b04      	cmp	r3, #4
 8016ff2:	bf08      	it	eq
 8016ff4:	1aad      	subeq	r5, r5, r2
 8016ff6:	68a3      	ldr	r3, [r4, #8]
 8016ff8:	6922      	ldr	r2, [r4, #16]
 8016ffa:	bf0c      	ite	eq
 8016ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017000:	2500      	movne	r5, #0
 8017002:	4293      	cmp	r3, r2
 8017004:	bfc4      	itt	gt
 8017006:	1a9b      	subgt	r3, r3, r2
 8017008:	18ed      	addgt	r5, r5, r3
 801700a:	2600      	movs	r6, #0
 801700c:	341a      	adds	r4, #26
 801700e:	42b5      	cmp	r5, r6
 8017010:	d11a      	bne.n	8017048 <_printf_common+0xc8>
 8017012:	2000      	movs	r0, #0
 8017014:	e008      	b.n	8017028 <_printf_common+0xa8>
 8017016:	2301      	movs	r3, #1
 8017018:	4652      	mov	r2, sl
 801701a:	4649      	mov	r1, r9
 801701c:	4638      	mov	r0, r7
 801701e:	47c0      	blx	r8
 8017020:	3001      	adds	r0, #1
 8017022:	d103      	bne.n	801702c <_printf_common+0xac>
 8017024:	f04f 30ff 	mov.w	r0, #4294967295
 8017028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801702c:	3501      	adds	r5, #1
 801702e:	e7c6      	b.n	8016fbe <_printf_common+0x3e>
 8017030:	18e1      	adds	r1, r4, r3
 8017032:	1c5a      	adds	r2, r3, #1
 8017034:	2030      	movs	r0, #48	; 0x30
 8017036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801703a:	4422      	add	r2, r4
 801703c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017044:	3302      	adds	r3, #2
 8017046:	e7c7      	b.n	8016fd8 <_printf_common+0x58>
 8017048:	2301      	movs	r3, #1
 801704a:	4622      	mov	r2, r4
 801704c:	4649      	mov	r1, r9
 801704e:	4638      	mov	r0, r7
 8017050:	47c0      	blx	r8
 8017052:	3001      	adds	r0, #1
 8017054:	d0e6      	beq.n	8017024 <_printf_common+0xa4>
 8017056:	3601      	adds	r6, #1
 8017058:	e7d9      	b.n	801700e <_printf_common+0x8e>
	...

0801705c <_printf_i>:
 801705c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017060:	7e0f      	ldrb	r7, [r1, #24]
 8017062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017064:	2f78      	cmp	r7, #120	; 0x78
 8017066:	4691      	mov	r9, r2
 8017068:	4680      	mov	r8, r0
 801706a:	460c      	mov	r4, r1
 801706c:	469a      	mov	sl, r3
 801706e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017072:	d807      	bhi.n	8017084 <_printf_i+0x28>
 8017074:	2f62      	cmp	r7, #98	; 0x62
 8017076:	d80a      	bhi.n	801708e <_printf_i+0x32>
 8017078:	2f00      	cmp	r7, #0
 801707a:	f000 80d8 	beq.w	801722e <_printf_i+0x1d2>
 801707e:	2f58      	cmp	r7, #88	; 0x58
 8017080:	f000 80a3 	beq.w	80171ca <_printf_i+0x16e>
 8017084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801708c:	e03a      	b.n	8017104 <_printf_i+0xa8>
 801708e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017092:	2b15      	cmp	r3, #21
 8017094:	d8f6      	bhi.n	8017084 <_printf_i+0x28>
 8017096:	a101      	add	r1, pc, #4	; (adr r1, 801709c <_printf_i+0x40>)
 8017098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801709c:	080170f5 	.word	0x080170f5
 80170a0:	08017109 	.word	0x08017109
 80170a4:	08017085 	.word	0x08017085
 80170a8:	08017085 	.word	0x08017085
 80170ac:	08017085 	.word	0x08017085
 80170b0:	08017085 	.word	0x08017085
 80170b4:	08017109 	.word	0x08017109
 80170b8:	08017085 	.word	0x08017085
 80170bc:	08017085 	.word	0x08017085
 80170c0:	08017085 	.word	0x08017085
 80170c4:	08017085 	.word	0x08017085
 80170c8:	08017215 	.word	0x08017215
 80170cc:	08017139 	.word	0x08017139
 80170d0:	080171f7 	.word	0x080171f7
 80170d4:	08017085 	.word	0x08017085
 80170d8:	08017085 	.word	0x08017085
 80170dc:	08017237 	.word	0x08017237
 80170e0:	08017085 	.word	0x08017085
 80170e4:	08017139 	.word	0x08017139
 80170e8:	08017085 	.word	0x08017085
 80170ec:	08017085 	.word	0x08017085
 80170f0:	080171ff 	.word	0x080171ff
 80170f4:	682b      	ldr	r3, [r5, #0]
 80170f6:	1d1a      	adds	r2, r3, #4
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	602a      	str	r2, [r5, #0]
 80170fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017104:	2301      	movs	r3, #1
 8017106:	e0a3      	b.n	8017250 <_printf_i+0x1f4>
 8017108:	6820      	ldr	r0, [r4, #0]
 801710a:	6829      	ldr	r1, [r5, #0]
 801710c:	0606      	lsls	r6, r0, #24
 801710e:	f101 0304 	add.w	r3, r1, #4
 8017112:	d50a      	bpl.n	801712a <_printf_i+0xce>
 8017114:	680e      	ldr	r6, [r1, #0]
 8017116:	602b      	str	r3, [r5, #0]
 8017118:	2e00      	cmp	r6, #0
 801711a:	da03      	bge.n	8017124 <_printf_i+0xc8>
 801711c:	232d      	movs	r3, #45	; 0x2d
 801711e:	4276      	negs	r6, r6
 8017120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017124:	485e      	ldr	r0, [pc, #376]	; (80172a0 <_printf_i+0x244>)
 8017126:	230a      	movs	r3, #10
 8017128:	e019      	b.n	801715e <_printf_i+0x102>
 801712a:	680e      	ldr	r6, [r1, #0]
 801712c:	602b      	str	r3, [r5, #0]
 801712e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017132:	bf18      	it	ne
 8017134:	b236      	sxthne	r6, r6
 8017136:	e7ef      	b.n	8017118 <_printf_i+0xbc>
 8017138:	682b      	ldr	r3, [r5, #0]
 801713a:	6820      	ldr	r0, [r4, #0]
 801713c:	1d19      	adds	r1, r3, #4
 801713e:	6029      	str	r1, [r5, #0]
 8017140:	0601      	lsls	r1, r0, #24
 8017142:	d501      	bpl.n	8017148 <_printf_i+0xec>
 8017144:	681e      	ldr	r6, [r3, #0]
 8017146:	e002      	b.n	801714e <_printf_i+0xf2>
 8017148:	0646      	lsls	r6, r0, #25
 801714a:	d5fb      	bpl.n	8017144 <_printf_i+0xe8>
 801714c:	881e      	ldrh	r6, [r3, #0]
 801714e:	4854      	ldr	r0, [pc, #336]	; (80172a0 <_printf_i+0x244>)
 8017150:	2f6f      	cmp	r7, #111	; 0x6f
 8017152:	bf0c      	ite	eq
 8017154:	2308      	moveq	r3, #8
 8017156:	230a      	movne	r3, #10
 8017158:	2100      	movs	r1, #0
 801715a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801715e:	6865      	ldr	r5, [r4, #4]
 8017160:	60a5      	str	r5, [r4, #8]
 8017162:	2d00      	cmp	r5, #0
 8017164:	bfa2      	ittt	ge
 8017166:	6821      	ldrge	r1, [r4, #0]
 8017168:	f021 0104 	bicge.w	r1, r1, #4
 801716c:	6021      	strge	r1, [r4, #0]
 801716e:	b90e      	cbnz	r6, 8017174 <_printf_i+0x118>
 8017170:	2d00      	cmp	r5, #0
 8017172:	d04d      	beq.n	8017210 <_printf_i+0x1b4>
 8017174:	4615      	mov	r5, r2
 8017176:	fbb6 f1f3 	udiv	r1, r6, r3
 801717a:	fb03 6711 	mls	r7, r3, r1, r6
 801717e:	5dc7      	ldrb	r7, [r0, r7]
 8017180:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017184:	4637      	mov	r7, r6
 8017186:	42bb      	cmp	r3, r7
 8017188:	460e      	mov	r6, r1
 801718a:	d9f4      	bls.n	8017176 <_printf_i+0x11a>
 801718c:	2b08      	cmp	r3, #8
 801718e:	d10b      	bne.n	80171a8 <_printf_i+0x14c>
 8017190:	6823      	ldr	r3, [r4, #0]
 8017192:	07de      	lsls	r6, r3, #31
 8017194:	d508      	bpl.n	80171a8 <_printf_i+0x14c>
 8017196:	6923      	ldr	r3, [r4, #16]
 8017198:	6861      	ldr	r1, [r4, #4]
 801719a:	4299      	cmp	r1, r3
 801719c:	bfde      	ittt	le
 801719e:	2330      	movle	r3, #48	; 0x30
 80171a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80171a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80171a8:	1b52      	subs	r2, r2, r5
 80171aa:	6122      	str	r2, [r4, #16]
 80171ac:	f8cd a000 	str.w	sl, [sp]
 80171b0:	464b      	mov	r3, r9
 80171b2:	aa03      	add	r2, sp, #12
 80171b4:	4621      	mov	r1, r4
 80171b6:	4640      	mov	r0, r8
 80171b8:	f7ff fee2 	bl	8016f80 <_printf_common>
 80171bc:	3001      	adds	r0, #1
 80171be:	d14c      	bne.n	801725a <_printf_i+0x1fe>
 80171c0:	f04f 30ff 	mov.w	r0, #4294967295
 80171c4:	b004      	add	sp, #16
 80171c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171ca:	4835      	ldr	r0, [pc, #212]	; (80172a0 <_printf_i+0x244>)
 80171cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80171d0:	6829      	ldr	r1, [r5, #0]
 80171d2:	6823      	ldr	r3, [r4, #0]
 80171d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80171d8:	6029      	str	r1, [r5, #0]
 80171da:	061d      	lsls	r5, r3, #24
 80171dc:	d514      	bpl.n	8017208 <_printf_i+0x1ac>
 80171de:	07df      	lsls	r7, r3, #31
 80171e0:	bf44      	itt	mi
 80171e2:	f043 0320 	orrmi.w	r3, r3, #32
 80171e6:	6023      	strmi	r3, [r4, #0]
 80171e8:	b91e      	cbnz	r6, 80171f2 <_printf_i+0x196>
 80171ea:	6823      	ldr	r3, [r4, #0]
 80171ec:	f023 0320 	bic.w	r3, r3, #32
 80171f0:	6023      	str	r3, [r4, #0]
 80171f2:	2310      	movs	r3, #16
 80171f4:	e7b0      	b.n	8017158 <_printf_i+0xfc>
 80171f6:	6823      	ldr	r3, [r4, #0]
 80171f8:	f043 0320 	orr.w	r3, r3, #32
 80171fc:	6023      	str	r3, [r4, #0]
 80171fe:	2378      	movs	r3, #120	; 0x78
 8017200:	4828      	ldr	r0, [pc, #160]	; (80172a4 <_printf_i+0x248>)
 8017202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017206:	e7e3      	b.n	80171d0 <_printf_i+0x174>
 8017208:	0659      	lsls	r1, r3, #25
 801720a:	bf48      	it	mi
 801720c:	b2b6      	uxthmi	r6, r6
 801720e:	e7e6      	b.n	80171de <_printf_i+0x182>
 8017210:	4615      	mov	r5, r2
 8017212:	e7bb      	b.n	801718c <_printf_i+0x130>
 8017214:	682b      	ldr	r3, [r5, #0]
 8017216:	6826      	ldr	r6, [r4, #0]
 8017218:	6961      	ldr	r1, [r4, #20]
 801721a:	1d18      	adds	r0, r3, #4
 801721c:	6028      	str	r0, [r5, #0]
 801721e:	0635      	lsls	r5, r6, #24
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	d501      	bpl.n	8017228 <_printf_i+0x1cc>
 8017224:	6019      	str	r1, [r3, #0]
 8017226:	e002      	b.n	801722e <_printf_i+0x1d2>
 8017228:	0670      	lsls	r0, r6, #25
 801722a:	d5fb      	bpl.n	8017224 <_printf_i+0x1c8>
 801722c:	8019      	strh	r1, [r3, #0]
 801722e:	2300      	movs	r3, #0
 8017230:	6123      	str	r3, [r4, #16]
 8017232:	4615      	mov	r5, r2
 8017234:	e7ba      	b.n	80171ac <_printf_i+0x150>
 8017236:	682b      	ldr	r3, [r5, #0]
 8017238:	1d1a      	adds	r2, r3, #4
 801723a:	602a      	str	r2, [r5, #0]
 801723c:	681d      	ldr	r5, [r3, #0]
 801723e:	6862      	ldr	r2, [r4, #4]
 8017240:	2100      	movs	r1, #0
 8017242:	4628      	mov	r0, r5
 8017244:	f7e9 f86c 	bl	8000320 <memchr>
 8017248:	b108      	cbz	r0, 801724e <_printf_i+0x1f2>
 801724a:	1b40      	subs	r0, r0, r5
 801724c:	6060      	str	r0, [r4, #4]
 801724e:	6863      	ldr	r3, [r4, #4]
 8017250:	6123      	str	r3, [r4, #16]
 8017252:	2300      	movs	r3, #0
 8017254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017258:	e7a8      	b.n	80171ac <_printf_i+0x150>
 801725a:	6923      	ldr	r3, [r4, #16]
 801725c:	462a      	mov	r2, r5
 801725e:	4649      	mov	r1, r9
 8017260:	4640      	mov	r0, r8
 8017262:	47d0      	blx	sl
 8017264:	3001      	adds	r0, #1
 8017266:	d0ab      	beq.n	80171c0 <_printf_i+0x164>
 8017268:	6823      	ldr	r3, [r4, #0]
 801726a:	079b      	lsls	r3, r3, #30
 801726c:	d413      	bmi.n	8017296 <_printf_i+0x23a>
 801726e:	68e0      	ldr	r0, [r4, #12]
 8017270:	9b03      	ldr	r3, [sp, #12]
 8017272:	4298      	cmp	r0, r3
 8017274:	bfb8      	it	lt
 8017276:	4618      	movlt	r0, r3
 8017278:	e7a4      	b.n	80171c4 <_printf_i+0x168>
 801727a:	2301      	movs	r3, #1
 801727c:	4632      	mov	r2, r6
 801727e:	4649      	mov	r1, r9
 8017280:	4640      	mov	r0, r8
 8017282:	47d0      	blx	sl
 8017284:	3001      	adds	r0, #1
 8017286:	d09b      	beq.n	80171c0 <_printf_i+0x164>
 8017288:	3501      	adds	r5, #1
 801728a:	68e3      	ldr	r3, [r4, #12]
 801728c:	9903      	ldr	r1, [sp, #12]
 801728e:	1a5b      	subs	r3, r3, r1
 8017290:	42ab      	cmp	r3, r5
 8017292:	dcf2      	bgt.n	801727a <_printf_i+0x21e>
 8017294:	e7eb      	b.n	801726e <_printf_i+0x212>
 8017296:	2500      	movs	r5, #0
 8017298:	f104 0619 	add.w	r6, r4, #25
 801729c:	e7f5      	b.n	801728a <_printf_i+0x22e>
 801729e:	bf00      	nop
 80172a0:	080181d5 	.word	0x080181d5
 80172a4:	080181e6 	.word	0x080181e6

080172a8 <nan>:
 80172a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80172b0 <nan+0x8>
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop
 80172b0:	00000000 	.word	0x00000000
 80172b4:	7ff80000 	.word	0x7ff80000

080172b8 <_sbrk_r>:
 80172b8:	b538      	push	{r3, r4, r5, lr}
 80172ba:	4d06      	ldr	r5, [pc, #24]	; (80172d4 <_sbrk_r+0x1c>)
 80172bc:	2300      	movs	r3, #0
 80172be:	4604      	mov	r4, r0
 80172c0:	4608      	mov	r0, r1
 80172c2:	602b      	str	r3, [r5, #0]
 80172c4:	f7ec fbb6 	bl	8003a34 <_sbrk>
 80172c8:	1c43      	adds	r3, r0, #1
 80172ca:	d102      	bne.n	80172d2 <_sbrk_r+0x1a>
 80172cc:	682b      	ldr	r3, [r5, #0]
 80172ce:	b103      	cbz	r3, 80172d2 <_sbrk_r+0x1a>
 80172d0:	6023      	str	r3, [r4, #0]
 80172d2:	bd38      	pop	{r3, r4, r5, pc}
 80172d4:	24008e30 	.word	0x24008e30

080172d8 <strncmp>:
 80172d8:	b510      	push	{r4, lr}
 80172da:	b17a      	cbz	r2, 80172fc <strncmp+0x24>
 80172dc:	4603      	mov	r3, r0
 80172de:	3901      	subs	r1, #1
 80172e0:	1884      	adds	r4, r0, r2
 80172e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80172e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80172ea:	4290      	cmp	r0, r2
 80172ec:	d101      	bne.n	80172f2 <strncmp+0x1a>
 80172ee:	42a3      	cmp	r3, r4
 80172f0:	d101      	bne.n	80172f6 <strncmp+0x1e>
 80172f2:	1a80      	subs	r0, r0, r2
 80172f4:	bd10      	pop	{r4, pc}
 80172f6:	2800      	cmp	r0, #0
 80172f8:	d1f3      	bne.n	80172e2 <strncmp+0xa>
 80172fa:	e7fa      	b.n	80172f2 <strncmp+0x1a>
 80172fc:	4610      	mov	r0, r2
 80172fe:	e7f9      	b.n	80172f4 <strncmp+0x1c>

08017300 <__swbuf_r>:
 8017300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017302:	460e      	mov	r6, r1
 8017304:	4614      	mov	r4, r2
 8017306:	4605      	mov	r5, r0
 8017308:	b118      	cbz	r0, 8017312 <__swbuf_r+0x12>
 801730a:	6983      	ldr	r3, [r0, #24]
 801730c:	b90b      	cbnz	r3, 8017312 <__swbuf_r+0x12>
 801730e:	f000 f9e7 	bl	80176e0 <__sinit>
 8017312:	4b21      	ldr	r3, [pc, #132]	; (8017398 <__swbuf_r+0x98>)
 8017314:	429c      	cmp	r4, r3
 8017316:	d12b      	bne.n	8017370 <__swbuf_r+0x70>
 8017318:	686c      	ldr	r4, [r5, #4]
 801731a:	69a3      	ldr	r3, [r4, #24]
 801731c:	60a3      	str	r3, [r4, #8]
 801731e:	89a3      	ldrh	r3, [r4, #12]
 8017320:	071a      	lsls	r2, r3, #28
 8017322:	d52f      	bpl.n	8017384 <__swbuf_r+0x84>
 8017324:	6923      	ldr	r3, [r4, #16]
 8017326:	b36b      	cbz	r3, 8017384 <__swbuf_r+0x84>
 8017328:	6923      	ldr	r3, [r4, #16]
 801732a:	6820      	ldr	r0, [r4, #0]
 801732c:	1ac0      	subs	r0, r0, r3
 801732e:	6963      	ldr	r3, [r4, #20]
 8017330:	b2f6      	uxtb	r6, r6
 8017332:	4283      	cmp	r3, r0
 8017334:	4637      	mov	r7, r6
 8017336:	dc04      	bgt.n	8017342 <__swbuf_r+0x42>
 8017338:	4621      	mov	r1, r4
 801733a:	4628      	mov	r0, r5
 801733c:	f000 f93c 	bl	80175b8 <_fflush_r>
 8017340:	bb30      	cbnz	r0, 8017390 <__swbuf_r+0x90>
 8017342:	68a3      	ldr	r3, [r4, #8]
 8017344:	3b01      	subs	r3, #1
 8017346:	60a3      	str	r3, [r4, #8]
 8017348:	6823      	ldr	r3, [r4, #0]
 801734a:	1c5a      	adds	r2, r3, #1
 801734c:	6022      	str	r2, [r4, #0]
 801734e:	701e      	strb	r6, [r3, #0]
 8017350:	6963      	ldr	r3, [r4, #20]
 8017352:	3001      	adds	r0, #1
 8017354:	4283      	cmp	r3, r0
 8017356:	d004      	beq.n	8017362 <__swbuf_r+0x62>
 8017358:	89a3      	ldrh	r3, [r4, #12]
 801735a:	07db      	lsls	r3, r3, #31
 801735c:	d506      	bpl.n	801736c <__swbuf_r+0x6c>
 801735e:	2e0a      	cmp	r6, #10
 8017360:	d104      	bne.n	801736c <__swbuf_r+0x6c>
 8017362:	4621      	mov	r1, r4
 8017364:	4628      	mov	r0, r5
 8017366:	f000 f927 	bl	80175b8 <_fflush_r>
 801736a:	b988      	cbnz	r0, 8017390 <__swbuf_r+0x90>
 801736c:	4638      	mov	r0, r7
 801736e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017370:	4b0a      	ldr	r3, [pc, #40]	; (801739c <__swbuf_r+0x9c>)
 8017372:	429c      	cmp	r4, r3
 8017374:	d101      	bne.n	801737a <__swbuf_r+0x7a>
 8017376:	68ac      	ldr	r4, [r5, #8]
 8017378:	e7cf      	b.n	801731a <__swbuf_r+0x1a>
 801737a:	4b09      	ldr	r3, [pc, #36]	; (80173a0 <__swbuf_r+0xa0>)
 801737c:	429c      	cmp	r4, r3
 801737e:	bf08      	it	eq
 8017380:	68ec      	ldreq	r4, [r5, #12]
 8017382:	e7ca      	b.n	801731a <__swbuf_r+0x1a>
 8017384:	4621      	mov	r1, r4
 8017386:	4628      	mov	r0, r5
 8017388:	f000 f81a 	bl	80173c0 <__swsetup_r>
 801738c:	2800      	cmp	r0, #0
 801738e:	d0cb      	beq.n	8017328 <__swbuf_r+0x28>
 8017390:	f04f 37ff 	mov.w	r7, #4294967295
 8017394:	e7ea      	b.n	801736c <__swbuf_r+0x6c>
 8017396:	bf00      	nop
 8017398:	08018218 	.word	0x08018218
 801739c:	08018238 	.word	0x08018238
 80173a0:	080181f8 	.word	0x080181f8

080173a4 <__ascii_wctomb>:
 80173a4:	b149      	cbz	r1, 80173ba <__ascii_wctomb+0x16>
 80173a6:	2aff      	cmp	r2, #255	; 0xff
 80173a8:	bf85      	ittet	hi
 80173aa:	238a      	movhi	r3, #138	; 0x8a
 80173ac:	6003      	strhi	r3, [r0, #0]
 80173ae:	700a      	strbls	r2, [r1, #0]
 80173b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80173b4:	bf98      	it	ls
 80173b6:	2001      	movls	r0, #1
 80173b8:	4770      	bx	lr
 80173ba:	4608      	mov	r0, r1
 80173bc:	4770      	bx	lr
	...

080173c0 <__swsetup_r>:
 80173c0:	4b32      	ldr	r3, [pc, #200]	; (801748c <__swsetup_r+0xcc>)
 80173c2:	b570      	push	{r4, r5, r6, lr}
 80173c4:	681d      	ldr	r5, [r3, #0]
 80173c6:	4606      	mov	r6, r0
 80173c8:	460c      	mov	r4, r1
 80173ca:	b125      	cbz	r5, 80173d6 <__swsetup_r+0x16>
 80173cc:	69ab      	ldr	r3, [r5, #24]
 80173ce:	b913      	cbnz	r3, 80173d6 <__swsetup_r+0x16>
 80173d0:	4628      	mov	r0, r5
 80173d2:	f000 f985 	bl	80176e0 <__sinit>
 80173d6:	4b2e      	ldr	r3, [pc, #184]	; (8017490 <__swsetup_r+0xd0>)
 80173d8:	429c      	cmp	r4, r3
 80173da:	d10f      	bne.n	80173fc <__swsetup_r+0x3c>
 80173dc:	686c      	ldr	r4, [r5, #4]
 80173de:	89a3      	ldrh	r3, [r4, #12]
 80173e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80173e4:	0719      	lsls	r1, r3, #28
 80173e6:	d42c      	bmi.n	8017442 <__swsetup_r+0x82>
 80173e8:	06dd      	lsls	r5, r3, #27
 80173ea:	d411      	bmi.n	8017410 <__swsetup_r+0x50>
 80173ec:	2309      	movs	r3, #9
 80173ee:	6033      	str	r3, [r6, #0]
 80173f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80173f4:	81a3      	strh	r3, [r4, #12]
 80173f6:	f04f 30ff 	mov.w	r0, #4294967295
 80173fa:	e03e      	b.n	801747a <__swsetup_r+0xba>
 80173fc:	4b25      	ldr	r3, [pc, #148]	; (8017494 <__swsetup_r+0xd4>)
 80173fe:	429c      	cmp	r4, r3
 8017400:	d101      	bne.n	8017406 <__swsetup_r+0x46>
 8017402:	68ac      	ldr	r4, [r5, #8]
 8017404:	e7eb      	b.n	80173de <__swsetup_r+0x1e>
 8017406:	4b24      	ldr	r3, [pc, #144]	; (8017498 <__swsetup_r+0xd8>)
 8017408:	429c      	cmp	r4, r3
 801740a:	bf08      	it	eq
 801740c:	68ec      	ldreq	r4, [r5, #12]
 801740e:	e7e6      	b.n	80173de <__swsetup_r+0x1e>
 8017410:	0758      	lsls	r0, r3, #29
 8017412:	d512      	bpl.n	801743a <__swsetup_r+0x7a>
 8017414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017416:	b141      	cbz	r1, 801742a <__swsetup_r+0x6a>
 8017418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801741c:	4299      	cmp	r1, r3
 801741e:	d002      	beq.n	8017426 <__swsetup_r+0x66>
 8017420:	4630      	mov	r0, r6
 8017422:	f7ff fa17 	bl	8016854 <_free_r>
 8017426:	2300      	movs	r3, #0
 8017428:	6363      	str	r3, [r4, #52]	; 0x34
 801742a:	89a3      	ldrh	r3, [r4, #12]
 801742c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017430:	81a3      	strh	r3, [r4, #12]
 8017432:	2300      	movs	r3, #0
 8017434:	6063      	str	r3, [r4, #4]
 8017436:	6923      	ldr	r3, [r4, #16]
 8017438:	6023      	str	r3, [r4, #0]
 801743a:	89a3      	ldrh	r3, [r4, #12]
 801743c:	f043 0308 	orr.w	r3, r3, #8
 8017440:	81a3      	strh	r3, [r4, #12]
 8017442:	6923      	ldr	r3, [r4, #16]
 8017444:	b94b      	cbnz	r3, 801745a <__swsetup_r+0x9a>
 8017446:	89a3      	ldrh	r3, [r4, #12]
 8017448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801744c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017450:	d003      	beq.n	801745a <__swsetup_r+0x9a>
 8017452:	4621      	mov	r1, r4
 8017454:	4630      	mov	r0, r6
 8017456:	f000 fa09 	bl	801786c <__smakebuf_r>
 801745a:	89a0      	ldrh	r0, [r4, #12]
 801745c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017460:	f010 0301 	ands.w	r3, r0, #1
 8017464:	d00a      	beq.n	801747c <__swsetup_r+0xbc>
 8017466:	2300      	movs	r3, #0
 8017468:	60a3      	str	r3, [r4, #8]
 801746a:	6963      	ldr	r3, [r4, #20]
 801746c:	425b      	negs	r3, r3
 801746e:	61a3      	str	r3, [r4, #24]
 8017470:	6923      	ldr	r3, [r4, #16]
 8017472:	b943      	cbnz	r3, 8017486 <__swsetup_r+0xc6>
 8017474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017478:	d1ba      	bne.n	80173f0 <__swsetup_r+0x30>
 801747a:	bd70      	pop	{r4, r5, r6, pc}
 801747c:	0781      	lsls	r1, r0, #30
 801747e:	bf58      	it	pl
 8017480:	6963      	ldrpl	r3, [r4, #20]
 8017482:	60a3      	str	r3, [r4, #8]
 8017484:	e7f4      	b.n	8017470 <__swsetup_r+0xb0>
 8017486:	2000      	movs	r0, #0
 8017488:	e7f7      	b.n	801747a <__swsetup_r+0xba>
 801748a:	bf00      	nop
 801748c:	2400001c 	.word	0x2400001c
 8017490:	08018218 	.word	0x08018218
 8017494:	08018238 	.word	0x08018238
 8017498:	080181f8 	.word	0x080181f8

0801749c <abort>:
 801749c:	b508      	push	{r3, lr}
 801749e:	2006      	movs	r0, #6
 80174a0:	f000 faa2 	bl	80179e8 <raise>
 80174a4:	2001      	movs	r0, #1
 80174a6:	f7ec fa4e 	bl	8003946 <_exit>
	...

080174ac <__sflush_r>:
 80174ac:	898a      	ldrh	r2, [r1, #12]
 80174ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174b2:	4605      	mov	r5, r0
 80174b4:	0710      	lsls	r0, r2, #28
 80174b6:	460c      	mov	r4, r1
 80174b8:	d458      	bmi.n	801756c <__sflush_r+0xc0>
 80174ba:	684b      	ldr	r3, [r1, #4]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	dc05      	bgt.n	80174cc <__sflush_r+0x20>
 80174c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	dc02      	bgt.n	80174cc <__sflush_r+0x20>
 80174c6:	2000      	movs	r0, #0
 80174c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174ce:	2e00      	cmp	r6, #0
 80174d0:	d0f9      	beq.n	80174c6 <__sflush_r+0x1a>
 80174d2:	2300      	movs	r3, #0
 80174d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80174d8:	682f      	ldr	r7, [r5, #0]
 80174da:	602b      	str	r3, [r5, #0]
 80174dc:	d032      	beq.n	8017544 <__sflush_r+0x98>
 80174de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80174e0:	89a3      	ldrh	r3, [r4, #12]
 80174e2:	075a      	lsls	r2, r3, #29
 80174e4:	d505      	bpl.n	80174f2 <__sflush_r+0x46>
 80174e6:	6863      	ldr	r3, [r4, #4]
 80174e8:	1ac0      	subs	r0, r0, r3
 80174ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80174ec:	b10b      	cbz	r3, 80174f2 <__sflush_r+0x46>
 80174ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80174f0:	1ac0      	subs	r0, r0, r3
 80174f2:	2300      	movs	r3, #0
 80174f4:	4602      	mov	r2, r0
 80174f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174f8:	6a21      	ldr	r1, [r4, #32]
 80174fa:	4628      	mov	r0, r5
 80174fc:	47b0      	blx	r6
 80174fe:	1c43      	adds	r3, r0, #1
 8017500:	89a3      	ldrh	r3, [r4, #12]
 8017502:	d106      	bne.n	8017512 <__sflush_r+0x66>
 8017504:	6829      	ldr	r1, [r5, #0]
 8017506:	291d      	cmp	r1, #29
 8017508:	d82c      	bhi.n	8017564 <__sflush_r+0xb8>
 801750a:	4a2a      	ldr	r2, [pc, #168]	; (80175b4 <__sflush_r+0x108>)
 801750c:	40ca      	lsrs	r2, r1
 801750e:	07d6      	lsls	r6, r2, #31
 8017510:	d528      	bpl.n	8017564 <__sflush_r+0xb8>
 8017512:	2200      	movs	r2, #0
 8017514:	6062      	str	r2, [r4, #4]
 8017516:	04d9      	lsls	r1, r3, #19
 8017518:	6922      	ldr	r2, [r4, #16]
 801751a:	6022      	str	r2, [r4, #0]
 801751c:	d504      	bpl.n	8017528 <__sflush_r+0x7c>
 801751e:	1c42      	adds	r2, r0, #1
 8017520:	d101      	bne.n	8017526 <__sflush_r+0x7a>
 8017522:	682b      	ldr	r3, [r5, #0]
 8017524:	b903      	cbnz	r3, 8017528 <__sflush_r+0x7c>
 8017526:	6560      	str	r0, [r4, #84]	; 0x54
 8017528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801752a:	602f      	str	r7, [r5, #0]
 801752c:	2900      	cmp	r1, #0
 801752e:	d0ca      	beq.n	80174c6 <__sflush_r+0x1a>
 8017530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017534:	4299      	cmp	r1, r3
 8017536:	d002      	beq.n	801753e <__sflush_r+0x92>
 8017538:	4628      	mov	r0, r5
 801753a:	f7ff f98b 	bl	8016854 <_free_r>
 801753e:	2000      	movs	r0, #0
 8017540:	6360      	str	r0, [r4, #52]	; 0x34
 8017542:	e7c1      	b.n	80174c8 <__sflush_r+0x1c>
 8017544:	6a21      	ldr	r1, [r4, #32]
 8017546:	2301      	movs	r3, #1
 8017548:	4628      	mov	r0, r5
 801754a:	47b0      	blx	r6
 801754c:	1c41      	adds	r1, r0, #1
 801754e:	d1c7      	bne.n	80174e0 <__sflush_r+0x34>
 8017550:	682b      	ldr	r3, [r5, #0]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d0c4      	beq.n	80174e0 <__sflush_r+0x34>
 8017556:	2b1d      	cmp	r3, #29
 8017558:	d001      	beq.n	801755e <__sflush_r+0xb2>
 801755a:	2b16      	cmp	r3, #22
 801755c:	d101      	bne.n	8017562 <__sflush_r+0xb6>
 801755e:	602f      	str	r7, [r5, #0]
 8017560:	e7b1      	b.n	80174c6 <__sflush_r+0x1a>
 8017562:	89a3      	ldrh	r3, [r4, #12]
 8017564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017568:	81a3      	strh	r3, [r4, #12]
 801756a:	e7ad      	b.n	80174c8 <__sflush_r+0x1c>
 801756c:	690f      	ldr	r7, [r1, #16]
 801756e:	2f00      	cmp	r7, #0
 8017570:	d0a9      	beq.n	80174c6 <__sflush_r+0x1a>
 8017572:	0793      	lsls	r3, r2, #30
 8017574:	680e      	ldr	r6, [r1, #0]
 8017576:	bf08      	it	eq
 8017578:	694b      	ldreq	r3, [r1, #20]
 801757a:	600f      	str	r7, [r1, #0]
 801757c:	bf18      	it	ne
 801757e:	2300      	movne	r3, #0
 8017580:	eba6 0807 	sub.w	r8, r6, r7
 8017584:	608b      	str	r3, [r1, #8]
 8017586:	f1b8 0f00 	cmp.w	r8, #0
 801758a:	dd9c      	ble.n	80174c6 <__sflush_r+0x1a>
 801758c:	6a21      	ldr	r1, [r4, #32]
 801758e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017590:	4643      	mov	r3, r8
 8017592:	463a      	mov	r2, r7
 8017594:	4628      	mov	r0, r5
 8017596:	47b0      	blx	r6
 8017598:	2800      	cmp	r0, #0
 801759a:	dc06      	bgt.n	80175aa <__sflush_r+0xfe>
 801759c:	89a3      	ldrh	r3, [r4, #12]
 801759e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175a2:	81a3      	strh	r3, [r4, #12]
 80175a4:	f04f 30ff 	mov.w	r0, #4294967295
 80175a8:	e78e      	b.n	80174c8 <__sflush_r+0x1c>
 80175aa:	4407      	add	r7, r0
 80175ac:	eba8 0800 	sub.w	r8, r8, r0
 80175b0:	e7e9      	b.n	8017586 <__sflush_r+0xda>
 80175b2:	bf00      	nop
 80175b4:	20400001 	.word	0x20400001

080175b8 <_fflush_r>:
 80175b8:	b538      	push	{r3, r4, r5, lr}
 80175ba:	690b      	ldr	r3, [r1, #16]
 80175bc:	4605      	mov	r5, r0
 80175be:	460c      	mov	r4, r1
 80175c0:	b913      	cbnz	r3, 80175c8 <_fflush_r+0x10>
 80175c2:	2500      	movs	r5, #0
 80175c4:	4628      	mov	r0, r5
 80175c6:	bd38      	pop	{r3, r4, r5, pc}
 80175c8:	b118      	cbz	r0, 80175d2 <_fflush_r+0x1a>
 80175ca:	6983      	ldr	r3, [r0, #24]
 80175cc:	b90b      	cbnz	r3, 80175d2 <_fflush_r+0x1a>
 80175ce:	f000 f887 	bl	80176e0 <__sinit>
 80175d2:	4b14      	ldr	r3, [pc, #80]	; (8017624 <_fflush_r+0x6c>)
 80175d4:	429c      	cmp	r4, r3
 80175d6:	d11b      	bne.n	8017610 <_fflush_r+0x58>
 80175d8:	686c      	ldr	r4, [r5, #4]
 80175da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d0ef      	beq.n	80175c2 <_fflush_r+0xa>
 80175e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80175e4:	07d0      	lsls	r0, r2, #31
 80175e6:	d404      	bmi.n	80175f2 <_fflush_r+0x3a>
 80175e8:	0599      	lsls	r1, r3, #22
 80175ea:	d402      	bmi.n	80175f2 <_fflush_r+0x3a>
 80175ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175ee:	f000 f915 	bl	801781c <__retarget_lock_acquire_recursive>
 80175f2:	4628      	mov	r0, r5
 80175f4:	4621      	mov	r1, r4
 80175f6:	f7ff ff59 	bl	80174ac <__sflush_r>
 80175fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80175fc:	07da      	lsls	r2, r3, #31
 80175fe:	4605      	mov	r5, r0
 8017600:	d4e0      	bmi.n	80175c4 <_fflush_r+0xc>
 8017602:	89a3      	ldrh	r3, [r4, #12]
 8017604:	059b      	lsls	r3, r3, #22
 8017606:	d4dd      	bmi.n	80175c4 <_fflush_r+0xc>
 8017608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801760a:	f000 f908 	bl	801781e <__retarget_lock_release_recursive>
 801760e:	e7d9      	b.n	80175c4 <_fflush_r+0xc>
 8017610:	4b05      	ldr	r3, [pc, #20]	; (8017628 <_fflush_r+0x70>)
 8017612:	429c      	cmp	r4, r3
 8017614:	d101      	bne.n	801761a <_fflush_r+0x62>
 8017616:	68ac      	ldr	r4, [r5, #8]
 8017618:	e7df      	b.n	80175da <_fflush_r+0x22>
 801761a:	4b04      	ldr	r3, [pc, #16]	; (801762c <_fflush_r+0x74>)
 801761c:	429c      	cmp	r4, r3
 801761e:	bf08      	it	eq
 8017620:	68ec      	ldreq	r4, [r5, #12]
 8017622:	e7da      	b.n	80175da <_fflush_r+0x22>
 8017624:	08018218 	.word	0x08018218
 8017628:	08018238 	.word	0x08018238
 801762c:	080181f8 	.word	0x080181f8

08017630 <std>:
 8017630:	2300      	movs	r3, #0
 8017632:	b510      	push	{r4, lr}
 8017634:	4604      	mov	r4, r0
 8017636:	e9c0 3300 	strd	r3, r3, [r0]
 801763a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801763e:	6083      	str	r3, [r0, #8]
 8017640:	8181      	strh	r1, [r0, #12]
 8017642:	6643      	str	r3, [r0, #100]	; 0x64
 8017644:	81c2      	strh	r2, [r0, #14]
 8017646:	6183      	str	r3, [r0, #24]
 8017648:	4619      	mov	r1, r3
 801764a:	2208      	movs	r2, #8
 801764c:	305c      	adds	r0, #92	; 0x5c
 801764e:	f7fd f977 	bl	8014940 <memset>
 8017652:	4b05      	ldr	r3, [pc, #20]	; (8017668 <std+0x38>)
 8017654:	6263      	str	r3, [r4, #36]	; 0x24
 8017656:	4b05      	ldr	r3, [pc, #20]	; (801766c <std+0x3c>)
 8017658:	62a3      	str	r3, [r4, #40]	; 0x28
 801765a:	4b05      	ldr	r3, [pc, #20]	; (8017670 <std+0x40>)
 801765c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801765e:	4b05      	ldr	r3, [pc, #20]	; (8017674 <std+0x44>)
 8017660:	6224      	str	r4, [r4, #32]
 8017662:	6323      	str	r3, [r4, #48]	; 0x30
 8017664:	bd10      	pop	{r4, pc}
 8017666:	bf00      	nop
 8017668:	08017a21 	.word	0x08017a21
 801766c:	08017a43 	.word	0x08017a43
 8017670:	08017a7b 	.word	0x08017a7b
 8017674:	08017a9f 	.word	0x08017a9f

08017678 <_cleanup_r>:
 8017678:	4901      	ldr	r1, [pc, #4]	; (8017680 <_cleanup_r+0x8>)
 801767a:	f000 b8af 	b.w	80177dc <_fwalk_reent>
 801767e:	bf00      	nop
 8017680:	080175b9 	.word	0x080175b9

08017684 <__sfmoreglue>:
 8017684:	b570      	push	{r4, r5, r6, lr}
 8017686:	2268      	movs	r2, #104	; 0x68
 8017688:	1e4d      	subs	r5, r1, #1
 801768a:	4355      	muls	r5, r2
 801768c:	460e      	mov	r6, r1
 801768e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017692:	f7ff f94b 	bl	801692c <_malloc_r>
 8017696:	4604      	mov	r4, r0
 8017698:	b140      	cbz	r0, 80176ac <__sfmoreglue+0x28>
 801769a:	2100      	movs	r1, #0
 801769c:	e9c0 1600 	strd	r1, r6, [r0]
 80176a0:	300c      	adds	r0, #12
 80176a2:	60a0      	str	r0, [r4, #8]
 80176a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80176a8:	f7fd f94a 	bl	8014940 <memset>
 80176ac:	4620      	mov	r0, r4
 80176ae:	bd70      	pop	{r4, r5, r6, pc}

080176b0 <__sfp_lock_acquire>:
 80176b0:	4801      	ldr	r0, [pc, #4]	; (80176b8 <__sfp_lock_acquire+0x8>)
 80176b2:	f000 b8b3 	b.w	801781c <__retarget_lock_acquire_recursive>
 80176b6:	bf00      	nop
 80176b8:	24008e2d 	.word	0x24008e2d

080176bc <__sfp_lock_release>:
 80176bc:	4801      	ldr	r0, [pc, #4]	; (80176c4 <__sfp_lock_release+0x8>)
 80176be:	f000 b8ae 	b.w	801781e <__retarget_lock_release_recursive>
 80176c2:	bf00      	nop
 80176c4:	24008e2d 	.word	0x24008e2d

080176c8 <__sinit_lock_acquire>:
 80176c8:	4801      	ldr	r0, [pc, #4]	; (80176d0 <__sinit_lock_acquire+0x8>)
 80176ca:	f000 b8a7 	b.w	801781c <__retarget_lock_acquire_recursive>
 80176ce:	bf00      	nop
 80176d0:	24008e2e 	.word	0x24008e2e

080176d4 <__sinit_lock_release>:
 80176d4:	4801      	ldr	r0, [pc, #4]	; (80176dc <__sinit_lock_release+0x8>)
 80176d6:	f000 b8a2 	b.w	801781e <__retarget_lock_release_recursive>
 80176da:	bf00      	nop
 80176dc:	24008e2e 	.word	0x24008e2e

080176e0 <__sinit>:
 80176e0:	b510      	push	{r4, lr}
 80176e2:	4604      	mov	r4, r0
 80176e4:	f7ff fff0 	bl	80176c8 <__sinit_lock_acquire>
 80176e8:	69a3      	ldr	r3, [r4, #24]
 80176ea:	b11b      	cbz	r3, 80176f4 <__sinit+0x14>
 80176ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176f0:	f7ff bff0 	b.w	80176d4 <__sinit_lock_release>
 80176f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80176f8:	6523      	str	r3, [r4, #80]	; 0x50
 80176fa:	4b13      	ldr	r3, [pc, #76]	; (8017748 <__sinit+0x68>)
 80176fc:	4a13      	ldr	r2, [pc, #76]	; (801774c <__sinit+0x6c>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	62a2      	str	r2, [r4, #40]	; 0x28
 8017702:	42a3      	cmp	r3, r4
 8017704:	bf04      	itt	eq
 8017706:	2301      	moveq	r3, #1
 8017708:	61a3      	streq	r3, [r4, #24]
 801770a:	4620      	mov	r0, r4
 801770c:	f000 f820 	bl	8017750 <__sfp>
 8017710:	6060      	str	r0, [r4, #4]
 8017712:	4620      	mov	r0, r4
 8017714:	f000 f81c 	bl	8017750 <__sfp>
 8017718:	60a0      	str	r0, [r4, #8]
 801771a:	4620      	mov	r0, r4
 801771c:	f000 f818 	bl	8017750 <__sfp>
 8017720:	2200      	movs	r2, #0
 8017722:	60e0      	str	r0, [r4, #12]
 8017724:	2104      	movs	r1, #4
 8017726:	6860      	ldr	r0, [r4, #4]
 8017728:	f7ff ff82 	bl	8017630 <std>
 801772c:	68a0      	ldr	r0, [r4, #8]
 801772e:	2201      	movs	r2, #1
 8017730:	2109      	movs	r1, #9
 8017732:	f7ff ff7d 	bl	8017630 <std>
 8017736:	68e0      	ldr	r0, [r4, #12]
 8017738:	2202      	movs	r2, #2
 801773a:	2112      	movs	r1, #18
 801773c:	f7ff ff78 	bl	8017630 <std>
 8017740:	2301      	movs	r3, #1
 8017742:	61a3      	str	r3, [r4, #24]
 8017744:	e7d2      	b.n	80176ec <__sinit+0xc>
 8017746:	bf00      	nop
 8017748:	08017dcc 	.word	0x08017dcc
 801774c:	08017679 	.word	0x08017679

08017750 <__sfp>:
 8017750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017752:	4607      	mov	r7, r0
 8017754:	f7ff ffac 	bl	80176b0 <__sfp_lock_acquire>
 8017758:	4b1e      	ldr	r3, [pc, #120]	; (80177d4 <__sfp+0x84>)
 801775a:	681e      	ldr	r6, [r3, #0]
 801775c:	69b3      	ldr	r3, [r6, #24]
 801775e:	b913      	cbnz	r3, 8017766 <__sfp+0x16>
 8017760:	4630      	mov	r0, r6
 8017762:	f7ff ffbd 	bl	80176e0 <__sinit>
 8017766:	3648      	adds	r6, #72	; 0x48
 8017768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801776c:	3b01      	subs	r3, #1
 801776e:	d503      	bpl.n	8017778 <__sfp+0x28>
 8017770:	6833      	ldr	r3, [r6, #0]
 8017772:	b30b      	cbz	r3, 80177b8 <__sfp+0x68>
 8017774:	6836      	ldr	r6, [r6, #0]
 8017776:	e7f7      	b.n	8017768 <__sfp+0x18>
 8017778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801777c:	b9d5      	cbnz	r5, 80177b4 <__sfp+0x64>
 801777e:	4b16      	ldr	r3, [pc, #88]	; (80177d8 <__sfp+0x88>)
 8017780:	60e3      	str	r3, [r4, #12]
 8017782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017786:	6665      	str	r5, [r4, #100]	; 0x64
 8017788:	f000 f847 	bl	801781a <__retarget_lock_init_recursive>
 801778c:	f7ff ff96 	bl	80176bc <__sfp_lock_release>
 8017790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017798:	6025      	str	r5, [r4, #0]
 801779a:	61a5      	str	r5, [r4, #24]
 801779c:	2208      	movs	r2, #8
 801779e:	4629      	mov	r1, r5
 80177a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80177a4:	f7fd f8cc 	bl	8014940 <memset>
 80177a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80177ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80177b0:	4620      	mov	r0, r4
 80177b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177b4:	3468      	adds	r4, #104	; 0x68
 80177b6:	e7d9      	b.n	801776c <__sfp+0x1c>
 80177b8:	2104      	movs	r1, #4
 80177ba:	4638      	mov	r0, r7
 80177bc:	f7ff ff62 	bl	8017684 <__sfmoreglue>
 80177c0:	4604      	mov	r4, r0
 80177c2:	6030      	str	r0, [r6, #0]
 80177c4:	2800      	cmp	r0, #0
 80177c6:	d1d5      	bne.n	8017774 <__sfp+0x24>
 80177c8:	f7ff ff78 	bl	80176bc <__sfp_lock_release>
 80177cc:	230c      	movs	r3, #12
 80177ce:	603b      	str	r3, [r7, #0]
 80177d0:	e7ee      	b.n	80177b0 <__sfp+0x60>
 80177d2:	bf00      	nop
 80177d4:	08017dcc 	.word	0x08017dcc
 80177d8:	ffff0001 	.word	0xffff0001

080177dc <_fwalk_reent>:
 80177dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177e0:	4606      	mov	r6, r0
 80177e2:	4688      	mov	r8, r1
 80177e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80177e8:	2700      	movs	r7, #0
 80177ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80177ee:	f1b9 0901 	subs.w	r9, r9, #1
 80177f2:	d505      	bpl.n	8017800 <_fwalk_reent+0x24>
 80177f4:	6824      	ldr	r4, [r4, #0]
 80177f6:	2c00      	cmp	r4, #0
 80177f8:	d1f7      	bne.n	80177ea <_fwalk_reent+0xe>
 80177fa:	4638      	mov	r0, r7
 80177fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017800:	89ab      	ldrh	r3, [r5, #12]
 8017802:	2b01      	cmp	r3, #1
 8017804:	d907      	bls.n	8017816 <_fwalk_reent+0x3a>
 8017806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801780a:	3301      	adds	r3, #1
 801780c:	d003      	beq.n	8017816 <_fwalk_reent+0x3a>
 801780e:	4629      	mov	r1, r5
 8017810:	4630      	mov	r0, r6
 8017812:	47c0      	blx	r8
 8017814:	4307      	orrs	r7, r0
 8017816:	3568      	adds	r5, #104	; 0x68
 8017818:	e7e9      	b.n	80177ee <_fwalk_reent+0x12>

0801781a <__retarget_lock_init_recursive>:
 801781a:	4770      	bx	lr

0801781c <__retarget_lock_acquire_recursive>:
 801781c:	4770      	bx	lr

0801781e <__retarget_lock_release_recursive>:
 801781e:	4770      	bx	lr

08017820 <__swhatbuf_r>:
 8017820:	b570      	push	{r4, r5, r6, lr}
 8017822:	460e      	mov	r6, r1
 8017824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017828:	2900      	cmp	r1, #0
 801782a:	b096      	sub	sp, #88	; 0x58
 801782c:	4614      	mov	r4, r2
 801782e:	461d      	mov	r5, r3
 8017830:	da08      	bge.n	8017844 <__swhatbuf_r+0x24>
 8017832:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017836:	2200      	movs	r2, #0
 8017838:	602a      	str	r2, [r5, #0]
 801783a:	061a      	lsls	r2, r3, #24
 801783c:	d410      	bmi.n	8017860 <__swhatbuf_r+0x40>
 801783e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017842:	e00e      	b.n	8017862 <__swhatbuf_r+0x42>
 8017844:	466a      	mov	r2, sp
 8017846:	f000 f951 	bl	8017aec <_fstat_r>
 801784a:	2800      	cmp	r0, #0
 801784c:	dbf1      	blt.n	8017832 <__swhatbuf_r+0x12>
 801784e:	9a01      	ldr	r2, [sp, #4]
 8017850:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017854:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017858:	425a      	negs	r2, r3
 801785a:	415a      	adcs	r2, r3
 801785c:	602a      	str	r2, [r5, #0]
 801785e:	e7ee      	b.n	801783e <__swhatbuf_r+0x1e>
 8017860:	2340      	movs	r3, #64	; 0x40
 8017862:	2000      	movs	r0, #0
 8017864:	6023      	str	r3, [r4, #0]
 8017866:	b016      	add	sp, #88	; 0x58
 8017868:	bd70      	pop	{r4, r5, r6, pc}
	...

0801786c <__smakebuf_r>:
 801786c:	898b      	ldrh	r3, [r1, #12]
 801786e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017870:	079d      	lsls	r5, r3, #30
 8017872:	4606      	mov	r6, r0
 8017874:	460c      	mov	r4, r1
 8017876:	d507      	bpl.n	8017888 <__smakebuf_r+0x1c>
 8017878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801787c:	6023      	str	r3, [r4, #0]
 801787e:	6123      	str	r3, [r4, #16]
 8017880:	2301      	movs	r3, #1
 8017882:	6163      	str	r3, [r4, #20]
 8017884:	b002      	add	sp, #8
 8017886:	bd70      	pop	{r4, r5, r6, pc}
 8017888:	ab01      	add	r3, sp, #4
 801788a:	466a      	mov	r2, sp
 801788c:	f7ff ffc8 	bl	8017820 <__swhatbuf_r>
 8017890:	9900      	ldr	r1, [sp, #0]
 8017892:	4605      	mov	r5, r0
 8017894:	4630      	mov	r0, r6
 8017896:	f7ff f849 	bl	801692c <_malloc_r>
 801789a:	b948      	cbnz	r0, 80178b0 <__smakebuf_r+0x44>
 801789c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178a0:	059a      	lsls	r2, r3, #22
 80178a2:	d4ef      	bmi.n	8017884 <__smakebuf_r+0x18>
 80178a4:	f023 0303 	bic.w	r3, r3, #3
 80178a8:	f043 0302 	orr.w	r3, r3, #2
 80178ac:	81a3      	strh	r3, [r4, #12]
 80178ae:	e7e3      	b.n	8017878 <__smakebuf_r+0xc>
 80178b0:	4b0d      	ldr	r3, [pc, #52]	; (80178e8 <__smakebuf_r+0x7c>)
 80178b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80178b4:	89a3      	ldrh	r3, [r4, #12]
 80178b6:	6020      	str	r0, [r4, #0]
 80178b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178bc:	81a3      	strh	r3, [r4, #12]
 80178be:	9b00      	ldr	r3, [sp, #0]
 80178c0:	6163      	str	r3, [r4, #20]
 80178c2:	9b01      	ldr	r3, [sp, #4]
 80178c4:	6120      	str	r0, [r4, #16]
 80178c6:	b15b      	cbz	r3, 80178e0 <__smakebuf_r+0x74>
 80178c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178cc:	4630      	mov	r0, r6
 80178ce:	f000 f91f 	bl	8017b10 <_isatty_r>
 80178d2:	b128      	cbz	r0, 80178e0 <__smakebuf_r+0x74>
 80178d4:	89a3      	ldrh	r3, [r4, #12]
 80178d6:	f023 0303 	bic.w	r3, r3, #3
 80178da:	f043 0301 	orr.w	r3, r3, #1
 80178de:	81a3      	strh	r3, [r4, #12]
 80178e0:	89a0      	ldrh	r0, [r4, #12]
 80178e2:	4305      	orrs	r5, r0
 80178e4:	81a5      	strh	r5, [r4, #12]
 80178e6:	e7cd      	b.n	8017884 <__smakebuf_r+0x18>
 80178e8:	08017679 	.word	0x08017679

080178ec <memmove>:
 80178ec:	4288      	cmp	r0, r1
 80178ee:	b510      	push	{r4, lr}
 80178f0:	eb01 0402 	add.w	r4, r1, r2
 80178f4:	d902      	bls.n	80178fc <memmove+0x10>
 80178f6:	4284      	cmp	r4, r0
 80178f8:	4623      	mov	r3, r4
 80178fa:	d807      	bhi.n	801790c <memmove+0x20>
 80178fc:	1e43      	subs	r3, r0, #1
 80178fe:	42a1      	cmp	r1, r4
 8017900:	d008      	beq.n	8017914 <memmove+0x28>
 8017902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017906:	f803 2f01 	strb.w	r2, [r3, #1]!
 801790a:	e7f8      	b.n	80178fe <memmove+0x12>
 801790c:	4402      	add	r2, r0
 801790e:	4601      	mov	r1, r0
 8017910:	428a      	cmp	r2, r1
 8017912:	d100      	bne.n	8017916 <memmove+0x2a>
 8017914:	bd10      	pop	{r4, pc}
 8017916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801791a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801791e:	e7f7      	b.n	8017910 <memmove+0x24>

08017920 <__malloc_lock>:
 8017920:	4801      	ldr	r0, [pc, #4]	; (8017928 <__malloc_lock+0x8>)
 8017922:	f7ff bf7b 	b.w	801781c <__retarget_lock_acquire_recursive>
 8017926:	bf00      	nop
 8017928:	24008e2c 	.word	0x24008e2c

0801792c <__malloc_unlock>:
 801792c:	4801      	ldr	r0, [pc, #4]	; (8017934 <__malloc_unlock+0x8>)
 801792e:	f7ff bf76 	b.w	801781e <__retarget_lock_release_recursive>
 8017932:	bf00      	nop
 8017934:	24008e2c 	.word	0x24008e2c

08017938 <_realloc_r>:
 8017938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801793c:	4680      	mov	r8, r0
 801793e:	4614      	mov	r4, r2
 8017940:	460e      	mov	r6, r1
 8017942:	b921      	cbnz	r1, 801794e <_realloc_r+0x16>
 8017944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017948:	4611      	mov	r1, r2
 801794a:	f7fe bfef 	b.w	801692c <_malloc_r>
 801794e:	b92a      	cbnz	r2, 801795c <_realloc_r+0x24>
 8017950:	f7fe ff80 	bl	8016854 <_free_r>
 8017954:	4625      	mov	r5, r4
 8017956:	4628      	mov	r0, r5
 8017958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801795c:	f000 f8fa 	bl	8017b54 <_malloc_usable_size_r>
 8017960:	4284      	cmp	r4, r0
 8017962:	4607      	mov	r7, r0
 8017964:	d802      	bhi.n	801796c <_realloc_r+0x34>
 8017966:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801796a:	d812      	bhi.n	8017992 <_realloc_r+0x5a>
 801796c:	4621      	mov	r1, r4
 801796e:	4640      	mov	r0, r8
 8017970:	f7fe ffdc 	bl	801692c <_malloc_r>
 8017974:	4605      	mov	r5, r0
 8017976:	2800      	cmp	r0, #0
 8017978:	d0ed      	beq.n	8017956 <_realloc_r+0x1e>
 801797a:	42bc      	cmp	r4, r7
 801797c:	4622      	mov	r2, r4
 801797e:	4631      	mov	r1, r6
 8017980:	bf28      	it	cs
 8017982:	463a      	movcs	r2, r7
 8017984:	f7fe fa84 	bl	8015e90 <memcpy>
 8017988:	4631      	mov	r1, r6
 801798a:	4640      	mov	r0, r8
 801798c:	f7fe ff62 	bl	8016854 <_free_r>
 8017990:	e7e1      	b.n	8017956 <_realloc_r+0x1e>
 8017992:	4635      	mov	r5, r6
 8017994:	e7df      	b.n	8017956 <_realloc_r+0x1e>

08017996 <_raise_r>:
 8017996:	291f      	cmp	r1, #31
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	4604      	mov	r4, r0
 801799c:	460d      	mov	r5, r1
 801799e:	d904      	bls.n	80179aa <_raise_r+0x14>
 80179a0:	2316      	movs	r3, #22
 80179a2:	6003      	str	r3, [r0, #0]
 80179a4:	f04f 30ff 	mov.w	r0, #4294967295
 80179a8:	bd38      	pop	{r3, r4, r5, pc}
 80179aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80179ac:	b112      	cbz	r2, 80179b4 <_raise_r+0x1e>
 80179ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80179b2:	b94b      	cbnz	r3, 80179c8 <_raise_r+0x32>
 80179b4:	4620      	mov	r0, r4
 80179b6:	f000 f831 	bl	8017a1c <_getpid_r>
 80179ba:	462a      	mov	r2, r5
 80179bc:	4601      	mov	r1, r0
 80179be:	4620      	mov	r0, r4
 80179c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179c4:	f000 b818 	b.w	80179f8 <_kill_r>
 80179c8:	2b01      	cmp	r3, #1
 80179ca:	d00a      	beq.n	80179e2 <_raise_r+0x4c>
 80179cc:	1c59      	adds	r1, r3, #1
 80179ce:	d103      	bne.n	80179d8 <_raise_r+0x42>
 80179d0:	2316      	movs	r3, #22
 80179d2:	6003      	str	r3, [r0, #0]
 80179d4:	2001      	movs	r0, #1
 80179d6:	e7e7      	b.n	80179a8 <_raise_r+0x12>
 80179d8:	2400      	movs	r4, #0
 80179da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80179de:	4628      	mov	r0, r5
 80179e0:	4798      	blx	r3
 80179e2:	2000      	movs	r0, #0
 80179e4:	e7e0      	b.n	80179a8 <_raise_r+0x12>
	...

080179e8 <raise>:
 80179e8:	4b02      	ldr	r3, [pc, #8]	; (80179f4 <raise+0xc>)
 80179ea:	4601      	mov	r1, r0
 80179ec:	6818      	ldr	r0, [r3, #0]
 80179ee:	f7ff bfd2 	b.w	8017996 <_raise_r>
 80179f2:	bf00      	nop
 80179f4:	2400001c 	.word	0x2400001c

080179f8 <_kill_r>:
 80179f8:	b538      	push	{r3, r4, r5, lr}
 80179fa:	4d07      	ldr	r5, [pc, #28]	; (8017a18 <_kill_r+0x20>)
 80179fc:	2300      	movs	r3, #0
 80179fe:	4604      	mov	r4, r0
 8017a00:	4608      	mov	r0, r1
 8017a02:	4611      	mov	r1, r2
 8017a04:	602b      	str	r3, [r5, #0]
 8017a06:	f7eb ff8e 	bl	8003926 <_kill>
 8017a0a:	1c43      	adds	r3, r0, #1
 8017a0c:	d102      	bne.n	8017a14 <_kill_r+0x1c>
 8017a0e:	682b      	ldr	r3, [r5, #0]
 8017a10:	b103      	cbz	r3, 8017a14 <_kill_r+0x1c>
 8017a12:	6023      	str	r3, [r4, #0]
 8017a14:	bd38      	pop	{r3, r4, r5, pc}
 8017a16:	bf00      	nop
 8017a18:	24008e30 	.word	0x24008e30

08017a1c <_getpid_r>:
 8017a1c:	f7eb bf7b 	b.w	8003916 <_getpid>

08017a20 <__sread>:
 8017a20:	b510      	push	{r4, lr}
 8017a22:	460c      	mov	r4, r1
 8017a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a28:	f000 f89c 	bl	8017b64 <_read_r>
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	bfab      	itete	ge
 8017a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017a32:	89a3      	ldrhlt	r3, [r4, #12]
 8017a34:	181b      	addge	r3, r3, r0
 8017a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017a3a:	bfac      	ite	ge
 8017a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017a3e:	81a3      	strhlt	r3, [r4, #12]
 8017a40:	bd10      	pop	{r4, pc}

08017a42 <__swrite>:
 8017a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a46:	461f      	mov	r7, r3
 8017a48:	898b      	ldrh	r3, [r1, #12]
 8017a4a:	05db      	lsls	r3, r3, #23
 8017a4c:	4605      	mov	r5, r0
 8017a4e:	460c      	mov	r4, r1
 8017a50:	4616      	mov	r6, r2
 8017a52:	d505      	bpl.n	8017a60 <__swrite+0x1e>
 8017a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a58:	2302      	movs	r3, #2
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	f000 f868 	bl	8017b30 <_lseek_r>
 8017a60:	89a3      	ldrh	r3, [r4, #12]
 8017a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017a6a:	81a3      	strh	r3, [r4, #12]
 8017a6c:	4632      	mov	r2, r6
 8017a6e:	463b      	mov	r3, r7
 8017a70:	4628      	mov	r0, r5
 8017a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a76:	f000 b817 	b.w	8017aa8 <_write_r>

08017a7a <__sseek>:
 8017a7a:	b510      	push	{r4, lr}
 8017a7c:	460c      	mov	r4, r1
 8017a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a82:	f000 f855 	bl	8017b30 <_lseek_r>
 8017a86:	1c43      	adds	r3, r0, #1
 8017a88:	89a3      	ldrh	r3, [r4, #12]
 8017a8a:	bf15      	itete	ne
 8017a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017a96:	81a3      	strheq	r3, [r4, #12]
 8017a98:	bf18      	it	ne
 8017a9a:	81a3      	strhne	r3, [r4, #12]
 8017a9c:	bd10      	pop	{r4, pc}

08017a9e <__sclose>:
 8017a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017aa2:	f000 b813 	b.w	8017acc <_close_r>
	...

08017aa8 <_write_r>:
 8017aa8:	b538      	push	{r3, r4, r5, lr}
 8017aaa:	4d07      	ldr	r5, [pc, #28]	; (8017ac8 <_write_r+0x20>)
 8017aac:	4604      	mov	r4, r0
 8017aae:	4608      	mov	r0, r1
 8017ab0:	4611      	mov	r1, r2
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	602a      	str	r2, [r5, #0]
 8017ab6:	461a      	mov	r2, r3
 8017ab8:	f7eb ff6c 	bl	8003994 <_write>
 8017abc:	1c43      	adds	r3, r0, #1
 8017abe:	d102      	bne.n	8017ac6 <_write_r+0x1e>
 8017ac0:	682b      	ldr	r3, [r5, #0]
 8017ac2:	b103      	cbz	r3, 8017ac6 <_write_r+0x1e>
 8017ac4:	6023      	str	r3, [r4, #0]
 8017ac6:	bd38      	pop	{r3, r4, r5, pc}
 8017ac8:	24008e30 	.word	0x24008e30

08017acc <_close_r>:
 8017acc:	b538      	push	{r3, r4, r5, lr}
 8017ace:	4d06      	ldr	r5, [pc, #24]	; (8017ae8 <_close_r+0x1c>)
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	4604      	mov	r4, r0
 8017ad4:	4608      	mov	r0, r1
 8017ad6:	602b      	str	r3, [r5, #0]
 8017ad8:	f7eb ff78 	bl	80039cc <_close>
 8017adc:	1c43      	adds	r3, r0, #1
 8017ade:	d102      	bne.n	8017ae6 <_close_r+0x1a>
 8017ae0:	682b      	ldr	r3, [r5, #0]
 8017ae2:	b103      	cbz	r3, 8017ae6 <_close_r+0x1a>
 8017ae4:	6023      	str	r3, [r4, #0]
 8017ae6:	bd38      	pop	{r3, r4, r5, pc}
 8017ae8:	24008e30 	.word	0x24008e30

08017aec <_fstat_r>:
 8017aec:	b538      	push	{r3, r4, r5, lr}
 8017aee:	4d07      	ldr	r5, [pc, #28]	; (8017b0c <_fstat_r+0x20>)
 8017af0:	2300      	movs	r3, #0
 8017af2:	4604      	mov	r4, r0
 8017af4:	4608      	mov	r0, r1
 8017af6:	4611      	mov	r1, r2
 8017af8:	602b      	str	r3, [r5, #0]
 8017afa:	f7eb ff73 	bl	80039e4 <_fstat>
 8017afe:	1c43      	adds	r3, r0, #1
 8017b00:	d102      	bne.n	8017b08 <_fstat_r+0x1c>
 8017b02:	682b      	ldr	r3, [r5, #0]
 8017b04:	b103      	cbz	r3, 8017b08 <_fstat_r+0x1c>
 8017b06:	6023      	str	r3, [r4, #0]
 8017b08:	bd38      	pop	{r3, r4, r5, pc}
 8017b0a:	bf00      	nop
 8017b0c:	24008e30 	.word	0x24008e30

08017b10 <_isatty_r>:
 8017b10:	b538      	push	{r3, r4, r5, lr}
 8017b12:	4d06      	ldr	r5, [pc, #24]	; (8017b2c <_isatty_r+0x1c>)
 8017b14:	2300      	movs	r3, #0
 8017b16:	4604      	mov	r4, r0
 8017b18:	4608      	mov	r0, r1
 8017b1a:	602b      	str	r3, [r5, #0]
 8017b1c:	f7eb ff72 	bl	8003a04 <_isatty>
 8017b20:	1c43      	adds	r3, r0, #1
 8017b22:	d102      	bne.n	8017b2a <_isatty_r+0x1a>
 8017b24:	682b      	ldr	r3, [r5, #0]
 8017b26:	b103      	cbz	r3, 8017b2a <_isatty_r+0x1a>
 8017b28:	6023      	str	r3, [r4, #0]
 8017b2a:	bd38      	pop	{r3, r4, r5, pc}
 8017b2c:	24008e30 	.word	0x24008e30

08017b30 <_lseek_r>:
 8017b30:	b538      	push	{r3, r4, r5, lr}
 8017b32:	4d07      	ldr	r5, [pc, #28]	; (8017b50 <_lseek_r+0x20>)
 8017b34:	4604      	mov	r4, r0
 8017b36:	4608      	mov	r0, r1
 8017b38:	4611      	mov	r1, r2
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	602a      	str	r2, [r5, #0]
 8017b3e:	461a      	mov	r2, r3
 8017b40:	f7eb ff6b 	bl	8003a1a <_lseek>
 8017b44:	1c43      	adds	r3, r0, #1
 8017b46:	d102      	bne.n	8017b4e <_lseek_r+0x1e>
 8017b48:	682b      	ldr	r3, [r5, #0]
 8017b4a:	b103      	cbz	r3, 8017b4e <_lseek_r+0x1e>
 8017b4c:	6023      	str	r3, [r4, #0]
 8017b4e:	bd38      	pop	{r3, r4, r5, pc}
 8017b50:	24008e30 	.word	0x24008e30

08017b54 <_malloc_usable_size_r>:
 8017b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b58:	1f18      	subs	r0, r3, #4
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	bfbc      	itt	lt
 8017b5e:	580b      	ldrlt	r3, [r1, r0]
 8017b60:	18c0      	addlt	r0, r0, r3
 8017b62:	4770      	bx	lr

08017b64 <_read_r>:
 8017b64:	b538      	push	{r3, r4, r5, lr}
 8017b66:	4d07      	ldr	r5, [pc, #28]	; (8017b84 <_read_r+0x20>)
 8017b68:	4604      	mov	r4, r0
 8017b6a:	4608      	mov	r0, r1
 8017b6c:	4611      	mov	r1, r2
 8017b6e:	2200      	movs	r2, #0
 8017b70:	602a      	str	r2, [r5, #0]
 8017b72:	461a      	mov	r2, r3
 8017b74:	f7eb fef1 	bl	800395a <_read>
 8017b78:	1c43      	adds	r3, r0, #1
 8017b7a:	d102      	bne.n	8017b82 <_read_r+0x1e>
 8017b7c:	682b      	ldr	r3, [r5, #0]
 8017b7e:	b103      	cbz	r3, 8017b82 <_read_r+0x1e>
 8017b80:	6023      	str	r3, [r4, #0]
 8017b82:	bd38      	pop	{r3, r4, r5, pc}
 8017b84:	24008e30 	.word	0x24008e30

08017b88 <_init>:
 8017b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b8a:	bf00      	nop
 8017b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b8e:	bc08      	pop	{r3}
 8017b90:	469e      	mov	lr, r3
 8017b92:	4770      	bx	lr

08017b94 <_fini>:
 8017b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b96:	bf00      	nop
 8017b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b9a:	bc08      	pop	{r3}
 8017b9c:	469e      	mov	lr, r3
 8017b9e:	4770      	bx	lr
